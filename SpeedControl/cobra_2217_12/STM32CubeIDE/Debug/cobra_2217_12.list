
cobra_2217_12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c58  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08008e30  08008e30  00018e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090dc  080090dc  000206a0  2**0
                  CONTENTS
  4 .ARM          00000008  080090dc  080090dc  000190dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090e4  080090e4  000206a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090e4  080090e4  000190e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090e8  080090e8  000190e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006a0  20000000  080090ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  200006a0  0800978c  000206a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bf4  0800978c  00020bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000206a0  2**0
                  CONTENTS, READONLY
 12 .debug_line   00044964  00000000  00000000  000206d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00068bf6  00000000  00000000  00065034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008a06  00000000  00000000  000cdc2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001db8  00000000  00000000  000d6630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001019c5  00000000  00000000  000d83e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000053e8  00000000  00000000  001d9db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c3be  00000000  00000000  001df198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020b556  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000593c  00000000  00000000  0020b5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0002ae86  00000000  00000000  00210ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200006a0 	.word	0x200006a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008e18 	.word	0x08008e18

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200006a4 	.word	0x200006a4
 8000214:	08008e18 	.word	0x08008e18

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000510:	480d      	ldr	r0, [pc, #52]	; (8000548 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000512:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000514:	480d      	ldr	r0, [pc, #52]	; (800054c <LoopForever+0x6>)
  ldr r1, =_edata
 8000516:	490e      	ldr	r1, [pc, #56]	; (8000550 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <LoopForever+0xe>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800051c:	e002      	b.n	8000524 <LoopCopyDataInit>

0800051e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000522:	3304      	adds	r3, #4

08000524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000528:	d3f9      	bcc.n	800051e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052a:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <LoopForever+0x12>)
  ldr r4, =_ebss
 800052c:	4c0b      	ldr	r4, [pc, #44]	; (800055c <LoopForever+0x16>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000530:	e001      	b.n	8000536 <LoopFillZerobss>

08000532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000534:	3204      	adds	r2, #4

08000536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800053a:	f003 f88d 	bl	8003658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800053e:	f008 fc3f 	bl	8008dc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000542:	f000 f85d 	bl	8000600 <main>

08000546 <LoopForever>:

LoopForever:
    b LoopForever
 8000546:	e7fe      	b.n	8000546 <LoopForever>
  ldr   r0, =_estack
 8000548:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000550:	200006a0 	.word	0x200006a0
  ldr r2, =_sidata
 8000554:	080090ec 	.word	0x080090ec
  ldr r2, =_sbss
 8000558:	200006a0 	.word	0x200006a0
  ldr r4, =_ebss
 800055c:	20000bf4 	.word	0x20000bf4

08000560 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <BusFault_Handler>
	...

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	2100      	movs	r1, #0
{
 8000568:	b0a7      	sub	sp, #156	; 0x9c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056a:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056c:	2238      	movs	r2, #56	; 0x38
 800056e:	a806      	add	r0, sp, #24
 8000570:	f008 fc4a 	bl	8008e08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000574:	4621      	mov	r1, r4
 8000576:	2244      	movs	r2, #68	; 0x44
 8000578:	a815      	add	r0, sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057a:	e9cd 4400 	strd	r4, r4, [sp]
 800057e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000582:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000584:	f008 fc40 	bl	8008e08 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000588:	4620      	mov	r0, r4
 800058a:	f004 fb61 	bl	8004c50 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058e:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000592:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000598:	2155      	movs	r1, #85	; 0x55
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800059a:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059e:	e9cd 6706 	strd	r6, r7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a2:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80005a6:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80005ac:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f004 fbd4 	bl	8004d5c <HAL_RCC_OscConfig>
 80005b4:	b108      	cbz	r0, 80005ba <SystemClock_Config+0x56>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <SystemClock_Config+0x54>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ba:	4603      	mov	r3, r0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	2200      	movs	r2, #0
 80005c0:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	240f      	movs	r4, #15
 80005c6:	2503      	movs	r5, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c8:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80005ce:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d2:	f004 fe47 	bl	8005264 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	b108      	cbz	r0, 80005de <SystemClock_Config+0x7a>
 80005da:	b672      	cpsid	i
  while (1)
 80005dc:	e7fe      	b.n	80005dc <SystemClock_Config+0x78>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80005de:	f248 0102 	movw	r1, #32770	; 0x8002
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80005e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e6:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005e8:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80005ea:	9115      	str	r1, [sp, #84]	; 0x54
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80005ec:	9224      	str	r2, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ee:	f004 ff75 	bl	80054dc <HAL_RCCEx_PeriphCLKConfig>
 80005f2:	b108      	cbz	r0, 80005f8 <SystemClock_Config+0x94>
 80005f4:	b672      	cpsid	i
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <SystemClock_Config+0x92>
}
 80005f8:	b027      	add	sp, #156	; 0x9c
 80005fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fc:	0000      	movs	r0, r0
	...

08000600 <main>:
{
 8000600:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	2600      	movs	r6, #0
{
 8000606:	b0ad      	sub	sp, #180	; 0xb4
  HAL_Init();
 8000608:	f003 f856 	bl	80036b8 <HAL_Init>
  SystemClock_Config();
 800060c:	f7ff ffaa 	bl	8000564 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	e9cd 661f 	strd	r6, r6, [sp, #124]	; 0x7c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000614:	4bac      	ldr	r3, [pc, #688]	; (80008c8 <main+0x2c8>)
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000616:	48ad      	ldr	r0, [pc, #692]	; (80008cc <main+0x2cc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hadc1.Instance = ADC1;
 800061a:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 8000908 <main+0x308>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	f042 0204 	orr.w	r2, r2, #4
 8000622:	64da      	str	r2, [r3, #76]	; 0x4c
 8000624:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000626:	f002 0204 	and.w	r2, r2, #4
 800062a:	9202      	str	r2, [sp, #8]
 800062c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800062e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000630:	f042 0220 	orr.w	r2, r2, #32
 8000634:	64da      	str	r2, [r3, #76]	; 0x4c
 8000636:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000638:	f002 0220 	and.w	r2, r2, #32
 800063c:	9203      	str	r2, [sp, #12]
 800063e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000642:	f042 0201 	orr.w	r2, r2, #1
 8000646:	64da      	str	r2, [r3, #76]	; 0x4c
 8000648:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800064a:	f002 0201 	and.w	r2, r2, #1
 800064e:	9204      	str	r2, [sp, #16]
 8000650:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000654:	f042 0202 	orr.w	r2, r2, #2
 8000658:	64da      	str	r2, [r3, #76]	; 0x4c
 800065a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	961e      	str	r6, [sp, #120]	; 0x78
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000664:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000668:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800066c:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800066e:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	9c05      	ldr	r4, [sp, #20]
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000674:	f004 f968 	bl	8004948 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000678:	4631      	mov	r1, r6
 800067a:	223c      	movs	r2, #60	; 0x3c
 800067c:	a81c      	add	r0, sp, #112	; 0x70
  ADC_MultiModeTypeDef multimode = {0};
 800067e:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
 8000682:	9610      	str	r6, [sp, #64]	; 0x40
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000684:	f008 fbc0 	bl	8008e08 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000688:	4631      	mov	r1, r6
 800068a:	a814      	add	r0, sp, #80	; 0x50
 800068c:	2220      	movs	r2, #32
 800068e:	f008 fbbb 	bl	8008e08 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000692:	f44f 2a00 	mov.w	sl, #524288	; 0x80000
  hadc1.Instance = ADC1;
 8000696:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800069a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800069e:	2501      	movs	r5, #1
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a0:	f04f 0804 	mov.w	r8, #4
  hadc1.Init.NbrOfConversion = 2;
 80006a4:	2402      	movs	r4, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a6:	4658      	mov	r0, fp
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006a8:	f8ab 601c 	strh.w	r6, [fp, #28]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ac:	e9cb 660b 	strd	r6, r6, [fp, #44]	; 0x2c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006b0:	e9cb 3a00 	strd	r3, sl, [fp]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b4:	e9cb 5805 	strd	r5, r8, [fp, #20]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b8:	f8cb 6008 	str.w	r6, [fp, #8]
  hadc1.Init.GainCompensation = 0;
 80006bc:	f8cb 6010 	str.w	r6, [fp, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c0:	f88b 6024 	strb.w	r6, [fp, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006c4:	f88b 6038 	strb.w	r6, [fp, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006c8:	f8cb 603c 	str.w	r6, [fp, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006cc:	f88b 6040 	strb.w	r6, [fp, #64]	; 0x40
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80006d0:	f8cb 900c 	str.w	r9, [fp, #12]
  hadc1.Init.NbrOfConversion = 2;
 80006d4:	f8cb 4020 	str.w	r4, [fp, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d8:	f003 f822 	bl	8003720 <HAL_ADC_Init>
 80006dc:	b108      	cbz	r0, 80006e2 <main+0xe2>
 80006de:	b672      	cpsid	i
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <main+0xe0>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006e2:	4603      	mov	r3, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006e4:	a90e      	add	r1, sp, #56	; 0x38
 80006e6:	4658      	mov	r0, fp
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006e8:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006ea:	f003 fe89 	bl	8004400 <HAL_ADCEx_MultiModeConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	b108      	cbz	r0, 80006f6 <main+0xf6>
 80006f2:	b672      	cpsid	i
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <main+0xf4>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80006f6:	4a76      	ldr	r2, [pc, #472]	; (80008d0 <main+0x2d0>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80006f8:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
  sConfigInjected.QueueInjectedContext = DISABLE;
 80006fc:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000700:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000704:	2309      	movs	r3, #9
 8000706:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 800070a:	2201      	movs	r2, #1
 800070c:	237f      	movs	r3, #127	; 0x7f
 800070e:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8000712:	2604      	movs	r6, #4
 8000714:	2700      	movs	r7, #0
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000716:	2284      	movs	r2, #132	; 0x84
 8000718:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800071a:	a91c      	add	r1, sp, #112	; 0x70
 800071c:	4658      	mov	r0, fp
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800071e:	e9cd 6720 	strd	r6, r7, [sp, #128]	; 0x80
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000722:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000726:	9424      	str	r4, [sp, #144]	; 0x90
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000728:	f003 fb66 	bl	8003df8 <HAL_ADCEx_InjectedConfigChannel>
 800072c:	b108      	cbz	r0, 8000732 <main+0x132>
 800072e:	b672      	cpsid	i
  while (1)
 8000730:	e7fe      	b.n	8000730 <main+0x130>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000732:	a361      	add	r3, pc, #388	; (adr r3, 80008b8 <main+0x2b8>)
 8000734:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000738:	a91c      	add	r1, sp, #112	; 0x70
 800073a:	4658      	mov	r0, fp
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 800073c:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000740:	f003 fb5a 	bl	8003df8 <HAL_ADCEx_InjectedConfigChannel>
 8000744:	b108      	cbz	r0, 800074a <main+0x14a>
 8000746:	b672      	cpsid	i
  while (1)
 8000748:	e7fe      	b.n	8000748 <main+0x148>
  sConfig.Channel = ADC_CHANNEL_1;
 800074a:	4a62      	ldr	r2, [pc, #392]	; (80008d4 <main+0x2d4>)
 800074c:	2306      	movs	r3, #6
 800074e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000752:	a914      	add	r1, sp, #80	; 0x50
  sConfig.Channel = ADC_CHANNEL_1;
 8000754:	2204      	movs	r2, #4
 8000756:	237f      	movs	r3, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000758:	4658      	mov	r0, fp
  sConfig.Channel = ADC_CHANNEL_1;
 800075a:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 800075e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000762:	f003 f8df 	bl	8003924 <HAL_ADC_ConfigChannel>
 8000766:	b108      	cbz	r0, 800076c <main+0x16c>
 8000768:	b672      	cpsid	i
  while (1)
 800076a:	e7fe      	b.n	800076a <main+0x16a>
  sConfig.Channel = ADC_CHANNEL_5;
 800076c:	a354      	add	r3, pc, #336	; (adr r3, 80008c0 <main+0x2c0>)
 800076e:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000772:	a914      	add	r1, sp, #80	; 0x50
 8000774:	4658      	mov	r0, fp
  sConfig.Channel = ADC_CHANNEL_5;
 8000776:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077a:	f003 f8d3 	bl	8003924 <HAL_ADC_ConfigChannel>
 800077e:	4601      	mov	r1, r0
 8000780:	b108      	cbz	r0, 8000786 <main+0x186>
 8000782:	b672      	cpsid	i
  while (1)
 8000784:	e7fe      	b.n	8000784 <main+0x184>
  hadc2.Instance = ADC2;
 8000786:	f8df b184 	ldr.w	fp, [pc, #388]	; 800090c <main+0x30c>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800078a:	9001      	str	r0, [sp, #4]
 800078c:	223c      	movs	r2, #60	; 0x3c
 800078e:	a81c      	add	r0, sp, #112	; 0x70
 8000790:	f008 fb3a 	bl	8008e08 <memset>
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000794:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 8000796:	4b50      	ldr	r3, [pc, #320]	; (80008d8 <main+0x2d8>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000798:	f8ab 101c 	strh.w	r1, [fp, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800079c:	4658      	mov	r0, fp
  hadc2.Instance = ADC2;
 800079e:	f8cb 3000 	str.w	r3, [fp]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80007a2:	e9cb 1902 	strd	r1, r9, [fp, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007a6:	e9cb 1504 	strd	r1, r5, [fp, #16]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80007aa:	f8cb a004 	str.w	sl, [fp, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ae:	f8cb 8018 	str.w	r8, [fp, #24]
  hadc2.Init.NbrOfConversion = 1;
 80007b2:	f8cb 5020 	str.w	r5, [fp, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007b6:	f88b 1024 	strb.w	r1, [fp, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007ba:	f88b 1038 	strb.w	r1, [fp, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007be:	f8cb 103c 	str.w	r1, [fp, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80007c2:	f88b 1040 	strb.w	r1, [fp, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007c6:	f002 ffab 	bl	8003720 <HAL_ADC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	b108      	cbz	r0, 80007d2 <main+0x1d2>
 80007ce:	b672      	cpsid	i
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <main+0x1d0>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80007d2:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80008d0 <main+0x2d0>
  sConfigInjected.InjectedNbrOfConversion = 2;
 80007d6:	9424      	str	r4, [sp, #144]	; 0x90
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80007d8:	f04f 0909 	mov.w	r9, #9
 80007dc:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80007e0:	2484      	movs	r4, #132	; 0x84
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80007e2:	f04f 0801 	mov.w	r8, #1
 80007e6:	f04f 097f 	mov.w	r9, #127	; 0x7f
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80007ea:	2580      	movs	r5, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007ec:	a91c      	add	r1, sp, #112	; 0x70
 80007ee:	4658      	mov	r0, fp
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80007f0:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 80007f4:	e9cd 6720 	strd	r6, r7, [sp, #128]	; 0x80
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80007f8:	e9cd 4526 	strd	r4, r5, [sp, #152]	; 0x98
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80007fc:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000800:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000804:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000808:	f003 faf6 	bl	8003df8 <HAL_ADCEx_InjectedConfigChannel>
 800080c:	b108      	cbz	r0, 8000812 <main+0x212>
 800080e:	b672      	cpsid	i
  while (1)
 8000810:	e7fe      	b.n	8000810 <main+0x210>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8000812:	4a32      	ldr	r2, [pc, #200]	; (80008dc <main+0x2dc>)
 8000814:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000818:	4658      	mov	r0, fp
 800081a:	a91c      	add	r1, sp, #112	; 0x70
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 800081c:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000820:	f003 faea 	bl	8003df8 <HAL_ADCEx_InjectedConfigChannel>
 8000824:	b108      	cbz	r0, 800082a <main+0x22a>
 8000826:	b672      	cpsid	i
  while (1)
 8000828:	e7fe      	b.n	8000828 <main+0x228>
  hcomp1.Instance = COMP1;
 800082a:	4b2d      	ldr	r3, [pc, #180]	; (80008e0 <main+0x2e0>)
 800082c:	492d      	ldr	r1, [pc, #180]	; (80008e4 <main+0x2e4>)
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800082e:	6058      	str	r0, [r3, #4]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000830:	e9c3 0003 	strd	r0, r0, [r3, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000834:	e9c3 0005 	strd	r0, r0, [r3, #20]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8000838:	2240      	movs	r2, #64	; 0x40
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800083a:	4618      	mov	r0, r3
  hcomp1.Instance = COMP1;
 800083c:	6019      	str	r1, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 800083e:	609a      	str	r2, [r3, #8]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000840:	f003 fe44 	bl	80044cc <HAL_COMP_Init>
 8000844:	b108      	cbz	r0, 800084a <main+0x24a>
 8000846:	b672      	cpsid	i
  while (1)
 8000848:	e7fe      	b.n	8000848 <main+0x248>
  hcomp2.Instance = COMP2;
 800084a:	4827      	ldr	r0, [pc, #156]	; (80008e8 <main+0x2e8>)
 800084c:	4b27      	ldr	r3, [pc, #156]	; (80008ec <main+0x2ec>)
 800084e:	6003      	str	r3, [r0, #0]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000850:	2440      	movs	r4, #64	; 0x40
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000852:	2300      	movs	r3, #0
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000854:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000858:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800085c:	6043      	str	r3, [r0, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 800085e:	6084      	str	r4, [r0, #8]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000860:	f003 fe34 	bl	80044cc <HAL_COMP_Init>
 8000864:	b108      	cbz	r0, 800086a <main+0x26a>
 8000866:	b672      	cpsid	i
  while (1)
 8000868:	e7fe      	b.n	8000868 <main+0x268>
  hcomp4.Instance = COMP4;
 800086a:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <main+0x2f0>)
 800086c:	4a21      	ldr	r2, [pc, #132]	; (80008f4 <main+0x2f4>)
 800086e:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000870:	e9c3 0401 	strd	r0, r4, [r3, #4]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000874:	e9c3 0003 	strd	r0, r0, [r3, #12]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000878:	e9c3 0005 	strd	r0, r0, [r3, #20]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 800087c:	4618      	mov	r0, r3
 800087e:	f003 fe25 	bl	80044cc <HAL_COMP_Init>
 8000882:	b108      	cbz	r0, 8000888 <main+0x288>
 8000884:	b672      	cpsid	i
  while (1)
 8000886:	e7fe      	b.n	8000886 <main+0x286>
  hcordic.Instance = CORDIC;
 8000888:	481b      	ldr	r0, [pc, #108]	; (80008f8 <main+0x2f8>)
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <main+0x2fc>)
 800088c:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800088e:	f003 fec3 	bl	8004618 <HAL_CORDIC_Init>
 8000892:	4601      	mov	r1, r0
 8000894:	b108      	cbz	r0, 800089a <main+0x29a>
 8000896:	b672      	cpsid	i
  while (1)
 8000898:	e7fe      	b.n	8000898 <main+0x298>
  hdac3.Instance = DAC3;
 800089a:	4d19      	ldr	r5, [pc, #100]	; (8000900 <main+0x300>)
  DAC_ChannelConfTypeDef sConfig = {0};
 800089c:	2230      	movs	r2, #48	; 0x30
 800089e:	a81c      	add	r0, sp, #112	; 0x70
 80008a0:	f008 fab2 	bl	8008e08 <memset>
  hdac3.Instance = DAC3;
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <main+0x304>)
 80008a6:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 80008a8:	4628      	mov	r0, r5
 80008aa:	f003 ff49 	bl	8004740 <HAL_DAC_Init>
 80008ae:	b378      	cbz	r0, 8000910 <main+0x310>
 80008b0:	b672      	cpsid	i
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <main+0x2b2>
 80008b4:	f3af 8000 	nop.w
 80008b8:	32601000 	.word	0x32601000
 80008bc:	0000010f 	.word	0x0000010f
 80008c0:	14f00020 	.word	0x14f00020
 80008c4:	0000000c 	.word	0x0000000c
 80008c8:	40021000 	.word	0x40021000
 80008cc:	48000800 	.word	0x48000800
 80008d0:	0c900008 	.word	0x0c900008
 80008d4:	04300002 	.word	0x04300002
 80008d8:	50000100 	.word	0x50000100
 80008dc:	cb8c0000 	.word	0xcb8c0000
 80008e0:	200007e8 	.word	0x200007e8
 80008e4:	40010200 	.word	0x40010200
 80008e8:	2000094c 	.word	0x2000094c
 80008ec:	40010204 	.word	0x40010204
 80008f0:	20000848 	.word	0x20000848
 80008f4:	4001020c 	.word	0x4001020c
 80008f8:	200008d8 	.word	0x200008d8
 80008fc:	40020c00 	.word	0x40020c00
 8000900:	2000072c 	.word	0x2000072c
 8000904:	50001000 	.word	0x50001000
 8000908:	2000086c 	.word	0x2000086c
 800090c:	20000740 	.word	0x20000740
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000910:	2600      	movs	r6, #0
 8000912:	2700      	movs	r7, #0
 8000914:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
 8000918:	2600      	movs	r6, #0
 800091a:	2702      	movs	r7, #2
 800091c:	e9cd 6720 	strd	r6, r7, [sp, #128]	; 0x80
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000920:	4602      	mov	r2, r0
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000922:	2302      	movs	r3, #2
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000924:	f8ad 0074 	strh.w	r0, [sp, #116]	; 0x74
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000928:	2602      	movs	r6, #2
 800092a:	2700      	movs	r7, #0
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800092c:	a91c      	add	r1, sp, #112	; 0x70
 800092e:	4628      	mov	r0, r5
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000930:	e9cd 6722 	strd	r6, r7, [sp, #136]	; 0x88
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000934:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000936:	f003 ff19 	bl	800476c <HAL_DAC_ConfigChannel>
 800093a:	b108      	cbz	r0, 8000940 <main+0x340>
 800093c:	b672      	cpsid	i
  while (1)
 800093e:	e7fe      	b.n	800093e <main+0x33e>
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000940:	2210      	movs	r2, #16
 8000942:	4628      	mov	r0, r5
 8000944:	a91c      	add	r1, sp, #112	; 0x70
 8000946:	f003 ff11 	bl	800476c <HAL_DAC_ConfigChannel>
 800094a:	4602      	mov	r2, r0
 800094c:	b108      	cbz	r0, 8000952 <main+0x352>
 800094e:	b672      	cpsid	i
  while (1)
 8000950:	e7fe      	b.n	8000950 <main+0x350>
  hopamp1.Instance = OPAMP1;
 8000952:	4891      	ldr	r0, [pc, #580]	; (8000b98 <main+0x598>)
 8000954:	4991      	ldr	r1, [pc, #580]	; (8000b9c <main+0x59c>)
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000956:	6042      	str	r2, [r0, #4]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000958:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800095c:	f44f 4540 	mov.w	r5, #49152	; 0xc000
 8000960:	e9c0 6509 	strd	r6, r5, [r0, #36]	; 0x24
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000964:	6084      	str	r4, [r0, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000966:	6102      	str	r2, [r0, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000968:	7502      	strb	r2, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800096a:	6182      	str	r2, [r0, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800096c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hopamp1.Instance = OPAMP1;
 800096e:	6001      	str	r1, [r0, #0]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000970:	f004 f8e8 	bl	8004b44 <HAL_OPAMP_Init>
 8000974:	b108      	cbz	r0, 800097a <main+0x37a>
 8000976:	b672      	cpsid	i
  while (1)
 8000978:	e7fe      	b.n	8000978 <main+0x378>
  hopamp2.Instance = OPAMP2;
 800097a:	4b89      	ldr	r3, [pc, #548]	; (8000ba0 <main+0x5a0>)
 800097c:	4a89      	ldr	r2, [pc, #548]	; (8000ba4 <main+0x5a4>)
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800097e:	6118      	str	r0, [r3, #16]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8000980:	e9c3 0401 	strd	r0, r4, [r3, #4]
  hopamp2.Init.InternalOutput = DISABLE;
 8000984:	7518      	strb	r0, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000986:	6198      	str	r0, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000988:	62d8      	str	r0, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 800098a:	4618      	mov	r0, r3
  hopamp2.Instance = OPAMP2;
 800098c:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800098e:	e9c3 6509 	strd	r6, r5, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8000992:	f004 f8d7 	bl	8004b44 <HAL_OPAMP_Init>
 8000996:	4602      	mov	r2, r0
 8000998:	b108      	cbz	r0, 800099e <main+0x39e>
 800099a:	b672      	cpsid	i
  while (1)
 800099c:	e7fe      	b.n	800099c <main+0x39c>
  hopamp3.Instance = OPAMP3;
 800099e:	4882      	ldr	r0, [pc, #520]	; (8000ba8 <main+0x5a8>)
 80009a0:	4982      	ldr	r1, [pc, #520]	; (8000bac <main+0x5ac>)
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80009a2:	6246      	str	r6, [r0, #36]	; 0x24
  hopamp3.Init.InternalOutput = ENABLE;
 80009a4:	2601      	movs	r6, #1
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80009a6:	e9c0 2401 	strd	r2, r4, [r0, #4]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80009aa:	e9c0 520a 	strd	r5, r2, [r0, #40]	; 0x28
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80009ae:	6102      	str	r2, [r0, #16]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80009b0:	6182      	str	r2, [r0, #24]
  hopamp3.Instance = OPAMP3;
 80009b2:	6001      	str	r1, [r0, #0]
  hopamp3.Init.InternalOutput = ENABLE;
 80009b4:	7506      	strb	r6, [r0, #20]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80009b6:	f004 f8c5 	bl	8004b44 <HAL_OPAMP_Init>
 80009ba:	4604      	mov	r4, r0
 80009bc:	b108      	cbz	r0, 80009c2 <main+0x3c2>
 80009be:	b672      	cpsid	i
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <main+0x3c0>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009c2:	4601      	mov	r1, r0
 80009c4:	2234      	movs	r2, #52	; 0x34
 80009c6:	a81c      	add	r0, sp, #112	; 0x70
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009c8:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 80009cc:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d0:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 80009d4:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 80009d8:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009dc:	e9cd 4407 	strd	r4, r4, [sp, #28]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80009e0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009e4:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e6:	9406      	str	r4, [sp, #24]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80009e8:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ea:	941a      	str	r4, [sp, #104]	; 0x68
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ec:	f008 fa0c 	bl	8008e08 <memset>
  htim1.Instance = TIM1;
 80009f0:	486f      	ldr	r0, [pc, #444]	; (8000bb0 <main+0x5b0>)
 80009f2:	4d70      	ldr	r5, [pc, #448]	; (8000bb4 <main+0x5b4>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80009f4:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80009f6:	2120      	movs	r1, #32
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 80009f8:	f640 3211 	movw	r2, #2833	; 0xb11
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80009fc:	f44f 7380 	mov.w	r3, #256	; 0x100
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000a00:	e9c0 1202 	strd	r1, r2, [r0, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000a04:	6146      	str	r6, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	6184      	str	r4, [r0, #24]
  htim1.Instance = TIM1;
 8000a08:	6005      	str	r5, [r0, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000a0a:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a0c:	f004 ff70 	bl	80058f0 <HAL_TIM_Base_Init>
 8000a10:	b108      	cbz	r0, 8000a16 <main+0x416>
 8000a12:	b672      	cpsid	i
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <main+0x414>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a16:	4866      	ldr	r0, [pc, #408]	; (8000bb0 <main+0x5b0>)
 8000a18:	f004 fffa 	bl	8005a10 <HAL_TIM_PWM_Init>
 8000a1c:	b108      	cbz	r0, 8000a22 <main+0x422>
 8000a1e:	b672      	cpsid	i
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <main+0x420>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a22:	2206      	movs	r2, #6
 8000a24:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000a26:	4862      	ldr	r0, [pc, #392]	; (8000bb0 <main+0x5b0>)
 8000a28:	a90e      	add	r1, sp, #56	; 0x38
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a2a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000a2e:	f005 f87d 	bl	8005b2c <HAL_TIM_SlaveConfigSynchro>
 8000a32:	b108      	cbz	r0, 8000a38 <main+0x438>
 8000a34:	b672      	cpsid	i
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <main+0x436>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000a38:	2270      	movs	r2, #112	; 0x70
 8000a3a:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a3e:	a906      	add	r1, sp, #24
 8000a40:	485b      	ldr	r0, [pc, #364]	; (8000bb0 <main+0x5b0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000a42:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a46:	f005 fa43 	bl	8005ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	b108      	cbz	r0, 8000a50 <main+0x450>
 8000a4c:	b672      	cpsid	i
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <main+0x44e>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000a50:	2402      	movs	r4, #2
 8000a52:	2501      	movs	r5, #1
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000a54:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a56:	aa0a      	add	r2, sp, #40	; 0x28
 8000a58:	4855      	ldr	r0, [pc, #340]	; (8000bb0 <main+0x5b0>)
 8000a5a:	2102      	movs	r1, #2
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000a5c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a60:	f005 face 	bl	8006000 <HAL_TIMEx_ConfigBreakInput>
 8000a64:	b108      	cbz	r0, 8000a6a <main+0x46a>
 8000a66:	b672      	cpsid	i
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <main+0x468>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8000a6a:	2404      	movs	r4, #4
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a6c:	4850      	ldr	r0, [pc, #320]	; (8000bb0 <main+0x5b0>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8000a6e:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a70:	aa0a      	add	r2, sp, #40	; 0x28
 8000a72:	2102      	movs	r1, #2
 8000a74:	f005 fac4 	bl	8006000 <HAL_TIMEx_ConfigBreakInput>
 8000a78:	b108      	cbz	r0, 8000a7e <main+0x47e>
 8000a7a:	b672      	cpsid	i
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <main+0x47c>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8000a7e:	2310      	movs	r3, #16
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a80:	484b      	ldr	r0, [pc, #300]	; (8000bb0 <main+0x5b0>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8000a82:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a84:	aa0a      	add	r2, sp, #40	; 0x28
 8000a86:	2102      	movs	r1, #2
 8000a88:	f005 faba 	bl	8006000 <HAL_TIMEx_ConfigBreakInput>
 8000a8c:	b108      	cbz	r0, 8000a92 <main+0x492>
 8000a8e:	b672      	cpsid	i
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <main+0x490>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a92:	2660      	movs	r6, #96	; 0x60
 8000a94:	2700      	movs	r7, #0
 8000a96:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a9a:	4602      	mov	r2, r0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9c:	2600      	movs	r6, #0
 8000a9e:	2700      	movs	r7, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aa0:	901a      	str	r0, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa2:	a914      	add	r1, sp, #80	; 0x50
 8000aa4:	4842      	ldr	r0, [pc, #264]	; (8000bb0 <main+0x5b0>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa6:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
 8000aaa:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aae:	f005 f921 	bl	8005cf4 <HAL_TIM_PWM_ConfigChannel>
 8000ab2:	b108      	cbz	r0, 8000ab8 <main+0x4b8>
 8000ab4:	b672      	cpsid	i
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <main+0x4b6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ab8:	483d      	ldr	r0, [pc, #244]	; (8000bb0 <main+0x5b0>)
 8000aba:	4622      	mov	r2, r4
 8000abc:	a914      	add	r1, sp, #80	; 0x50
 8000abe:	f005 f919 	bl	8005cf4 <HAL_TIM_PWM_ConfigChannel>
 8000ac2:	b108      	cbz	r0, 8000ac8 <main+0x4c8>
 8000ac4:	b672      	cpsid	i
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <main+0x4c6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ac8:	4839      	ldr	r0, [pc, #228]	; (8000bb0 <main+0x5b0>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	a914      	add	r1, sp, #80	; 0x50
 8000ace:	f005 f911 	bl	8005cf4 <HAL_TIM_PWM_ConfigChannel>
 8000ad2:	b108      	cbz	r0, 8000ad8 <main+0x4d8>
 8000ad4:	b672      	cpsid	i
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <main+0x4d6>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000ad8:	2370      	movs	r3, #112	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ada:	4835      	ldr	r0, [pc, #212]	; (8000bb0 <main+0x5b0>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000adc:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ade:	a914      	add	r1, sp, #80	; 0x50
 8000ae0:	220c      	movs	r2, #12
 8000ae2:	f005 f907 	bl	8005cf4 <HAL_TIM_PWM_ConfigChannel>
 8000ae6:	b108      	cbz	r0, 8000aec <main+0x4ec>
 8000ae8:	b672      	cpsid	i
  while (1)
 8000aea:	e7fe      	b.n	8000aea <main+0x4ea>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000aec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000af0:	2344      	movs	r3, #68	; 0x44
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000af2:	2400      	movs	r4, #0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000af4:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000af8:	9428      	str	r4, [sp, #160]	; 0xa0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000afa:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8000afe:	2400      	movs	r4, #0
 8000b00:	2200      	movs	r2, #0
 8000b02:	2300      	movs	r3, #0
 8000b04:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
 8000b08:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 8000b0c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000b10:	2203      	movs	r2, #3
 8000b12:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b14:	4826      	ldr	r0, [pc, #152]	; (8000bb0 <main+0x5b0>)
 8000b16:	a91c      	add	r1, sp, #112	; 0x70
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000b18:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8000b1c:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8000b20:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
 8000b24:	e9cd 4524 	strd	r4, r5, [sp, #144]	; 0x90
 8000b28:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 8000b2c:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b30:	f005 fa16 	bl	8005f60 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b34:	4605      	mov	r5, r0
 8000b36:	b108      	cbz	r0, 8000b3c <main+0x53c>
 8000b38:	b672      	cpsid	i
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <main+0x53a>
  huart2.Instance = USART2;
 8000b3c:	4c1e      	ldr	r4, [pc, #120]	; (8000bb8 <main+0x5b8>)
  HAL_TIM_MspPostInit(&htim1);
 8000b3e:	481c      	ldr	r0, [pc, #112]	; (8000bb0 <main+0x5b0>)
 8000b40:	f001 fe9c 	bl	800287c <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 8000b44:	491d      	ldr	r1, [pc, #116]	; (8000bbc <main+0x5bc>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	60a5      	str	r5, [r4, #8]
  huart2.Init.BaudRate = 115200;
 8000b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b4e:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 115200;
 8000b50:	e9c4 1200 	strd	r1, r2, [r4]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b54:	e9c4 5503 	strd	r5, r5, [r4, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	e9c4 5506 	strd	r5, r5, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b5c:	e9c4 5508 	strd	r5, r5, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b60:	62a5      	str	r5, [r4, #40]	; 0x28
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b62:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b64:	f005 fc36 	bl	80063d4 <HAL_UART_Init>
 8000b68:	4601      	mov	r1, r0
 8000b6a:	b108      	cbz	r0, 8000b70 <main+0x570>
 8000b6c:	b672      	cpsid	i
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <main+0x56e>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b70:	4620      	mov	r0, r4
 8000b72:	f005 fe07 	bl	8006784 <HAL_UARTEx_SetTxFifoThreshold>
 8000b76:	4601      	mov	r1, r0
 8000b78:	b108      	cbz	r0, 8000b7e <main+0x57e>
 8000b7a:	b672      	cpsid	i
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <main+0x57c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7e:	4620      	mov	r0, r4
 8000b80:	f005 fe3e 	bl	8006800 <HAL_UARTEx_SetRxFifoThreshold>
 8000b84:	b108      	cbz	r0, 8000b8a <main+0x58a>
 8000b86:	b672      	cpsid	i
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <main+0x588>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	f005 fddc 	bl	8006748 <HAL_UARTEx_DisableFifoMode>
 8000b90:	4604      	mov	r4, r0
 8000b92:	b1a8      	cbz	r0, 8000bc0 <main+0x5c0>
 8000b94:	b672      	cpsid	i
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <main+0x596>
 8000b98:	2000080c 	.word	0x2000080c
 8000b9c:	40010300 	.word	0x40010300
 8000ba0:	200006f0 	.word	0x200006f0
 8000ba4:	40010304 	.word	0x40010304
 8000ba8:	200007ac 	.word	0x200007ac
 8000bac:	40010308 	.word	0x40010308
 8000bb0:	20000900 	.word	0x20000900
 8000bb4:	40012c00 	.word	0x40012c00
 8000bb8:	20000970 	.word	0x20000970
 8000bbc:	40004400 	.word	0x40004400
  MX_MotorControl_Init();
 8000bc0:	f001 fa5e 	bl	8002080 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	2018      	movs	r0, #24
 8000bca:	f003 fd53 	bl	8004674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000bce:	2018      	movs	r0, #24
 8000bd0:	f003 fd88 	bl	80046e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000bd4:	4622      	mov	r2, r4
 8000bd6:	4621      	mov	r1, r4
 8000bd8:	2019      	movs	r0, #25
 8000bda:	f003 fd4b 	bl	8004674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000bde:	2019      	movs	r0, #25
 8000be0:	f003 fd80 	bl	80046e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8000be4:	4622      	mov	r2, r4
 8000be6:	2102      	movs	r1, #2
 8000be8:	2012      	movs	r0, #18
 8000bea:	f003 fd43 	bl	8004674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000bee:	2012      	movs	r0, #18
 8000bf0:	f003 fd78 	bl	80046e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2103      	movs	r1, #3
 8000bf8:	2026      	movs	r0, #38	; 0x26
 8000bfa:	f003 fd3b 	bl	8004674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bfe:	2026      	movs	r0, #38	; 0x26
 8000c00:	f003 fd70 	bl	80046e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000c04:	4622      	mov	r2, r4
 8000c06:	2103      	movs	r1, #3
 8000c08:	2028      	movs	r0, #40	; 0x28
 8000c0a:	f003 fd33 	bl	8004674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c0e:	2028      	movs	r0, #40	; 0x28
 8000c10:	f003 fd68 	bl	80046e4 <HAL_NVIC_EnableIRQ>
    MC_ProgramSpeedRampMotor1(-6000/6,1000);
 8000c14:	4c11      	ldr	r4, [pc, #68]	; (8000c5c <main+0x65c>)
    MC_ProgramSpeedRampMotor1(6000/6,1000);
 8000c16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c1a:	4608      	mov	r0, r1
 8000c1c:	f000 f82c 	bl	8000c78 <MC_ProgramSpeedRampMotor1>
    MC_StartMotor1();
 8000c20:	f000 f81e 	bl	8000c60 <MC_StartMotor1>
    HAL_Delay(10000);
 8000c24:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c28:	f002 fd68 	bl	80036fc <HAL_Delay>
    MC_StopMotor1();
 8000c2c:	f000 f81e 	bl	8000c6c <MC_StopMotor1>
    HAL_Delay(10000);
 8000c30:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c34:	f002 fd62 	bl	80036fc <HAL_Delay>
    MC_ProgramSpeedRampMotor1(-6000/6,1000);
 8000c38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c3c:	4620      	mov	r0, r4
 8000c3e:	f000 f81b 	bl	8000c78 <MC_ProgramSpeedRampMotor1>
    MC_StartMotor1();
 8000c42:	f000 f80d 	bl	8000c60 <MC_StartMotor1>
    HAL_Delay(10000);
 8000c46:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c4a:	f002 fd57 	bl	80036fc <HAL_Delay>
    MC_StopMotor1();
 8000c4e:	f000 f80d 	bl	8000c6c <MC_StopMotor1>
    HAL_Delay(10000);
 8000c52:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c56:	f002 fd51 	bl	80036fc <HAL_Delay>
  while (1)
 8000c5a:	e7dc      	b.n	8000c16 <main+0x616>
 8000c5c:	fffffc18 	.word	0xfffffc18

08000c60 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8000c60:	4b01      	ldr	r3, [pc, #4]	; (8000c68 <MC_StartMotor1+0x8>)
 8000c62:	6818      	ldr	r0, [r3, #0]
 8000c64:	f000 b844 	b.w	8000cf0 <MCI_StartMotor>
 8000c68:	20000ae4 	.word	0x20000ae4

08000c6c <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8000c6c:	4b01      	ldr	r3, [pc, #4]	; (8000c74 <MC_StopMotor1+0x8>)
 8000c6e:	6818      	ldr	r0, [r3, #0]
 8000c70:	f000 b848 	b.w	8000d04 <MCI_StopMotor>
 8000c74:	20000ae4 	.word	0x20000ae4

08000c78 <MC_ProgramSpeedRampMotor1>:
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1( int16_t hFinalSpeed, uint16_t hDurationms )
{
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8000c78:	4b02      	ldr	r3, [pc, #8]	; (8000c84 <MC_ProgramSpeedRampMotor1+0xc>)
{
 8000c7a:	460a      	mov	r2, r1
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	6818      	ldr	r0, [r3, #0]
 8000c80:	f000 b816 	b.w	8000cb0 <MCI_ExecSpeedRamp>
 8000c84:	20000ae4 	.word	0x20000ae4

08000c88 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8000c88:	4b01      	ldr	r3, [pc, #4]	; (8000c90 <MC_GetSTMStateMotor1+0x8>)
 8000c8a:	6818      	ldr	r0, [r3, #0]
 8000c8c:	f000 b882 	b.w	8000d94 <MCI_GetSTMState>
 8000c90:	20000ae4 	.word	0x20000ae4

08000c94 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8000c94:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000c96:	2400      	movs	r4, #0
 8000c98:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8000c9a:	81c4      	strh	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
 8000c9c:	8204      	strh	r4, [r0, #16]
  pHandle->hDurationms = 0;
 8000c9e:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000ca0:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 8000ca2:	e9c0 1200 	strd	r1, r2, [r0]
}
 8000ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pFOCVars = pFOCVars;
 8000caa:	6083      	str	r3, [r0, #8]
}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 8000cb0:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cb2:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000cb6:	2401      	movs	r4, #1
 8000cb8:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8000cba:	81c1      	strh	r1, [r0, #14]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8000cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8000cc0:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cc2:	8303      	strh	r3, [r0, #24]
}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8000cc8:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cca:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000ccc:	2402      	movs	r4, #2
 8000cce:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8000cd0:	8201      	strh	r1, [r0, #16]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8000cd6:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cd8:	8303      	strh	r3, [r0, #24]
}
 8000cda:	4770      	bx	lr

08000cdc <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000cdc:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000cde:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000ce0:	2301      	movs	r3, #1
  pHandle->Iqdref.q = Iqdref.q;
 8000ce2:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000ce6:	7302      	strb	r2, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000ce8:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000cea:	b002      	add	sp, #8
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000cf0:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000cf2:	2103      	movs	r1, #3
{
 8000cf4:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000cf6:	6800      	ldr	r0, [r0, #0]
 8000cf8:	f007 fad6 	bl	80082a8 <STM_NextState>

  if ( RetVal == true )
 8000cfc:	b108      	cbz	r0, 8000d02 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8000d02:	bd10      	pop	{r4, pc}

08000d04 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000d04:	6800      	ldr	r0, [r0, #0]
 8000d06:	2107      	movs	r1, #7
 8000d08:	f007 bace 	b.w	80082a8 <STM_NextState>

08000d0c <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000d0c:	6800      	ldr	r0, [r0, #0]
 8000d0e:	f007 bb41 	b.w	8008394 <STM_FaultAcknowledged>
 8000d12:	bf00      	nop

08000d14 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000d14:	6800      	ldr	r0, [r0, #0]
 8000d16:	2101      	movs	r1, #1
 8000d18:	f007 bac6 	b.w	80082a8 <STM_NextState>

08000d1c <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8000d1c:	b178      	cbz	r0, 8000d3e <MCI_ExecBufferedCommands+0x22>
{
 8000d1e:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000d20:	7e03      	ldrb	r3, [r0, #24]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	4604      	mov	r4, r0
 8000d26:	d000      	beq.n	8000d2a <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000d28:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8000d2a:	7b01      	ldrb	r1, [r0, #12]
 8000d2c:	2902      	cmp	r1, #2
 8000d2e:	d020      	beq.n	8000d72 <MCI_ExecBufferedCommands+0x56>
 8000d30:	2903      	cmp	r1, #3
 8000d32:	d005      	beq.n	8000d40 <MCI_ExecBufferedCommands+0x24>
 8000d34:	2901      	cmp	r1, #1
 8000d36:	d00c      	beq.n	8000d52 <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	7623      	strb	r3, [r4, #24]
}
 8000d3c:	bd10      	pop	{r4, pc}
 8000d3e:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000d40:	6882      	ldr	r2, [r0, #8]
 8000d42:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000d46:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8000d4a:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	7623      	strb	r3, [r4, #24]
}
 8000d50:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000d52:	6883      	ldr	r3, [r0, #8]
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000d5a:	6840      	ldr	r0, [r0, #4]
 8000d5c:	f007 f9de 	bl	800811c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000d60:	8ae2      	ldrh	r2, [r4, #22]
 8000d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d66:	6860      	ldr	r0, [r4, #4]
 8000d68:	f007 f9dc 	bl	8008124 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	d0e3      	beq.n	8000d38 <MCI_ExecBufferedCommands+0x1c>
 8000d70:	e7ec      	b.n	8000d4c <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000d72:	6883      	ldr	r3, [r0, #8]
 8000d74:	2100      	movs	r1, #0
 8000d76:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000d7a:	6840      	ldr	r0, [r0, #4]
 8000d7c:	f007 f9ce 	bl	800811c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000d80:	8ae2      	ldrh	r2, [r4, #22]
 8000d82:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000d86:	6860      	ldr	r0, [r4, #4]
 8000d88:	f007 f9cc 	bl	8008124 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d0d3      	beq.n	8000d38 <MCI_ExecBufferedCommands+0x1c>
 8000d90:	e7dc      	b.n	8000d4c <MCI_ExecBufferedCommands+0x30>
 8000d92:	bf00      	nop

08000d94 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000d94:	6800      	ldr	r0, [r0, #0]
 8000d96:	f007 bafb 	b.w	8008390 <STM_GetState>
 8000d9a:	bf00      	nop

08000d9c <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000d9c:	7e40      	ldrb	r0, [r0, #25]
 8000d9e:	4770      	bx	lr

08000da0 <MCI_GetImposedMotorDirection>:
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
  int16_t retVal = 1;

  switch ( pHandle->lastCommand )
 8000da0:	7b03      	ldrb	r3, [r0, #12]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d005      	beq.n	8000db2 <MCI_GetImposedMotorDirection+0x12>
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d013      	beq.n	8000dd2 <MCI_GetImposedMotorDirection+0x32>
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d009      	beq.n	8000dc2 <MCI_GetImposedMotorDirection+0x22>
 8000dae:	2001      	movs	r0, #1
      break;
    default:
      break;
  }
  return retVal;
}
 8000db0:	4770      	bx	lr
      if ( pHandle->hFinalTorque < 0 )
 8000db2:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 8000db6:	2b00      	cmp	r3, #0
        retVal = -1;
 8000db8:	bfac      	ite	ge
 8000dba:	2001      	movge	r0, #1
 8000dbc:	f04f 30ff 	movlt.w	r0, #4294967295
 8000dc0:	4770      	bx	lr
      if ( pHandle->hFinalSpeed < 0 )
 8000dc2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8000dc6:	2b00      	cmp	r3, #0
        retVal = -1;
 8000dc8:	bfac      	ite	ge
 8000dca:	2001      	movge	r0, #1
 8000dcc:	f04f 30ff 	movlt.w	r0, #4294967295
 8000dd0:	4770      	bx	lr
      if ( pHandle->Iqdref.q < 0 )
 8000dd2:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 8000dd6:	2b00      	cmp	r3, #0
        retVal = -1;
 8000dd8:	bfac      	ite	ge
 8000dda:	2001      	movge	r0, #1
 8000ddc:	f04f 30ff 	movlt.w	r0, #4294967295
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000de4:	7b03      	ldrb	r3, [r0, #12]
 8000de6:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000de8:	bf0c      	ite	eq
 8000dea:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8000dee:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000df4:	6840      	ldr	r0, [r0, #4]
 8000df6:	f007 b9dd 	b.w	80081b4 <STC_StopRamp>
 8000dfa:	bf00      	nop

08000dfc <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000dfc:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000dfe:	6840      	ldr	r0, [r0, #4]
 8000e00:	f007 f972 	bl	80080e8 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000e04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000e08:	f007 b91a 	b.w	8008040 <SPD_GetAvrgMecSpeedUnit>

08000e0c <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000e0c:	6840      	ldr	r0, [r0, #4]
 8000e0e:	f007 b975 	b.w	80080fc <STC_GetMecSpeedRefUnit>
 8000e12:	bf00      	nop

08000e14 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000e14:	6882      	ldr	r2, [r0, #8]
 8000e16:	6810      	ldr	r0, [r2, #0]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	b282      	uxth	r2, r0
 8000e1c:	f362 030f 	bfi	r3, r2, #0, #16
 8000e20:	0c00      	lsrs	r0, r0, #16
 8000e22:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e26:	b082      	sub	sp, #8
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	b002      	add	sp, #8
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000e30:	6882      	ldr	r2, [r0, #8]
 8000e32:	6850      	ldr	r0, [r2, #4]
 8000e34:	2300      	movs	r3, #0
 8000e36:	b282      	uxth	r2, r0
 8000e38:	f362 030f 	bfi	r3, r2, #0, #16
 8000e3c:	0c00      	lsrs	r0, r0, #16
 8000e3e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e42:	b082      	sub	sp, #8
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	b002      	add	sp, #8
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000e4c:	6882      	ldr	r2, [r0, #8]
 8000e4e:	68d0      	ldr	r0, [r2, #12]
 8000e50:	2300      	movs	r3, #0
 8000e52:	b282      	uxth	r2, r0
 8000e54:	f362 030f 	bfi	r3, r2, #0, #16
 8000e58:	0c00      	lsrs	r0, r0, #16
 8000e5a:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e5e:	b082      	sub	sp, #8
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	b002      	add	sp, #8
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000e68:	6882      	ldr	r2, [r0, #8]
 8000e6a:	6910      	ldr	r0, [r2, #16]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	b282      	uxth	r2, r0
 8000e70:	f362 030f 	bfi	r3, r2, #0, #16
 8000e74:	0c00      	lsrs	r0, r0, #16
 8000e76:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e7a:	b082      	sub	sp, #8
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	b002      	add	sp, #8
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000e84:	6882      	ldr	r2, [r0, #8]
 8000e86:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	b282      	uxth	r2, r0
 8000e8e:	f362 030f 	bfi	r3, r2, #0, #16
 8000e92:	0c00      	lsrs	r0, r0, #16
 8000e94:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e98:	b082      	sub	sp, #8
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	b002      	add	sp, #8
 8000e9e:	4770      	bx	lr

08000ea0 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000ea0:	6882      	ldr	r2, [r0, #8]
 8000ea2:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	b282      	uxth	r2, r0
 8000eaa:	f362 030f 	bfi	r3, r2, #0, #16
 8000eae:	0c00      	lsrs	r0, r0, #16
 8000eb0:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000eb4:	b082      	sub	sp, #8
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	b002      	add	sp, #8
 8000eba:	4770      	bx	lr

08000ebc <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000ebc:	6883      	ldr	r3, [r0, #8]
}
 8000ebe:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000ec2:	4770      	bx	lr

08000ec4 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	6882      	ldr	r2, [r0, #8]
 8000ec8:	f361 030f 	bfi	r3, r1, #0, #16
 8000ecc:	f361 431f 	bfi	r3, r1, #16, #16
 8000ed0:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000ed8:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000eda:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000ede:	f007 f9a9 	bl	8008234 <STC_GetDefaultIqdref>
 8000ee2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000ee6:	8220      	strh	r0, [r4, #16]
 8000ee8:	8263      	strh	r3, [r4, #18]
}
 8000eea:	bd10      	pop	{r4, pc}

08000eec <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8000eec:	b203      	sxth	r3, r0
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000eee:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8000ef2:	f3c0 400f 	ubfx	r0, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000ef6:	fb13 f201 	smulbb	r2, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000efa:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000efe:	4250      	negs	r0, r2
 8000f00:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000f04:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8000f08:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8000f0a:	da05      	bge.n	8000f18 <MCM_Clarke+0x2c>
 8000f0c:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000f0e:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8000f12:	da0c      	bge.n	8000f2e <MCM_Clarke+0x42>
 8000f14:	4a09      	ldr	r2, [pc, #36]	; (8000f3c <MCM_Clarke+0x50>)
 8000f16:	e001      	b.n	8000f1c <MCM_Clarke+0x30>
 8000f18:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	2000      	movs	r0, #0
 8000f20:	b292      	uxth	r2, r2
 8000f22:	f363 000f 	bfi	r0, r3, #0, #16
 8000f26:	f362 401f 	bfi	r0, r2, #16, #16
}
 8000f2a:	b004      	add	sp, #16
 8000f2c:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000f2e:	4803      	ldr	r0, [pc, #12]	; (8000f3c <MCM_Clarke+0x50>)
 8000f30:	b20a      	sxth	r2, r1
 8000f32:	4282      	cmp	r2, r0
 8000f34:	bfb8      	it	lt
 8000f36:	4602      	movlt	r2, r0
 8000f38:	e7f0      	b.n	8000f1c <MCM_Clarke+0x30>
 8000f3a:	bf00      	nop
 8000f3c:	ffff8001 	.word	0xffff8001

08000f40 <MCM_Trig_Functions>:
    uint32_t CordicRdata;
    Trig_Components Components;
  } CosSin;

  /* Configure CORDIC */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MCM_Trig_Functions+0x28>)
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <MCM_Trig_Functions+0x2c>)
 8000f44:	601a      	str	r2, [r3, #0]
  LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) hAngle);
 8000f46:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
 8000f4a:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8000f4e:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8000f50:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components);
 8000f52:	2000      	movs	r0, #0
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	f362 000f 	bfi	r0, r2, #0, #16
 8000f5a:	0c1b      	lsrs	r3, r3, #16
{
 8000f5c:	b082      	sub	sp, #8
  return (CosSin.Components);
 8000f5e:	f363 401f 	bfi	r0, r3, #16, #16

}
 8000f62:	b002      	add	sp, #8
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40020c00 	.word	0x40020c00
 8000f6c:	00600040 	.word	0x00600040

08000f70 <MCM_Park>:
{
 8000f70:	b570      	push	{r4, r5, r6, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	4605      	mov	r5, r0
 8000f76:	9001      	str	r0, [sp, #4]
 8000f78:	4606      	mov	r6, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	f7ff ffe0 	bl	8000f40 <MCM_Trig_Functions>
 8000f80:	b22d      	sxth	r5, r5
 8000f82:	b204      	sxth	r4, r0
 8000f84:	1436      	asrs	r6, r6, #16
 8000f86:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000f88:	fb05 f204 	mul.w	r2, r5, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000f8c:	fb06 2210 	mls	r2, r6, r0, r2
  if ( wqd_tmp > INT16_MAX )
 8000f90:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8000f94:	da12      	bge.n	8000fbc <MCM_Park+0x4c>
 8000f96:	13d3      	asrs	r3, r2, #15
  else if ( wqd_tmp < ( -32768 ) )
 8000f98:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000f9c:	4914      	ldr	r1, [pc, #80]	; (8000ff0 <MCM_Park+0x80>)
 8000f9e:	da21      	bge.n	8000fe4 <MCM_Park+0x74>
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000fa0:	fb04 f406 	mul.w	r4, r4, r6
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000fa4:	fb05 4000 	mla	r0, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 8000fa8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000fac:	ea4f 32e0 	mov.w	r2, r0, asr #15
  if ( wqd_tmp > INT16_MAX )
 8000fb0:	da07      	bge.n	8000fc2 <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 8000fb2:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8000fb6:	da0f      	bge.n	8000fd8 <MCM_Park+0x68>
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <MCM_Park+0x80>)
 8000fba:	e004      	b.n	8000fc6 <MCM_Park+0x56>
 8000fbc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000fc0:	e7ee      	b.n	8000fa0 <MCM_Park+0x30>
 8000fc2:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8000fc6:	b28a      	uxth	r2, r1
 8000fc8:	2000      	movs	r0, #0
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	f362 000f 	bfi	r0, r2, #0, #16
 8000fd0:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000fd4:	b004      	add	sp, #16
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MCM_Park+0x80>)
 8000fda:	b213      	sxth	r3, r2
 8000fdc:	4283      	cmp	r3, r0
 8000fde:	bfb8      	it	lt
 8000fe0:	4603      	movlt	r3, r0
 8000fe2:	e7f0      	b.n	8000fc6 <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	4291      	cmp	r1, r2
 8000fe8:	bfb8      	it	lt
 8000fea:	4611      	movlt	r1, r2
 8000fec:	e7d8      	b.n	8000fa0 <MCM_Park+0x30>
 8000fee:	bf00      	nop
 8000ff0:	ffff8001 	.word	0xffff8001

08000ff4 <MCM_Rev_Park>:
{
 8000ff4:	b530      	push	{r4, r5, lr}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	9001      	str	r0, [sp, #4]
 8000ffc:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000ffe:	4608      	mov	r0, r1
 8001000:	f7ff ff9e 	bl	8000f40 <MCM_Trig_Functions>
 8001004:	142d      	asrs	r5, r5, #16
 8001006:	1403      	asrs	r3, r0, #16
 8001008:	b224      	sxth	r4, r4
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 800100a:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 800100e:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8001010:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8001014:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8001018:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 800101c:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8001020:	2000      	movs	r0, #0
 8001022:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001026:	f362 000f 	bfi	r0, r2, #0, #16
 800102a:	f363 401f 	bfi	r0, r3, #16, #16
}
 800102e:	b005      	add	sp, #20
 8001030:	bd30      	pop	{r4, r5, pc}
 8001032:	bf00      	nop

08001034 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8001034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001036:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 800103a:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <FOC_Clear+0x74>)
 800103c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8001040:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001044:	004a      	lsls	r2, r1, #1
  FOCVars[bMotor].Iab = NULL_ab;
 8001046:	2500      	movs	r5, #0
{
 8001048:	4604      	mov	r4, r0
  FOCVars[bMotor].Iqd = NULL_qd;
 800104a:	f102 070c 	add.w	r7, r2, #12
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
 800104e:	2626      	movs	r6, #38	; 0x26
  FOCVars[bMotor].Vqd = NULL_qd;
 8001050:	3216      	adds	r2, #22
  FOCVars[bMotor].Iab = NULL_ab;
 8001052:	f843 5011 	str.w	r5, [r3, r1, lsl #1]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001056:	eb07 0e03 	add.w	lr, r7, r3
  FOCVars[bMotor].Iab = NULL_ab;
 800105a:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 800105e:	fb06 3604 	mla	r6, r6, r4, r3
  FOCVars[bMotor].Vqd = NULL_qd;
 8001062:	eb02 0c03 	add.w	ip, r2, r3
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001066:	4811      	ldr	r0, [pc, #68]	; (80010ac <FOC_Clear+0x78>)
  FOCVars[bMotor].Iqd = NULL_qd;
 8001068:	50fd      	str	r5, [r7, r3]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800106a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 800106e:	f8ce 5004 	str.w	r5, [lr, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001072:	4629      	mov	r1, r5
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001074:	83f5      	strh	r5, [r6, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001076:	50d5      	str	r5, [r2, r3]
 8001078:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 800107c:	8435      	strh	r5, [r6, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800107e:	f005 fcfd 	bl	8006a7c <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <FOC_Clear+0x7c>)
 8001084:	4629      	mov	r1, r5
 8001086:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800108a:	f005 fcf7 	bl	8006a7c <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <FOC_Clear+0x80>)
 8001090:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001094:	f007 f82a 	bl	80080ec <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <FOC_Clear+0x84>)
 800109a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800109e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80010a2:	f005 bef9 	b.w	8006e98 <PWMC_SwitchOffPWM>
 80010a6:	bf00      	nop
 80010a8:	20000a2c 	.word	0x20000a2c
 80010ac:	20000a20 	.word	0x20000a20
 80010b0:	20000adc 	.word	0x20000adc
 80010b4:	20000ae0 	.word	0x20000ae0
 80010b8:	20000a18 	.word	0x20000a18

080010bc <MCboot>:
{
 80010bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010c0:	ed2d 8b02 	vpush	{d8}
  STM_Init(&STM[M1]);
 80010c4:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 80012bc <MCboot+0x200>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80010c8:	4c63      	ldr	r4, [pc, #396]	; (8001258 <MCboot+0x19c>)
  STO_PLL_Init (&STO_PLL_M1);
 80010ca:	ed9f 8a64 	vldr	s16, [pc, #400]	; 800125c <MCboot+0x1a0>
  pSTC[M1] = &SpeednTorqCtrlM1;
 80010ce:	4d64      	ldr	r5, [pc, #400]	; (8001260 <MCboot+0x1a4>)
  PID_HandleInit(&PIDIqHandle_M1);
 80010d0:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 80012c0 <MCboot+0x204>
  PID_HandleInit(&PIDIdHandle_M1);
 80010d4:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 80012c4 <MCboot+0x208>
  NTC_Init(&TempSensorParamsM1);
 80010d8:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 80012c8 <MCboot+0x20c>
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80010dc:	4e61      	ldr	r6, [pc, #388]	; (8001264 <MCboot+0x1a8>)
{
 80010de:	b087      	sub	sp, #28
 80010e0:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 80010e2:	4658      	mov	r0, fp
{
 80010e4:	461f      	mov	r7, r3
 80010e6:	9103      	str	r1, [sp, #12]
  STM_Init(&STM[M1]);
 80010e8:	f007 f8ba 	bl	8008260 <STM_Init>
  pCLM[M1] = &CircleLimitationM1;
 80010ec:	4b5e      	ldr	r3, [pc, #376]	; (8001268 <MCboot+0x1ac>)
  bMCBootCompleted = 0;
 80010ee:	495f      	ldr	r1, [pc, #380]	; (800126c <MCboot+0x1b0>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80010f0:	485f      	ldr	r0, [pc, #380]	; (8001270 <MCboot+0x1b4>)
  pCLM[M1] = &CircleLimitationM1;
 80010f2:	4a60      	ldr	r2, [pc, #384]	; (8001274 <MCboot+0x1b8>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80010f4:	6020      	str	r0, [r4, #0]
  bMCBootCompleted = 0;
 80010f6:	2400      	movs	r4, #0
 80010f8:	700c      	strb	r4, [r1, #0]
  pCLM[M1] = &CircleLimitationM1;
 80010fa:	601a      	str	r2, [r3, #0]
  R3_2_Init(&PWM_Handle_M1);
 80010fc:	f006 fa3e 	bl	800757c <R3_2_Init>
  startTimers();
 8001100:	f005 fd42 	bl	8006b88 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001104:	485c      	ldr	r0, [pc, #368]	; (8001278 <MCboot+0x1bc>)
 8001106:	f005 fca5 	bl	8006a54 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 800110a:	4a5c      	ldr	r2, [pc, #368]	; (800127c <MCboot+0x1c0>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 800110c:	4b5c      	ldr	r3, [pc, #368]	; (8001280 <MCboot+0x1c4>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 800110e:	495a      	ldr	r1, [pc, #360]	; (8001278 <MCboot+0x1bc>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001110:	602b      	str	r3, [r5, #0]
  STO_PLL_Init (&STO_PLL_M1);
 8001112:	ee18 0a10 	vmov	r0, s16
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001116:	6011      	str	r1, [r2, #0]
  STO_PLL_Init (&STO_PLL_M1);
 8001118:	f007 fb38 	bl	800878c <STO_PLL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 800111c:	4857      	ldr	r0, [pc, #348]	; (800127c <MCboot+0x1c0>)
 800111e:	ee18 2a10 	vmov	r2, s16
 8001122:	6801      	ldr	r1, [r0, #0]
 8001124:	6828      	ldr	r0, [r5, #0]
 8001126:	f006 ffc9 	bl	80080bc <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 800112a:	4856      	ldr	r0, [pc, #344]	; (8001284 <MCboot+0x1c8>)
 800112c:	f007 fd52 	bl	8008bd4 <VSS_Init>
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8001130:	4a49      	ldr	r2, [pc, #292]	; (8001258 <MCboot+0x19c>)
 8001132:	4855      	ldr	r0, [pc, #340]	; (8001288 <MCboot+0x1cc>)
 8001134:	6813      	ldr	r3, [r2, #0]
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	6829      	ldr	r1, [r5, #0]
 800113a:	4a52      	ldr	r2, [pc, #328]	; (8001284 <MCboot+0x1c8>)
 800113c:	4b53      	ldr	r3, [pc, #332]	; (800128c <MCboot+0x1d0>)
 800113e:	f006 fe95 	bl	8007e6c <RUC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8001142:	4650      	mov	r0, sl
 8001144:	f005 fc86 	bl	8006a54 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8001148:	4648      	mov	r0, r9
 800114a:	f005 fc83 	bl	8006a54 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 800114e:	4b50      	ldr	r3, [pc, #320]	; (8001290 <MCboot+0x1d4>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001150:	4850      	ldr	r0, [pc, #320]	; (8001294 <MCboot+0x1d8>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8001152:	f8c3 a000 	str.w	sl, [r3]
  pPIDId[M1] = &PIDIdHandle_M1;
 8001156:	4b50      	ldr	r3, [pc, #320]	; (8001298 <MCboot+0x1dc>)
 8001158:	f8c3 9000 	str.w	r9, [r3]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 800115c:	4b4f      	ldr	r3, [pc, #316]	; (800129c <MCboot+0x1e0>)
 800115e:	6018      	str	r0, [r3, #0]
  RVBS_Init(pBusSensorM1);
 8001160:	f006 fdae 	bl	8007cc0 <RVBS_Init>
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8001164:	494d      	ldr	r1, [pc, #308]	; (800129c <MCboot+0x1e0>)
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8001166:	4b4e      	ldr	r3, [pc, #312]	; (80012a0 <MCboot+0x1e4>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8001168:	680a      	ldr	r2, [r1, #0]
 800116a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1] = &PQD_MotorPowMeasM1;
 800116e:	4a4d      	ldr	r2, [pc, #308]	; (80012a4 <MCboot+0x1e8>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001170:	f8c3 610c 	str.w	r6, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8001174:	4640      	mov	r0, r8
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8001176:	6013      	str	r3, [r2, #0]
  NTC_Init(&TempSensorParamsM1);
 8001178:	f005 fc28 	bl	80069cc <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 800117c:	494a      	ldr	r1, [pc, #296]	; (80012a8 <MCboot+0x1ec>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 800117e:	4b4b      	ldr	r3, [pc, #300]	; (80012ac <MCboot+0x1f0>)
 8001180:	484b      	ldr	r0, [pc, #300]	; (80012b0 <MCboot+0x1f4>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8001182:	f8c1 8000 	str.w	r8, [r1]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001186:	6018      	str	r0, [r3, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001188:	f04f 0901 	mov.w	r9, #1
  REMNG_Init(pREMNG[M1]);
 800118c:	f006 fde6 	bl	8007d5c <REMNG_Init>
  FOC_Clear(M1);
 8001190:	4620      	mov	r0, r4
 8001192:	f7ff ff4f 	bl	8001034 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001196:	f886 9024 	strb.w	r9, [r6, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800119a:	6828      	ldr	r0, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 800119c:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80012cc <MCboot+0x210>
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80011a0:	f007 f848 	bl	8008234 <STC_GetDefaultIqdref>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f3c0 420f 	ubfx	r2, r0, #16, #16
 80011aa:	8233      	strh	r3, [r6, #16]
 80011ac:	8272      	strh	r2, [r6, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80011ae:	6828      	ldr	r0, [r5, #0]
 80011b0:	f007 f840 	bl	8008234 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 80011b4:	493f      	ldr	r1, [pc, #252]	; (80012b4 <MCboot+0x1f8>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80011b6:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 80011b8:	f8c8 1000 	str.w	r1, [r8]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80011bc:	f3c0 4c0f 	ubfx	ip, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80011c0:	4633      	mov	r3, r6
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80011c2:	f8a6 c014 	strh.w	ip, [r6, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80011c6:	4608      	mov	r0, r1
 80011c8:	4659      	mov	r1, fp
 80011ca:	f7ff fd63 	bl	8000c94 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 80011ce:	6828      	ldr	r0, [r5, #0]
 80011d0:	f8d8 6000 	ldr.w	r6, [r8]
 80011d4:	f007 f824 	bl	8008220 <STC_GetMecSpeedRefUnitDefault>
 80011d8:	4622      	mov	r2, r4
 80011da:	4601      	mov	r1, r0
 80011dc:	4630      	mov	r0, r6
 80011de:	f7ff fd67 	bl	8000cb0 <MCI_ExecSpeedRamp>
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 80011e2:	4826      	ldr	r0, [pc, #152]	; (800127c <MCboot+0x1c0>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80011e4:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <MCboot+0x19c>)
  pMCIList[M1] = oMCInterface[M1];
 80011e6:	f8d8 a000 	ldr.w	sl, [r8]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 80011ea:	f8d0 8000 	ldr.w	r8, [r0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 80011ee:	4828      	ldr	r0, [pc, #160]	; (8001290 <MCboot+0x1d4>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80011f0:	6816      	ldr	r6, [r2, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80011f2:	4a2a      	ldr	r2, [pc, #168]	; (800129c <MCboot+0x1e0>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 80011f4:	f8d0 e000 	ldr.w	lr, [r0]
  MCT[M1].pPIDId = pPIDId[M1];
 80011f8:	4827      	ldr	r0, [pc, #156]	; (8001298 <MCboot+0x1dc>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80011fa:	6811      	ldr	r1, [r2, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80011fc:	4a29      	ldr	r2, [pc, #164]	; (80012a4 <MCboot+0x1e8>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 80011fe:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <MCboot+0x1fc>)
  MCT[M1].pPIDId = pPIDId[M1];
 8001200:	f8d0 c000 	ldr.w	ip, [r0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001204:	4828      	ldr	r0, [pc, #160]	; (80012a8 <MCboot+0x1ec>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001206:	6812      	ldr	r2, [r2, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001208:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 800120a:	6800      	ldr	r0, [r0, #0]
  pMCIList[M1] = oMCInterface[M1];
 800120c:	f8c7 a000 	str.w	sl, [r7]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001210:	63da      	str	r2, [r3, #60]	; 0x3c
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 8001212:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <MCboot+0x1cc>)
 8001214:	615a      	str	r2, [r3, #20]
  MCT[M1].pSpeedSensorVirtual = &VirtualSpeedSensorM1;  /* only if M1 is sensorless*/
 8001216:	4a1b      	ldr	r2, [pc, #108]	; (8001284 <MCboot+0x1c8>)
 8001218:	621a      	str	r2, [r3, #32]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 800121a:	e9c3 010b 	strd	r0, r1, [r3, #44]	; 0x2c
  pMCTList[M1] = &MCT[M1];
 800121e:	9a03      	ldr	r2, [sp, #12]
  bMCBootCompleted = 1;
 8001220:	4912      	ldr	r1, [pc, #72]	; (800126c <MCboot+0x1b0>)
  MCT[M1].pPIDId = pPIDId[M1];
 8001222:	f8c3 c008 	str.w	ip, [r3, #8]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001226:	e9c3 8e00 	strd	r8, lr, [r3]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 800122a:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 800122e:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 8001232:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001236:	611e      	str	r6, [r3, #16]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001238:	625d      	str	r5, [r3, #36]	; 0x24
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 800123a:	60dc      	str	r4, [r3, #12]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 800123c:	ed83 8a06 	vstr	s16, [r3, #24]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 8001240:	61dc      	str	r4, [r3, #28]
  MCT[M1].pStateMachine = &STM[M1];
 8001242:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
  MCT[M1].pOTT = MC_NULL;
 8001246:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 8001248:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 800124a:	f881 9000 	strb.w	r9, [r1]
}
 800124e:	b007      	add	sp, #28
 8001250:	ecbd 8b02 	vpop	{d8}
 8001254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001258:	20000a18 	.word	0x20000a18
 800125c:	20000394 	.word	0x20000394
 8001260:	20000ae0 	.word	0x20000ae0
 8001264:	20000a2c 	.word	0x20000a2c
 8001268:	20000aa8 	.word	0x20000aa8
 800126c:	200006d4 	.word	0x200006d4
 8001270:	2000024c 	.word	0x2000024c
 8001274:	20000000 	.word	0x20000000
 8001278:	2000010c 	.word	0x2000010c
 800127c:	20000a1c 	.word	0x20000a1c
 8001280:	200004bc 	.word	0x200004bc
 8001284:	20000518 	.word	0x20000518
 8001288:	20000308 	.word	0x20000308
 800128c:	20000380 	.word	0x20000380
 8001290:	20000a20 	.word	0x20000a20
 8001294:	200002e0 	.word	0x200002e0
 8001298:	20000adc 	.word	0x20000adc
 800129c:	20000aac 	.word	0x20000aac
 80012a0:	20000138 	.word	0x20000138
 80012a4:	20000ad8 	.word	0x20000ad8
 80012a8:	20000a14 	.word	0x20000a14
 80012ac:	20000ad4 	.word	0x20000ad4
 80012b0:	200002c8 	.word	0x200002c8
 80012b4:	20000ab0 	.word	0x20000ab0
 80012b8:	20000a54 	.word	0x20000a54
 80012bc:	20000acc 	.word	0x20000acc
 80012c0:	200000e0 	.word	0x200000e0
 80012c4:	200000b4 	.word	0x200000b4
 80012c8:	200004f0 	.word	0x200004f0
 80012cc:	20000a24 	.word	0x20000a24

080012d0 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop

080012d4 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80012d4:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <FOC_CalcCurrRef+0x24>)
 80012d8:	2426      	movs	r4, #38	; 0x26
 80012da:	fb04 3400 	mla	r4, r4, r0, r3
 80012de:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80012e2:	b103      	cbz	r3, 80012e6 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80012e4:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <FOC_CalcCurrRef+0x28>)
 80012e8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80012ec:	f006 ff66 	bl	80081bc <STC_CalcTorqueReference>
 80012f0:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80012f2:	8220      	strh	r0, [r4, #16]
}
 80012f4:	bd10      	pop	{r4, pc}
 80012f6:	bf00      	nop
 80012f8:	20000a2c 	.word	0x20000a2c
 80012fc:	20000ae0 	.word	0x20000ae0

08001300 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001300:	4b01      	ldr	r3, [pc, #4]	; (8001308 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001302:	8018      	strh	r0, [r3, #0]
}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200006d6 	.word	0x200006d6

0800130c <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800130e:	8818      	ldrh	r0, [r3, #0]
 8001310:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001312:	fab0 f080 	clz	r0, r0
 8001316:	0940      	lsrs	r0, r0, #5
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	200006d6 	.word	0x200006d6

08001320 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001320:	4b01      	ldr	r3, [pc, #4]	; (8001328 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001322:	8018      	strh	r0, [r3, #0]
}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	200006da 	.word	0x200006da

0800132c <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 800132e:	8818      	ldrh	r0, [r3, #0]
 8001330:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001332:	fab0 f080 	clz	r0, r0
 8001336:	0940      	lsrs	r0, r0, #5
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	200006da 	.word	0x200006da

08001340 <TSK_MediumFrequencyTaskM1>:
{
 8001340:	b530      	push	{r4, r5, lr}
 8001342:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8001344:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8001346:	4669      	mov	r1, sp
 8001348:	489a      	ldr	r0, [pc, #616]	; (80015b4 <TSK_MediumFrequencyTaskM1+0x274>)
  int16_t wAux = 0;
 800134a:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 800134e:	f007 f921 	bl	8008594 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8001352:	4d99      	ldr	r5, [pc, #612]	; (80015b8 <TSK_MediumFrequencyTaskM1+0x278>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8001354:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 8001356:	6828      	ldr	r0, [r5, #0]
 8001358:	f005 fbe2 	bl	8006b20 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 800135c:	4897      	ldr	r0, [pc, #604]	; (80015bc <TSK_MediumFrequencyTaskM1+0x27c>)
 800135e:	f007 f817 	bl	8008390 <STM_GetState>
  switch ( StateM1 )
 8001362:	1ec3      	subs	r3, r0, #3
 8001364:	2b10      	cmp	r3, #16
 8001366:	d85a      	bhi.n	800141e <TSK_MediumFrequencyTaskM1+0xde>
 8001368:	e8df f013 	tbh	[pc, r3, lsl #1]
 800136c:	0011007e 	.word	0x0011007e
 8001370:	00a90092 	.word	0x00a90092
 8001374:	00cb00b8 	.word	0x00cb00b8
 8001378:	005900d4 	.word	0x005900d4
 800137c:	00590059 	.word	0x00590059
 8001380:	00590059 	.word	0x00590059
 8001384:	00e10059 	.word	0x00e10059
 8001388:	00fd00f0 	.word	0x00fd00f0
 800138c:	005b      	.short	0x005b
      if( ! RUC_Exec( &RevUpControlM1 ) )
 800138e:	488c      	ldr	r0, [pc, #560]	; (80015c0 <TSK_MediumFrequencyTaskM1+0x280>)
 8001390:	f006 fde6 	bl	8007f60 <RUC_Exec>
 8001394:	2800      	cmp	r0, #0
 8001396:	f000 8101 	beq.w	800159c <TSK_MediumFrequencyTaskM1+0x25c>
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 800139a:	4b8a      	ldr	r3, [pc, #552]	; (80015c4 <TSK_MediumFrequencyTaskM1+0x284>)
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	f006 ff0d 	bl	80081bc <STC_CalcTorqueReference>
        IqdRef.d = FOCVars[M1].UserIdref;
 80013a2:	4b89      	ldr	r3, [pc, #548]	; (80015c8 <TSK_MediumFrequencyTaskM1+0x288>)
 80013a4:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
        FOCVars[M1].Iqdref = IqdRef;
 80013a8:	8218      	strh	r0, [r3, #16]
 80013aa:	825a      	strh	r2, [r3, #18]
      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 80013ac:	4887      	ldr	r0, [pc, #540]	; (80015cc <TSK_MediumFrequencyTaskM1+0x28c>)
 80013ae:	f10d 0102 	add.w	r1, sp, #2
 80013b2:	f007 fc63 	bl	8008c7c <VSS_CalcAvrgMecSpeedUnit>
      if (RUC_FirstAccelerationStageReached(&RevUpControlM1) == true)
 80013b6:	4882      	ldr	r0, [pc, #520]	; (80015c0 <TSK_MediumFrequencyTaskM1+0x280>)
 80013b8:	f006 fe08 	bl	8007fcc <RUC_FirstAccelerationStageReached>
 80013bc:	b378      	cbz	r0, 800141e <TSK_MediumFrequencyTaskM1+0xde>
        ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 80013be:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80013c2:	487c      	ldr	r0, [pc, #496]	; (80015b4 <TSK_MediumFrequencyTaskM1+0x274>)
 80013c4:	f007 fa1a 	bl	80087fc <STO_PLL_IsObserverConverged>
 80013c8:	4604      	mov	r4, r0
        STO_SetDirection(&STO_PLL_M1, MCI_GetImposedMotorDirection( &Mci[M1]));
 80013ca:	4881      	ldr	r0, [pc, #516]	; (80015d0 <TSK_MediumFrequencyTaskM1+0x290>)
 80013cc:	f7ff fce8 	bl	8000da0 <MCI_GetImposedMotorDirection>
 80013d0:	b2c1      	uxtb	r1, r0
 80013d2:	4878      	ldr	r0, [pc, #480]	; (80015b4 <TSK_MediumFrequencyTaskM1+0x274>)
 80013d4:	f007 fad2 	bl	800897c <STO_SetDirection>
        (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 80013d8:	487c      	ldr	r0, [pc, #496]	; (80015cc <TSK_MediumFrequencyTaskM1+0x28c>)
 80013da:	4621      	mov	r1, r4
 80013dc:	f007 fcde 	bl	8008d9c <VSS_SetStartTransition>
      if ( ObserverConverged )
 80013e0:	b1ec      	cbz	r4, 800141e <TSK_MediumFrequencyTaskM1+0xde>
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 80013e2:	4874      	ldr	r0, [pc, #464]	; (80015b4 <TSK_MediumFrequencyTaskM1+0x274>)
 80013e4:	4d78      	ldr	r5, [pc, #480]	; (80015c8 <TSK_MediumFrequencyTaskM1+0x288>)
        REMNG_Init( pREMNG[M1] );
 80013e6:	4c7b      	ldr	r4, [pc, #492]	; (80015d4 <TSK_MediumFrequencyTaskM1+0x294>)
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 80013e8:	f006 fe26 	bl	8008038 <SPD_GetElAngle>
 80013ec:	4601      	mov	r1, r0
 80013ee:	6868      	ldr	r0, [r5, #4]
 80013f0:	f7ff fdbe 	bl	8000f70 <MCM_Park>
 80013f4:	4603      	mov	r3, r0
        REMNG_Init( pREMNG[M1] );
 80013f6:	6820      	ldr	r0, [r4, #0]
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 80013f8:	9301      	str	r3, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 80013fa:	f006 fcaf 	bl	8007d5c <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 80013fe:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 8001402:	6820      	ldr	r0, [r4, #0]
 8001404:	2200      	movs	r2, #0
 8001406:	f006 fcef 	bl	8007de8 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 800140a:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 800140e:	6820      	ldr	r0, [r4, #0]
 8001410:	2219      	movs	r2, #25
 8001412:	f006 fce9 	bl	8007de8 <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 8001416:	4869      	ldr	r0, [pc, #420]	; (80015bc <TSK_MediumFrequencyTaskM1+0x27c>)
 8001418:	2113      	movs	r1, #19
 800141a:	f006 ff45 	bl	80082a8 <STM_NextState>
}
 800141e:	b003      	add	sp, #12
 8001420:	bd30      	pop	{r4, r5, pc}
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8001422:	4867      	ldr	r0, [pc, #412]	; (80015c0 <TSK_MediumFrequencyTaskM1+0x280>)
 8001424:	f006 fd9c 	bl	8007f60 <RUC_Exec>
 8001428:	2800      	cmp	r0, #0
 800142a:	f000 80bd 	beq.w	80015a8 <TSK_MediumFrequencyTaskM1+0x268>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 800142e:	4867      	ldr	r0, [pc, #412]	; (80015cc <TSK_MediumFrequencyTaskM1+0x28c>)
 8001430:	a901      	add	r1, sp, #4
 8001432:	f007 fc23 	bl	8008c7c <VSS_CalcAvrgMecSpeedUnit>
 8001436:	4604      	mov	r4, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 8001438:	4864      	ldr	r0, [pc, #400]	; (80015cc <TSK_MediumFrequencyTaskM1+0x28c>)
 800143a:	f007 fcbd 	bl	8008db8 <VSS_TransitionEnded>
        if ( LoopClosed == true )
 800143e:	b90c      	cbnz	r4, 8001444 <TSK_MediumFrequencyTaskM1+0x104>
 8001440:	2800      	cmp	r0, #0
 8001442:	d0ec      	beq.n	800141e <TSK_MediumFrequencyTaskM1+0xde>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8001444:	4a64      	ldr	r2, [pc, #400]	; (80015d8 <TSK_MediumFrequencyTaskM1+0x298>)
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8001446:	4b60      	ldr	r3, [pc, #384]	; (80015c8 <TSK_MediumFrequencyTaskM1+0x288>)
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8001448:	6814      	ldr	r4, [r2, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 800144a:	f9b3 5010 	ldrsh.w	r5, [r3, #16]
 800144e:	4620      	mov	r0, r4
 8001450:	f005 fb18 	bl	8006a84 <PID_GetKIDivisor>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8001454:	fb05 f100 	mul.w	r1, r5, r0
 8001458:	4620      	mov	r0, r4
 800145a:	f005 fb0f 	bl	8006a7c <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 800145e:	2105      	movs	r1, #5
 8001460:	4856      	ldr	r0, [pc, #344]	; (80015bc <TSK_MediumFrequencyTaskM1+0x27c>)
 8001462:	f006 ff21 	bl	80082a8 <STM_NextState>
    break;
 8001466:	e7da      	b.n	800141e <TSK_MediumFrequencyTaskM1+0xde>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 8001468:	4b5c      	ldr	r3, [pc, #368]	; (80015dc <TSK_MediumFrequencyTaskM1+0x29c>)
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	f7ff fc98 	bl	8000da0 <MCI_GetImposedMotorDirection>
 8001470:	4601      	mov	r1, r0
 8001472:	4853      	ldr	r0, [pc, #332]	; (80015c0 <TSK_MediumFrequencyTaskM1+0x280>)
 8001474:	f006 fd30 	bl	8007ed8 <RUC_Clear>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8001478:	4b59      	ldr	r3, [pc, #356]	; (80015e0 <TSK_MediumFrequencyTaskM1+0x2a0>)
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	f005 feea 	bl	8007254 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001480:	2014      	movs	r0, #20
 8001482:	f7ff ff3d 	bl	8001300 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8001486:	2110      	movs	r1, #16
 8001488:	484c      	ldr	r0, [pc, #304]	; (80015bc <TSK_MediumFrequencyTaskM1+0x27c>)
 800148a:	f006 ff0d 	bl	80082a8 <STM_NextState>
    break;
 800148e:	e7c6      	b.n	800141e <TSK_MediumFrequencyTaskM1+0xde>
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001490:	4c4c      	ldr	r4, [pc, #304]	; (80015c4 <TSK_MediumFrequencyTaskM1+0x284>)
 8001492:	4948      	ldr	r1, [pc, #288]	; (80015b4 <TSK_MediumFrequencyTaskM1+0x274>)
 8001494:	6820      	ldr	r0, [r4, #0]
 8001496:	f006 fe25 	bl	80080e4 <STC_SetSpeedSensor>
	  FOC_InitAdditionalMethods(M1);
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff ff18 	bl	80012d0 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff ff17 	bl	80012d4 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 80014a6:	2106      	movs	r1, #6
 80014a8:	4844      	ldr	r0, [pc, #272]	; (80015bc <TSK_MediumFrequencyTaskM1+0x27c>)
 80014aa:	f006 fefd 	bl	80082a8 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 80014ae:	6820      	ldr	r0, [r4, #0]
 80014b0:	f006 fece 	bl	8008250 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 80014b4:	4b49      	ldr	r3, [pc, #292]	; (80015dc <TSK_MediumFrequencyTaskM1+0x29c>)
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	f7ff fc30 	bl	8000d1c <MCI_ExecBufferedCommands>
    break;
 80014bc:	e7af      	b.n	800141e <TSK_MediumFrequencyTaskM1+0xde>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 80014be:	4b47      	ldr	r3, [pc, #284]	; (80015dc <TSK_MediumFrequencyTaskM1+0x29c>)
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	f7ff fc2b 	bl	8000d1c <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 80014c6:	2000      	movs	r0, #0
 80014c8:	f7ff ff04 	bl	80012d4 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 80014cc:	2c00      	cmp	r4, #0
 80014ce:	d1a6      	bne.n	800141e <TSK_MediumFrequencyTaskM1+0xde>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 80014d0:	4622      	mov	r2, r4
 80014d2:	2120      	movs	r1, #32
 80014d4:	4839      	ldr	r0, [pc, #228]	; (80015bc <TSK_MediumFrequencyTaskM1+0x27c>)
 80014d6:	f006 fec9 	bl	800826c <STM_FaultProcessing>
 80014da:	e7a0      	b.n	800141e <TSK_MediumFrequencyTaskM1+0xde>
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 80014dc:	4b40      	ldr	r3, [pc, #256]	; (80015e0 <TSK_MediumFrequencyTaskM1+0x2a0>)
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	f005 ff2a 	bl	8007338 <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 80014e4:	2000      	movs	r0, #0
 80014e6:	f7ff fda5 	bl	8001034 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 80014ea:	6828      	ldr	r0, [r5, #0]
 80014ec:	f005 fa2a 	bl	8006944 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 80014f0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80014f4:	f7ff ff14 	bl	8001320 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 80014f8:	2108      	movs	r1, #8
 80014fa:	4830      	ldr	r0, [pc, #192]	; (80015bc <TSK_MediumFrequencyTaskM1+0x27c>)
 80014fc:	f006 fed4 	bl	80082a8 <STM_NextState>
    break;
 8001500:	e78d      	b.n	800141e <TSK_MediumFrequencyTaskM1+0xde>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001502:	f7ff ff13 	bl	800132c <TSK_StopPermanencyTimeHasElapsedM1>
 8001506:	2800      	cmp	r0, #0
 8001508:	d089      	beq.n	800141e <TSK_MediumFrequencyTaskM1+0xde>
      STM_NextState( &STM[M1], STOP_IDLE );
 800150a:	2109      	movs	r1, #9
 800150c:	482b      	ldr	r0, [pc, #172]	; (80015bc <TSK_MediumFrequencyTaskM1+0x27c>)
 800150e:	f006 fecb 	bl	80082a8 <STM_NextState>
 8001512:	e784      	b.n	800141e <TSK_MediumFrequencyTaskM1+0xde>
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 8001514:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <TSK_MediumFrequencyTaskM1+0x284>)
 8001516:	492d      	ldr	r1, [pc, #180]	; (80015cc <TSK_MediumFrequencyTaskM1+0x28c>)
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	f006 fde3 	bl	80080e4 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 800151e:	482b      	ldr	r0, [pc, #172]	; (80015cc <TSK_MediumFrequencyTaskM1+0x28c>)
 8001520:	f007 fb4a 	bl	8008bb8 <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 8001524:	2100      	movs	r1, #0
 8001526:	4825      	ldr	r0, [pc, #148]	; (80015bc <TSK_MediumFrequencyTaskM1+0x27c>)
 8001528:	f006 febe 	bl	80082a8 <STM_NextState>
}
 800152c:	e777      	b.n	800141e <TSK_MediumFrequencyTaskM1+0xde>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 800152e:	f7ff feed 	bl	800130c <TSK_ChargeBootCapDelayHasElapsedM1>
 8001532:	2800      	cmp	r0, #0
 8001534:	f43f af73 	beq.w	800141e <TSK_MediumFrequencyTaskM1+0xde>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001538:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <TSK_MediumFrequencyTaskM1+0x2a0>)
 800153a:	2100      	movs	r1, #0
 800153c:	6818      	ldr	r0, [r3, #0]
 800153e:	f005 fcad 	bl	8006e9c <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8001542:	2111      	movs	r1, #17
 8001544:	481d      	ldr	r0, [pc, #116]	; (80015bc <TSK_MediumFrequencyTaskM1+0x27c>)
 8001546:	f006 feaf 	bl	80082a8 <STM_NextState>
 800154a:	e768      	b.n	800141e <TSK_MediumFrequencyTaskM1+0xde>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <TSK_MediumFrequencyTaskM1+0x2a0>)
 800154e:	2101      	movs	r1, #1
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	f005 fca3 	bl	8006e9c <PWMC_CurrentReadingCalibr>
 8001556:	2800      	cmp	r0, #0
 8001558:	f43f af61 	beq.w	800141e <TSK_MediumFrequencyTaskM1+0xde>
      STM_NextState( &STM[M1], CLEAR );
 800155c:	2112      	movs	r1, #18
 800155e:	4817      	ldr	r0, [pc, #92]	; (80015bc <TSK_MediumFrequencyTaskM1+0x27c>)
 8001560:	f006 fea2 	bl	80082a8 <STM_NextState>
 8001564:	e75b      	b.n	800141e <TSK_MediumFrequencyTaskM1+0xde>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001566:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <TSK_MediumFrequencyTaskM1+0x284>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <TSK_MediumFrequencyTaskM1+0x288>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800156a:	6810      	ldr	r0, [r2, #0]
 800156c:	4917      	ldr	r1, [pc, #92]	; (80015cc <TSK_MediumFrequencyTaskM1+0x28c>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001574:	f006 fdb6 	bl	80080e4 <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 8001578:	480e      	ldr	r0, [pc, #56]	; (80015b4 <TSK_MediumFrequencyTaskM1+0x274>)
 800157a:	f007 f8df 	bl	800873c <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 800157e:	480f      	ldr	r0, [pc, #60]	; (80015bc <TSK_MediumFrequencyTaskM1+0x27c>)
 8001580:	2104      	movs	r1, #4
 8001582:	f006 fe91 	bl	80082a8 <STM_NextState>
 8001586:	2800      	cmp	r0, #0
 8001588:	f43f af49 	beq.w	800141e <TSK_MediumFrequencyTaskM1+0xde>
      FOC_Clear( M1 );
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff fd51 	bl	8001034 <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	f005 fe85 	bl	80072a4 <R3_2_SwitchOnPWM>
 800159a:	e740      	b.n	800141e <TSK_MediumFrequencyTaskM1+0xde>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 800159c:	4602      	mov	r2, r0
 800159e:	2110      	movs	r1, #16
 80015a0:	4806      	ldr	r0, [pc, #24]	; (80015bc <TSK_MediumFrequencyTaskM1+0x27c>)
 80015a2:	f006 fe63 	bl	800826c <STM_FaultProcessing>
 80015a6:	e701      	b.n	80013ac <TSK_MediumFrequencyTaskM1+0x6c>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 80015a8:	4602      	mov	r2, r0
 80015aa:	2110      	movs	r1, #16
 80015ac:	4803      	ldr	r0, [pc, #12]	; (80015bc <TSK_MediumFrequencyTaskM1+0x27c>)
 80015ae:	f006 fe5d 	bl	800826c <STM_FaultProcessing>
 80015b2:	e734      	b.n	800141e <TSK_MediumFrequencyTaskM1+0xde>
 80015b4:	20000394 	.word	0x20000394
 80015b8:	20000ad8 	.word	0x20000ad8
 80015bc:	20000acc 	.word	0x20000acc
 80015c0:	20000308 	.word	0x20000308
 80015c4:	20000ae0 	.word	0x20000ae0
 80015c8:	20000a2c 	.word	0x20000a2c
 80015cc:	20000518 	.word	0x20000518
 80015d0:	20000ab0 	.word	0x20000ab0
 80015d4:	20000ad4 	.word	0x20000ad4
 80015d8:	20000a1c 	.word	0x20000a1c
 80015dc:	20000a24 	.word	0x20000a24
 80015e0:	20000a18 	.word	0x20000a18

080015e4 <MC_Scheduler>:
{
 80015e4:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <MC_Scheduler+0x48>)
 80015e8:	781c      	ldrb	r4, [r3, #0]
 80015ea:	2c01      	cmp	r4, #1
 80015ec:	d000      	beq.n	80015f0 <MC_Scheduler+0xc>
}
 80015ee:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 80015f0:	4d0f      	ldr	r5, [pc, #60]	; (8001630 <MC_Scheduler+0x4c>)
 80015f2:	882b      	ldrh	r3, [r5, #0]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	b1ab      	cbz	r3, 8001624 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 80015f8:	882b      	ldrh	r3, [r5, #0]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001600:	4a0c      	ldr	r2, [pc, #48]	; (8001634 <MC_Scheduler+0x50>)
 8001602:	8813      	ldrh	r3, [r2, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	b11b      	cbz	r3, 8001610 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8001608:	8813      	ldrh	r3, [r2, #0]
 800160a:	3b01      	subs	r3, #1
 800160c:	b29b      	uxth	r3, r3
 800160e:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001610:	4a09      	ldr	r2, [pc, #36]	; (8001638 <MC_Scheduler+0x54>)
 8001612:	8813      	ldrh	r3, [r2, #0]
 8001614:	b29b      	uxth	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0e9      	beq.n	80015ee <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 800161a:	8813      	ldrh	r3, [r2, #0]
 800161c:	3b01      	subs	r3, #1
 800161e:	b29b      	uxth	r3, r3
 8001620:	8013      	strh	r3, [r2, #0]
}
 8001622:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8001624:	f7ff fe8c 	bl	8001340 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001628:	802c      	strh	r4, [r5, #0]
 800162a:	e7e9      	b.n	8001600 <MC_Scheduler+0x1c>
 800162c:	200006d4 	.word	0x200006d4
 8001630:	200006d8 	.word	0x200006d8
 8001634:	200006d6 	.word	0x200006d6
 8001638:	200006da 	.word	0x200006da

0800163c <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 800163c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if ( STM[M1].bState == SWITCH_OVER )
 8001640:	4b56      	ldr	r3, [pc, #344]	; (800179c <TSK_HighFrequencyTask+0x160>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001642:	4c57      	ldr	r4, [pc, #348]	; (80017a0 <TSK_HighFrequencyTask+0x164>)
  if ( STM[M1].bState == SWITCH_OVER )
 8001644:	781b      	ldrb	r3, [r3, #0]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001646:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 800164a:	b089      	sub	sp, #36	; 0x24
  if ( STM[M1].bState == SWITCH_OVER )
 800164c:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800164e:	9005      	str	r0, [sp, #20]
  if ( STM[M1].bState == SWITCH_OVER )
 8001650:	f000 8097 	beq.w	8001782 <TSK_HighFrequencyTask+0x146>

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001654:	4b53      	ldr	r3, [pc, #332]	; (80017a4 <TSK_HighFrequencyTask+0x168>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001656:	4f54      	ldr	r7, [pc, #336]	; (80017a8 <TSK_HighFrequencyTask+0x16c>)
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001658:	6818      	ldr	r0, [r3, #0]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800165a:	f8df 8170 	ldr.w	r8, [pc, #368]	; 80017cc <TSK_HighFrequencyTask+0x190>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 800165e:	f006 fd43 	bl	80080e8 <STC_GetSpeedSensor>
 8001662:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001664:	f006 fce8 	bl	8008038 <SPD_GetElAngle>
 8001668:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 800166a:	4628      	mov	r0, r5
 800166c:	f006 fcec 	bl	8008048 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001670:	a902      	add	r1, sp, #8
 8001672:	6838      	ldr	r0, [r7, #0]
 8001674:	f005 fae6 	bl	8006c44 <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 8001678:	f000 ff38 	bl	80024ec <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 800167c:	f000 feec 	bl	8002458 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8001680:	9802      	ldr	r0, [sp, #8]
 8001682:	f7ff fc33 	bl	8000eec <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001686:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8001688:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800168a:	f7ff fc71 	bl	8000f70 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 800168e:	4a47      	ldr	r2, [pc, #284]	; (80017ac <TSK_HighFrequencyTask+0x170>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001690:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001694:	9000      	str	r0, [sp, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001696:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001698:	1ac9      	subs	r1, r1, r3
 800169a:	6810      	ldr	r0, [r2, #0]
 800169c:	f005 f9fa 	bl	8006a94 <PI_Controller>
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80016a0:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  Vqd.d = PI_Controller(pPIDId[M1],
 80016a4:	4b42      	ldr	r3, [pc, #264]	; (80017b0 <TSK_HighFrequencyTask+0x174>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80016a6:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 80016aa:	4681      	mov	r9, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 80016ac:	1a89      	subs	r1, r1, r2
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	f005 f9f0 	bl	8006a94 <PI_Controller>
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80016b4:	4b3f      	ldr	r3, [pc, #252]	; (80017b4 <TSK_HighFrequencyTask+0x178>)
 80016b6:	f8ad 9004 	strh.w	r9, [sp, #4]
 80016ba:	f8ad 0006 	strh.w	r0, [sp, #6]
 80016be:	9901      	ldr	r1, [sp, #4]
 80016c0:	6818      	ldr	r0, [r3, #0]
 80016c2:	f005 f8e3 	bl	800688c <Circle_Limitation>
 80016c6:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80016c8:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80016ca:	fa0f f983 	sxth.w	r9, r3
 80016ce:	141d      	asrs	r5, r3, #16
 80016d0:	9301      	str	r3, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80016d2:	f006 fcb9 	bl	8008048 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80016d6:	4631      	mov	r1, r6
 80016d8:	9801      	ldr	r0, [sp, #4]
 80016da:	f7ff fc8b 	bl	8000ff4 <MCM_Rev_Park>
 80016de:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80016e0:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80016e2:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80016e4:	f005 fab0 	bl	8006c48 <PWMC_SetPhaseVoltage>
 80016e8:	4601      	mov	r1, r0
  FOCVars[M1].Iab = Iab;
 80016ea:	9802      	ldr	r0, [sp, #8]
 80016ec:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80016ee:	9803      	ldr	r0, [sp, #12]
 80016f0:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80016f2:	9800      	ldr	r0, [sp, #0]
 80016f4:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 80016f6:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 80016f8:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 80016fa:	f8a4 9016 	strh.w	r9, [r4, #22]
 80016fe:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 8001700:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001702:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 8001706:	d034      	beq.n	8001772 <TSK_HighFrequencyTask+0x136>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001708:	482b      	ldr	r0, [pc, #172]	; (80017b8 <TSK_HighFrequencyTask+0x17c>)
 800170a:	f006 fc5f 	bl	8007fcc <RUC_FirstAccelerationStageReached>
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800170e:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <TSK_HighFrequencyTask+0x180>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001710:	4604      	mov	r4, r0
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8001712:	f8d8 0000 	ldr.w	r0, [r8]
 8001716:	9006      	str	r0, [sp, #24]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	f005 f8af 	bl	800687c <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 800171e:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001720:	4603      	mov	r3, r0
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001722:	4827      	ldr	r0, [pc, #156]	; (80017c0 <TSK_HighFrequencyTask+0x184>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001724:	f8ad 301c 	strh.w	r3, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001728:	f006 fe46 	bl	80083b8 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 800172c:	4824      	ldr	r0, [pc, #144]	; (80017c0 <TSK_HighFrequencyTask+0x184>)
 800172e:	f006 ffd5 	bl	80086dc <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 8001732:	b164      	cbz	r4, 800174e <TSK_HighFrequencyTask+0x112>
    hState = STM_GetState(&STM[M1]);
 8001734:	4819      	ldr	r0, [pc, #100]	; (800179c <TSK_HighFrequencyTask+0x160>)
 8001736:	f006 fe2b 	bl	8008390 <STM_GetState>
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 800173a:	1f03      	subs	r3, r0, #4
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b01      	cmp	r3, #1
 8001740:	d909      	bls.n	8001756 <TSK_HighFrequencyTask+0x11a>
 8001742:	2813      	cmp	r0, #19
 8001744:	d007      	beq.n	8001756 <TSK_HighFrequencyTask+0x11a>
}
 8001746:	2000      	movs	r0, #0
 8001748:	b009      	add	sp, #36	; 0x24
 800174a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      STO_ResetPLL(&STO_PLL_M1);
 800174e:	481c      	ldr	r0, [pc, #112]	; (80017c0 <TSK_HighFrequencyTask+0x184>)
 8001750:	f007 f8f8 	bl	8008944 <STO_ResetPLL>
 8001754:	e7ee      	b.n	8001734 <TSK_HighFrequencyTask+0xf8>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001756:	481a      	ldr	r0, [pc, #104]	; (80017c0 <TSK_HighFrequencyTask+0x184>)
 8001758:	f006 fc6e 	bl	8008038 <SPD_GetElAngle>
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 800175c:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 800175e:	4603      	mov	r3, r0
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8001760:	4818      	ldr	r0, [pc, #96]	; (80017c4 <TSK_HighFrequencyTask+0x188>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001762:	f8ad 3010 	strh.w	r3, [sp, #16]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8001766:	f007 fa39 	bl	8008bdc <VSS_CalcElAngle>
}
 800176a:	2000      	movs	r0, #0
 800176c:	b009      	add	sp, #36	; 0x24
 800176e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	4809      	ldr	r0, [pc, #36]	; (800179c <TSK_HighFrequencyTask+0x160>)
 8001776:	f006 fd79 	bl	800826c <STM_FaultProcessing>
}
 800177a:	2000      	movs	r0, #0
 800177c:	b009      	add	sp, #36	; 0x24
 800177e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8001782:	4d11      	ldr	r5, [pc, #68]	; (80017c8 <TSK_HighFrequencyTask+0x18c>)
 8001784:	6828      	ldr	r0, [r5, #0]
 8001786:	f006 fb13 	bl	8007db0 <REMNG_RampCompleted>
 800178a:	2800      	cmp	r0, #0
 800178c:	f47f af62 	bne.w	8001654 <TSK_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 8001790:	6828      	ldr	r0, [r5, #0]
 8001792:	f006 faeb 	bl	8007d6c <REMNG_Calc>
 8001796:	8220      	strh	r0, [r4, #16]
 8001798:	e75c      	b.n	8001654 <TSK_HighFrequencyTask+0x18>
 800179a:	bf00      	nop
 800179c:	20000acc 	.word	0x20000acc
 80017a0:	20000a2c 	.word	0x20000a2c
 80017a4:	20000ae0 	.word	0x20000ae0
 80017a8:	20000a18 	.word	0x20000a18
 80017ac:	20000a20 	.word	0x20000a20
 80017b0:	20000adc 	.word	0x20000adc
 80017b4:	20000aa8 	.word	0x20000aa8
 80017b8:	20000308 	.word	0x20000308
 80017bc:	20000aac 	.word	0x20000aac
 80017c0:	20000394 	.word	0x20000394
 80017c4:	20000518 	.word	0x20000518
 80017c8:	20000ad4 	.word	0x20000ad4
 80017cc:	20000a30 	.word	0x20000a30

080017d0 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80017d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80017d4:	4e20      	ldr	r6, [pc, #128]	; (8001858 <TSK_SafetyTask_PWMOFF+0x88>)
{
 80017d6:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80017d8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80017dc:	f005 f908 	bl	80069f0 <NTC_CalcAvTemp>
 80017e0:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80017e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80017e6:	f005 fb83 	bl	8006ef0 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80017ea:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80017ee:	4328      	orrs	r0, r5
 80017f0:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 80017f2:	b334      	cbz	r4, 8001842 <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 80017f4:	4f19      	ldr	r7, [pc, #100]	; (800185c <TSK_SafetyTask_PWMOFF+0x8c>)
 80017f6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80017fa:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 80017fe:	43ea      	mvns	r2, r5
 8001800:	b292      	uxth	r2, r2
 8001802:	4629      	mov	r1, r5
 8001804:	4638      	mov	r0, r7
 8001806:	f006 fd31 	bl	800826c <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 800180a:	4638      	mov	r0, r7
 800180c:	f006 fdc0 	bl	8008390 <STM_GetState>
 8001810:	280a      	cmp	r0, #10
 8001812:	d002      	beq.n	800181a <TSK_SafetyTask_PWMOFF+0x4a>
 8001814:	280b      	cmp	r0, #11
 8001816:	d00e      	beq.n	8001836 <TSK_SafetyTask_PWMOFF+0x66>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800181a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800181e:	f005 fb3b 	bl	8006e98 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001822:	4620      	mov	r0, r4
 8001824:	f7ff fc06 	bl	8001034 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001828:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <TSK_SafetyTask_PWMOFF+0x90>)
 800182a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 800182e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001832:	f005 b887 	b.w	8006944 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001836:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 800183a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800183e:	f005 bb2b 	b.w	8006e98 <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <TSK_SafetyTask_PWMOFF+0x94>)
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	f006 fa53 	bl	8007cf0 <RVBS_CalcAvVbus>
 800184a:	f000 000e 	and.w	r0, r0, #14
 800184e:	4305      	orrs	r5, r0
 8001850:	e7d0      	b.n	80017f4 <TSK_SafetyTask_PWMOFF+0x24>
 8001852:	bf00      	nop
 8001854:	20000a14 	.word	0x20000a14
 8001858:	20000a18 	.word	0x20000a18
 800185c:	20000acc 	.word	0x20000acc
 8001860:	20000ad8 	.word	0x20000ad8
 8001864:	20000aac 	.word	0x20000aac

08001868 <TSK_SafetyTask>:
{
 8001868:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <TSK_SafetyTask+0x1c>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d000      	beq.n	8001874 <TSK_SafetyTask+0xc>
}
 8001872:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff ffab 	bl	80017d0 <TSK_SafetyTask_PWMOFF>
}
 800187a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 800187e:	f000 bdbb 	b.w	80023f8 <RCM_ExecUserConv>
 8001882:	bf00      	nop
 8001884:	200006d4 	.word	0x200006d4

08001888 <MC_RunMotorControlTasks>:
{
 8001888:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MC_RunMotorControlTasks+0x1c>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b903      	cbnz	r3, 8001892 <MC_RunMotorControlTasks+0xa>
}
 8001890:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001892:	f7ff fea7 	bl	80015e4 <MC_Scheduler>
    TSK_SafetyTask();
 8001896:	f7ff ffe7 	bl	8001868 <TSK_SafetyTask>
}
 800189a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 800189e:	f001 b981 	b.w	8002ba4 <UI_Scheduler>
 80018a2:	bf00      	nop
 80018a4:	200006d4 	.word	0x200006d4

080018a8 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80018a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <TSK_HardwareFaultTask+0x18>)
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	f005 fd43 	bl	8007338 <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80018b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 80018b6:	4803      	ldr	r0, [pc, #12]	; (80018c4 <TSK_HardwareFaultTask+0x1c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	2180      	movs	r1, #128	; 0x80
 80018bc:	f006 bcd6 	b.w	800826c <STM_FaultProcessing>
 80018c0:	20000a18 	.word	0x20000a18
 80018c4:	20000acc 	.word	0x20000acc

080018c8 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 80018c8:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018ca:	4a4e      	ldr	r2, [pc, #312]	; (8001a04 <mc_lock_pins+0x13c>)
 80018cc:	494e      	ldr	r1, [pc, #312]	; (8001a08 <mc_lock_pins+0x140>)
 80018ce:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018d0:	2504      	movs	r5, #4
 80018d2:	b092      	sub	sp, #72	; 0x48
 80018d4:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018d6:	61d1      	str	r1, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 80018d8:	69d3      	ldr	r3, [r2, #28]
 80018da:	9311      	str	r3, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018dc:	484b      	ldr	r0, [pc, #300]	; (8001a0c <mc_lock_pins+0x144>)
  (void) temp;
 80018de:	9b11      	ldr	r3, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018e0:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018e2:	2602      	movs	r6, #2
 80018e4:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018e6:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018e8:	69d3      	ldr	r3, [r2, #28]
 80018ea:	9310      	str	r3, [sp, #64]	; 0x40
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018ec:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018f0:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
  (void) temp;
 80018f4:	9f10      	ldr	r7, [sp, #64]	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018f6:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018f8:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018fa:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018fc:	69d3      	ldr	r3, [r2, #28]
 80018fe:	930f      	str	r3, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001900:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001904:	f04f 1401 	mov.w	r4, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001908:	2701      	movs	r7, #1
  (void) temp;
 800190a:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800190e:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001910:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001912:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001914:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8001918:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  (void) temp;
 800191c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001920:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001922:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001924:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001926:	69d4      	ldr	r4, [r2, #28]
 8001928:	940d      	str	r4, [sp, #52]	; 0x34
  (void) temp;
 800192a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800192c:	4c38      	ldr	r4, [pc, #224]	; (8001a10 <mc_lock_pins+0x148>)
 800192e:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001930:	2780      	movs	r7, #128	; 0x80
 8001932:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001934:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001936:	69dc      	ldr	r4, [r3, #28]
 8001938:	940c      	str	r4, [sp, #48]	; 0x30
  (void) temp;
 800193a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800193c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800193e:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001940:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001942:	69d8      	ldr	r0, [r3, #28]
 8001944:	900b      	str	r0, [sp, #44]	; 0x2c
  (void) temp;
 8001946:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001948:	4832      	ldr	r0, [pc, #200]	; (8001a14 <mc_lock_pins+0x14c>)
 800194a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800194c:	2408      	movs	r4, #8
 800194e:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001950:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001952:	69d8      	ldr	r0, [r3, #28]
 8001954:	900a      	str	r0, [sp, #40]	; 0x28
  (void) temp;
 8001956:	980a      	ldr	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001958:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800195a:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800195c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800195e:	69d9      	ldr	r1, [r3, #28]
 8001960:	9109      	str	r1, [sp, #36]	; 0x24
  (void) temp;
 8001962:	9809      	ldr	r0, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001964:	492c      	ldr	r1, [pc, #176]	; (8001a18 <mc_lock_pins+0x150>)
 8001966:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001968:	2040      	movs	r0, #64	; 0x40
 800196a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800196c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800196e:	69d9      	ldr	r1, [r3, #28]
 8001970:	9108      	str	r1, [sp, #32]
  (void) temp;
 8001972:	9808      	ldr	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001974:	4929      	ldr	r1, [pc, #164]	; (8001a1c <mc_lock_pins+0x154>)
 8001976:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001978:	2020      	movs	r0, #32
 800197a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800197c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800197e:	69d9      	ldr	r1, [r3, #28]
 8001980:	9107      	str	r1, [sp, #28]
  (void) temp;
 8001982:	9807      	ldr	r0, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001984:	4926      	ldr	r1, [pc, #152]	; (8001a20 <mc_lock_pins+0x158>)
 8001986:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001988:	f44f 7080 	mov.w	r0, #256	; 0x100
 800198c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800198e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001990:	69d9      	ldr	r1, [r3, #28]
 8001992:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001994:	f44f 7000 	mov.w	r0, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001998:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  (void) temp;
 800199c:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800199e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019a0:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019a2:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80019a4:	69d9      	ldr	r1, [r3, #28]
 80019a6:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019ac:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  (void) temp;
 80019b0:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019b2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019b4:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019b6:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80019b8:	69d9      	ldr	r1, [r3, #28]
 80019ba:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019c0:	f44f 3188 	mov.w	r1, #69632	; 0x11000
  (void) temp;
 80019c4:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019c6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019c8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019ca:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	9303      	str	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019d4:	f44f 33c0 	mov.w	r3, #98304	; 0x18000
  (void) temp;
 80019d8:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019da:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019dc:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019de:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80019e0:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <mc_lock_pins+0x15c>)
  temp = READ_REG(GPIOx->LCKR);
 80019e4:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019ea:	f44f 3290 	mov.w	r2, #73728	; 0x12000
  (void) temp;
 80019ee:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019f0:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019f2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019f4:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	9301      	str	r3, [sp, #4]
  (void) temp;
 80019fa:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 80019fc:	b012      	add	sp, #72	; 0x48
 80019fe:	bcf0      	pop	{r4, r5, r6, r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	48000400 	.word	0x48000400
 8001a08:	00010004 	.word	0x00010004
 8001a0c:	00010002 	.word	0x00010002
 8001a10:	00010080 	.word	0x00010080
 8001a14:	00010008 	.word	0x00010008
 8001a18:	00010040 	.word	0x00010040
 8001a1c:	00010020 	.word	0x00010020
 8001a20:	00010100 	.word	0x00010100
 8001a24:	48000800 	.word	0x48000800

08001a28 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2a:	460c      	mov	r4, r1
 8001a2c:	b08d      	sub	sp, #52	; 0x34
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8001a2e:	2100      	movs	r1, #0
{
 8001a30:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8001a32:	0962      	lsrs	r2, r4, #5
{
 8001a34:	461f      	mov	r7, r3
 8001a36:	4605      	mov	r5, r0
  bool bNoError = false; // Default is error
 8001a38:	f88d 1009 	strb.w	r1, [sp, #9]
  if (bMotorSelection != 0)
 8001a3c:	d122      	bne.n	8001a84 <MCP_ReceivedFrame+0x5c>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8001a3e:	2c12      	cmp	r4, #18
 8001a40:	d814      	bhi.n	8001a6c <MCP_ReceivedFrame+0x44>
 8001a42:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001a46:	0016      	.short	0x0016
 8001a48:	00d1003f 	.word	0x00d1003f
 8001a4c:	00130163 	.word	0x00130163
 8001a50:	01700013 	.word	0x01700013
 8001a54:	01f80241 	.word	0x01f80241
 8001a58:	019d021c 	.word	0x019d021c
 8001a5c:	01cc01b5 	.word	0x01cc01b5
 8001a60:	001301e5 	.word	0x001301e5
 8001a64:	00130013 	.word	0x00130013
 8001a68:	00160013 	.word	0x00160013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8001a72:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001a76:	2301      	movs	r3, #1
 8001a78:	f10d 020e 	add.w	r2, sp, #14
 8001a7c:	21ff      	movs	r1, #255	; 0xff
 8001a7e:	47a0      	blx	r4
    }
  }
}
 8001a80:	b00d      	add	sp, #52	; 0x34
 8001a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8001a84:	3a01      	subs	r2, #1
 8001a86:	f001 f8db 	bl	8002c40 <UI_SetReg>
 8001a8a:	2800      	cmp	r0, #0
 8001a8c:	f000 8234 	beq.w	8001ef8 <MCP_ReceivedFrame+0x4d0>
  switch (Code)
 8001a90:	f004 041f 	and.w	r4, r4, #31
 8001a94:	2c12      	cmp	r4, #18
 8001a96:	f200 8238 	bhi.w	8001f0a <MCP_ReceivedFrame+0x4e2>
 8001a9a:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001a9e:	01ea      	.short	0x01ea
 8001aa0:	00a50013 	.word	0x00a50013
 8001aa4:	02360137 	.word	0x02360137
 8001aa8:	01440236 	.word	0x01440236
 8001aac:	01cc0215 	.word	0x01cc0215
 8001ab0:	017101f0 	.word	0x017101f0
 8001ab4:	01a00189 	.word	0x01a00189
 8001ab8:	023601b9 	.word	0x023601b9
 8001abc:	02360236 	.word	0x02360236
 8001ac0:	01ea0236 	.word	0x01ea0236
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001ac4:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8001ac6:	2305      	movs	r3, #5
 8001ac8:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001acc:	2988      	cmp	r1, #136	; 0x88
 8001ace:	f200 8237 	bhi.w	8001f40 <MCP_ReceivedFrame+0x518>
 8001ad2:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001ad6:	028c      	.short	0x028c
 8001ad8:	02350235 	.word	0x02350235
 8001adc:	02350282 	.word	0x02350282
 8001ae0:	023e023e 	.word	0x023e023e
 8001ae4:	023e023e 	.word	0x023e023e
 8001ae8:	023e023e 	.word	0x023e023e
 8001aec:	023e023e 	.word	0x023e023e
 8001af0:	023e023e 	.word	0x023e023e
 8001af4:	025d023e 	.word	0x025d023e
 8001af8:	0235025d 	.word	0x0235025d
 8001afc:	023e0235 	.word	0x023e0235
 8001b00:	023e023e 	.word	0x023e023e
 8001b04:	023e023e 	.word	0x023e023e
 8001b08:	02350235 	.word	0x02350235
 8001b0c:	01510235 	.word	0x01510235
 8001b10:	02350151 	.word	0x02350151
 8001b14:	02350235 	.word	0x02350235
 8001b18:	02350235 	.word	0x02350235
 8001b1c:	02350235 	.word	0x02350235
 8001b20:	02350235 	.word	0x02350235
 8001b24:	02350235 	.word	0x02350235
 8001b28:	02350235 	.word	0x02350235
 8001b2c:	02350235 	.word	0x02350235
 8001b30:	02350235 	.word	0x02350235
 8001b34:	02350235 	.word	0x02350235
 8001b38:	02350235 	.word	0x02350235
 8001b3c:	02350235 	.word	0x02350235
 8001b40:	02350235 	.word	0x02350235
 8001b44:	02350235 	.word	0x02350235
 8001b48:	02350235 	.word	0x02350235
 8001b4c:	02350235 	.word	0x02350235
 8001b50:	02350235 	.word	0x02350235
 8001b54:	02350235 	.word	0x02350235
 8001b58:	0235023e 	.word	0x0235023e
 8001b5c:	02350235 	.word	0x02350235
 8001b60:	025d0235 	.word	0x025d0235
 8001b64:	025d025d 	.word	0x025d025d
 8001b68:	02350235 	.word	0x02350235
 8001b6c:	02350235 	.word	0x02350235
 8001b70:	02350235 	.word	0x02350235
 8001b74:	0235023e 	.word	0x0235023e
 8001b78:	02350235 	.word	0x02350235
 8001b7c:	023e023e 	.word	0x023e023e
 8001b80:	023e023e 	.word	0x023e023e
 8001b84:	023e023e 	.word	0x023e023e
 8001b88:	0235023e 	.word	0x0235023e
 8001b8c:	0235025d 	.word	0x0235025d
 8001b90:	02350235 	.word	0x02350235
 8001b94:	02350235 	.word	0x02350235
 8001b98:	0235023e 	.word	0x0235023e
 8001b9c:	023e0235 	.word	0x023e0235
 8001ba0:	0235023e 	.word	0x0235023e
 8001ba4:	02350235 	.word	0x02350235
 8001ba8:	02350235 	.word	0x02350235
 8001bac:	02350235 	.word	0x02350235
 8001bb0:	02350235 	.word	0x02350235
 8001bb4:	02350235 	.word	0x02350235
 8001bb8:	02350235 	.word	0x02350235
 8001bbc:	02820235 	.word	0x02820235
 8001bc0:	025d025d 	.word	0x025d025d
 8001bc4:	025d025d 	.word	0x025d025d
 8001bc8:	0235025d 	.word	0x0235025d
 8001bcc:	02350235 	.word	0x02350235
 8001bd0:	025d025d 	.word	0x025d025d
 8001bd4:	02350235 	.word	0x02350235
 8001bd8:	02350235 	.word	0x02350235
 8001bdc:	02350235 	.word	0x02350235
 8001be0:	023e0235 	.word	0x023e0235
 8001be4:	023e023e 	.word	0x023e023e
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001be8:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8001bea:	2303      	movs	r3, #3
 8001bec:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001bf0:	2988      	cmp	r1, #136	; 0x88
 8001bf2:	f200 813e 	bhi.w	8001e72 <MCP_ReceivedFrame+0x44a>
 8001bf6:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001bfa:	01de      	.short	0x01de
 8001bfc:	01de01b9 	.word	0x01de01b9
 8001c00:	01b901de 	.word	0x01b901de
 8001c04:	01910191 	.word	0x01910191
 8001c08:	01910191 	.word	0x01910191
 8001c0c:	01910191 	.word	0x01910191
 8001c10:	01910191 	.word	0x01910191
 8001c14:	01910191 	.word	0x01910191
 8001c18:	01910191 	.word	0x01910191
 8001c1c:	01910191 	.word	0x01910191
 8001c20:	01910191 	.word	0x01910191
 8001c24:	01910191 	.word	0x01910191
 8001c28:	01910191 	.word	0x01910191
 8001c2c:	01910191 	.word	0x01910191
 8001c30:	013c0191 	.word	0x013c0191
 8001c34:	01b9013c 	.word	0x01b9013c
 8001c38:	01910191 	.word	0x01910191
 8001c3c:	01de0191 	.word	0x01de0191
 8001c40:	013c013c 	.word	0x013c013c
 8001c44:	013c013c 	.word	0x013c013c
 8001c48:	013c013c 	.word	0x013c013c
 8001c4c:	013c013c 	.word	0x013c013c
 8001c50:	013c013c 	.word	0x013c013c
 8001c54:	013c013c 	.word	0x013c013c
 8001c58:	013c013c 	.word	0x013c013c
 8001c5c:	013c013c 	.word	0x013c013c
 8001c60:	013c013c 	.word	0x013c013c
 8001c64:	013c013c 	.word	0x013c013c
 8001c68:	013c013c 	.word	0x013c013c
 8001c6c:	013c013c 	.word	0x013c013c
 8001c70:	013c013c 	.word	0x013c013c
 8001c74:	013c013c 	.word	0x013c013c
 8001c78:	013c013c 	.word	0x013c013c
 8001c7c:	013c0191 	.word	0x013c0191
 8001c80:	013c013c 	.word	0x013c013c
 8001c84:	01b9013c 	.word	0x01b9013c
 8001c88:	01b901b9 	.word	0x01b901b9
 8001c8c:	01910191 	.word	0x01910191
 8001c90:	01910191 	.word	0x01910191
 8001c94:	01b901de 	.word	0x01b901de
 8001c98:	01910191 	.word	0x01910191
 8001c9c:	01910191 	.word	0x01910191
 8001ca0:	01910191 	.word	0x01910191
 8001ca4:	01910191 	.word	0x01910191
 8001ca8:	01910191 	.word	0x01910191
 8001cac:	01de0191 	.word	0x01de0191
 8001cb0:	013c01b9 	.word	0x013c01b9
 8001cb4:	01910191 	.word	0x01910191
 8001cb8:	01910191 	.word	0x01910191
 8001cbc:	013c0191 	.word	0x013c0191
 8001cc0:	0191013c 	.word	0x0191013c
 8001cc4:	01de0191 	.word	0x01de0191
 8001cc8:	01b901de 	.word	0x01b901de
 8001ccc:	01b901b9 	.word	0x01b901b9
 8001cd0:	01b901b9 	.word	0x01b901b9
 8001cd4:	019101de 	.word	0x019101de
 8001cd8:	01b90191 	.word	0x01b90191
 8001cdc:	0191013c 	.word	0x0191013c
 8001ce0:	01de0191 	.word	0x01de0191
 8001ce4:	01b901b9 	.word	0x01b901b9
 8001ce8:	01b901b9 	.word	0x01b901b9
 8001cec:	01b901b9 	.word	0x01b901b9
 8001cf0:	01b901b9 	.word	0x01b901b9
 8001cf4:	01b901b9 	.word	0x01b901b9
 8001cf8:	01de01b9 	.word	0x01de01b9
 8001cfc:	01de013c 	.word	0x01de013c
 8001d00:	01b901b9 	.word	0x01b901b9
 8001d04:	019101b9 	.word	0x019101b9
 8001d08:	01910191 	.word	0x01910191
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001d0c:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001d0e:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001d10:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001d14:	4628      	mov	r0, r5
 8001d16:	f001 fbfb 	bl	8003510 <UI_ExecCmd>
 8001d1a:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001d1e:	2800      	cmp	r0, #0
 8001d20:	f43f aea7 	beq.w	8001a72 <MCP_ReceivedFrame+0x4a>
 8001d24:	e03c      	b.n	8001da0 <MCP_ReceivedFrame+0x378>
 8001d26:	ac04      	add	r4, sp, #16
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	f007 f86b 	bl	8008e08 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001d32:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 8001d36:	f10d 0012 	add.w	r0, sp, #18
 8001d3a:	1e71      	subs	r1, r6, #1
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e005      	b.n	8001d4c <MCP_ReceivedFrame+0x324>
 8001d40:	3301      	adds	r3, #1
 8001d42:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001d44:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001d48:	f000 815c 	beq.w	8002004 <MCP_ReceivedFrame+0x5dc>
 8001d4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001d50:	2a09      	cmp	r2, #9
 8001d52:	d1f5      	bne.n	8001d40 <MCP_ReceivedFrame+0x318>
 8001d54:	1d5a      	adds	r2, r3, #5
 8001d56:	1dd9      	adds	r1, r3, #7
 8001d58:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001d5a:	5cb2      	ldrb	r2, [r6, r2]
 8001d5c:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001d60:	5c72      	ldrb	r2, [r6, r1]
 8001d62:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001d66:	5cf3      	ldrb	r3, [r6, r3]
 8001d68:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001d6c:	4622      	mov	r2, r4
 8001d6e:	2320      	movs	r3, #32
 8001d70:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001d74:	21f0      	movs	r1, #240	; 0xf0
 8001d76:	47a0      	blx	r4
      bNoError = true;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001d7e:	e00f      	b.n	8001da0 <MCP_ReceivedFrame+0x378>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001d80:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001d82:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001d84:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001d86:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001d88:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001d8c:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001d90:	b212      	sxth	r2, r2
 8001d92:	b209      	sxth	r1, r1
 8001d94:	4628      	mov	r0, r5
 8001d96:	f001 fc4d 	bl	8003634 <UI_SetCurrentReferences>
      bNoError = true;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	f88d 3009 	strb.w	r3, [sp, #9]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8001da0:	2300      	movs	r3, #0
 8001da2:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001da6:	461a      	mov	r2, r3
 8001da8:	21f0      	movs	r1, #240	; 0xf0
 8001daa:	47a0      	blx	r4
}
 8001dac:	b00d      	add	sp, #52	; 0x34
 8001dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001db0:	4c96      	ldr	r4, [pc, #600]	; (800200c <MCP_ReceivedFrame+0x5e4>)
      stepList.data = buffer;
 8001db2:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001db4:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001db6:	4621      	mov	r1, r4
 8001db8:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8001dba:	f88d 7014 	strb.w	r7, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001dbe:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001dc2:	f001 fc47 	bl	8003654 <UI_GetMPInfo>
 8001dc6:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 8001dca:	2800      	cmp	r0, #0
 8001dcc:	f43f ae51 	beq.w	8001a72 <MCP_ReceivedFrame+0x4a>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001dd0:	e9d5 0606 	ldrd	r0, r6, [r5, #24]
 8001dd4:	7923      	ldrb	r3, [r4, #4]
 8001dd6:	6822      	ldr	r2, [r4, #0]
 8001dd8:	21f0      	movs	r1, #240	; 0xf0
 8001dda:	47b0      	blx	r6
  if (RequireAck)
 8001ddc:	e650      	b.n	8001a80 <MCP_ReceivedFrame+0x58>
 8001dde:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8001de2:	ac04      	add	r4, sp, #16
 8001de4:	3b01      	subs	r3, #1
 8001de6:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001de8:	2000      	movs	r0, #0
 8001dea:	e004      	b.n	8001df6 <MCP_ReceivedFrame+0x3ce>
 8001dec:	3001      	adds	r0, #1
 8001dee:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8001df0:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001df4:	d0ba      	beq.n	8001d6c <MCP_ReceivedFrame+0x344>
 8001df6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001dfa:	b2c6      	uxtb	r6, r0
 8001dfc:	2900      	cmp	r1, #0
 8001dfe:	d1f5      	bne.n	8001dec <MCP_ReceivedFrame+0x3c4>
        outBuff[i] = 0;
 8001e00:	f1c6 021f 	rsb	r2, r6, #31
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	3201      	adds	r2, #1
 8001e08:	4420      	add	r0, r4
 8001e0a:	f006 fffd 	bl	8008e08 <memset>
 8001e0e:	e7ad      	b.n	8001d6c <MCP_ReceivedFrame+0x344>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001e10:	7970      	ldrb	r0, [r6, #5]
 8001e12:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001e14:	7873      	ldrb	r3, [r6, #1]
 8001e16:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001e18:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001e1c:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001e20:	b292      	uxth	r2, r2
 8001e22:	b209      	sxth	r1, r1
 8001e24:	4628      	mov	r0, r5
 8001e26:	f001 fbc1 	bl	80035ac <UI_ExecTorqueRamp>
 8001e2a:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	f43f ae1f 	beq.w	8001a72 <MCP_ReceivedFrame+0x4a>
 8001e34:	e7b4      	b.n	8001da0 <MCP_ReceivedFrame+0x378>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8001e36:	f10d 030e 	add.w	r3, sp, #14
 8001e3a:	7831      	ldrb	r1, [r6, #0]
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	f10d 020a 	add.w	r2, sp, #10
 8001e42:	ab03      	add	r3, sp, #12
 8001e44:	4628      	mov	r0, r5
 8001e46:	f001 fbbb 	bl	80035c0 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001e4a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001e4e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
      outBuff[6] = (uint8_t)(Durationms);
 8001e52:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001e56:	f8ad 1014 	strh.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001e5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001e5e:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8001e60:	9304      	str	r3, [sp, #16]
      outBuff[6] = (uint8_t)(Durationms);
 8001e62:	f8ad 2016 	strh.w	r2, [sp, #22]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001e66:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001e6a:	2308      	movs	r3, #8
 8001e6c:	aa04      	add	r2, sp, #16
 8001e6e:	21f0      	movs	r1, #240	; 0xf0
 8001e70:	47a0      	blx	r4
  if (RequireAck)
 8001e72:	f89d 0009 	ldrb.w	r0, [sp, #9]
    if (bNoError)
 8001e76:	2800      	cmp	r0, #0
 8001e78:	f43f adfb 	beq.w	8001a72 <MCP_ReceivedFrame+0x4a>
 8001e7c:	e790      	b.n	8001da0 <MCP_ReceivedFrame+0x378>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001e7e:	78b1      	ldrb	r1, [r6, #2]
 8001e80:	7873      	ldrb	r3, [r6, #1]
 8001e82:	78f2      	ldrb	r2, [r6, #3]
 8001e84:	7934      	ldrb	r4, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001e86:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001e88:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001e8a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8001e8e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001e92:	4a5f      	ldr	r2, [pc, #380]	; (8002010 <MCP_ReceivedFrame+0x5e8>)
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001e94:	79b1      	ldrb	r1, [r6, #6]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001e96:	eb03 6304 	add.w	r3, r3, r4, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001e9a:	fb82 4203 	smull	r4, r2, r2, r3
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001e9e:	79f4      	ldrb	r4, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001ea0:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001ea4:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001ea8:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001eaa:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001eae:	7831      	ldrb	r1, [r6, #0]
 8001eb0:	9000      	str	r0, [sp, #0]
 8001eb2:	b21b      	sxth	r3, r3
 8001eb4:	b292      	uxth	r2, r2
 8001eb6:	4628      	mov	r0, r5
 8001eb8:	f001 fba0 	bl	80035fc <UI_SetRevupData>
 8001ebc:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	f43f add6 	beq.w	8001a72 <MCP_ReceivedFrame+0x4a>
 8001ec6:	e76b      	b.n	8001da0 <MCP_ReceivedFrame+0x378>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001ec8:	7877      	ldrb	r7, [r6, #1]
 8001eca:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001ecc:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001ece:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001ed0:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001ed2:	78f1      	ldrb	r1, [r6, #3]
 8001ed4:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8001ed8:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001edc:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001ee0:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8001ee4:	b292      	uxth	r2, r2
 8001ee6:	4628      	mov	r0, r5
 8001ee8:	f001 fb4e 	bl	8003588 <UI_ExecSpeedRamp>
 8001eec:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001ef0:	2800      	cmp	r0, #0
 8001ef2:	f43f adbe 	beq.w	8001a72 <MCP_ReceivedFrame+0x4a>
 8001ef6:	e753      	b.n	8001da0 <MCP_ReceivedFrame+0x378>
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8001ef8:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001efc:	230b      	movs	r3, #11
 8001efe:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001f02:	2800      	cmp	r0, #0
 8001f04:	f43f adb5 	beq.w	8001a72 <MCP_ReceivedFrame+0x4a>
 8001f08:	e74a      	b.n	8001da0 <MCP_ReceivedFrame+0x378>
 8001f0a:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001f14:	2800      	cmp	r0, #0
 8001f16:	f43f adac 	beq.w	8001a72 <MCP_ReceivedFrame+0x4a>
 8001f1a:	e741      	b.n	8001da0 <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001f1c:	f10d 0209 	add.w	r2, sp, #9
 8001f20:	4628      	mov	r0, r5
 8001f22:	f000 fffb 	bl	8002f1c <UI_GetReg>
          if ( bNoError == true )
 8001f26:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001f2a:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f43f ada0 	beq.w	8001a72 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001f32:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001f36:	2302      	movs	r3, #2
 8001f38:	aa04      	add	r2, sp, #16
 8001f3a:	21f0      	movs	r1, #240	; 0xf0
 8001f3c:	47a0      	blx	r4
  if (RequireAck)
 8001f3e:	e59f      	b.n	8001a80 <MCP_ReceivedFrame+0x58>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001f40:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001f44:	2302      	movs	r3, #2
 8001f46:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001f4a:	2800      	cmp	r0, #0
 8001f4c:	f43f ad91 	beq.w	8001a72 <MCP_ReceivedFrame+0x4a>
 8001f50:	e726      	b.n	8001da0 <MCP_ReceivedFrame+0x378>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001f52:	78b2      	ldrb	r2, [r6, #2]
 8001f54:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001f56:	4628      	mov	r0, r5
 8001f58:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8001f5c:	f000 fe70 	bl	8002c40 <UI_SetReg>
 8001f60:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001f64:	2800      	cmp	r0, #0
 8001f66:	f43f ad84 	beq.w	8001a72 <MCP_ReceivedFrame+0x4a>
 8001f6a:	e719      	b.n	8001da0 <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001f6c:	f10d 0209 	add.w	r2, sp, #9
 8001f70:	4628      	mov	r0, r5
 8001f72:	f000 ffd3 	bl	8002f1c <UI_GetReg>
          if ( bNoError == true )
 8001f76:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001f7a:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f43f ad78 	beq.w	8001a72 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001f82:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001f86:	2304      	movs	r3, #4
 8001f88:	aa04      	add	r2, sp, #16
 8001f8a:	21f0      	movs	r1, #240	; 0xf0
 8001f8c:	47a0      	blx	r4
  if (RequireAck)
 8001f8e:	e577      	b.n	8001a80 <MCP_ReceivedFrame+0x58>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001f90:	78b4      	ldrb	r4, [r6, #2]
 8001f92:	7873      	ldrb	r3, [r6, #1]
 8001f94:	78f0      	ldrb	r0, [r6, #3]
 8001f96:	7932      	ldrb	r2, [r6, #4]
 8001f98:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8001f9c:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001fa0:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8001fa4:	4628      	mov	r0, r5
 8001fa6:	f000 fe4b 	bl	8002c40 <UI_SetReg>
 8001faa:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001fae:	2800      	cmp	r0, #0
 8001fb0:	f43f ad5f 	beq.w	8001a72 <MCP_ReceivedFrame+0x4a>
 8001fb4:	e6f4      	b.n	8001da0 <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001fb6:	f10d 0209 	add.w	r2, sp, #9
 8001fba:	4628      	mov	r0, r5
 8001fbc:	f000 ffae 	bl	8002f1c <UI_GetReg>
           if ( bNoError == true )
 8001fc0:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001fc4:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f43f ad53 	beq.w	8001a72 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001fcc:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	aa04      	add	r2, sp, #16
 8001fd4:	21f0      	movs	r1, #240	; 0xf0
 8001fd6:	47a0      	blx	r4
  if (RequireAck)
 8001fd8:	e552      	b.n	8001a80 <MCP_ReceivedFrame+0x58>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001fda:	7872      	ldrb	r2, [r6, #1]
 8001fdc:	4628      	mov	r0, r5
 8001fde:	f000 fe2f 	bl	8002c40 <UI_SetReg>
 8001fe2:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001fe6:	2800      	cmp	r0, #0
 8001fe8:	f43f ad43 	beq.w	8001a72 <MCP_ReceivedFrame+0x4a>
 8001fec:	e6d8      	b.n	8001da0 <MCP_ReceivedFrame+0x378>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001fee:	7872      	ldrb	r2, [r6, #1]
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4628      	mov	r0, r5
 8001ff4:	f000 fe24 	bl	8002c40 <UI_SetReg>
 8001ff8:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	f43f ad38 	beq.w	8001a72 <MCP_ReceivedFrame+0x4a>
 8002002:	e6cd      	b.n	8001da0 <MCP_ReceivedFrame+0x378>
 8002004:	2326      	movs	r3, #38	; 0x26
 8002006:	2124      	movs	r1, #36	; 0x24
 8002008:	2222      	movs	r2, #34	; 0x22
 800200a:	e6a6      	b.n	8001d5a <MCP_ReceivedFrame+0x332>
 800200c:	200006dc 	.word	0x200006dc
 8002010:	2aaaaaab 	.word	0x2aaaaaab

08002014 <MCP_WaitNextFrame>:
{
 8002014:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8002016:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002018:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 800201a:	6980      	ldr	r0, [r0, #24]
 800201c:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8002024:	69a0      	ldr	r0, [r4, #24]
 8002026:	6a23      	ldr	r3, [r4, #32]
}
 8002028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 800202c:	4718      	bx	r3
 800202e:	bf00      	nop

08002030 <MCP_Init>:
{
 8002030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002032:	b083      	sub	sp, #12
 8002034:	4604      	mov	r4, r0
  FCP_SetClient( pFCP, pHandle,
 8002036:	4f0b      	ldr	r7, [pc, #44]	; (8002064 <MCP_Init+0x34>)
{
 8002038:	4608      	mov	r0, r1
 800203a:	9909      	ldr	r1, [sp, #36]	; 0x24
  pHandle->pFCP = pFCP;
 800203c:	61a0      	str	r0, [r4, #24]
  pHandle->s_fwVer = s_fwVer;
 800203e:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
{
 8002042:	4616      	mov	r6, r2
 8002044:	461d      	mov	r5, r3
  FCP_SetClient( pFCP, pHandle,
 8002046:	4a08      	ldr	r2, [pc, #32]	; (8002068 <MCP_Init+0x38>)
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <MCP_Init+0x3c>)
 800204a:	9700      	str	r7, [sp, #0]
 800204c:	4621      	mov	r1, r4
{
 800204e:	9f08      	ldr	r7, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 8002050:	f004 fc5a 	bl	8006908 <FCP_SetClient>
  pHandle->fFcpReceive = fFcpReceive;
 8002054:	e9c4 6507 	strd	r6, r5, [r4, #28]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8002058:	6267      	str	r7, [r4, #36]	; 0x24
  MCP_WaitNextFrame(pHandle);
 800205a:	4620      	mov	r0, r4
 800205c:	f7ff ffda 	bl	8002014 <MCP_WaitNextFrame>
}
 8002060:	b003      	add	sp, #12
 8002062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002064:	08002071 	.word	0x08002071
 8002068:	08002079 	.word	0x08002079
 800206c:	08001a29 	.word	0x08001a29

08002070 <MCP_OnTimeOut>:
{
 8002070:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8002072:	f7ff ffcf 	bl	8002014 <MCP_WaitNextFrame>
}
 8002076:	bd08      	pop	{r3, pc}

08002078 <MCP_SentFrame>:
{
 8002078:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 800207a:	f7ff ffcb 	bl	8002014 <MCP_WaitNextFrame>
}
 800207e:	bd08      	pop	{r3, pc}

08002080 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002080:	b530      	push	{r4, r5, lr}
 8002082:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8002084:	f003 fa00 	bl	8005488 <HAL_RCC_GetHCLKFreq>
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 800208a:	4d0c      	ldr	r5, [pc, #48]	; (80020bc <MX_MotorControl_Init+0x3c>)
 800208c:	4c0c      	ldr	r4, [pc, #48]	; (80020c0 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 800208e:	fba3 3000 	umull	r3, r0, r3, r0
 8002092:	09c0      	lsrs	r0, r0, #7
 8002094:	f002 fb34 	bl	8004700 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8002098:	4629      	mov	r1, r5
 800209a:	4620      	mov	r0, r4
 800209c:	f7ff f80e 	bl	80010bc <MCboot>
  mc_lock_pins();
 80020a0:	f7ff fc12 	bl	80018c8 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <MX_MotorControl_Init+0x44>)
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	4807      	ldr	r0, [pc, #28]	; (80020c8 <MX_MotorControl_Init+0x48>)
 80020aa:	462b      	mov	r3, r5
 80020ac:	4622      	mov	r2, r4
 80020ae:	2101      	movs	r1, #1
 80020b0:	f000 fd38 	bl	8002b24 <UI_TaskInit>
}
 80020b4:	b003      	add	sp, #12
 80020b6:	bd30      	pop	{r4, r5, pc}
 80020b8:	10624dd3 	.word	0x10624dd3
 80020bc:	20000ae8 	.word	0x20000ae8
 80020c0:	20000ae4 	.word	0x20000ae4
 80020c4:	08008f60 	.word	0x08008f60
 80020c8:	2000068c 	.word	0x2000068c

080020cc <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80020cc:	4a65      	ldr	r2, [pc, #404]	; (8002264 <RCM_RegisterRegConv+0x198>)
 80020ce:	6813      	ldr	r3, [r2, #0]
{
 80020d0:	b470      	push	{r4, r5, r6}
 80020d2:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d07e      	beq.n	80021d6 <RCM_RegisterRegConv+0x10a>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80020d8:	7904      	ldrb	r4, [r0, #4]
 80020da:	7918      	ldrb	r0, [r3, #4]
 80020dc:	4284      	cmp	r4, r0
 80020de:	d01e      	beq.n	800211e <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80020e0:	6855      	ldr	r5, [r2, #4]
 80020e2:	2d00      	cmp	r5, #0
 80020e4:	f000 808b 	beq.w	80021fe <RCM_RegisterRegConv+0x132>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80020e8:	792b      	ldrb	r3, [r5, #4]
 80020ea:	42a3      	cmp	r3, r4
  uint8_t handle=255;
 80020ec:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80020f0:	d079      	beq.n	80021e6 <RCM_RegisterRegConv+0x11a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80020f2:	6893      	ldr	r3, [r2, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80a2 	beq.w	800223e <RCM_RegisterRegConv+0x172>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80020fa:	791d      	ldrb	r5, [r3, #4]
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	d078      	beq.n	80021f2 <RCM_RegisterRegConv+0x126>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002100:	68d3      	ldr	r3, [r2, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 80a0 	beq.w	8002248 <RCM_RegisterRegConv+0x17c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002108:	791d      	ldrb	r5, [r3, #4]
 800210a:	42a5      	cmp	r5, r4
 800210c:	f000 8082 	beq.w	8002214 <RCM_RegisterRegConv+0x148>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8002110:	2803      	cmp	r0, #3
 8002112:	bf88      	it	hi
 8002114:	20ff      	movhi	r0, #255	; 0xff
 8002116:	f240 80a0 	bls.w	800225a <RCM_RegisterRegConv+0x18e>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 800211a:	bc70      	pop	{r4, r5, r6}
 800211c:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	680b      	ldr	r3, [r1, #0]
 8002122:	4283      	cmp	r3, r0
 8002124:	d1dc      	bne.n	80020e0 <RCM_RegisterRegConv+0x14>
  uint8_t i=0;
 8002126:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002128:	689c      	ldr	r4, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800212a:	4d4f      	ldr	r5, [pc, #316]	; (8002268 <RCM_RegisterRegConv+0x19c>)
      RCM_handle_array [handle] = regConv;
 800212c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002130:	2200      	movs	r2, #0
 8002132:	f845 2030 	str.w	r2, [r5, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8002136:	07e5      	lsls	r5, r4, #31
 8002138:	d422      	bmi.n	8002180 <RCM_RegisterRegConv+0xb4>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800213a:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800213c:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800213e:	f022 0204 	bic.w	r2, r2, #4
 8002142:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002144:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8002146:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8002148:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800214a:	f022 0220 	bic.w	r2, r2, #32
 800214e:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8002150:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002158:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800215c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002160:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	2a00      	cmp	r2, #0
 8002166:	dbfc      	blt.n	8002162 <RCM_RegisterRegConv+0x96>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002168:	681a      	ldr	r2, [r3, #0]
        while (  LL_ADC_IsActiveFlag_ADRDY( regConv->regADC ) == 0)
 800216a:	07d4      	lsls	r4, r2, #31
 800216c:	d408      	bmi.n	8002180 <RCM_RegisterRegConv+0xb4>
  MODIFY_REG(ADCx->CR,
 800216e:	4c3f      	ldr	r4, [pc, #252]	; (800226c <RCM_RegisterRegConv+0x1a0>)
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	4022      	ands	r2, r4
 8002174:	f042 0201 	orr.w	r2, r2, #1
 8002178:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	07d2      	lsls	r2, r2, #31
 800217e:	d5f7      	bpl.n	8002170 <RCM_RegisterRegConv+0xa4>
      RCM_NoInj_array [handle].enable = false;
 8002180:	4d3b      	ldr	r5, [pc, #236]	; (8002270 <RCM_RegisterRegConv+0x1a4>)
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002182:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8002184:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8002188:	0056      	lsls	r6, r2, #1
 800218a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 800218e:	f024 040f 	bic.w	r4, r4, #15
      RCM_NoInj_array [handle].next = handle;
 8002192:	7150      	strb	r0, [r2, #5]
      RCM_NoInj_array [handle].prev = handle;
 8002194:	7110      	strb	r0, [r2, #4]
      RCM_NoInj_array [handle].enable = false;
 8002196:	2200      	movs	r2, #0
 8002198:	55aa      	strb	r2, [r5, r6]
 800219a:	631c      	str	r4, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 800219c:	790c      	ldrb	r4, [r1, #4]
 800219e:	2c09      	cmp	r4, #9
 80021a0:	d83f      	bhi.n	8002222 <RCM_RegisterRegConv+0x156>
 80021a2:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80021a6:	06a2      	lsls	r2, r4, #26
 80021a8:	2501      	movs	r5, #1
 80021aa:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 80021ae:	fa05 f404 	lsl.w	r4, r5, r4
 80021b2:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80021b4:	0dd4      	lsrs	r4, r2, #23
 80021b6:	f004 0404 	and.w	r4, r4, #4
 80021ba:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 80021bc:	688d      	ldr	r5, [r1, #8]
 80021be:	58e1      	ldr	r1, [r4, r3]
 80021c0:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80021c4:	2607      	movs	r6, #7
 80021c6:	4096      	lsls	r6, r2
 80021c8:	4095      	lsls	r5, r2
 80021ca:	ea21 0206 	bic.w	r2, r1, r6
 80021ce:	432a      	orrs	r2, r5
 80021d0:	50e2      	str	r2, [r4, r3]
}
 80021d2:	bc70      	pop	{r4, r5, r6}
 80021d4:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80021d6:	6855      	ldr	r5, [r2, #4]
 80021d8:	2d00      	cmp	r5, #0
 80021da:	d039      	beq.n	8002250 <RCM_RegisterRegConv+0x184>
 80021dc:	7904      	ldrb	r4, [r0, #4]
  uint8_t i=0;
 80021de:	4618      	mov	r0, r3
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80021e0:	792b      	ldrb	r3, [r5, #4]
 80021e2:	42a3      	cmp	r3, r4
 80021e4:	d185      	bne.n	80020f2 <RCM_RegisterRegConv+0x26>
 80021e6:	682d      	ldr	r5, [r5, #0]
 80021e8:	680b      	ldr	r3, [r1, #0]
 80021ea:	429d      	cmp	r5, r3
 80021ec:	d181      	bne.n	80020f2 <RCM_RegisterRegConv+0x26>
 80021ee:	2001      	movs	r0, #1
 80021f0:	e79a      	b.n	8002128 <RCM_RegisterRegConv+0x5c>
 80021f2:	681d      	ldr	r5, [r3, #0]
 80021f4:	680b      	ldr	r3, [r1, #0]
 80021f6:	429d      	cmp	r5, r3
 80021f8:	d182      	bne.n	8002100 <RCM_RegisterRegConv+0x34>
      i++;
 80021fa:	2002      	movs	r0, #2
 80021fc:	e794      	b.n	8002128 <RCM_RegisterRegConv+0x5c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80021fe:	6893      	ldr	r3, [r2, #8]
 8002200:	2001      	movs	r0, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	f47f af79 	bne.w	80020fa <RCM_RegisterRegConv+0x2e>
 8002208:	68d3      	ldr	r3, [r2, #12]
 800220a:	b333      	cbz	r3, 800225a <RCM_RegisterRegConv+0x18e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800220c:	791d      	ldrb	r5, [r3, #4]
 800220e:	790c      	ldrb	r4, [r1, #4]
 8002210:	42a5      	cmp	r5, r4
 8002212:	d122      	bne.n	800225a <RCM_RegisterRegConv+0x18e>
 8002214:	681c      	ldr	r4, [r3, #0]
 8002216:	680b      	ldr	r3, [r1, #0]
 8002218:	429c      	cmp	r4, r3
 800221a:	f47f af79 	bne.w	8002110 <RCM_RegisterRegConv+0x44>
      i++;
 800221e:	2003      	movs	r0, #3
 8002220:	e782      	b.n	8002128 <RCM_RegisterRegConv+0x5c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002222:	2503      	movs	r5, #3
 8002224:	f06f 061d 	mvn.w	r6, #29
 8002228:	2201      	movs	r2, #1
 800222a:	fb15 6504 	smlabb	r5, r5, r4, r6
 800222e:	40a2      	lsls	r2, r4
 8002230:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 8002234:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 8002238:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800223c:	e7ba      	b.n	80021b4 <RCM_RegisterRegConv+0xe8>
      i++;
 800223e:	2805      	cmp	r0, #5
 8002240:	bf34      	ite	cc
 8002242:	2000      	movcc	r0, #0
 8002244:	2002      	movcs	r0, #2
 8002246:	e7df      	b.n	8002208 <RCM_RegisterRegConv+0x13c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002248:	2804      	cmp	r0, #4
 800224a:	680b      	ldr	r3, [r1, #0]
 800224c:	d8e7      	bhi.n	800221e <RCM_RegisterRegConv+0x152>
 800224e:	e76b      	b.n	8002128 <RCM_RegisterRegConv+0x5c>
 8002250:	6893      	ldr	r3, [r2, #8]
 8002252:	b123      	cbz	r3, 800225e <RCM_RegisterRegConv+0x192>
 8002254:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 8002256:	4628      	mov	r0, r5
 8002258:	e74f      	b.n	80020fa <RCM_RegisterRegConv+0x2e>
 800225a:	680b      	ldr	r3, [r1, #0]
 800225c:	e764      	b.n	8002128 <RCM_RegisterRegConv+0x5c>
 800225e:	4618      	mov	r0, r3
 8002260:	e7d2      	b.n	8002208 <RCM_RegisterRegConv+0x13c>
 8002262:	bf00      	nop
 8002264:	20000b2c 	.word	0x20000b2c
 8002268:	20000b08 	.word	0x20000b08
 800226c:	7fffffc0 	.word	0x7fffffc0
 8002270:	20000af0 	.word	0x20000af0

08002274 <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 8002274:	4b5c      	ldr	r3, [pc, #368]	; (80023e8 <RCM_ExecRegularConv+0x174>)
 8002276:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 800227a:	b4f0      	push	{r4, r5, r6, r7}
  if (RCM_NoInj_array [handle].enable == false)
 800227c:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8002280:	0044      	lsls	r4, r0, #1
 8002282:	2a00      	cmp	r2, #0
 8002284:	d136      	bne.n	80022f4 <RCM_ExecRegularConv+0x80>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 8002286:	7819      	ldrb	r1, [r3, #0]
 8002288:	2900      	cmp	r1, #0
 800228a:	d179      	bne.n	8002380 <RCM_ExecRegularConv+0x10c>
 800228c:	7999      	ldrb	r1, [r3, #6]
  uint8_t LastEnable = RCM_MAX_CONV;
 800228e:	2204      	movs	r2, #4
      if (RCM_NoInj_array [i].enable == true)
 8002290:	2900      	cmp	r1, #0
 8002292:	d07b      	beq.n	800238c <RCM_ExecRegularConv+0x118>
      {
        if (RCM_NoInj_array [i].next > handle)
 8002294:	7ade      	ldrb	r6, [r3, #11]
 8002296:	42b0      	cmp	r0, r6
 8002298:	f0c0 8098 	bcc.w	80023cc <RCM_ExecRegularConv+0x158>
      if (RCM_NoInj_array [i].enable == true)
 800229c:	7b1a      	ldrb	r2, [r3, #12]
 800229e:	2a00      	cmp	r2, #0
 80022a0:	f000 8097 	beq.w	80023d2 <RCM_ExecRegularConv+0x15e>
        if (RCM_NoInj_array [i].next > handle)
 80022a4:	7c5e      	ldrb	r6, [r3, #17]
 80022a6:	42b0      	cmp	r0, r6
 80022a8:	d305      	bcc.n	80022b6 <RCM_ExecRegularConv+0x42>
      if (RCM_NoInj_array [i].enable == true)
 80022aa:	7c9a      	ldrb	r2, [r3, #18]
 80022ac:	2a00      	cmp	r2, #0
 80022ae:	f040 8094 	bne.w	80023da <RCM_ExecRegularConv+0x166>
        }
      }
      else
      { /* nothing to do */
      }
      i++;
 80022b2:	2202      	movs	r2, #2
 80022b4:	e071      	b.n	800239a <RCM_ExecRegularConv+0x126>
 80022b6:	2202      	movs	r2, #2
      if (RCM_NoInj_array [i].enable == true)
 80022b8:	4611      	mov	r1, r2
          RCM_NoInj_array [i].next = handle;
 80022ba:	eb01 0541 	add.w	r5, r1, r1, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 80022be:	1821      	adds	r1, r4, r0
 80022c0:	eb03 0141 	add.w	r1, r3, r1, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 80022c4:	eb06 0746 	add.w	r7, r6, r6, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 80022c8:	714e      	strb	r6, [r1, #5]
          RCM_NoInj_array [handle].prev = i;
 80022ca:	4e48      	ldr	r6, [pc, #288]	; (80023ec <RCM_ExecRegularConv+0x178>)
 80022cc:	710a      	strb	r2, [r1, #4]
          RCM_NoInj_array [i].next = handle;
 80022ce:	eb03 0545 	add.w	r5, r3, r5, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 80022d2:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80022d6:	7832      	ldrb	r2, [r6, #0]
          RCM_NoInj_array [i].next = handle;
 80022d8:	7168      	strb	r0, [r5, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 80022da:	7138      	strb	r0, [r7, #4]
      {
       /* Nothing to do we are parsing the array, nothing inserted yet*/
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
 80022dc:	1821      	adds	r1, r4, r0
 80022de:	2501      	movs	r5, #1
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80022e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array [handle].enable = true;
 80022e4:	f823 5011 	strh.w	r5, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80022e8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80022ec:	7852      	ldrb	r2, [r2, #1]
 80022ee:	42aa      	cmp	r2, r5
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 80022f0:	bf18      	it	ne
 80022f2:	7030      	strbne	r0, [r6, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 80022f4:	4a3e      	ldr	r2, [pc, #248]	; (80023f0 <RCM_ExecRegularConv+0x17c>)
 80022f6:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 80022fa:	bb8a      	cbnz	r2, 8002360 <RCM_ExecRegularConv+0xec>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80022fc:	4a3d      	ldr	r2, [pc, #244]	; (80023f4 <RCM_ExecRegularConv+0x180>)
 80022fe:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002302:	7915      	ldrb	r5, [r2, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002304:	6811      	ldr	r1, [r2, #0]
 8002306:	2d09      	cmp	r5, #9
 8002308:	d930      	bls.n	800236c <RCM_ExecRegularConv+0xf8>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800230a:	2603      	movs	r6, #3
 800230c:	f06f 071d 	mvn.w	r7, #29
 8002310:	2201      	movs	r2, #1
 8002312:	fb16 7605 	smlabb	r6, r6, r5, r7
 8002316:	40aa      	lsls	r2, r5
 8002318:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 800231c:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002320:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8002324:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8002326:	0d12      	lsrs	r2, r2, #20
 8002328:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 800232c:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 8002330:	432a      	orrs	r2, r5
 8002332:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002334:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8002336:	688a      	ldr	r2, [r1, #8]
 8002338:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800233c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002340:	f042 0204 	orr.w	r2, r2, #4
 8002344:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8002346:	680a      	ldr	r2, [r1, #0]
 8002348:	0752      	lsls	r2, r2, #29
 800234a:	d5fc      	bpl.n	8002346 <RCM_ExecRegularConv+0xd2>
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 800234c:	1822      	adds	r2, r4, r0
 800234e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002352:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002354:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8002356:	4d25      	ldr	r5, [pc, #148]	; (80023ec <RCM_ExecRegularConv+0x178>)
    RCM_NoInj_array [handle].status = valid;
 8002358:	2102      	movs	r1, #2
 800235a:	7051      	strb	r1, [r2, #1]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 800235c:	7952      	ldrb	r2, [r2, #5]
 800235e:	702a      	strb	r2, [r5, #0]
  }
  retVal = RCM_NoInj_array [handle].value;
 8002360:	4420      	add	r0, r4
 8002362:	eb03 0340 	add.w	r3, r3, r0, lsl #1
return retVal;
}
 8002366:	bcf0      	pop	{r4, r5, r6, r7}
 8002368:	8858      	ldrh	r0, [r3, #2]
 800236a:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800236c:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8002370:	06aa      	lsls	r2, r5, #26
 8002372:	2601      	movs	r6, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002374:	ea42 5207 	orr.w	r2, r2, r7, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002378:	fa06 f505 	lsl.w	r5, r6, r5
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800237c:	432a      	orrs	r2, r5
 800237e:	e7d1      	b.n	8002324 <RCM_ExecRegularConv+0xb0>
        if (RCM_NoInj_array [i].next > handle)
 8002380:	795e      	ldrb	r6, [r3, #5]
 8002382:	4286      	cmp	r6, r0
 8002384:	d898      	bhi.n	80022b8 <RCM_ExecRegularConv+0x44>
      if (RCM_NoInj_array [i].enable == true)
 8002386:	7999      	ldrb	r1, [r3, #6]
 8002388:	2900      	cmp	r1, #0
 800238a:	d183      	bne.n	8002294 <RCM_ExecRegularConv+0x20>
 800238c:	7b19      	ldrb	r1, [r3, #12]
 800238e:	2900      	cmp	r1, #0
 8002390:	d188      	bne.n	80022a4 <RCM_ExecRegularConv+0x30>
 8002392:	7c99      	ldrb	r1, [r3, #18]
 8002394:	bb09      	cbnz	r1, 80023da <RCM_ExecRegularConv+0x166>
       if (LastEnable != RCM_MAX_CONV )
 8002396:	2a04      	cmp	r2, #4
 8002398:	d014      	beq.n	80023c4 <RCM_ExecRegularConv+0x150>
         formerNext = RCM_NoInj_array [LastEnable].next;
 800239a:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800239e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 80023a2:	1821      	adds	r1, r4, r0
         formerNext = RCM_NoInj_array [LastEnable].next;
 80023a4:	f895 c005 	ldrb.w	ip, [r5, #5]
         RCM_NoInj_array [handle].next = formerNext;
 80023a8:	4e10      	ldr	r6, [pc, #64]	; (80023ec <RCM_ExecRegularConv+0x178>)
         RCM_NoInj_array [formerNext].prev = handle;
 80023aa:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 80023ae:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array [formerNext].prev = handle;
 80023b2:	eb03 0747 	add.w	r7, r3, r7, lsl #1
         RCM_NoInj_array [handle].prev = LastEnable;
 80023b6:	710a      	strb	r2, [r1, #4]
         RCM_NoInj_array [handle].next = formerNext;
 80023b8:	f881 c005 	strb.w	ip, [r1, #5]
         RCM_NoInj_array [LastEnable].next = handle;
 80023bc:	7832      	ldrb	r2, [r6, #0]
 80023be:	7168      	strb	r0, [r5, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 80023c0:	7138      	strb	r0, [r7, #4]
    while (i < RCM_MAX_CONV)
 80023c2:	e78b      	b.n	80022dc <RCM_ExecRegularConv+0x68>
         RCM_currentHandle = handle;
 80023c4:	4e09      	ldr	r6, [pc, #36]	; (80023ec <RCM_ExecRegularConv+0x178>)
 80023c6:	4602      	mov	r2, r0
 80023c8:	7030      	strb	r0, [r6, #0]
    while (i < RCM_MAX_CONV)
 80023ca:	e787      	b.n	80022dc <RCM_ExecRegularConv+0x68>
      i++;
 80023cc:	2201      	movs	r2, #1
      if (RCM_NoInj_array [i].enable == true)
 80023ce:	4611      	mov	r1, r2
 80023d0:	e773      	b.n	80022ba <RCM_ExecRegularConv+0x46>
 80023d2:	7c9a      	ldrb	r2, [r3, #18]
 80023d4:	b90a      	cbnz	r2, 80023da <RCM_ExecRegularConv+0x166>
      i++;
 80023d6:	2201      	movs	r2, #1
 80023d8:	e7df      	b.n	800239a <RCM_ExecRegularConv+0x126>
        if (RCM_NoInj_array [i].next > handle)
 80023da:	7dde      	ldrb	r6, [r3, #23]
 80023dc:	4286      	cmp	r6, r0
      i++;
 80023de:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array [i].next > handle)
 80023e2:	d9da      	bls.n	800239a <RCM_ExecRegularConv+0x126>
 80023e4:	e768      	b.n	80022b8 <RCM_ExecRegularConv+0x44>
 80023e6:	bf00      	nop
 80023e8:	20000af0 	.word	0x20000af0
 80023ec:	20000aec 	.word	0x20000aec
 80023f0:	2000024c 	.word	0x2000024c
 80023f4:	20000b2c 	.word	0x20000b2c

080023f8 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 80023f8:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 80023fa:	4c12      	ldr	r4, [pc, #72]	; (8002444 <RCM_ExecUserConv+0x4c>)
 80023fc:	7823      	ldrb	r3, [r4, #0]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d000      	beq.n	8002404 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8002402:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002404:	4d10      	ldr	r5, [pc, #64]	; (8002448 <RCM_ExecUserConv+0x50>)
 8002406:	7828      	ldrb	r0, [r5, #0]
 8002408:	f7ff ff34 	bl	8002274 <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 800240c:	782b      	ldrb	r3, [r5, #0]
 800240e:	4a0f      	ldr	r2, [pc, #60]	; (800244c <RCM_ExecUserConv+0x54>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002410:	490f      	ldr	r1, [pc, #60]	; (8002450 <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8002412:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8002416:	eb02 0245 	add.w	r2, r2, r5, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800241a:	8008      	strh	r0, [r1, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 800241c:	7852      	ldrb	r2, [r2, #1]
 800241e:	b10a      	cbz	r2, 8002424 <RCM_ExecUserConv+0x2c>
      RCM_UserConvState = RCM_USERCONV_EOC;
 8002420:	2202      	movs	r2, #2
 8002422:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002424:	4a0b      	ldr	r2, [pc, #44]	; (8002454 <RCM_ExecUserConv+0x5c>)
 8002426:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800242a:	2d00      	cmp	r5, #0
 800242c:	d0e9      	beq.n	8002402 <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800242e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8002432:	2100      	movs	r1, #0
 8002434:	7021      	strb	r1, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002436:	6852      	ldr	r2, [r2, #4]
 8002438:	4601      	mov	r1, r0
 800243a:	4618      	mov	r0, r3
 800243c:	462b      	mov	r3, r5
}
 800243e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002442:	4718      	bx	r3
 8002444:	20000b28 	.word	0x20000b28
 8002448:	20000aed 	.word	0x20000aed
 800244c:	20000af0 	.word	0x20000af0
 8002450:	20000b3c 	.word	0x20000b3c
 8002454:	20000b08 	.word	0x20000b08

08002458 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 8002458:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <RCM_ExecNextConv+0x88>)
 800245a:	4822      	ldr	r0, [pc, #136]	; (80024e4 <RCM_ExecNextConv+0x8c>)
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002462:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8002466:	b383      	cbz	r3, 80024ca <RCM_ExecNextConv+0x72>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 8002468:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <RCM_ExecNextConv+0x90>)
{
 800246a:	b4f0      	push	{r4, r5, r6, r7}
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 800246c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002470:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002472:	2504      	movs	r5, #4
 8002474:	600d      	str	r5, [r1, #0]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8002476:	791d      	ldrb	r5, [r3, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8002478:	2d09      	cmp	r5, #9
 800247a:	ea4f 0442 	mov.w	r4, r2, lsl #1
 800247e:	d925      	bls.n	80024cc <RCM_ExecNextConv+0x74>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8002480:	2603      	movs	r6, #3
 8002482:	f06f 071d 	mvn.w	r7, #29
 8002486:	2301      	movs	r3, #1
 8002488:	fb16 7605 	smlabb	r6, r6, r5, r7
 800248c:	40ab      	lsls	r3, r5
 800248e:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
 8002492:	ea43 6385 	orr.w	r3, r3, r5, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8002496:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 800249a:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800249c:	0d1b      	lsrs	r3, r3, #20
 800249e:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 80024a2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80024a6:	432b      	orrs	r3, r5
 80024a8:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80024aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80024ac:	688b      	ldr	r3, [r1, #8]

    LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 80024ae:	4422      	add	r2, r4
 80024b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024b4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80024b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024bc:	f043 0304 	orr.w	r3, r3, #4
 80024c0:	2201      	movs	r2, #1
 80024c2:	608b      	str	r3, [r1, #8]
 80024c4:	7042      	strb	r2, [r0, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 80024c6:	bcf0      	pop	{r4, r5, r6, r7}
 80024c8:	4770      	bx	lr
 80024ca:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80024cc:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80024d0:	06ab      	lsls	r3, r5, #26
 80024d2:	2601      	movs	r6, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80024d4:	ea43 5307 	orr.w	r3, r3, r7, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80024d8:	fa06 f505 	lsl.w	r5, r6, r5
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80024dc:	432b      	orrs	r3, r5
 80024de:	e7dc      	b.n	800249a <RCM_ExecNextConv+0x42>
 80024e0:	20000aec 	.word	0x20000aec
 80024e4:	20000af0 	.word	0x20000af0
 80024e8:	20000b2c 	.word	0x20000b2c

080024ec <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 80024ec:	b470      	push	{r4, r5, r6}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 80024ee:	4c0f      	ldr	r4, [pc, #60]	; (800252c <RCM_ReadOngoingConv+0x40>)
 80024f0:	4a0f      	ldr	r2, [pc, #60]	; (8002530 <RCM_ReadOngoingConv+0x44>)
 80024f2:	7823      	ldrb	r3, [r4, #0]
 80024f4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80024f8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80024fc:	0058      	lsls	r0, r3, #1
 80024fe:	784d      	ldrb	r5, [r1, #1]
 8002500:	2d01      	cmp	r5, #1
 8002502:	d006      	beq.n	8002512 <RCM_ReadOngoingConv+0x26>
    RCM_NoInj_array [RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8002504:	4403      	add	r3, r0
 8002506:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800250a:	7953      	ldrb	r3, [r2, #5]
 800250c:	7023      	strb	r3, [r4, #0]
}
 800250e:	bc70      	pop	{r4, r5, r6}
 8002510:	4770      	bx	lr
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 8002512:	4d08      	ldr	r5, [pc, #32]	; (8002534 <RCM_ReadOngoingConv+0x48>)
 8002514:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8002518:	682d      	ldr	r5, [r5, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800251a:	682e      	ldr	r6, [r5, #0]
 800251c:	0776      	lsls	r6, r6, #29
 800251e:	d5f1      	bpl.n	8002504 <RCM_ReadOngoingConv+0x18>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002520:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 8002522:	804d      	strh	r5, [r1, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 8002524:	2502      	movs	r5, #2
 8002526:	704d      	strb	r5, [r1, #1]
 8002528:	e7ec      	b.n	8002504 <RCM_ReadOngoingConv+0x18>
 800252a:	bf00      	nop
 800252c:	20000aec 	.word	0x20000aec
 8002530:	20000af0 	.word	0x20000af0
 8002534:	20000b2c 	.word	0x20000b2c

08002538 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002538:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <HAL_MspInit+0x3c>)
{
 800253a:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	661a      	str	r2, [r3, #96]	; 0x60
 8002544:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8002546:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002548:	f002 0201 	and.w	r2, r2, #1
 800254c:	9200      	str	r2, [sp, #0]
 800254e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002550:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002552:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002556:	659a      	str	r2, [r3, #88]	; 0x58
 8002558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002560:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002564:	f002 f872 	bl	800464c <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002568:	b003      	add	sp, #12
 800256a:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 800256e:	f002 bbed 	b.w	8004d4c <HAL_PWREx_DisableUCPDDeadBattery>
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000

08002578 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002578:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800257a:	6802      	ldr	r2, [r0, #0]
{
 800257c:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257e:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8002580:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002588:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800258c:	930a      	str	r3, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 800258e:	d021      	beq.n	80025d4 <HAL_ADC_MspInit+0x5c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002590:	4b33      	ldr	r3, [pc, #204]	; (8002660 <HAL_ADC_MspInit+0xe8>)
 8002592:	429a      	cmp	r2, r3
 8002594:	d001      	beq.n	800259a <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002596:	b00d      	add	sp, #52	; 0x34
 8002598:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 800259a:	4a32      	ldr	r2, [pc, #200]	; (8002664 <HAL_ADC_MspInit+0xec>)
 800259c:	6813      	ldr	r3, [r2, #0]
 800259e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80025a0:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80025a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80025a4:	d051      	beq.n	800264a <HAL_ADC_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a6:	4b30      	ldr	r3, [pc, #192]	; (8002668 <HAL_ADC_MspInit+0xf0>)
 80025a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80025b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 80025b8:	2240      	movs	r2, #64	; 0x40
 80025ba:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80025bc:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2400      	movs	r4, #0
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80025c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 80025c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c8:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80025cc:	f002 f9bc 	bl	8004948 <HAL_GPIO_Init>
}
 80025d0:	b00d      	add	sp, #52	; 0x34
 80025d2:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 80025d4:	4a23      	ldr	r2, [pc, #140]	; (8002664 <HAL_ADC_MspInit+0xec>)
 80025d6:	6813      	ldr	r3, [r2, #0]
 80025d8:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80025da:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80025dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80025de:	d029      	beq.n	8002634 <HAL_ADC_MspInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e0:	4b21      	ldr	r3, [pc, #132]	; (8002668 <HAL_ADC_MspInit+0xf0>)
 80025e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025e4:	f042 0201 	orr.w	r2, r2, #1
 80025e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80025ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025ec:	f002 0201 	and.w	r2, r2, #1
 80025f0:	9202      	str	r2, [sp, #8]
 80025f2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025f6:	f042 0202 	orr.w	r2, r2, #2
 80025fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80025fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8002604:	2205      	movs	r2, #5
 8002606:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260a:	a906      	add	r1, sp, #24
 800260c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8002610:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002614:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002618:	f002 f996 	bl	8004948 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 800261c:	f244 0202 	movw	r2, #16386	; 0x4002
 8002620:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002622:	4812      	ldr	r0, [pc, #72]	; (800266c <HAL_ADC_MspInit+0xf4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002626:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8002628:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262c:	f002 f98c 	bl	8004948 <HAL_GPIO_Init>
}
 8002630:	b00d      	add	sp, #52	; 0x34
 8002632:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <HAL_ADC_MspInit+0xf0>)
 8002636:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002638:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800263c:	64da      	str	r2, [r3, #76]	; 0x4c
 800263e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	9b01      	ldr	r3, [sp, #4]
 8002648:	e7ca      	b.n	80025e0 <HAL_ADC_MspInit+0x68>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <HAL_ADC_MspInit+0xf0>)
 800264c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800264e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002652:	64da      	str	r2, [r3, #76]	; 0x4c
 8002654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800265a:	9304      	str	r3, [sp, #16]
 800265c:	9b04      	ldr	r3, [sp, #16]
 800265e:	e7a2      	b.n	80025a6 <HAL_ADC_MspInit+0x2e>
 8002660:	50000100 	.word	0x50000100
 8002664:	200006e4 	.word	0x200006e4
 8002668:	40021000 	.word	0x40021000
 800266c:	48000400 	.word	0x48000400

08002670 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002670:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 8002672:	6802      	ldr	r2, [r0, #0]
 8002674:	4929      	ldr	r1, [pc, #164]	; (800271c <HAL_COMP_MspInit+0xac>)
{
 8002676:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 800267a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002680:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002684:	9308      	str	r3, [sp, #32]
  if(hcomp->Instance==COMP1)
 8002686:	d007      	beq.n	8002698 <HAL_COMP_MspInit+0x28>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 8002688:	4925      	ldr	r1, [pc, #148]	; (8002720 <HAL_COMP_MspInit+0xb0>)
 800268a:	428a      	cmp	r2, r1
 800268c:	d01a      	beq.n	80026c4 <HAL_COMP_MspInit+0x54>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 800268e:	4925      	ldr	r1, [pc, #148]	; (8002724 <HAL_COMP_MspInit+0xb4>)
 8002690:	428a      	cmp	r2, r1
 8002692:	d02d      	beq.n	80026f0 <HAL_COMP_MspInit+0x80>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 8002694:	b00a      	add	sp, #40	; 0x28
 8002696:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002698:	4a23      	ldr	r2, [pc, #140]	; (8002728 <HAL_COMP_MspInit+0xb8>)
 800269a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800269c:	f041 0101 	orr.w	r1, r1, #1
 80026a0:	64d1      	str	r1, [r2, #76]	; 0x4c
 80026a2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	f002 0201 	and.w	r2, r2, #1
 80026aa:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 80026ac:	2303      	movs	r3, #3
 80026ae:	2202      	movs	r2, #2
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 80026b0:	a904      	add	r1, sp, #16
 80026b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 80026b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ba:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 80026bc:	f002 f944 	bl	8004948 <HAL_GPIO_Init>
}
 80026c0:	b00a      	add	sp, #40	; 0x28
 80026c2:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c4:	4a18      	ldr	r2, [pc, #96]	; (8002728 <HAL_COMP_MspInit+0xb8>)
 80026c6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80026c8:	f041 0101 	orr.w	r1, r1, #1
 80026cc:	64d1      	str	r1, [r2, #76]	; 0x4c
 80026ce:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d2:	f002 0201 	and.w	r2, r2, #1
 80026d6:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 80026d8:	2303      	movs	r3, #3
 80026da:	2280      	movs	r2, #128	; 0x80
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 80026dc:	a904      	add	r1, sp, #16
 80026de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 80026e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e6:	9c02      	ldr	r4, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 80026e8:	f002 f92e 	bl	8004948 <HAL_GPIO_Init>
}
 80026ec:	b00a      	add	sp, #40	; 0x28
 80026ee:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f0:	4a0d      	ldr	r2, [pc, #52]	; (8002728 <HAL_COMP_MspInit+0xb8>)
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 80026f2:	480e      	ldr	r0, [pc, #56]	; (800272c <HAL_COMP_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f4:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80026f6:	f041 0102 	orr.w	r1, r1, #2
 80026fa:	64d1      	str	r1, [r2, #76]	; 0x4c
 80026fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002700:	f002 0202 	and.w	r2, r2, #2
 8002704:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8002706:	2303      	movs	r3, #3
 8002708:	2201      	movs	r2, #1
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 800270a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 800270c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002710:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8002712:	f002 f919 	bl	8004948 <HAL_GPIO_Init>
}
 8002716:	b00a      	add	sp, #40	; 0x28
 8002718:	bd10      	pop	{r4, pc}
 800271a:	bf00      	nop
 800271c:	40010200 	.word	0x40010200
 8002720:	40010204 	.word	0x40010204
 8002724:	4001020c 	.word	0x4001020c
 8002728:	40021000 	.word	0x40021000
 800272c:	48000400 	.word	0x48000400

08002730 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8002730:	4b0a      	ldr	r3, [pc, #40]	; (800275c <HAL_CORDIC_MspInit+0x2c>)
 8002732:	6802      	ldr	r2, [r0, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d000      	beq.n	800273a <HAL_CORDIC_MspInit+0xa>
 8002738:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800273a:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 800273e:	f042 0208 	orr.w	r2, r2, #8
 8002742:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 8002746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 800274a:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800274c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8002756:	b002      	add	sp, #8
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40020c00 	.word	0x40020c00

08002760 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC3)
 8002760:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_DAC_MspInit+0x2c>)
 8002762:	6802      	ldr	r2, [r0, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d000      	beq.n	800276a <HAL_DAC_MspInit+0xa>
 8002768:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 800276a:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800276e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
{
 8002772:	b082      	sub	sp, #8
    __HAL_RCC_DAC3_CLK_ENABLE();
 8002774:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002776:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800277a:	64da      	str	r2, [r3, #76]	; 0x4c
 800277c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002782:	9301      	str	r3, [sp, #4]
 8002784:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8002786:	b002      	add	sp, #8
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	50001000 	.word	0x50001000

08002790 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002790:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 8002792:	6802      	ldr	r2, [r0, #0]
 8002794:	4929      	ldr	r1, [pc, #164]	; (800283c <HAL_OPAMP_MspInit+0xac>)
{
 8002796:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 800279a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80027a0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80027a4:	9308      	str	r3, [sp, #32]
  if(hopamp->Instance==OPAMP1)
 80027a6:	d007      	beq.n	80027b8 <HAL_OPAMP_MspInit+0x28>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 80027a8:	4925      	ldr	r1, [pc, #148]	; (8002840 <HAL_OPAMP_MspInit+0xb0>)
 80027aa:	428a      	cmp	r2, r1
 80027ac:	d01a      	beq.n	80027e4 <HAL_OPAMP_MspInit+0x54>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 80027ae:	4925      	ldr	r1, [pc, #148]	; (8002844 <HAL_OPAMP_MspInit+0xb4>)
 80027b0:	428a      	cmp	r2, r1
 80027b2:	d02d      	beq.n	8002810 <HAL_OPAMP_MspInit+0x80>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 80027b4:	b00a      	add	sp, #40	; 0x28
 80027b6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b8:	4a23      	ldr	r2, [pc, #140]	; (8002848 <HAL_OPAMP_MspInit+0xb8>)
 80027ba:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80027bc:	f041 0101 	orr.w	r1, r1, #1
 80027c0:	64d1      	str	r1, [r2, #76]	; 0x4c
 80027c2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c6:	f002 0201 	and.w	r2, r2, #1
 80027ca:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 80027cc:	2303      	movs	r3, #3
 80027ce:	220e      	movs	r2, #14
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d0:	a904      	add	r1, sp, #16
 80027d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 80027d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027da:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027dc:	f002 f8b4 	bl	8004948 <HAL_GPIO_Init>
}
 80027e0:	b00a      	add	sp, #40	; 0x28
 80027e2:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e4:	4a18      	ldr	r2, [pc, #96]	; (8002848 <HAL_OPAMP_MspInit+0xb8>)
 80027e6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80027e8:	f041 0101 	orr.w	r1, r1, #1
 80027ec:	64d1      	str	r1, [r2, #76]	; 0x4c
 80027ee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f2:	f002 0201 	and.w	r2, r2, #1
 80027f6:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 80027f8:	2303      	movs	r3, #3
 80027fa:	22e0      	movs	r2, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fc:	a904      	add	r1, sp, #16
 80027fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8002802:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002806:	9c02      	ldr	r4, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002808:	f002 f89e 	bl	8004948 <HAL_GPIO_Init>
}
 800280c:	b00a      	add	sp, #40	; 0x28
 800280e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002810:	4a0d      	ldr	r2, [pc, #52]	; (8002848 <HAL_OPAMP_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002812:	480e      	ldr	r0, [pc, #56]	; (800284c <HAL_OPAMP_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002814:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002816:	f041 0102 	orr.w	r1, r1, #2
 800281a:	64d1      	str	r1, [r2, #76]	; 0x4c
 800281c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002820:	f002 0202 	and.w	r2, r2, #2
 8002824:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 8002826:	2303      	movs	r3, #3
 8002828:	2207      	movs	r2, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 800282c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002830:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002832:	f002 f889 	bl	8004948 <HAL_GPIO_Init>
}
 8002836:	b00a      	add	sp, #40	; 0x28
 8002838:	bd10      	pop	{r4, pc}
 800283a:	bf00      	nop
 800283c:	40010300 	.word	0x40010300
 8002840:	40010304 	.word	0x40010304
 8002844:	40010308 	.word	0x40010308
 8002848:	40021000 	.word	0x40021000
 800284c:	48000400 	.word	0x48000400

08002850 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_TIM_Base_MspInit+0x28>)
 8002852:	6802      	ldr	r2, [r0, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d000      	beq.n	800285a <HAL_TIM_Base_MspInit+0xa>
 8002858:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800285a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
{
 800285e:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002860:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002866:	661a      	str	r2, [r3, #96]	; 0x60
 8002868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002872:	b002      	add	sp, #8
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40012c00 	.word	0x40012c00

0800287c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800287c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800287e:	6801      	ldr	r1, [r0, #0]
 8002880:	4a2a      	ldr	r2, [pc, #168]	; (800292c <HAL_TIM_MspPostInit+0xb0>)
{
 8002882:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8002886:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800288c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002890:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 8002892:	d001      	beq.n	8002898 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002894:	b00b      	add	sp, #44	; 0x2c
 8002896:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002898:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800289c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80028a0:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80028a4:	4822      	ldr	r0, [pc, #136]	; (8002930 <HAL_TIM_MspPostInit+0xb4>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a6:	f042 0204 	orr.w	r2, r2, #4
 80028aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80028ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028ae:	f002 0204 	and.w	r2, r2, #4
 80028b2:	9201      	str	r2, [sp, #4]
 80028b4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028b8:	f042 0202 	orr.w	r2, r2, #2
 80028bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80028be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028c0:	f002 0202 	and.w	r2, r2, #2
 80028c4:	9202      	str	r2, [sp, #8]
 80028c6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80028d8:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028da:	9903      	ldr	r1, [sp, #12]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80028dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028e0:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80028e2:	2604      	movs	r6, #4
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80028e4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80028e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80028ea:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80028ec:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80028f0:	f002 f82a 	bl	8004948 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 80028f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80028f8:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 80028fa:	a904      	add	r1, sp, #16
 80028fc:	480d      	ldr	r0, [pc, #52]	; (8002934 <HAL_TIM_MspPostInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80028fe:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8002900:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002904:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8002908:	f44f 56b8 	mov.w	r6, #5888	; 0x1700
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 800290c:	f002 f81c 	bl	8004948 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8002910:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002912:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002914:	a904      	add	r1, sp, #16
 8002916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 800291a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800291e:	e9cd 6704 	strd	r6, r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002922:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002924:	f002 f810 	bl	8004948 <HAL_GPIO_Init>
}
 8002928:	b00b      	add	sp, #44	; 0x2c
 800292a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800292c:	40012c00 	.word	0x40012c00
 8002930:	48000800 	.word	0x48000800
 8002934:	48000400 	.word	0x48000400

08002938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002938:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 800293a:	6801      	ldr	r1, [r0, #0]
 800293c:	4a18      	ldr	r2, [pc, #96]	; (80029a0 <HAL_UART_MspInit+0x68>)
{
 800293e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8002942:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002948:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800294c:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 800294e:	d001      	beq.n	8002954 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002950:	b009      	add	sp, #36	; 0x24
 8002952:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002954:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002958:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295c:	4811      	ldr	r0, [pc, #68]	; (80029a4 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800295e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002960:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002964:	659a      	str	r2, [r3, #88]	; 0x58
 8002966:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002968:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800296c:	9200      	str	r2, [sp, #0]
 800296e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002970:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002972:	f042 0202 	orr.w	r2, r2, #2
 8002976:	64da      	str	r2, [r3, #76]	; 0x4c
 8002978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002980:	2307      	movs	r3, #7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002982:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002984:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002986:	2200      	movs	r2, #0
 8002988:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800298c:	2418      	movs	r4, #24
 800298e:	2502      	movs	r5, #2
 8002990:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002994:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002998:	f001 ffd6 	bl	8004948 <HAL_GPIO_Init>
}
 800299c:	b009      	add	sp, #36	; 0x24
 800299e:	bd30      	pop	{r4, r5, pc}
 80029a0:	40004400 	.word	0x40004400
 80029a4:	48000400 	.word	0x48000400

080029a8 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80029a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029ac:	2240      	movs	r2, #64	; 0x40
 80029ae:	601a      	str	r2, [r3, #0]

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  // Highfrequency task
  TSK_HighFrequencyTask();
 80029b0:	f7fe be44 	b.w	800163c <TSK_HighFrequencyTask>

080029b4 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80029b6:	4804      	ldr	r0, [pc, #16]	; (80029c8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80029b8:	f06f 0201 	mvn.w	r2, #1
 80029bc:	611a      	str	r2, [r3, #16]
 80029be:	f004 bfc3 	b.w	8007948 <R3_2_TIMx_UP_IRQHandler>
 80029c2:	bf00      	nop
 80029c4:	40012c00 	.word	0x40012c00
 80029c8:	2000024c 	.word	0x2000024c

080029cc <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 80029cc:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80029ce:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	0611      	lsls	r1, r2, #24
 80029d4:	d505      	bpl.n	80029e2 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80029d6:	f06f 0280 	mvn.w	r2, #128	; 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 80029da:	480a      	ldr	r0, [pc, #40]	; (8002a04 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80029dc:	611a      	str	r2, [r3, #16]
 80029de:	f005 f815 	bl	8007a0c <R3_2_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80029e2:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	05d2      	lsls	r2, r2, #23
 80029e8:	d505      	bpl.n	80029f6 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80029ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 80029ee:	4805      	ldr	r0, [pc, #20]	; (8002a04 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80029f0:	611a      	str	r2, [r3, #16]
 80029f2:	f004 ffeb 	bl	80079cc <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80029f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 80029fa:	f7fe bdf3 	b.w	80015e4 <MC_Scheduler>
 80029fe:	bf00      	nop
 8002a00:	40012c00 	.word	0x40012c00
 8002a04:	2000024c 	.word	0x2000024c

08002a08 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8002a08:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002a0a:	4c18      	ldr	r4, [pc, #96]	; (8002a6c <USART2_IRQHandler+0x64>)
 8002a0c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002a10:	69da      	ldr	r2, [r3, #28]
 8002a12:	0691      	lsls	r1, r2, #26
 8002a14:	d50b      	bpl.n	8002a2e <USART2_IRQHandler+0x26>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002a16:	6a59      	ldr	r1, [r3, #36]	; 0x24
  {
    uint16_t retVal;
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8002a18:	4620      	mov	r0, r4
 8002a1a:	b2c9      	uxtb	r1, r1
 8002a1c:	f006 f854 	bl	8008ac8 <UFCP_RX_IRQ_Handler>
 8002a20:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d01a      	beq.n	8002a5c <USART2_IRQHandler+0x54>
    {
      UI_SerialCommunicationTimeOutStart();
    }
    if (retVal == 2)
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d01d      	beq.n	8002a66 <USART2_IRQHandler+0x5e>
 8002a2a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002a2e:	69da      	ldr	r2, [r3, #28]
 8002a30:	0612      	lsls	r2, r2, #24
 8002a32:	d504      	bpl.n	8002a3e <USART2_IRQHandler+0x36>
  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 8002a34:	480d      	ldr	r0, [pc, #52]	; (8002a6c <USART2_IRQHandler+0x64>)
 8002a36:	f005 ffa7 	bl	8008988 <UFCP_TX_IRQ_Handler>
 8002a3a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	071b      	lsls	r3, r3, #28
 8002a42:	d50a      	bpl.n	8002a5a <USART2_IRQHandler+0x52>
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8002a44:	4809      	ldr	r0, [pc, #36]	; (8002a6c <USART2_IRQHandler+0x64>)
 8002a46:	f006 f8a5 	bl	8008b94 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002a4a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002a4e:	2208      	movs	r2, #8
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8002a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a54:	621a      	str	r2, [r3, #32]
    UI_SerialCommunicationTimeOutStop();
 8002a56:	f000 b8c7 	b.w	8002be8 <UI_SerialCommunicationTimeOutStop>
}
 8002a5a:	bd10      	pop	{r4, pc}
      UI_SerialCommunicationTimeOutStart();
 8002a5c:	f000 f8ca 	bl	8002bf4 <UI_SerialCommunicationTimeOutStart>
    if (retVal == 2)
 8002a60:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002a64:	e7e3      	b.n	8002a2e <USART2_IRQHandler+0x26>
      UI_SerialCommunicationTimeOutStop();
 8002a66:	f000 f8bf 	bl	8002be8 <UI_SerialCommunicationTimeOutStop>
 8002a6a:	e7de      	b.n	8002a2a <USART2_IRQHandler+0x22>
 8002a6c:	20000550 	.word	0x20000550

08002a70 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002a70:	b570      	push	{r4, r5, r6, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8002a72:	f7fe ff19 	bl	80018a8 <TSK_HardwareFaultTask>
 8002a76:	4d18      	ldr	r5, [pc, #96]	; (8002ad8 <HardFault_Handler+0x68>)
 8002a78:	2608      	movs	r6, #8
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 8002a7a:	462c      	mov	r4, r5
 8002a7c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002a80:	69da      	ldr	r2, [r3, #28]
 8002a82:	0711      	lsls	r1, r2, #28
 8002a84:	4620      	mov	r0, r4
 8002a86:	d508      	bpl.n	8002a9a <HardFault_Handler+0x2a>
 8002a88:	f006 f884 	bl	8008b94 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002a8c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002a90:	621e      	str	r6, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 8002a92:	f000 f8a9 	bl	8002be8 <UI_SerialCommunicationTimeOutStop>
 8002a96:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002a9a:	69da      	ldr	r2, [r3, #28]
 8002a9c:	0612      	lsls	r2, r2, #24
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	d513      	bpl.n	8002aca <HardFault_Handler+0x5a>
 8002aa2:	f005 ff71 	bl	8008988 <UFCP_TX_IRQ_Handler>
 8002aa6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002aaa:	69da      	ldr	r2, [r3, #28]
 8002aac:	0691      	lsls	r1, r2, #26
 8002aae:	d5e7      	bpl.n	8002a80 <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002ab0:	6a59      	ldr	r1, [r3, #36]	; 0x24
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	b2c9      	uxtb	r1, r1
 8002ab6:	f006 f807 	bl	8008ac8 <UFCP_RX_IRQ_Handler>
 8002aba:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d008      	beq.n	8002ad2 <HardFault_Handler+0x62>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d1db      	bne.n	8002a7c <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 8002ac4:	f000 f890 	bl	8002be8 <UI_SerialCommunicationTimeOutStop>
 8002ac8:	e7d8      	b.n	8002a7c <HardFault_Handler+0xc>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002aca:	69da      	ldr	r2, [r3, #28]
 8002acc:	0692      	lsls	r2, r2, #26
 8002ace:	d5d7      	bpl.n	8002a80 <HardFault_Handler+0x10>
 8002ad0:	e7ee      	b.n	8002ab0 <HardFault_Handler+0x40>
          UI_SerialCommunicationTimeOutStart();
 8002ad2:	f000 f88f 	bl	8002bf4 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8002ad6:	e7d1      	b.n	8002a7c <HardFault_Handler+0xc>
 8002ad8:	20000550 	.word	0x20000550

08002adc <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8002adc:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002ade:	4c0a      	ldr	r4, [pc, #40]	; (8002b08 <SysTick_Handler+0x2c>)
 8002ae0:	7823      	ldrb	r3, [r4, #0]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d006      	beq.n	8002af4 <SysTick_Handler+0x18>
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8002aea:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8002aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002af0:	f7fe beca 	b.w	8001888 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8002af4:	f000 fdf0 	bl	80036d8 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002af8:	f001 fe1e 	bl	8004738 <HAL_SYSTICK_IRQHandler>
 8002afc:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8002afe:	7023      	strb	r3, [r4, #0]
}
 8002b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002b04:	f7fe bec0 	b.w	8001888 <MC_RunMotorControlTasks>
 8002b08:	20000690 	.word	0x20000690

08002b0c <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <EXTI15_10_IRQHandler+0x14>)
 8002b0e:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC10.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10) )
 8002b10:	0552      	lsls	r2, r2, #21
 8002b12:	d400      	bmi.n	8002b16 <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_10);
    UI_HandleStartStopButton_cb ();
  }

}
 8002b14:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002b16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b1a:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8002b1c:	f000 b870 	b.w	8002c00 <UI_HandleStartStopButton_cb>
 8002b20:	40010400 	.word	0x40010400

08002b24 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8002b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;
 8002b28:	4d17      	ldr	r5, [pc, #92]	; (8002b88 <UI_TaskInit+0x64>)
    pMCP = &MCP_UI_Params;
 8002b2a:	f8df c070 	ldr.w	ip, [pc, #112]	; 8002b9c <UI_TaskInit+0x78>

    UFCP_Init( & pUSART );
 8002b2e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8002ba0 <UI_TaskInit+0x7c>
{
 8002b32:	468e      	mov	lr, r1
 8002b34:	4681      	mov	r9, r0
 8002b36:	4616      	mov	r6, r2
 8002b38:	461f      	mov	r7, r3
    pMCP->_Super = UI_Params;
 8002b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b3c:	4664      	mov	r4, ip
 8002b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b40:	e895 0003 	ldmia.w	r5, {r0, r1}
{
 8002b44:	b082      	sub	sp, #8
    pMCP = &MCP_UI_Params;
 8002b46:	4d11      	ldr	r5, [pc, #68]	; (8002b8c <UI_TaskInit+0x68>)
{
 8002b48:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    pMCP = &MCP_UI_Params;
 8002b4c:	f8c5 c000 	str.w	ip, [r5]
    pMCP->_Super = UI_Params;
 8002b50:	e884 0003 	stmia.w	r4, {r0, r1}
    UFCP_Init( & pUSART );
 8002b54:	4640      	mov	r0, r8
{
 8002b56:	4674      	mov	r4, lr
    UFCP_Init( & pUSART );
 8002b58:	f005 ff14 	bl	8008984 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8002b5c:	f8cd a004 	str.w	sl, [sp, #4]
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <UI_TaskInit+0x6c>)
 8002b62:	6828      	ldr	r0, [r5, #0]
 8002b64:	4a0b      	ldr	r2, [pc, #44]	; (8002b94 <UI_TaskInit+0x70>)
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	4641      	mov	r1, r8
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <UI_TaskInit+0x74>)
 8002b6c:	f7ff fa60 	bl	8002030 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002b70:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8002b74:	6828      	ldr	r0, [r5, #0]
 8002b76:	463b      	mov	r3, r7
 8002b78:	4632      	mov	r2, r6
 8002b7a:	4621      	mov	r1, r4

}
 8002b7c:	b002      	add	sp, #8
 8002b7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002b82:	f000 b849 	b.w	8002c18 <UI_Init>
 8002b86:	bf00      	nop
 8002b88:	200006bc 	.word	0x200006bc
 8002b8c:	200006ec 	.word	0x200006ec
 8002b90:	08008bb1 	.word	0x08008bb1
 8002b94:	08008a11 	.word	0x08008a11
 8002b98:	080089e9 	.word	0x080089e9
 8002b9c:	20000b40 	.word	0x20000b40
 8002ba0:	20000550 	.word	0x20000550

08002ba4 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8002ba4:	4a0d      	ldr	r2, [pc, #52]	; (8002bdc <UI_Scheduler+0x38>)
 8002ba6:	8813      	ldrh	r3, [r2, #0]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	b11b      	cbz	r3, 8002bb4 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8002bac:	8813      	ldrh	r3, [r2, #0]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8002bb4:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <UI_Scheduler+0x3c>)
 8002bb6:	8813      	ldrh	r3, [r2, #0]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d903      	bls.n	8002bc6 <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 8002bbe:	8813      	ldrh	r3, [r2, #0]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8002bc6:	4a07      	ldr	r2, [pc, #28]	; (8002be4 <UI_Scheduler+0x40>)
 8002bc8:	8813      	ldrh	r3, [r2, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d903      	bls.n	8002bd8 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8002bd0:	8813      	ldrh	r3, [r2, #0]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	8013      	strh	r3, [r2, #0]
  }
}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	200006ea 	.word	0x200006ea
 8002be0:	200006e8 	.word	0x200006e8
 8002be4:	20000692 	.word	0x20000692

08002be8 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002be8:	4b01      	ldr	r3, [pc, #4]	; (8002bf0 <UI_SerialCommunicationTimeOutStop+0x8>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	801a      	strh	r2, [r3, #0]
}
 8002bee:	4770      	bx	lr
 8002bf0:	200006e8 	.word	0x200006e8

08002bf4 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8002bf4:	4b01      	ldr	r3, [pc, #4]	; (8002bfc <UI_SerialCommunicationTimeOutStart+0x8>)
 8002bf6:	224f      	movs	r2, #79	; 0x4f
 8002bf8:	801a      	strh	r2, [r3, #0]
}
 8002bfa:	4770      	bx	lr
 8002bfc:	200006e8 	.word	0x200006e8

08002c00 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002c00:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 8002c02:	f7fe f841 	bl	8000c88 <MC_GetSTMStateMotor1>
 8002c06:	b918      	cbnz	r0, 8002c10 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002c08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 8002c0c:	f7fe b828 	b.w	8000c60 <MC_StartMotor1>
}
 8002c10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 8002c14:	f7fe b82a 	b.w	8000c6c <MC_StopMotor1>

08002c18 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8002c18:	b430      	push	{r4, r5}
 8002c1a:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8002c1c:	6104      	str	r4, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 8002c1e:	2500      	movs	r5, #0
 8002c20:	7505      	strb	r5, [r0, #20]
  pHandle->pMCT = pMCT;
 8002c22:	e9c0 2302 	strd	r2, r3, [r0, #8]
}
 8002c26:	bc30      	pop	{r4, r5}
  pHandle->bDriveNum = bMCNum;
 8002c28:	7101      	strb	r1, [r0, #4]
}
 8002c2a:	4770      	bx	lr

08002c2c <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8002c2c:	7903      	ldrb	r3, [r0, #4]
 8002c2e:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8002c30:	bf86      	itte	hi
 8002c32:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 8002c34:	2001      	movhi	r0, #1
    retVal = false;
 8002c36:	2000      	movls	r0, #0
  }
  return retVal;
}
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop

08002c3c <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8002c3c:	7d00      	ldrb	r0, [r0, #20]
 8002c3e:	4770      	bx	lr

08002c40 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002c40:	b570      	push	{r4, r5, r6, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002c42:	e9d0 5402 	ldrd	r5, r4, [r0, #8]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c46:	7d03      	ldrb	r3, [r0, #20]
{
 8002c48:	b082      	sub	sp, #8
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c4a:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002c4e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 8002c52:	4614      	mov	r4, r2
 8002c54:	295b      	cmp	r1, #91	; 0x5b
 8002c56:	d85d      	bhi.n	8002d14 <UI_SetReg+0xd4>
 8002c58:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002c5c:	005c006b 	.word	0x005c006b
 8002c60:	006f005c 	.word	0x006f005c
 8002c64:	0079005c 	.word	0x0079005c
 8002c68:	0085007f 	.word	0x0085007f
 8002c6c:	0097008b 	.word	0x0097008b
 8002c70:	00a3009d 	.word	0x00a3009d
 8002c74:	00b500a9 	.word	0x00b500a9
 8002c78:	00c100bb 	.word	0x00c100bb
 8002c7c:	00e100c7 	.word	0x00e100c7
 8002c80:	005c005c 	.word	0x005c005c
 8002c84:	011700fb 	.word	0x011700fb
 8002c88:	005c005c 	.word	0x005c005c
 8002c8c:	005c005c 	.word	0x005c005c
 8002c90:	005c005c 	.word	0x005c005c
 8002c94:	005c005c 	.word	0x005c005c
 8002c98:	005c005c 	.word	0x005c005c
 8002c9c:	005c005c 	.word	0x005c005c
 8002ca0:	005c005c 	.word	0x005c005c
 8002ca4:	005c005c 	.word	0x005c005c
 8002ca8:	005c005c 	.word	0x005c005c
 8002cac:	005c005c 	.word	0x005c005c
 8002cb0:	005c005c 	.word	0x005c005c
 8002cb4:	005c005c 	.word	0x005c005c
 8002cb8:	005c005c 	.word	0x005c005c
 8002cbc:	005c005c 	.word	0x005c005c
 8002cc0:	005c005c 	.word	0x005c005c
 8002cc4:	005c005c 	.word	0x005c005c
 8002cc8:	005c005c 	.word	0x005c005c
 8002ccc:	005c005c 	.word	0x005c005c
 8002cd0:	005c005c 	.word	0x005c005c
 8002cd4:	005c005c 	.word	0x005c005c
 8002cd8:	005c005c 	.word	0x005c005c
 8002cdc:	0133005c 	.word	0x0133005c
 8002ce0:	005c005c 	.word	0x005c005c
 8002ce4:	005c005c 	.word	0x005c005c
 8002ce8:	005c005c 	.word	0x005c005c
 8002cec:	005c005c 	.word	0x005c005c
 8002cf0:	005c005c 	.word	0x005c005c
 8002cf4:	005c005c 	.word	0x005c005c
 8002cf8:	005c005c 	.word	0x005c005c
 8002cfc:	005c005c 	.word	0x005c005c
 8002d00:	005c005c 	.word	0x005c005c
 8002d04:	005c005c 	.word	0x005c005c
 8002d08:	005c005c 	.word	0x005c005c
 8002d0c:	005c005c 	.word	0x005c005c
 8002d10:	005f005c 	.word	0x005f005c
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002d14:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8002d16:	b002      	add	sp, #8
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8002d1a:	4a7f      	ldr	r2, [pc, #508]	; (8002f18 <UI_SetReg+0x2d8>)
 8002d1c:	fb82 3204 	smull	r3, r2, r2, r4
 8002d20:	eba2 74e4 	sub.w	r4, r2, r4, asr #31
 8002d24:	4630      	mov	r0, r6
 8002d26:	b221      	sxth	r1, r4
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f7fd ffc1 	bl	8000cb0 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002d2e:	2001      	movs	r0, #1
    break;
 8002d30:	e7f1      	b.n	8002d16 <UI_SetReg+0xd6>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8002d32:	b2e1      	uxtb	r1, r4
 8002d34:	f7ff ff7a 	bl	8002c2c <UI_SelectMC>
    break;
 8002d38:	e7ed      	b.n	8002d16 <UI_SetReg+0xd6>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8002d3a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002d3e:	f000 80d6 	beq.w	8002eee <UI_SetReg+0x2ae>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002d42:	2c01      	cmp	r4, #1
 8002d44:	f000 80dd 	beq.w	8002f02 <UI_SetReg+0x2c2>
  bool retVal = true;
 8002d48:	2001      	movs	r0, #1
}
 8002d4a:	b002      	add	sp, #8
 8002d4c:	bd70      	pop	{r4, r5, r6, pc}
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002d4e:	6828      	ldr	r0, [r5, #0]
 8002d50:	b221      	sxth	r1, r4
 8002d52:	f003 fe87 	bl	8006a64 <PID_SetKP>
  bool retVal = true;
 8002d56:	2001      	movs	r0, #1
    break;
 8002d58:	e7dd      	b.n	8002d16 <UI_SetReg+0xd6>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002d5a:	6828      	ldr	r0, [r5, #0]
 8002d5c:	b221      	sxth	r1, r4
 8002d5e:	f003 fe83 	bl	8006a68 <PID_SetKI>
  bool retVal = true;
 8002d62:	2001      	movs	r0, #1
    break;
 8002d64:	e7d7      	b.n	8002d16 <UI_SetReg+0xd6>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002d66:	6828      	ldr	r0, [r5, #0]
 8002d68:	b221      	sxth	r1, r4
 8002d6a:	f003 fe8d 	bl	8006a88 <PID_SetKD>
  bool retVal = true;
 8002d6e:	2001      	movs	r0, #1
    break;
 8002d70:	e7d1      	b.n	8002d16 <UI_SetReg+0xd6>
      currComp = MCI_GetIqdref(pMCI);
 8002d72:	4630      	mov	r0, r6
 8002d74:	f7fe f878 	bl	8000e68 <MCI_GetIqdref>
 8002d78:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8002d7a:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002d7e:	4630      	mov	r0, r6
 8002d80:	9901      	ldr	r1, [sp, #4]
 8002d82:	f7fd ffab 	bl	8000cdc <MCI_SetCurrentReferences>
  bool retVal = true;
 8002d86:	2001      	movs	r0, #1
    break;
 8002d88:	e7c5      	b.n	8002d16 <UI_SetReg+0xd6>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8002d8a:	6868      	ldr	r0, [r5, #4]
 8002d8c:	b221      	sxth	r1, r4
 8002d8e:	f003 fe69 	bl	8006a64 <PID_SetKP>
  bool retVal = true;
 8002d92:	2001      	movs	r0, #1
    break;
 8002d94:	e7bf      	b.n	8002d16 <UI_SetReg+0xd6>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8002d96:	6868      	ldr	r0, [r5, #4]
 8002d98:	b221      	sxth	r1, r4
 8002d9a:	f003 fe65 	bl	8006a68 <PID_SetKI>
  bool retVal = true;
 8002d9e:	2001      	movs	r0, #1
    break;
 8002da0:	e7b9      	b.n	8002d16 <UI_SetReg+0xd6>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8002da2:	6868      	ldr	r0, [r5, #4]
 8002da4:	b221      	sxth	r1, r4
 8002da6:	f003 fe6f 	bl	8006a88 <PID_SetKD>
  bool retVal = true;
 8002daa:	2001      	movs	r0, #1
    break;
 8002dac:	e7b3      	b.n	8002d16 <UI_SetReg+0xd6>
      currComp = MCI_GetIqdref(pMCI);
 8002dae:	4630      	mov	r0, r6
 8002db0:	f7fe f85a 	bl	8000e68 <MCI_GetIqdref>
 8002db4:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8002db6:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002dba:	4630      	mov	r0, r6
 8002dbc:	9901      	ldr	r1, [sp, #4]
 8002dbe:	f7fd ff8d 	bl	8000cdc <MCI_SetCurrentReferences>
  bool retVal = true;
 8002dc2:	2001      	movs	r0, #1
    break;
 8002dc4:	e7a7      	b.n	8002d16 <UI_SetReg+0xd6>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8002dc6:	68a8      	ldr	r0, [r5, #8]
 8002dc8:	b221      	sxth	r1, r4
 8002dca:	f003 fe4b 	bl	8006a64 <PID_SetKP>
  bool retVal = true;
 8002dce:	2001      	movs	r0, #1
    break;
 8002dd0:	e7a1      	b.n	8002d16 <UI_SetReg+0xd6>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8002dd2:	68a8      	ldr	r0, [r5, #8]
 8002dd4:	b221      	sxth	r1, r4
 8002dd6:	f003 fe47 	bl	8006a68 <PID_SetKI>
  bool retVal = true;
 8002dda:	2001      	movs	r0, #1
    break;
 8002ddc:	e79b      	b.n	8002d16 <UI_SetReg+0xd6>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8002dde:	68a8      	ldr	r0, [r5, #8]
 8002de0:	b221      	sxth	r1, r4
 8002de2:	f003 fe51 	bl	8006a88 <PID_SetKD>
  bool retVal = true;
 8002de6:	2001      	movs	r0, #1
    break;
 8002de8:	e795      	b.n	8002d16 <UI_SetReg+0xd6>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002dea:	6902      	ldr	r2, [r0, #16]
 8002dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002df0:	0f1a      	lsrs	r2, r3, #28
 8002df2:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002df4:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002df8:	d06d      	beq.n	8002ed6 <UI_SetReg+0x296>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002dfa:	2b09      	cmp	r3, #9
 8002dfc:	d1a4      	bne.n	8002d48 <UI_SetReg+0x108>
        pSPD = pMCT->pSpeedSensorAux;
 8002dfe:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 8002e00:	2e00      	cmp	r6, #0
 8002e02:	d0a1      	beq.n	8002d48 <UI_SetReg+0x108>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002e04:	aa01      	add	r2, sp, #4
 8002e06:	f10d 0102 	add.w	r1, sp, #2
 8002e0a:	4630      	mov	r0, r6
 8002e0c:	f005 fd6c 	bl	80088e8 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 8002e10:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002e14:	b221      	sxth	r1, r4
 8002e16:	4630      	mov	r0, r6
 8002e18:	f005 fd6e 	bl	80088f8 <STO_PLL_SetObserverGains>
    break;
 8002e1c:	e794      	b.n	8002d48 <UI_SetReg+0x108>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002e1e:	6902      	ldr	r2, [r0, #16]
 8002e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e24:	0f1a      	lsrs	r2, r3, #28
 8002e26:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e28:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e2c:	d04f      	beq.n	8002ece <UI_SetReg+0x28e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e2e:	2b09      	cmp	r3, #9
 8002e30:	d18a      	bne.n	8002d48 <UI_SetReg+0x108>
        pSPD = pMCT->pSpeedSensorAux;
 8002e32:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 8002e34:	2e00      	cmp	r6, #0
 8002e36:	d087      	beq.n	8002d48 <UI_SetReg+0x108>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002e38:	aa01      	add	r2, sp, #4
 8002e3a:	f10d 0102 	add.w	r1, sp, #2
 8002e3e:	4630      	mov	r0, r6
 8002e40:	f005 fd52 	bl	80088e8 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 8002e44:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002e48:	b222      	sxth	r2, r4
 8002e4a:	4630      	mov	r0, r6
 8002e4c:	f005 fd54 	bl	80088f8 <STO_PLL_SetObserverGains>
    break;
 8002e50:	e77a      	b.n	8002d48 <UI_SetReg+0x108>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002e52:	6902      	ldr	r2, [r0, #16]
 8002e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e58:	0f1a      	lsrs	r2, r3, #28
 8002e5a:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e5c:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e60:	d03d      	beq.n	8002ede <UI_SetReg+0x29e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e62:	2b09      	cmp	r3, #9
 8002e64:	f47f af70 	bne.w	8002d48 <UI_SetReg+0x108>
        pSPD = pMCT->pSpeedSensorAux;
 8002e68:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 8002e6a:	2e00      	cmp	r6, #0
 8002e6c:	f43f af6c 	beq.w	8002d48 <UI_SetReg+0x108>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002e70:	aa01      	add	r2, sp, #4
 8002e72:	f10d 0102 	add.w	r1, sp, #2
 8002e76:	4630      	mov	r0, r6
 8002e78:	f005 fd42 	bl	8008900 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 8002e7c:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002e80:	b222      	sxth	r2, r4
 8002e82:	4630      	mov	r0, r6
 8002e84:	f005 fd4a 	bl	800891c <STO_SetPLLGains>
    break;
 8002e88:	e75e      	b.n	8002d48 <UI_SetReg+0x108>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002e8a:	6902      	ldr	r2, [r0, #16]
 8002e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e90:	0f1a      	lsrs	r2, r3, #28
 8002e92:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e94:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e98:	d025      	beq.n	8002ee6 <UI_SetReg+0x2a6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e9a:	2b09      	cmp	r3, #9
 8002e9c:	f47f af54 	bne.w	8002d48 <UI_SetReg+0x108>
        pSPD = pMCT->pSpeedSensorAux;
 8002ea0:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 8002ea2:	2e00      	cmp	r6, #0
 8002ea4:	f43f af50 	beq.w	8002d48 <UI_SetReg+0x108>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002ea8:	aa01      	add	r2, sp, #4
 8002eaa:	f10d 0102 	add.w	r1, sp, #2
 8002eae:	4630      	mov	r0, r6
 8002eb0:	f005 fd26 	bl	8008900 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 8002eb4:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002eb8:	b221      	sxth	r1, r4
 8002eba:	4630      	mov	r0, r6
 8002ebc:	f005 fd2e 	bl	800891c <STO_SetPLLGains>
    break;
 8002ec0:	e742      	b.n	8002d48 <UI_SetReg+0x108>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8002ec2:	4630      	mov	r0, r6
 8002ec4:	b221      	sxth	r1, r4
 8002ec6:	f7fd fffd 	bl	8000ec4 <MCI_SetIdref>
  bool retVal = true;
 8002eca:	2001      	movs	r0, #1
    break;
 8002ecc:	e723      	b.n	8002d16 <UI_SetReg+0xd6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ece:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002ed0:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ed2:	d1af      	bne.n	8002e34 <UI_SetReg+0x1f4>
 8002ed4:	e7ad      	b.n	8002e32 <UI_SetReg+0x1f2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ed6:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002ed8:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002eda:	d191      	bne.n	8002e00 <UI_SetReg+0x1c0>
 8002edc:	e78f      	b.n	8002dfe <UI_SetReg+0x1be>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ede:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002ee0:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ee2:	d1c2      	bne.n	8002e6a <UI_SetReg+0x22a>
 8002ee4:	e7c0      	b.n	8002e68 <UI_SetReg+0x228>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ee6:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002ee8:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002eea:	d1da      	bne.n	8002ea2 <UI_SetReg+0x262>
 8002eec:	e7d8      	b.n	8002ea0 <UI_SetReg+0x260>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002eee:	4630      	mov	r0, r6
 8002ef0:	f7fd ffe4 	bl	8000ebc <MCI_GetTeref>
 8002ef4:	4622      	mov	r2, r4
 8002ef6:	4601      	mov	r1, r0
 8002ef8:	4630      	mov	r0, r6
 8002efa:	f7fd fee5 	bl	8000cc8 <MCI_ExecTorqueRamp>
  bool retVal = true;
 8002efe:	2001      	movs	r0, #1
 8002f00:	e709      	b.n	8002d16 <UI_SetReg+0xd6>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8002f02:	4630      	mov	r0, r6
 8002f04:	f7fd ff82 	bl	8000e0c <MCI_GetMecSpeedRefUnit>
 8002f08:	2200      	movs	r2, #0
 8002f0a:	4601      	mov	r1, r0
 8002f0c:	4630      	mov	r0, r6
 8002f0e:	f7fd fecf 	bl	8000cb0 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002f12:	4620      	mov	r0, r4
 8002f14:	e6ff      	b.n	8002d16 <UI_SetReg+0xd6>
 8002f16:	bf00      	nop
 8002f18:	2aaaaaab 	.word	0x2aaaaaab

08002f1c <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8002f1c:	b570      	push	{r4, r5, r6, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002f1e:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002f22:	7d03      	ldrb	r3, [r0, #20]
{
 8002f24:	b090      	sub	sp, #64	; 0x40
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002f26:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002f2a:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 8002f2e:	2a00      	cmp	r2, #0
 8002f30:	f000 8089 	beq.w	8003046 <UI_GetReg+0x12a>
  {
    *success = true;
 8002f34:	2401      	movs	r4, #1
 8002f36:	7014      	strb	r4, [r2, #0]
  }

  switch (bRegID)
 8002f38:	2981      	cmp	r1, #129	; 0x81
 8002f3a:	f200 8295 	bhi.w	8003468 <UI_GetReg+0x54c>
 8002f3e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002f42:	01d7      	.short	0x01d7
 8002f44:	01cf01d3 	.word	0x01cf01d3
 8002f48:	01df01cb 	.word	0x01df01cb
 8002f4c:	01af01b3 	.word	0x01af01b3
 8002f50:	0102011c 	.word	0x0102011c
 8002f54:	01240128 	.word	0x01240128
 8002f58:	00fd0120 	.word	0x00fd0120
 8002f5c:	013f0143 	.word	0x013f0143
 8002f60:	012c013b 	.word	0x012c013b
 8002f64:	029301e6 	.word	0x029301e6
 8002f68:	01770293 	.word	0x01770293
 8002f6c:	0293015f 	.word	0x0293015f
 8002f70:	02930293 	.word	0x02930293
 8002f74:	0157015b 	.word	0x0157015b
 8002f78:	02930153 	.word	0x02930153
 8002f7c:	014c0293 	.word	0x014c0293
 8002f80:	028c0147 	.word	0x028c0147
 8002f84:	02850293 	.word	0x02850293
 8002f88:	02430248 	.word	0x02430248
 8002f8c:	027b0280 	.word	0x027b0280
 8002f90:	028c0147 	.word	0x028c0147
 8002f94:	00fd0102 	.word	0x00fd0102
 8002f98:	017201da 	.word	0x017201da
 8002f9c:	024d0252 	.word	0x024d0252
 8002fa0:	02930293 	.word	0x02930293
 8002fa4:	02570269 	.word	0x02570269
 8002fa8:	021b022f 	.word	0x021b022f
 8002fac:	01b7010a 	.word	0x01b7010a
 8002fb0:	02930293 	.word	0x02930293
 8002fb4:	02930293 	.word	0x02930293
 8002fb8:	02930293 	.word	0x02930293
 8002fbc:	02930293 	.word	0x02930293
 8002fc0:	01f90200 	.word	0x01f90200
 8002fc4:	020700fd 	.word	0x020700fd
 8002fc8:	0293019b 	.word	0x0293019b
 8002fcc:	02930293 	.word	0x02930293
 8002fd0:	02930293 	.word	0x02930293
 8002fd4:	02930293 	.word	0x02930293
 8002fd8:	02930293 	.word	0x02930293
 8002fdc:	02930293 	.word	0x02930293
 8002fe0:	02930293 	.word	0x02930293
 8002fe4:	02930293 	.word	0x02930293
 8002fe8:	02930293 	.word	0x02930293
 8002fec:	02930293 	.word	0x02930293
 8002ff0:	02930293 	.word	0x02930293
 8002ff4:	02930293 	.word	0x02930293
 8002ff8:	0293018e 	.word	0x0293018e
 8002ffc:	02930293 	.word	0x02930293
 8003000:	02930293 	.word	0x02930293
 8003004:	02930293 	.word	0x02930293
 8003008:	02930293 	.word	0x02930293
 800300c:	02930293 	.word	0x02930293
 8003010:	02930293 	.word	0x02930293
 8003014:	02930293 	.word	0x02930293
 8003018:	02930293 	.word	0x02930293
 800301c:	018a0293 	.word	0x018a0293
 8003020:	02910186 	.word	0x02910186
 8003024:	01070293 	.word	0x01070293
 8003028:	02930107 	.word	0x02930107
 800302c:	02930293 	.word	0x02930293
 8003030:	02930293 	.word	0x02930293
 8003034:	02930293 	.word	0x02930293
 8003038:	02930293 	.word	0x02930293
 800303c:	02930293 	.word	0x02930293
 8003040:	02930293 	.word	0x02930293
 8003044:	00fa      	.short	0x00fa
 8003046:	2973      	cmp	r1, #115	; 0x73
 8003048:	d875      	bhi.n	8003136 <UI_GetReg+0x21a>
 800304a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800304e:	0151      	.short	0x0151
 8003050:	0149014d 	.word	0x0149014d
 8003054:	01590145 	.word	0x01590145
 8003058:	0129012d 	.word	0x0129012d
 800305c:	007c0096 	.word	0x007c0096
 8003060:	009e00a2 	.word	0x009e00a2
 8003064:	0077009a 	.word	0x0077009a
 8003068:	00b900bd 	.word	0x00b900bd
 800306c:	00a600b5 	.word	0x00a600b5
 8003070:	00740160 	.word	0x00740160
 8003074:	00f10074 	.word	0x00f10074
 8003078:	007400d9 	.word	0x007400d9
 800307c:	00740074 	.word	0x00740074
 8003080:	00d100d5 	.word	0x00d100d5
 8003084:	007400cd 	.word	0x007400cd
 8003088:	00c60074 	.word	0x00c60074
 800308c:	020600c1 	.word	0x020600c1
 8003090:	01ff0074 	.word	0x01ff0074
 8003094:	01bd01c2 	.word	0x01bd01c2
 8003098:	01f501fa 	.word	0x01f501fa
 800309c:	020600c1 	.word	0x020600c1
 80030a0:	0077007c 	.word	0x0077007c
 80030a4:	00ec0154 	.word	0x00ec0154
 80030a8:	01c701cc 	.word	0x01c701cc
 80030ac:	00740074 	.word	0x00740074
 80030b0:	01d101e3 	.word	0x01d101e3
 80030b4:	019501a9 	.word	0x019501a9
 80030b8:	01310084 	.word	0x01310084
 80030bc:	00740074 	.word	0x00740074
 80030c0:	00740074 	.word	0x00740074
 80030c4:	00740074 	.word	0x00740074
 80030c8:	00740074 	.word	0x00740074
 80030cc:	0173017a 	.word	0x0173017a
 80030d0:	01810077 	.word	0x01810077
 80030d4:	00740115 	.word	0x00740115
 80030d8:	00740074 	.word	0x00740074
 80030dc:	00740074 	.word	0x00740074
 80030e0:	00740074 	.word	0x00740074
 80030e4:	00740074 	.word	0x00740074
 80030e8:	00740074 	.word	0x00740074
 80030ec:	00740074 	.word	0x00740074
 80030f0:	00740074 	.word	0x00740074
 80030f4:	00740074 	.word	0x00740074
 80030f8:	00740074 	.word	0x00740074
 80030fc:	00740074 	.word	0x00740074
 8003100:	00740074 	.word	0x00740074
 8003104:	00740108 	.word	0x00740108
 8003108:	00740074 	.word	0x00740074
 800310c:	00740074 	.word	0x00740074
 8003110:	00740074 	.word	0x00740074
 8003114:	00740074 	.word	0x00740074
 8003118:	00740074 	.word	0x00740074
 800311c:	00740074 	.word	0x00740074
 8003120:	00740074 	.word	0x00740074
 8003124:	00740074 	.word	0x00740074
 8003128:	01040074 	.word	0x01040074
 800312c:	020b0100 	.word	0x020b0100
 8003130:	00810074 	.word	0x00810074
 8003134:	0081      	.short	0x0081
  int32_t bRetVal = 0;
 8003136:	2000      	movs	r0, #0
      }
	}
    break;
  }
  return bRetVal;
}
 8003138:	b010      	add	sp, #64	; 0x40
 800313a:	bd70      	pop	{r4, r5, r6, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 800313c:	4630      	mov	r0, r6
 800313e:	f7fd fe93 	bl	8000e68 <MCI_GetIqdref>
 8003142:	1400      	asrs	r0, r0, #16
    break;
 8003144:	e7f8      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8003146:	4630      	mov	r0, r6
 8003148:	f7fd fe8e 	bl	8000e68 <MCI_GetIqdref>
 800314c:	b200      	sxth	r0, r0
    break;
 800314e:	e7f3      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = CTRBDID;
 8003150:	f242 701f 	movw	r0, #10015	; 0x271f
 8003154:	e7f0      	b.n	8003138 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003156:	6902      	ldr	r2, [r0, #16]
 8003158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800315c:	0f1a      	lsrs	r2, r3, #28
 800315e:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003160:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003164:	f000 8191 	beq.w	800348a <UI_GetReg+0x56e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003168:	2b09      	cmp	r3, #9
 800316a:	d1e4      	bne.n	8003136 <UI_GetReg+0x21a>
        pSPD =  pMCT->pSpeedSensorAux;
 800316c:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800316e:	2800      	cmp	r0, #0
 8003170:	d0e1      	beq.n	8003136 <UI_GetReg+0x21a>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 8003172:	f005 fb99 	bl	80088a8 <STO_PLL_GetEstimatedBemf>
 8003176:	b200      	sxth	r0, r0
 8003178:	e7de      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 800317a:	6828      	ldr	r0, [r5, #0]
 800317c:	f003 fc86 	bl	8006a8c <PID_GetKD>
    break;
 8003180:	e7da      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8003182:	6868      	ldr	r0, [r5, #4]
 8003184:	f003 fc82 	bl	8006a8c <PID_GetKD>
    break;
 8003188:	e7d6      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 800318a:	6868      	ldr	r0, [r5, #4]
 800318c:	f003 fc72 	bl	8006a74 <PID_GetKI>
    break;
 8003190:	e7d2      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8003192:	6868      	ldr	r0, [r5, #4]
 8003194:	f003 fc6a 	bl	8006a6c <PID_GetKP>
    break;
 8003198:	e7ce      	b.n	8003138 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800319a:	6902      	ldr	r2, [r0, #16]
 800319c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031a0:	0f1a      	lsrs	r2, r3, #28
 80031a2:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031a4:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031a8:	f000 81a3 	beq.w	80034f2 <UI_GetReg+0x5d6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031ac:	2b09      	cmp	r3, #9
 80031ae:	f000 81a3 	beq.w	80034f8 <UI_GetReg+0x5dc>
      bRetVal = (int32_t)hPgain;
 80031b2:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
    break;
 80031b6:	e7bf      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 80031b8:	68a8      	ldr	r0, [r5, #8]
 80031ba:	f003 fc67 	bl	8006a8c <PID_GetKD>
    break;
 80031be:	e7bb      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 80031c0:	68a8      	ldr	r0, [r5, #8]
 80031c2:	f003 fc57 	bl	8006a74 <PID_GetKI>
    break;
 80031c6:	e7b7      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 80031c8:	68a8      	ldr	r0, [r5, #8]
 80031ca:	f003 fc4f 	bl	8006a6c <PID_GetKP>
    break;
 80031ce:	e7b3      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = MCI_GetIqd(pMCI).q;
 80031d0:	4630      	mov	r0, r6
 80031d2:	f7fd fe3b 	bl	8000e4c <MCI_GetIqd>
 80031d6:	b200      	sxth	r0, r0
    break;
 80031d8:	e7ae      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 80031da:	4630      	mov	r0, r6
 80031dc:	f7fd fe0e 	bl	8000dfc <MCI_GetAvrgMecSpeedUnit>
 80031e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80031e4:	0040      	lsls	r0, r0, #1
    break;
 80031e6:	e7a7      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 80031e8:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80031ea:	f003 fbd9 	bl	80069a0 <MPM_GetAvrgElMotorPowerW>
    break;
 80031ee:	e7a3      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 80031f0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80031f2:	f003 fc19 	bl	8006a28 <NTC_GetAvTemp_C>
    break;
 80031f6:	e79f      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 80031f8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80031fa:	f003 fb41 	bl	8006880 <VBS_GetAvBusVoltage_V>
    break;
 80031fe:	e79b      	b.n	8003138 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003200:	6902      	ldr	r2, [r0, #16]
 8003202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003206:	0f1a      	lsrs	r2, r3, #28
 8003208:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800320a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800320e:	f000 8132 	beq.w	8003476 <UI_GetReg+0x55a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003212:	2b09      	cmp	r3, #9
 8003214:	d1cd      	bne.n	80031b2 <UI_GetReg+0x296>
        pSPD = pMCT->pSpeedSensorAux;
 8003216:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003218:	2800      	cmp	r0, #0
 800321a:	d0ca      	beq.n	80031b2 <UI_GetReg+0x296>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 800321c:	aa0f      	add	r2, sp, #60	; 0x3c
 800321e:	a90e      	add	r1, sp, #56	; 0x38
 8003220:	f005 fb6e 	bl	8008900 <STO_GetPLLGains>
 8003224:	e7c5      	b.n	80031b2 <UI_GetReg+0x296>
      bRetVal = MCI_GetVqd(pMCI).d;
 8003226:	4630      	mov	r0, r6
 8003228:	f7fd fe2c 	bl	8000e84 <MCI_GetVqd>
 800322c:	1400      	asrs	r0, r0, #16
    break;
 800322e:	e783      	b.n	8003138 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003230:	6902      	ldr	r2, [r0, #16]
 8003232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003236:	0f1a      	lsrs	r2, r3, #28
 8003238:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800323a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800323e:	f000 8142 	beq.w	80034c6 <UI_GetReg+0x5aa>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003242:	2b09      	cmp	r3, #9
 8003244:	f000 8142 	beq.w	80034cc <UI_GetReg+0x5b0>
      bRetVal = (int32_t)hIgain;
 8003248:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
    break;
 800324c:	e774      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 800324e:	6828      	ldr	r0, [r5, #0]
 8003250:	f003 fc18 	bl	8006a84 <PID_GetKIDivisor>
    break;
 8003254:	e770      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8003256:	6828      	ldr	r0, [r5, #0]
 8003258:	f003 fc12 	bl	8006a80 <PID_GetKPDivisor>
    break;
 800325c:	e76c      	b.n	8003138 <UI_GetReg+0x21c>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 800325e:	4630      	mov	r0, r6
 8003260:	f7fd fd9c 	bl	8000d9c <MCI_GetControlMode>
 8003264:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8003266:	4630      	mov	r0, r6
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8003268:	f000 8122 	beq.w	80034b0 <UI_GetReg+0x594>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 800326c:	f7fd fdce 	bl	8000e0c <MCI_GetMecSpeedRefUnit>
 8003270:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003274:	0040      	lsls	r0, r0, #1
 8003276:	e75f      	b.n	8003138 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003278:	6902      	ldr	r2, [r0, #16]
 800327a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800327e:	0f1a      	lsrs	r2, r3, #28
 8003280:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003282:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003286:	f000 8105 	beq.w	8003494 <UI_GetReg+0x578>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800328a:	2b09      	cmp	r3, #9
 800328c:	f47f af53 	bne.w	8003136 <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 8003290:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003292:	2800      	cmp	r0, #0
 8003294:	f43f af4f 	beq.w	8003136 <UI_GetReg+0x21a>
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8003298:	f005 fb5c 	bl	8008954 <STO_PLL_GetObservedBemfLevel>
 800329c:	1400      	asrs	r0, r0, #16
 800329e:	e74b      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 80032a0:	6828      	ldr	r0, [r5, #0]
 80032a2:	f003 fbe7 	bl	8006a74 <PID_GetKI>
    break;
 80032a6:	e747      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 80032a8:	6828      	ldr	r0, [r5, #0]
 80032aa:	f003 fbdf 	bl	8006a6c <PID_GetKP>
    break;
 80032ae:	e743      	b.n	8003138 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80032b0:	6902      	ldr	r2, [r0, #16]
 80032b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032b6:	0f1a      	lsrs	r2, r3, #28
 80032b8:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032ba:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032be:	f000 810e 	beq.w	80034de <UI_GetReg+0x5c2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032c2:	2b09      	cmp	r3, #9
 80032c4:	f47f af37 	bne.w	8003136 <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 80032c8:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80032ca:	2800      	cmp	r0, #0
 80032cc:	f43f af33 	beq.w	8003136 <UI_GetReg+0x21a>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 80032d0:	f005 faea 	bl	80088a8 <STO_PLL_GetEstimatedBemf>
 80032d4:	1400      	asrs	r0, r0, #16
 80032d6:	e72f      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 80032d8:	4630      	mov	r0, r6
 80032da:	f7fd fd5f 	bl	8000d9c <MCI_GetControlMode>
    break;
 80032de:	e72b      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 80032e0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80032e2:	f005 f855 	bl	8008390 <STM_GetState>
	break;
 80032e6:	e727      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 80032e8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80032ea:	f005 f85f 	bl	80083ac <STM_GetFaultState>
	break;
 80032ee:	e723      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 80032f0:	f7ff fca4 	bl	8002c3c <UI_GetSelectedMC>
    break;
 80032f4:	e720      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = MCI_GetVqd(pMCI).q;
 80032f6:	4630      	mov	r0, r6
 80032f8:	f7fd fdc4 	bl	8000e84 <MCI_GetVqd>
 80032fc:	b200      	sxth	r0, r0
    break;
 80032fe:	e71b      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8003300:	4630      	mov	r0, r6
 8003302:	f7fd fd83 	bl	8000e0c <MCI_GetMecSpeedRefUnit>
 8003306:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800330a:	0040      	lsls	r0, r0, #1
    break;
 800330c:	e714      	b.n	8003138 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800330e:	6902      	ldr	r2, [r0, #16]
 8003310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003314:	0f1a      	lsrs	r2, r3, #28
 8003316:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003318:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800331c:	f000 80e4 	beq.w	80034e8 <UI_GetReg+0x5cc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003320:	2b09      	cmp	r3, #9
 8003322:	d191      	bne.n	8003248 <UI_GetReg+0x32c>
        pSPD = pMCT->pSpeedSensorAux;
 8003324:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003326:	2800      	cmp	r0, #0
 8003328:	d08e      	beq.n	8003248 <UI_GetReg+0x32c>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 800332a:	aa0f      	add	r2, sp, #60	; 0x3c
 800332c:	a90e      	add	r1, sp, #56	; 0x38
 800332e:	f005 fadb 	bl	80088e8 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC2;
 8003332:	e789      	b.n	8003248 <UI_GetReg+0x32c>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8003334:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003336:	f004 ff79 	bl	800822c <STC_GetMinAppNegativeMecSpeedUnit>
 800333a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800333e:	0040      	lsls	r0, r0, #1
    break;
 8003340:	e6fa      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8003342:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003344:	f004 ff70 	bl	8008228 <STC_GetMaxAppPositiveMecSpeedUnit>
 8003348:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800334c:	0040      	lsls	r0, r0, #1
    break;
 800334e:	e6f3      	b.n	8003138 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003350:	6902      	ldr	r2, [r0, #16]
 8003352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003356:	0f1a      	lsrs	r2, r3, #28
 8003358:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800335a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800335e:	f000 808f 	beq.w	8003480 <UI_GetReg+0x564>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003362:	2b09      	cmp	r3, #9
 8003364:	f47f aee7 	bne.w	8003136 <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 8003368:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800336a:	2800      	cmp	r0, #0
 800336c:	f43f aee3 	beq.w	8003136 <UI_GetReg+0x21a>
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8003370:	f005 faec 	bl	800894c <STO_PLL_GetEstimatedBemfLevel>
 8003374:	1400      	asrs	r0, r0, #16
 8003376:	e6df      	b.n	8003138 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003378:	6902      	ldr	r2, [r0, #16]
 800337a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800337e:	0f1a      	lsrs	r2, r3, #28
 8003380:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003382:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003386:	f000 808e 	beq.w	80034a6 <UI_GetReg+0x58a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800338a:	2b09      	cmp	r3, #9
 800338c:	f47f aed3 	bne.w	8003136 <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 8003390:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003392:	2800      	cmp	r0, #0
 8003394:	f43f aecf 	beq.w	8003136 <UI_GetReg+0x21a>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 8003398:	f005 fa92 	bl	80088c0 <STO_PLL_GetEstimatedCurrent>
 800339c:	1400      	asrs	r0, r0, #16
 800339e:	e6cb      	b.n	8003138 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80033a0:	6902      	ldr	r2, [r0, #16]
 80033a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033a6:	0f1a      	lsrs	r2, r3, #28
 80033a8:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033aa:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033ae:	f000 8085 	beq.w	80034bc <UI_GetReg+0x5a0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033b2:	2b09      	cmp	r3, #9
 80033b4:	f47f aebf 	bne.w	8003136 <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 80033b8:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80033ba:	2800      	cmp	r0, #0
 80033bc:	f43f aebb 	beq.w	8003136 <UI_GetReg+0x21a>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 80033c0:	f005 fa7e 	bl	80088c0 <STO_PLL_GetEstimatedCurrent>
 80033c4:	b200      	sxth	r0, r0
 80033c6:	e6b7      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = MCI_GetIab(pMCI).b;
 80033c8:	4630      	mov	r0, r6
 80033ca:	f7fd fd23 	bl	8000e14 <MCI_GetIab>
 80033ce:	1400      	asrs	r0, r0, #16
    break;
 80033d0:	e6b2      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = MCI_GetIab(pMCI).a;
 80033d2:	4630      	mov	r0, r6
 80033d4:	f7fd fd1e 	bl	8000e14 <MCI_GetIab>
 80033d8:	b200      	sxth	r0, r0
    break;
 80033da:	e6ad      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 80033dc:	4630      	mov	r0, r6
 80033de:	f7fd fd5f 	bl	8000ea0 <MCI_GetValphabeta>
 80033e2:	1400      	asrs	r0, r0, #16
    break;
 80033e4:	e6a8      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 80033e6:	4630      	mov	r0, r6
 80033e8:	f7fd fd5a 	bl	8000ea0 <MCI_GetValphabeta>
 80033ec:	b200      	sxth	r0, r0
    break;
 80033ee:	e6a3      	b.n	8003138 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80033f0:	6902      	ldr	r2, [r0, #16]
 80033f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033f6:	0f1a      	lsrs	r2, r3, #28
 80033f8:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033fa:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033fe:	d036      	beq.n	800346e <UI_GetReg+0x552>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003400:	2b09      	cmp	r3, #9
 8003402:	f47f ae98 	bne.w	8003136 <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 8003406:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003408:	2800      	cmp	r0, #0
 800340a:	f43f ae94 	beq.w	8003136 <UI_GetReg+0x21a>
        bRetVal = SPD_GetS16Speed(pSPD);
 800340e:	f004 fe4b 	bl	80080a8 <SPD_GetS16Speed>
 8003412:	e691      	b.n	8003138 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003414:	6902      	ldr	r2, [r0, #16]
 8003416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800341a:	0f1a      	lsrs	r2, r3, #28
 800341c:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800341e:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003422:	d03c      	beq.n	800349e <UI_GetReg+0x582>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003424:	2b09      	cmp	r3, #9
 8003426:	f47f ae86 	bne.w	8003136 <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 800342a:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800342c:	2800      	cmp	r0, #0
 800342e:	f43f ae82 	beq.w	8003136 <UI_GetReg+0x21a>
        bRetVal = SPD_GetElAngle(pSPD);
 8003432:	f004 fe01 	bl	8008038 <SPD_GetElAngle>
 8003436:	e67f      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8003438:	4630      	mov	r0, r6
 800343a:	f7fd fcf9 	bl	8000e30 <MCI_GetIalphabeta>
 800343e:	1400      	asrs	r0, r0, #16
    break;
 8003440:	e67a      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8003442:	4630      	mov	r0, r6
 8003444:	f7fd fcf4 	bl	8000e30 <MCI_GetIalphabeta>
 8003448:	b200      	sxth	r0, r0
    break;
 800344a:	e675      	b.n	8003138 <UI_GetReg+0x21c>
      if (pMCT->pRevupCtrl)
 800344c:	6968      	ldr	r0, [r5, #20]
 800344e:	2800      	cmp	r0, #0
 8003450:	f43f ae71 	beq.w	8003136 <UI_GetReg+0x21a>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8003454:	f004 fdec 	bl	8008030 <RUC_GetNumberOfPhases>
 8003458:	e66e      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = MCI_GetIqd(pMCI).d;
 800345a:	4630      	mov	r0, r6
 800345c:	f7fd fcf6 	bl	8000e4c <MCI_GetIqd>
 8003460:	1400      	asrs	r0, r0, #16
    break;
 8003462:	e669      	b.n	8003138 <UI_GetReg+0x21c>
      bRetVal = (int32_t)(MC_UID);
 8003464:	4829      	ldr	r0, [pc, #164]	; (800350c <UI_GetReg+0x5f0>)
 8003466:	e667      	b.n	8003138 <UI_GetReg+0x21c>
        *success = false;
 8003468:	2000      	movs	r0, #0
 800346a:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 800346c:	e664      	b.n	8003138 <UI_GetReg+0x21c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800346e:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003470:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003472:	d1c9      	bne.n	8003408 <UI_GetReg+0x4ec>
 8003474:	e7c7      	b.n	8003406 <UI_GetReg+0x4ea>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003476:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003478:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800347a:	f47f aecd 	bne.w	8003218 <UI_GetReg+0x2fc>
 800347e:	e6ca      	b.n	8003216 <UI_GetReg+0x2fa>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003480:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003482:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003484:	f47f af71 	bne.w	800336a <UI_GetReg+0x44e>
 8003488:	e76e      	b.n	8003368 <UI_GetReg+0x44c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800348a:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800348c:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800348e:	f47f ae6e 	bne.w	800316e <UI_GetReg+0x252>
 8003492:	e66b      	b.n	800316c <UI_GetReg+0x250>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003494:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003496:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003498:	f47f aefb 	bne.w	8003292 <UI_GetReg+0x376>
 800349c:	e6f8      	b.n	8003290 <UI_GetReg+0x374>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800349e:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80034a0:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034a2:	d1c3      	bne.n	800342c <UI_GetReg+0x510>
 80034a4:	e7c1      	b.n	800342a <UI_GetReg+0x50e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034a6:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80034a8:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034aa:	f47f af72 	bne.w	8003392 <UI_GetReg+0x476>
 80034ae:	e76f      	b.n	8003390 <UI_GetReg+0x474>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80034b0:	f7fd fc98 	bl	8000de4 <MCI_GetLastRampFinalSpeed>
 80034b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80034b8:	0040      	lsls	r0, r0, #1
 80034ba:	e63d      	b.n	8003138 <UI_GetReg+0x21c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034bc:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80034be:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034c0:	f47f af7b 	bne.w	80033ba <UI_GetReg+0x49e>
 80034c4:	e778      	b.n	80033b8 <UI_GetReg+0x49c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034c6:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80034c8:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034ca:	d100      	bne.n	80034ce <UI_GetReg+0x5b2>
        pSPD = pMCT->pSpeedSensorAux;
 80034cc:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80034ce:	2800      	cmp	r0, #0
 80034d0:	f43f aeba 	beq.w	8003248 <UI_GetReg+0x32c>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80034d4:	aa0f      	add	r2, sp, #60	; 0x3c
 80034d6:	a90e      	add	r1, sp, #56	; 0x38
 80034d8:	f005 fa12 	bl	8008900 <STO_GetPLLGains>
 80034dc:	e6b4      	b.n	8003248 <UI_GetReg+0x32c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034de:	2b09      	cmp	r3, #9
       pSPD = pMCT->pSpeedSensorMain;
 80034e0:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034e2:	f47f aef2 	bne.w	80032ca <UI_GetReg+0x3ae>
 80034e6:	e6ef      	b.n	80032c8 <UI_GetReg+0x3ac>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034e8:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80034ea:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034ec:	f47f af1b 	bne.w	8003326 <UI_GetReg+0x40a>
 80034f0:	e718      	b.n	8003324 <UI_GetReg+0x408>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034f2:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80034f4:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034f6:	d100      	bne.n	80034fa <UI_GetReg+0x5de>
        pSPD = pMCT->pSpeedSensorAux;
 80034f8:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80034fa:	2800      	cmp	r0, #0
 80034fc:	f43f ae59 	beq.w	80031b2 <UI_GetReg+0x296>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8003500:	aa0f      	add	r2, sp, #60	; 0x3c
 8003502:	a90e      	add	r1, sp, #56	; 0x38
 8003504:	f005 f9f0 	bl	80088e8 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC1;
 8003508:	e653      	b.n	80031b2 <UI_GetReg+0x296>
 800350a:	bf00      	nop
 800350c:	34a6847a 	.word	0x34a6847a

08003510 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8003510:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003512:	6883      	ldr	r3, [r0, #8]
 8003514:	7d02      	ldrb	r2, [r0, #20]
 8003516:	3901      	subs	r1, #1
 8003518:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]

  switch (bCmdID)
 800351c:	290d      	cmp	r1, #13
 800351e:	d808      	bhi.n	8003532 <UI_ExecCmd+0x22>
 8003520:	e8df f001 	tbb	[pc, r1]
 8003524:	0e091419 	.word	0x0e091419
 8003528:	231e100e 	.word	0x231e100e
 800352c:	07070728 	.word	0x07070728
 8003530:	1407      	.short	0x1407
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003532:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8003534:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 8003536:	4620      	mov	r0, r4
 8003538:	f7fd fc2c 	bl	8000d94 <MCI_GetSTMState>
 800353c:	2806      	cmp	r0, #6
 800353e:	d01e      	beq.n	800357e <UI_ExecCmd+0x6e>
  bool retVal = true;
 8003540:	2001      	movs	r0, #1
}
 8003542:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8003544:	4620      	mov	r0, r4
 8003546:	f7fd fc25 	bl	8000d94 <MCI_GetSTMState>
 800354a:	b120      	cbz	r0, 8003556 <UI_ExecCmd+0x46>
        MCI_StopMotor(pMCI);
 800354c:	4620      	mov	r0, r4
 800354e:	f7fd fbd9 	bl	8000d04 <MCI_StopMotor>
  bool retVal = true;
 8003552:	2001      	movs	r0, #1
}
 8003554:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8003556:	4620      	mov	r0, r4
 8003558:	f7fd fbca 	bl	8000cf0 <MCI_StartMotor>
  bool retVal = true;
 800355c:	2001      	movs	r0, #1
}
 800355e:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8003560:	4620      	mov	r0, r4
 8003562:	f7fd fbd3 	bl	8000d0c <MCI_FaultAcknowledged>
  bool retVal = true;
 8003566:	2001      	movs	r0, #1
}
 8003568:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 800356a:	4620      	mov	r0, r4
 800356c:	f7fd fbd2 	bl	8000d14 <MCI_EncoderAlign>
  bool retVal = true;
 8003570:	2001      	movs	r0, #1
}
 8003572:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8003574:	4620      	mov	r0, r4
 8003576:	f7fd fcaf 	bl	8000ed8 <MCI_Clear_Iqdref>
  bool retVal = true;
 800357a:	2001      	movs	r0, #1
}
 800357c:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 800357e:	4620      	mov	r0, r4
 8003580:	f7fd fc38 	bl	8000df4 <MCI_StopRamp>
  bool retVal = true;
 8003584:	2001      	movs	r0, #1
}
 8003586:	bd10      	pop	{r4, pc}

08003588 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8003588:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800358a:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800358c:	7d04      	ldrb	r4, [r0, #20]
 800358e:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8003590:	fb83 c301 	smull	ip, r3, r3, r1
 8003594:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8003598:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800359c:	b209      	sxth	r1, r1
 800359e:	f7fd fb87 	bl	8000cb0 <MCI_ExecSpeedRamp>
  return true;
}
 80035a2:	2001      	movs	r0, #1
 80035a4:	bd10      	pop	{r4, pc}
 80035a6:	bf00      	nop
 80035a8:	2aaaaaab 	.word	0x2aaaaaab

080035ac <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 80035ac:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80035ae:	6883      	ldr	r3, [r0, #8]
 80035b0:	7d04      	ldrb	r4, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 80035b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80035b6:	f7fd fb87 	bl	8000cc8 <MCI_ExecTorqueRamp>
  return true;
}
 80035ba:	2001      	movs	r0, #1
 80035bc:	bd10      	pop	{r4, pc}
 80035be:	bf00      	nop

080035c0 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80035c2:	7d04      	ldrb	r4, [r0, #20]
 80035c4:	68c0      	ldr	r0, [r0, #12]
 80035c6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80035ca:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 80035cc:	b19c      	cbz	r4, 80035f6 <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80035ce:	4620      	mov	r0, r4
 80035d0:	461e      	mov	r6, r3
 80035d2:	4617      	mov	r7, r2
 80035d4:	460d      	mov	r5, r1
 80035d6:	f004 fd15 	bl	8008004 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80035da:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80035dc:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80035de:	4620      	mov	r0, r4
 80035e0:	f004 fd16 	bl	8008010 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80035e4:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80035e6:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80035e8:	4620      	mov	r0, r4
 80035ea:	f004 fd19 	bl	8008020 <RUC_GetPhaseFinalTorque>
 80035ee:	9b06      	ldr	r3, [sp, #24]
 80035f0:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 80035f2:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 80035f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 80035f6:	4620      	mov	r0, r4
}
 80035f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035fa:	bf00      	nop

080035fc <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 80035fc:	b570      	push	{r4, r5, r6, lr}
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80035fe:	7d04      	ldrb	r4, [r0, #20]
 8003600:	68c0      	ldr	r0, [r0, #12]
{
 8003602:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003604:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
{
 8003608:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800360c:	6940      	ldr	r0, [r0, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 800360e:	9001      	str	r0, [sp, #4]
{
 8003610:	461d      	mov	r5, r3
 8003612:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8003614:	f004 fce4 	bl	8007fe0 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8003618:	9801      	ldr	r0, [sp, #4]
 800361a:	462a      	mov	r2, r5
 800361c:	4621      	mov	r1, r4
 800361e:	f004 fce5 	bl	8007fec <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8003622:	9801      	ldr	r0, [sp, #4]
 8003624:	4632      	mov	r2, r6
 8003626:	4621      	mov	r1, r4
 8003628:	f004 fce6 	bl	8007ff8 <RUC_SetPhaseFinalTorque>
  return true;
}
 800362c:	2001      	movs	r0, #1
 800362e:	b002      	add	sp, #8
 8003630:	bd70      	pop	{r4, r5, r6, pc}
 8003632:	bf00      	nop

08003634 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8003634:	b410      	push	{r4}
 8003636:	b083      	sub	sp, #12

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003638:	7d04      	ldrb	r4, [r0, #20]
 800363a:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 800363c:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 8003640:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 8003644:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003648:	9901      	ldr	r1, [sp, #4]
}
 800364a:	b003      	add	sp, #12
 800364c:	f85d 4b04 	ldr.w	r4, [sp], #4
  MCI_SetCurrentReferences(pMCI,currComp);
 8003650:	f7fd bb44 	b.w	8000cdc <MCI_SetCurrentReferences>

08003654 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8003654:	2000      	movs	r0, #0
 8003656:	4770      	bx	lr

08003658 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003658:	4a03      	ldr	r2, [pc, #12]	; (8003668 <SystemInit+0x10>)
 800365a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800365e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003662:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003666:	4770      	bx	lr
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800366c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800366e:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <HAL_InitTick+0x40>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	b90b      	cbnz	r3, 8003678 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003674:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003676:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003678:	490d      	ldr	r1, [pc, #52]	; (80036b0 <HAL_InitTick+0x44>)
 800367a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800367e:	4605      	mov	r5, r0
 8003680:	fbb2 f3f3 	udiv	r3, r2, r3
 8003684:	6808      	ldr	r0, [r1, #0]
 8003686:	fbb0 f0f3 	udiv	r0, r0, r3
 800368a:	f001 f839 	bl	8004700 <HAL_SYSTICK_Config>
 800368e:	4604      	mov	r4, r0
 8003690:	2800      	cmp	r0, #0
 8003692:	d1ef      	bne.n	8003674 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003694:	2d0f      	cmp	r5, #15
 8003696:	d8ed      	bhi.n	8003674 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003698:	4602      	mov	r2, r0
 800369a:	4629      	mov	r1, r5
 800369c:	f04f 30ff 	mov.w	r0, #4294967295
 80036a0:	f000 ffe8 	bl	8004674 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036a4:	4b03      	ldr	r3, [pc, #12]	; (80036b4 <HAL_InitTick+0x48>)
 80036a6:	4620      	mov	r0, r4
 80036a8:	601d      	str	r5, [r3, #0]
}
 80036aa:	bd38      	pop	{r3, r4, r5, pc}
 80036ac:	20000698 	.word	0x20000698
 80036b0:	20000694 	.word	0x20000694
 80036b4:	2000069c 	.word	0x2000069c

080036b8 <HAL_Init>:
{
 80036b8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ba:	2003      	movs	r0, #3
 80036bc:	f000 ffc6 	bl	800464c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036c0:	2004      	movs	r0, #4
 80036c2:	f7ff ffd3 	bl	800366c <HAL_InitTick>
 80036c6:	b110      	cbz	r0, 80036ce <HAL_Init+0x16>
    status = HAL_ERROR;
 80036c8:	2401      	movs	r4, #1
}
 80036ca:	4620      	mov	r0, r4
 80036cc:	bd10      	pop	{r4, pc}
 80036ce:	4604      	mov	r4, r0
    HAL_MspInit();
 80036d0:	f7fe ff32 	bl	8002538 <HAL_MspInit>
}
 80036d4:	4620      	mov	r0, r4
 80036d6:	bd10      	pop	{r4, pc}

080036d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80036d8:	4a03      	ldr	r2, [pc, #12]	; (80036e8 <HAL_IncTick+0x10>)
 80036da:	4904      	ldr	r1, [pc, #16]	; (80036ec <HAL_IncTick+0x14>)
 80036dc:	6813      	ldr	r3, [r2, #0]
 80036de:	6809      	ldr	r1, [r1, #0]
 80036e0:	440b      	add	r3, r1
 80036e2:	6013      	str	r3, [r2, #0]
}
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20000bf0 	.word	0x20000bf0
 80036ec:	20000698 	.word	0x20000698

080036f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80036f0:	4b01      	ldr	r3, [pc, #4]	; (80036f8 <HAL_GetTick+0x8>)
 80036f2:	6818      	ldr	r0, [r3, #0]
}
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	20000bf0 	.word	0x20000bf0

080036fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036fc:	b538      	push	{r3, r4, r5, lr}
 80036fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003700:	f7ff fff6 	bl	80036f0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003704:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003706:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003708:	d002      	beq.n	8003710 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800370a:	4b04      	ldr	r3, [pc, #16]	; (800371c <HAL_Delay+0x20>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003710:	f7ff ffee 	bl	80036f0 <HAL_GetTick>
 8003714:	1b43      	subs	r3, r0, r5
 8003716:	42a3      	cmp	r3, r4
 8003718:	d3fa      	bcc.n	8003710 <HAL_Delay+0x14>
  {
  }
}
 800371a:	bd38      	pop	{r3, r4, r5, pc}
 800371c:	20000698 	.word	0x20000698

08003720 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003724:	2300      	movs	r3, #0
 8003726:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003728:	2800      	cmp	r0, #0
 800372a:	f000 80d0 	beq.w	80038ce <HAL_ADC_Init+0x1ae>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800372e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8003730:	4604      	mov	r4, r0
 8003732:	2d00      	cmp	r5, #0
 8003734:	f000 80b8 	beq.w	80038a8 <HAL_ADC_Init+0x188>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003738:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800373a:	6893      	ldr	r3, [r2, #8]
 800373c:	0098      	lsls	r0, r3, #2
 800373e:	d505      	bpl.n	800374c <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003740:	6893      	ldr	r3, [r2, #8]
 8003742:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003746:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800374a:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800374c:	6893      	ldr	r3, [r2, #8]
 800374e:	00d9      	lsls	r1, r3, #3
 8003750:	d419      	bmi.n	8003786 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003752:	4b6f      	ldr	r3, [pc, #444]	; (8003910 <HAL_ADC_Init+0x1f0>)
 8003754:	486f      	ldr	r0, [pc, #444]	; (8003914 <HAL_ADC_Init+0x1f4>)
 8003756:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003758:	6891      	ldr	r1, [r2, #8]
 800375a:	099b      	lsrs	r3, r3, #6
 800375c:	fba0 0303 	umull	r0, r3, r0, r3
 8003760:	099b      	lsrs	r3, r3, #6
 8003762:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8003766:	3301      	adds	r3, #1
 8003768:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003772:	6091      	str	r1, [r2, #8]
 8003774:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003776:	9b01      	ldr	r3, [sp, #4]
 8003778:	b12b      	cbz	r3, 8003786 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 800377a:	9b01      	ldr	r3, [sp, #4]
 800377c:	3b01      	subs	r3, #1
 800377e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003780:	9b01      	ldr	r3, [sp, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f9      	bne.n	800377a <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003786:	6893      	ldr	r3, [r2, #8]
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	d47f      	bmi.n	800388c <HAL_ADC_Init+0x16c>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800378c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800378e:	f043 0310 	orr.w	r3, r3, #16
 8003792:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003794:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800379c:	6893      	ldr	r3, [r2, #8]
 800379e:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 80037a2:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80037a8:	d177      	bne.n	800389a <HAL_ADC_Init+0x17a>
 80037aa:	06de      	lsls	r6, r3, #27
 80037ac:	d475      	bmi.n	800389a <HAL_ADC_Init+0x17a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037ae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80037b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80037b4:	f043 0302 	orr.w	r3, r3, #2
 80037b8:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037ba:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037bc:	07dd      	lsls	r5, r3, #31
 80037be:	d40e      	bmi.n	80037de <HAL_ADC_Init+0xbe>
 80037c0:	4b55      	ldr	r3, [pc, #340]	; (8003918 <HAL_ADC_Init+0x1f8>)
 80037c2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80037c6:	6889      	ldr	r1, [r1, #8]
 80037c8:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037ca:	430b      	orrs	r3, r1
 80037cc:	07d9      	lsls	r1, r3, #31
 80037ce:	d406      	bmi.n	80037de <HAL_ADC_Init+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80037d0:	4952      	ldr	r1, [pc, #328]	; (800391c <HAL_ADC_Init+0x1fc>)
 80037d2:	6865      	ldr	r5, [r4, #4]
 80037d4:	688b      	ldr	r3, [r1, #8]
 80037d6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80037da:	432b      	orrs	r3, r5
 80037dc:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 80037de:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 80037e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80037e4:	432b      	orrs	r3, r5
 80037e6:	430b      	orrs	r3, r1
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037e8:	7f65      	ldrb	r5, [r4, #29]
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80037ea:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                 hadc->Init.DataAlign                                                   |
 80037ee:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80037f2:	2901      	cmp	r1, #1
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80037f8:	d064      	beq.n	80038c4 <HAL_ADC_Init+0x1a4>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80037fc:	b121      	cbz	r1, 8003808 <HAL_ADC_Init+0xe8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 80037fe:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003800:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003804:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003806:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003808:	68d6      	ldr	r6, [r2, #12]
 800380a:	4945      	ldr	r1, [pc, #276]	; (8003920 <HAL_ADC_Init+0x200>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800380c:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800380e:	4031      	ands	r1, r6
 8003810:	430b      	orrs	r3, r1
 8003812:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003814:	6913      	ldr	r3, [r2, #16]
 8003816:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800381a:	432b      	orrs	r3, r5
 800381c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800381e:	6893      	ldr	r3, [r2, #8]
 8003820:	071b      	lsls	r3, r3, #28
 8003822:	d424      	bmi.n	800386e <HAL_ADC_Init+0x14e>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003824:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003826:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800382a:	7f26      	ldrb	r6, [r4, #28]

      if (hadc->Init.GainCompensation != 0UL)
 800382c:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800382e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003832:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003834:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003838:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800383c:	430b      	orrs	r3, r1
 800383e:	60d3      	str	r3, [r2, #12]
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003840:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8003842:	2d00      	cmp	r5, #0
 8003844:	d046      	beq.n	80038d4 <HAL_ADC_Init+0x1b4>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800384a:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800384c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003850:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003854:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003858:	432b      	orrs	r3, r5
 800385a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800385e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003862:	2b01      	cmp	r3, #1
 8003864:	d042      	beq.n	80038ec <HAL_ADC_Init+0x1cc>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003866:	6913      	ldr	r3, [r2, #16]
 8003868:	f023 0301 	bic.w	r3, r3, #1
 800386c:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800386e:	6963      	ldr	r3, [r4, #20]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d01f      	beq.n	80038b4 <HAL_ADC_Init+0x194>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003874:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003876:	f023 030f 	bic.w	r3, r3, #15
 800387a:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800387c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800387e:	f023 0303 	bic.w	r3, r3, #3
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003888:	b002      	add	sp, #8
 800388a:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800388c:	6893      	ldr	r3, [r2, #8]
 800388e:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003892:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003896:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003898:	d087      	beq.n	80037aa <HAL_ADC_Init+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 800389c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389e:	f043 0310 	orr.w	r3, r3, #16
 80038a2:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80038a4:	b002      	add	sp, #8
 80038a6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80038a8:	f7fe fe66 	bl	8002578 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80038ac:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80038ae:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80038b2:	e741      	b.n	8003738 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80038b4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80038b6:	6a23      	ldr	r3, [r4, #32]
 80038b8:	f021 010f 	bic.w	r1, r1, #15
 80038bc:	3b01      	subs	r3, #1
 80038be:	430b      	orrs	r3, r1
 80038c0:	6313      	str	r3, [r2, #48]	; 0x30
 80038c2:	e7db      	b.n	800387c <HAL_ADC_Init+0x15c>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80038c4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80038c6:	3901      	subs	r1, #1
 80038c8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80038cc:	e795      	b.n	80037fa <HAL_ADC_Init+0xda>
    return HAL_ERROR;
 80038ce:	2001      	movs	r0, #1
}
 80038d0:	b002      	add	sp, #8
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80038d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d8:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80038da:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80038de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80038e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038e6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80038ea:	e7b8      	b.n	800385e <HAL_ADC_Init+0x13e>
        MODIFY_REG(hadc->Instance->CFGR2,
 80038ec:	e9d4 3611 	ldrd	r3, r6, [r4, #68]	; 0x44
 80038f0:	6911      	ldr	r1, [r2, #16]
 80038f2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80038f4:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 80038f8:	f021 0104 	bic.w	r1, r1, #4
 80038fc:	4333      	orrs	r3, r6
 80038fe:	430b      	orrs	r3, r1
 8003900:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003902:	432b      	orrs	r3, r5
 8003904:	430b      	orrs	r3, r1
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	6113      	str	r3, [r2, #16]
 800390c:	e7af      	b.n	800386e <HAL_ADC_Init+0x14e>
 800390e:	bf00      	nop
 8003910:	20000694 	.word	0x20000694
 8003914:	053e2d63 	.word	0x053e2d63
 8003918:	50000100 	.word	0x50000100
 800391c:	50000300 	.word	0x50000300
 8003920:	fff04007 	.word	0xfff04007

08003924 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003924:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003926:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 800392a:	b083      	sub	sp, #12
 800392c:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800392e:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8003930:	f04f 0000 	mov.w	r0, #0
 8003934:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003936:	f000 8143 	beq.w	8003bc0 <HAL_ADC_ConfigChannel+0x29c>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800393a:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 800393c:	2001      	movs	r0, #1
 800393e:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
 8003942:	6894      	ldr	r4, [r2, #8]
 8003944:	0766      	lsls	r6, r4, #29
 8003946:	d43d      	bmi.n	80039c4 <HAL_ADC_ConfigChannel+0xa0>
  MODIFY_REG(*preg,
 8003948:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800394c:	09a6      	lsrs	r6, r4, #6
 800394e:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8003952:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8003956:	f004 041f 	and.w	r4, r4, #31
 800395a:	5977      	ldr	r7, [r6, r5]
 800395c:	f04f 0c1f 	mov.w	ip, #31
 8003960:	fa0c fc04 	lsl.w	ip, ip, r4
 8003964:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8003968:	ea27 070c 	bic.w	r7, r7, ip
 800396c:	40a0      	lsls	r0, r4
 800396e:	4338      	orrs	r0, r7
 8003970:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003972:	6890      	ldr	r0, [r2, #8]
 8003974:	0745      	lsls	r5, r0, #29
 8003976:	f140 809a 	bpl.w	8003aae <HAL_ADC_ConfigChannel+0x18a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800397a:	6890      	ldr	r0, [r2, #8]
 800397c:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800397e:	6894      	ldr	r4, [r2, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003980:	07e4      	lsls	r4, r4, #31
 8003982:	d530      	bpl.n	80039e6 <HAL_ADC_ConfigChannel+0xc2>
 8003984:	4604      	mov	r4, r0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003986:	49c2      	ldr	r1, [pc, #776]	; (8003c90 <HAL_ADC_ConfigChannel+0x36c>)
 8003988:	420c      	tst	r4, r1
 800398a:	d02a      	beq.n	80039e2 <HAL_ADC_ConfigChannel+0xbe>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800398c:	49c1      	ldr	r1, [pc, #772]	; (8003c94 <HAL_ADC_ConfigChannel+0x370>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800398e:	4dc2      	ldr	r5, [pc, #776]	; (8003c98 <HAL_ADC_ConfigChannel+0x374>)
 8003990:	6888      	ldr	r0, [r1, #8]
 8003992:	42ac      	cmp	r4, r5
 8003994:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8003998:	d01d      	beq.n	80039d6 <HAL_ADC_ConfigChannel+0xb2>
 800399a:	4dc0      	ldr	r5, [pc, #768]	; (8003c9c <HAL_ADC_ConfigChannel+0x378>)
 800399c:	42ac      	cmp	r4, r5
 800399e:	d01a      	beq.n	80039d6 <HAL_ADC_ConfigChannel+0xb2>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80039a0:	4dbf      	ldr	r5, [pc, #764]	; (8003ca0 <HAL_ADC_ConfigChannel+0x37c>)
 80039a2:	42ac      	cmp	r4, r5
 80039a4:	f040 813e 	bne.w	8003c24 <HAL_ADC_ConfigChannel+0x300>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039a8:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80039ac:	d119      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0xbe>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039ae:	4cbd      	ldr	r4, [pc, #756]	; (8003ca4 <HAL_ADC_ConfigChannel+0x380>)
 80039b0:	42a2      	cmp	r2, r4
 80039b2:	d016      	beq.n	80039e2 <HAL_ADC_ConfigChannel+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80039b4:	688a      	ldr	r2, [r1, #8]
 80039b6:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80039ba:	4316      	orrs	r6, r2
 80039bc:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 80039c0:	608e      	str	r6, [r1, #8]
}
 80039c2:	e003      	b.n	80039cc <HAL_ADC_ConfigChannel+0xa8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039c6:	f042 0220 	orr.w	r2, r2, #32
 80039ca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80039d2:	b003      	add	sp, #12
 80039d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039d6:	0201      	lsls	r1, r0, #8
 80039d8:	d403      	bmi.n	80039e2 <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039da:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80039de:	f000 8102 	beq.w	8003be6 <HAL_ADC_ConfigChannel+0x2c2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039e2:	2000      	movs	r0, #0
 80039e4:	e7f2      	b.n	80039cc <HAL_ADC_ConfigChannel+0xa8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80039e6:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80039e8:	4caf      	ldr	r4, [pc, #700]	; (8003ca8 <HAL_ADC_ConfigChannel+0x384>)
 80039ea:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039ee:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 8003cb8 <HAL_ADC_ConfigChannel+0x394>
 80039f2:	f006 0718 	and.w	r7, r6, #24
 80039f6:	40fc      	lsrs	r4, r7
 80039f8:	f3c0 0712 	ubfx	r7, r0, #0, #19
 80039fc:	4004      	ands	r4, r0
 80039fe:	ea25 0507 	bic.w	r5, r5, r7
 8003a02:	432c      	orrs	r4, r5
 8003a04:	4566      	cmp	r6, ip
 8003a06:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003a0a:	4604      	mov	r4, r0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a0c:	d1bb      	bne.n	8003986 <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a0e:	2f00      	cmp	r7, #0
 8003a10:	f000 80d9 	beq.w	8003bc6 <HAL_ADC_ConfigChannel+0x2a2>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a14:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a18:	2c00      	cmp	r4, #0
 8003a1a:	f000 8181 	beq.w	8003d20 <HAL_ADC_ConfigChannel+0x3fc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003a1e:	fab4 f484 	clz	r4, r4
 8003a22:	3401      	adds	r4, #1
 8003a24:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a28:	2c09      	cmp	r4, #9
 8003a2a:	f240 8179 	bls.w	8003d20 <HAL_ADC_ConfigChannel+0x3fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003a32:	2d00      	cmp	r5, #0
 8003a34:	f000 81d7 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8003a38:	fab5 f585 	clz	r5, r5
 8003a3c:	3501      	adds	r5, #1
 8003a3e:	06ad      	lsls	r5, r5, #26
 8003a40:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a44:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8003a48:	2c00      	cmp	r4, #0
 8003a4a:	f000 81d1 	beq.w	8003df0 <HAL_ADC_ConfigChannel+0x4cc>
  return __builtin_clz(value);
 8003a4e:	fab4 f484 	clz	r4, r4
 8003a52:	3401      	adds	r4, #1
 8003a54:	f004 041f 	and.w	r4, r4, #31
 8003a58:	2601      	movs	r6, #1
 8003a5a:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a5e:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a60:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003a64:	2800      	cmp	r0, #0
 8003a66:	f000 81c1 	beq.w	8003dec <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003a6a:	fab0 f480 	clz	r4, r0
 8003a6e:	3401      	adds	r4, #1
 8003a70:	f004 041f 	and.w	r4, r4, #31
 8003a74:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003a78:	f1a4 001e 	sub.w	r0, r4, #30
 8003a7c:	0500      	lsls	r0, r0, #20
 8003a7e:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a82:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003a84:	0dc7      	lsrs	r7, r0, #23
 8003a86:	f007 0704 	and.w	r7, r7, #4
 8003a8a:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8003a8e:	688e      	ldr	r6, [r1, #8]
 8003a90:	597c      	ldr	r4, [r7, r5]
 8003a92:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8003a96:	f04f 0c07 	mov.w	ip, #7
 8003a9a:	fa0c fc00 	lsl.w	ip, ip, r0
 8003a9e:	ea24 040c 	bic.w	r4, r4, ip
 8003aa2:	fa06 f000 	lsl.w	r0, r6, r0
 8003aa6:	4320      	orrs	r0, r4
 8003aa8:	5178      	str	r0, [r7, r5]
 8003aaa:	680c      	ldr	r4, [r1, #0]
}
 8003aac:	e76b      	b.n	8003986 <HAL_ADC_ConfigChannel+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003aae:	6890      	ldr	r0, [r2, #8]
 8003ab0:	f010 0008 	ands.w	r0, r0, #8
 8003ab4:	f040 8082 	bne.w	8003bbc <HAL_ADC_ConfigChannel+0x298>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003ab8:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003aba:	680e      	ldr	r6, [r1, #0]
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003abc:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003ac0:	f000 80c4 	beq.w	8003c4c <HAL_ADC_ConfigChannel+0x328>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003ac4:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 8003ac8:	f00c 0c04 	and.w	ip, ip, #4
 8003acc:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8003ad0:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8003ad4:	f85c 5007 	ldr.w	r5, [ip, r7]
 8003ad8:	f04f 0e07 	mov.w	lr, #7
 8003adc:	fa0e fe06 	lsl.w	lr, lr, r6
 8003ae0:	40b4      	lsls	r4, r6
 8003ae2:	ea25 050e 	bic.w	r5, r5, lr
 8003ae6:	432c      	orrs	r4, r5
 8003ae8:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003aec:	6954      	ldr	r4, [r2, #20]
 8003aee:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003af2:	6154      	str	r4, [r2, #20]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003af4:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003af8:	68d6      	ldr	r6, [r2, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003afa:	f1bc 0f04 	cmp.w	ip, #4
 8003afe:	d02e      	beq.n	8003b5e <HAL_ADC_ConfigChannel+0x23a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b00:	f102 0460 	add.w	r4, r2, #96	; 0x60
  MODIFY_REG(*preg,
 8003b04:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 8003cbc <HAL_ADC_ConfigChannel+0x398>
 8003b08:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 8003b0c:	680f      	ldr	r7, [r1, #0]
 8003b0e:	ea05 0e0e 	and.w	lr, r5, lr
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003b12:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8003b16:	694d      	ldr	r5, [r1, #20]
 8003b18:	0076      	lsls	r6, r6, #1
 8003b1a:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 8003b1e:	40b5      	lsls	r5, r6
 8003b20:	ea47 070e 	orr.w	r7, r7, lr
 8003b24:	433d      	orrs	r5, r7
 8003b26:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8003b2a:	f844 502c 	str.w	r5, [r4, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b2e:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8003b30:	698e      	ldr	r6, [r1, #24]
 8003b32:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 8003b36:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8003b3a:	4335      	orrs	r5, r6
 8003b3c:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003b40:	690e      	ldr	r6, [r1, #16]
 8003b42:	7f0f      	ldrb	r7, [r1, #28]
  MODIFY_REG(*preg,
 8003b44:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 8003b48:	2f01      	cmp	r7, #1
 8003b4a:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8003b4e:	bf08      	it	eq
 8003b50:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 8003b54:	4328      	orrs	r0, r5
 8003b56:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8003b5a:	6808      	ldr	r0, [r1, #0]
}
 8003b5c:	e70f      	b.n	800397e <HAL_ADC_ConfigChannel+0x5a>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b5e:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b60:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8003b62:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8003b64:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b68:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b6c:	2d00      	cmp	r5, #0
 8003b6e:	f040 80a7 	bne.w	8003cc0 <HAL_ADC_ConfigChannel+0x39c>
 8003b72:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b76:	42ac      	cmp	r4, r5
 8003b78:	f000 8119 	beq.w	8003dae <HAL_ADC_ConfigChannel+0x48a>
 8003b7c:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8003b7e:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b80:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b84:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003b88:	f102 0764 	add.w	r7, r2, #100	; 0x64
 8003b8c:	42ae      	cmp	r6, r5
 8003b8e:	f000 80fc 	beq.w	8003d8a <HAL_ADC_ConfigChannel+0x466>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b92:	68a6      	ldr	r6, [r4, #8]
 8003b94:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b96:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b9a:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003b9e:	42ae      	cmp	r6, r5
 8003ba0:	f000 80e2 	beq.w	8003d68 <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ba4:	68e6      	ldr	r6, [r4, #12]
 8003ba6:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ba8:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003baa:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003bae:	42b5      	cmp	r5, r6
 8003bb0:	f47f aee5 	bne.w	800397e <HAL_ADC_ConfigChannel+0x5a>
  MODIFY_REG(*preg,
 8003bb4:	6820      	ldr	r0, [r4, #0]
 8003bb6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003bba:	6020      	str	r0, [r4, #0]
 8003bbc:	6808      	ldr	r0, [r1, #0]
}
 8003bbe:	e6de      	b.n	800397e <HAL_ADC_ConfigChannel+0x5a>
  __HAL_LOCK(hadc);
 8003bc0:	2002      	movs	r0, #2
}
 8003bc2:	b003      	add	sp, #12
 8003bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003bc6:	0e80      	lsrs	r0, r0, #26
 8003bc8:	1c44      	adds	r4, r0, #1
 8003bca:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bce:	2e09      	cmp	r6, #9
 8003bd0:	d850      	bhi.n	8003c74 <HAL_ADC_ConfigChannel+0x350>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003bd2:	06a5      	lsls	r5, r4, #26
 8003bd4:	2401      	movs	r4, #1
 8003bd6:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003bda:	40b4      	lsls	r4, r6
 8003bdc:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8003be0:	4325      	orrs	r5, r4
 8003be2:	0500      	lsls	r0, r0, #20
 8003be4:	e74d      	b.n	8003a82 <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003be6:	482b      	ldr	r0, [pc, #172]	; (8003c94 <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003be8:	4a30      	ldr	r2, [pc, #192]	; (8003cac <HAL_ADC_ConfigChannel+0x388>)
 8003bea:	6881      	ldr	r1, [r0, #8]
 8003bec:	4c30      	ldr	r4, [pc, #192]	; (8003cb0 <HAL_ADC_ConfigChannel+0x38c>)
 8003bee:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003bf2:	430e      	orrs	r6, r1
 8003bf4:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 8003bf8:	6086      	str	r6, [r0, #8]
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	0992      	lsrs	r2, r2, #6
 8003bfe:	fba4 1202 	umull	r1, r2, r4, r2
 8003c02:	0992      	lsrs	r2, r2, #6
 8003c04:	3201      	adds	r2, #1
 8003c06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003c0a:	0092      	lsls	r2, r2, #2
 8003c0c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003c0e:	9a01      	ldr	r2, [sp, #4]
 8003c10:	2a00      	cmp	r2, #0
 8003c12:	f43f aee6 	beq.w	80039e2 <HAL_ADC_ConfigChannel+0xbe>
            wait_loop_index--;
 8003c16:	9a01      	ldr	r2, [sp, #4]
 8003c18:	3a01      	subs	r2, #1
 8003c1a:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003c1c:	9a01      	ldr	r2, [sp, #4]
 8003c1e:	2a00      	cmp	r2, #0
 8003c20:	d1f9      	bne.n	8003c16 <HAL_ADC_ConfigChannel+0x2f2>
 8003c22:	e6de      	b.n	80039e2 <HAL_ADC_ConfigChannel+0xbe>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c24:	4d23      	ldr	r5, [pc, #140]	; (8003cb4 <HAL_ADC_ConfigChannel+0x390>)
 8003c26:	42ac      	cmp	r4, r5
 8003c28:	f47f aedb 	bne.w	80039e2 <HAL_ADC_ConfigChannel+0xbe>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c2c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8003c30:	f47f aed7 	bne.w	80039e2 <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c34:	4c1b      	ldr	r4, [pc, #108]	; (8003ca4 <HAL_ADC_ConfigChannel+0x380>)
 8003c36:	42a2      	cmp	r2, r4
 8003c38:	f43f aed3 	beq.w	80039e2 <HAL_ADC_ConfigChannel+0xbe>
 8003c3c:	688a      	ldr	r2, [r1, #8]
 8003c3e:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003c42:	4332      	orrs	r2, r6
 8003c44:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003c48:	608a      	str	r2, [r1, #8]
}
 8003c4a:	e6bf      	b.n	80039cc <HAL_ADC_ConfigChannel+0xa8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003c4c:	0df5      	lsrs	r5, r6, #23
 8003c4e:	f102 0414 	add.w	r4, r2, #20
 8003c52:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8003c56:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8003c5a:	592f      	ldr	r7, [r5, r4]
 8003c5c:	f04f 0c07 	mov.w	ip, #7
 8003c60:	fa0c f606 	lsl.w	r6, ip, r6
 8003c64:	ea27 0606 	bic.w	r6, r7, r6
 8003c68:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003c6a:	6954      	ldr	r4, [r2, #20]
 8003c6c:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8003c70:	6154      	str	r4, [r2, #20]
}
 8003c72:	e73f      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x1d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c74:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8003c78:	06a5      	lsls	r5, r4, #26
 8003c7a:	381e      	subs	r0, #30
 8003c7c:	2401      	movs	r4, #1
 8003c7e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003c82:	fa04 f606 	lsl.w	r6, r4, r6
 8003c86:	0500      	lsls	r0, r0, #20
 8003c88:	4335      	orrs	r5, r6
 8003c8a:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8003c8e:	e6f8      	b.n	8003a82 <HAL_ADC_ConfigChannel+0x15e>
 8003c90:	80080000 	.word	0x80080000
 8003c94:	50000300 	.word	0x50000300
 8003c98:	c3210000 	.word	0xc3210000
 8003c9c:	90c00010 	.word	0x90c00010
 8003ca0:	c7520000 	.word	0xc7520000
 8003ca4:	50000100 	.word	0x50000100
 8003ca8:	0007ffff 	.word	0x0007ffff
 8003cac:	20000694 	.word	0x20000694
 8003cb0:	053e2d63 	.word	0x053e2d63
 8003cb4:	cb840000 	.word	0xcb840000
 8003cb8:	407f0000 	.word	0x407f0000
 8003cbc:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003cc4:	b11d      	cbz	r5, 8003cce <HAL_ADC_ConfigChannel+0x3aa>
  return __builtin_clz(value);
 8003cc6:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003cca:	42ac      	cmp	r4, r5
 8003ccc:	d06f      	beq.n	8003dae <HAL_ADC_ConfigChannel+0x48a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003cce:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8003cd0:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cd2:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cd6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003cda:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003ce2:	b11d      	cbz	r5, 8003cec <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 8003ce4:	fab5 f585 	clz	r5, r5
 8003ce8:	42ae      	cmp	r6, r5
 8003cea:	d04e      	beq.n	8003d8a <HAL_ADC_ConfigChannel+0x466>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003cec:	68a5      	ldr	r5, [r4, #8]
 8003cee:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cf0:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003cf4:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003cfc:	b11d      	cbz	r5, 8003d06 <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 8003cfe:	fab5 f585 	clz	r5, r5
 8003d02:	42ae      	cmp	r6, r5
 8003d04:	d030      	beq.n	8003d68 <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d06:	68e5      	ldr	r5, [r4, #12]
 8003d08:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d0a:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d0c:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d10:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003d14:	2d00      	cmp	r5, #0
 8003d16:	f43f ae32 	beq.w	800397e <HAL_ADC_ConfigChannel+0x5a>
  return __builtin_clz(value);
 8003d1a:	fab5 f585 	clz	r5, r5
 8003d1e:	e746      	b.n	8003bae <HAL_ADC_ConfigChannel+0x28a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003d24:	2d00      	cmp	r5, #0
 8003d26:	d058      	beq.n	8003dda <HAL_ADC_ConfigChannel+0x4b6>
  return __builtin_clz(value);
 8003d28:	fab5 f585 	clz	r5, r5
 8003d2c:	3501      	adds	r5, #1
 8003d2e:	06ad      	lsls	r5, r5, #26
 8003d30:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d34:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8003d38:	2c00      	cmp	r4, #0
 8003d3a:	d04c      	beq.n	8003dd6 <HAL_ADC_ConfigChannel+0x4b2>
  return __builtin_clz(value);
 8003d3c:	fab4 f484 	clz	r4, r4
 8003d40:	3401      	adds	r4, #1
 8003d42:	f004 041f 	and.w	r4, r4, #31
 8003d46:	2601      	movs	r6, #1
 8003d48:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d4c:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003d52:	2800      	cmp	r0, #0
 8003d54:	d044      	beq.n	8003de0 <HAL_ADC_ConfigChannel+0x4bc>
  return __builtin_clz(value);
 8003d56:	fab0 f480 	clz	r4, r0
 8003d5a:	3401      	adds	r4, #1
 8003d5c:	f004 041f 	and.w	r4, r4, #31
 8003d60:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003d64:	0520      	lsls	r0, r4, #20
 8003d66:	e68c      	b.n	8003a82 <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(*preg,
 8003d68:	6838      	ldr	r0, [r7, #0]
 8003d6a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003d6e:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d70:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d72:	68e5      	ldr	r5, [r4, #12]
 8003d74:	68e6      	ldr	r6, [r4, #12]
 8003d76:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d7a:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d7e:	340c      	adds	r4, #12
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d80:	2d00      	cmp	r5, #0
 8003d82:	d1c5      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x3ec>
 8003d84:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8003d88:	e711      	b.n	8003bae <HAL_ADC_ConfigChannel+0x28a>
  MODIFY_REG(*preg,
 8003d8a:	6838      	ldr	r0, [r7, #0]
 8003d8c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003d90:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d92:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d94:	68a5      	ldr	r5, [r4, #8]
 8003d96:	68a6      	ldr	r6, [r4, #8]
 8003d98:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d9c:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003da0:	f104 0708 	add.w	r7, r4, #8
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003da4:	2d00      	cmp	r5, #0
 8003da6:	d1a7      	bne.n	8003cf8 <HAL_ADC_ConfigChannel+0x3d4>
 8003da8:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8003dac:	e6f7      	b.n	8003b9e <HAL_ADC_ConfigChannel+0x27a>
  MODIFY_REG(*preg,
 8003dae:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8003db0:	4614      	mov	r4, r2
 8003db2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003db6:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003dba:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003dbc:	6e55      	ldr	r5, [r2, #100]	; 0x64
 8003dbe:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8003dc0:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003dc4:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dc8:	f102 0764 	add.w	r7, r2, #100	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003dcc:	2d00      	cmp	r5, #0
 8003dce:	d186      	bne.n	8003cde <HAL_ADC_ConfigChannel+0x3ba>
 8003dd0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8003dd4:	e6da      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x268>
 8003dd6:	2402      	movs	r4, #2
 8003dd8:	e7b8      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x428>
 8003dda:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8003dde:	e7a9      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x410>
 8003de0:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8003de4:	e64d      	b.n	8003a82 <HAL_ADC_ConfigChannel+0x15e>
 8003de6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8003dea:	e62b      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x120>
 8003dec:	4801      	ldr	r0, [pc, #4]	; (8003df4 <HAL_ADC_ConfigChannel+0x4d0>)
 8003dee:	e648      	b.n	8003a82 <HAL_ADC_ConfigChannel+0x15e>
 8003df0:	2402      	movs	r4, #2
 8003df2:	e634      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x13a>
 8003df4:	fe500000 	.word	0xfe500000

08003df8 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8003df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dfc:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e00:	6944      	ldr	r4, [r0, #20]
{
 8003e02:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8003e04:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003e06:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8003e08:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003e0a:	f000 8187 	beq.w	800411c <HAL_ADCEx_InjectedConfigChannel+0x324>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003e14:	b1e4      	cbz	r4, 8003e50 <HAL_ADCEx_InjectedConfigChannel+0x58>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8003e16:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d019      	beq.n	8003e50 <HAL_ADCEx_InjectedConfigChannel+0x58>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003e1c:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8003e1e:	2c00      	cmp	r4, #0
 8003e20:	f040 8126 	bne.w	8004070 <HAL_ADCEx_InjectedConfigChannel+0x278>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003e24:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003e26:	2a00      	cmp	r2, #0
 8003e28:	f000 8248 	beq.w	80042bc <HAL_ADCEx_InjectedConfigChannel+0x4c4>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8003e2c:	1e5c      	subs	r4, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003e2e:	f002 027c 	and.w	r2, r2, #124	; 0x7c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8003e32:	6acb      	ldr	r3, [r1, #44]	; 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003e34:	4322      	orrs	r2, r4
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8003e36:	4313      	orrs	r3, r2
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8003e38:	e9d1 2500 	ldrd	r2, r5, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003e3c:	6684      	str	r4, [r0, #104]	; 0x68
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8003e3e:	f005 051f 	and.w	r5, r5, #31
 8003e42:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8003e46:	40ac      	lsls	r4, r5

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8003e48:	4323      	orrs	r3, r4
 8003e4a:	6643      	str	r3, [r0, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003e4c:	6803      	ldr	r3, [r0, #0]
 8003e4e:	e005      	b.n	8003e5c <HAL_ADCEx_InjectedConfigChannel+0x64>
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003e50:	684b      	ldr	r3, [r1, #4]
 8003e52:	2b09      	cmp	r3, #9
 8003e54:	f000 80f8 	beq.w	8004048 <HAL_ADCEx_InjectedConfigChannel+0x250>
 8003e58:	680a      	ldr	r2, [r1, #0]
 8003e5a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e5c:	689c      	ldr	r4, [r3, #8]
 8003e5e:	0724      	lsls	r4, r4, #28
 8003e60:	d410      	bmi.n	8003e84 <HAL_ADCEx_InjectedConfigChannel+0x8c>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8003e62:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8003e66:	2c00      	cmp	r4, #0
 8003e68:	f040 80e5 	bne.w	8004036 <HAL_ADCEx_InjectedConfigChannel+0x23e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003e6c:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8003e70:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8003e74:	68dd      	ldr	r5, [r3, #12]
 8003e76:	0524      	lsls	r4, r4, #20
 8003e78:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8003e7c:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8003e80:	432c      	orrs	r4, r5
 8003e82:	60dc      	str	r4, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e84:	689c      	ldr	r4, [r3, #8]
 8003e86:	f014 0404 	ands.w	r4, r4, #4
 8003e8a:	d060      	beq.n	8003f4e <HAL_ADCEx_InjectedConfigChannel+0x156>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e8c:	689c      	ldr	r4, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e8e:	2400      	movs	r4, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e90:	689d      	ldr	r5, [r3, #8]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e92:	07ef      	lsls	r7, r5, #31
 8003e94:	d414      	bmi.n	8003ec0 <HAL_ADCEx_InjectedConfigChannel+0xc8>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8003e96:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8003e98:	4dbe      	ldr	r5, [pc, #760]	; (8004194 <HAL_ADCEx_InjectedConfigChannel+0x39c>)
 8003e9a:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e9e:	f8df e320 	ldr.w	lr, [pc, #800]	; 80041c0 <HAL_ADCEx_InjectedConfigChannel+0x3c8>
 8003ea2:	f007 0c18 	and.w	ip, r7, #24
 8003ea6:	fa25 f50c 	lsr.w	r5, r5, ip
 8003eaa:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 8003eae:	4015      	ands	r5, r2
 8003eb0:	ea26 060c 	bic.w	r6, r6, ip
 8003eb4:	4335      	orrs	r5, r6
 8003eb6:	4577      	cmp	r7, lr
 8003eb8:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
 8003ebc:	f000 80fd 	beq.w	80040ba <HAL_ADCEx_InjectedConfigChannel+0x2c2>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8003ec0:	49b5      	ldr	r1, [pc, #724]	; (8004198 <HAL_ADCEx_InjectedConfigChannel+0x3a0>)
 8003ec2:	420a      	tst	r2, r1
 8003ec4:	d019      	beq.n	8003efa <HAL_ADCEx_InjectedConfigChannel+0x102>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003ec6:	4db5      	ldr	r5, [pc, #724]	; (800419c <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003ec8:	4eb5      	ldr	r6, [pc, #724]	; (80041a0 <HAL_ADCEx_InjectedConfigChannel+0x3a8>)
 8003eca:	68a9      	ldr	r1, [r5, #8]
 8003ecc:	42b2      	cmp	r2, r6
 8003ece:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 8003ed2:	d019      	beq.n	8003f08 <HAL_ADCEx_InjectedConfigChannel+0x110>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003ed4:	4eb3      	ldr	r6, [pc, #716]	; (80041a4 <HAL_ADCEx_InjectedConfigChannel+0x3ac>)
 8003ed6:	42b2      	cmp	r2, r6
 8003ed8:	d016      	beq.n	8003f08 <HAL_ADCEx_InjectedConfigChannel+0x110>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003eda:	4eb3      	ldr	r6, [pc, #716]	; (80041a8 <HAL_ADCEx_InjectedConfigChannel+0x3b0>)
 8003edc:	42b2      	cmp	r2, r6
 8003ede:	f040 8126 	bne.w	800412e <HAL_ADCEx_InjectedConfigChannel+0x336>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ee2:	01ce      	lsls	r6, r1, #7
 8003ee4:	d409      	bmi.n	8003efa <HAL_ADCEx_InjectedConfigChannel+0x102>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ee6:	4ab1      	ldr	r2, [pc, #708]	; (80041ac <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d006      	beq.n	8003efa <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003eec:	68ab      	ldr	r3, [r5, #8]
 8003eee:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8003ef2:	431f      	orrs	r7, r3
 8003ef4:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8003ef8:	60af      	str	r7, [r5, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003efa:	2300      	movs	r3, #0
 8003efc:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003f00:	4620      	mov	r0, r4
 8003f02:	b002      	add	sp, #8
 8003f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f08:	020a      	lsls	r2, r1, #8
 8003f0a:	d4f6      	bmi.n	8003efa <HAL_ADCEx_InjectedConfigChannel+0x102>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f10:	d1f3      	bne.n	8003efa <HAL_ADCEx_InjectedConfigChannel+0x102>
 8003f12:	4aa2      	ldr	r2, [pc, #648]	; (800419c <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8003f14:	49a6      	ldr	r1, [pc, #664]	; (80041b0 <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 8003f16:	6893      	ldr	r3, [r2, #8]
 8003f18:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8003f1c:	431f      	orrs	r7, r3
 8003f1e:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
 8003f22:	6097      	str	r7, [r2, #8]
 8003f24:	680b      	ldr	r3, [r1, #0]
 8003f26:	4aa3      	ldr	r2, [pc, #652]	; (80041b4 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 8003f28:	099b      	lsrs	r3, r3, #6
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	099b      	lsrs	r3, r3, #6
 8003f30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8003f38:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8003f3a:	9b01      	ldr	r3, [sp, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0dc      	beq.n	8003efa <HAL_ADCEx_InjectedConfigChannel+0x102>
          wait_loop_index--;
 8003f40:	9b01      	ldr	r3, [sp, #4]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8003f46:	9b01      	ldr	r3, [sp, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f9      	bne.n	8003f40 <HAL_ADCEx_InjectedConfigChannel+0x148>
 8003f4c:	e7d5      	b.n	8003efa <HAL_ADCEx_InjectedConfigChannel+0x102>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f4e:	689d      	ldr	r5, [r3, #8]
 8003f50:	f015 0508 	ands.w	r5, r5, #8
 8003f54:	d19c      	bne.n	8003e90 <HAL_ADCEx_InjectedConfigChannel+0x98>
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003f56:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003f58:	2c00      	cmp	r4, #0
 8003f5a:	f040 809f 	bne.w	800409c <HAL_ADCEx_InjectedConfigChannel+0x2a4>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003f5e:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8003f62:	2c01      	cmp	r4, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003f64:	68dc      	ldr	r4, [r3, #12]
 8003f66:	bf0c      	ite	eq
 8003f68:	f044 7400 	orreq.w	r4, r4, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003f6c:	f024 7400 	bicne.w	r4, r4, #33554432	; 0x2000000
 8003f70:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f72:	2400      	movs	r4, #0
    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8003f74:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 8003f78:	2e01      	cmp	r6, #1
 8003f7a:	f000 80ff 	beq.w	800417c <HAL_ADCEx_InjectedConfigChannel+0x384>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003f7e:	691e      	ldr	r6, [r3, #16]
 8003f80:	f026 0602 	bic.w	r6, r6, #2
 8003f84:	611e      	str	r6, [r3, #16]
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003f86:	688e      	ldr	r6, [r1, #8]
 8003f88:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8003f8c:	f000 80e2 	beq.w	8004154 <HAL_ADCEx_InjectedConfigChannel+0x35c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003f90:	ea4f 5ed2 	mov.w	lr, r2, lsr #23
 8003f94:	f00e 0e04 	and.w	lr, lr, #4
 8003f98:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8003f9c:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003fa0:	f85e 700c 	ldr.w	r7, [lr, ip]
 8003fa4:	f04f 0807 	mov.w	r8, #7
 8003fa8:	fa08 f802 	lsl.w	r8, r8, r2
 8003fac:	4096      	lsls	r6, r2
 8003fae:	ea27 0208 	bic.w	r2, r7, r8
 8003fb2:	4316      	orrs	r6, r2
 8003fb4:	f84e 600c 	str.w	r6, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003fb8:	695a      	ldr	r2, [r3, #20]
 8003fba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fbe:	615a      	str	r2, [r3, #20]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003fc0:	f8d1 e010 	ldr.w	lr, [r1, #16]
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8003fc4:	68df      	ldr	r7, [r3, #12]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003fc6:	f1be 0f04 	cmp.w	lr, #4
 8003fca:	f000 80fd 	beq.w	80041c8 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fce:	f103 0260 	add.w	r2, r3, #96	; 0x60
  MODIFY_REG(*preg,
 8003fd2:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 80041c4 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 8003fd6:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
 8003fda:	ea06 0808 	and.w	r8, r6, r8
 8003fde:	680e      	ldr	r6, [r1, #0]
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8003fe0:	f3c7 0cc1 	ubfx	ip, r7, #3, #2
 8003fe4:	f006 47f8 	and.w	r7, r6, #2080374784	; 0x7c000000
 8003fe8:	694e      	ldr	r6, [r1, #20]
 8003fea:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003fee:	fa06 f60c 	lsl.w	r6, r6, ip
 8003ff2:	ea47 0708 	orr.w	r7, r7, r8
 8003ff6:	433e      	orrs	r6, r7
 8003ff8:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8003ffc:	f842 602e 	str.w	r6, [r2, lr, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004000:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 8004004:	698f      	ldr	r7, [r1, #24]
 8004006:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 800400a:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 800400e:	433e      	orrs	r6, r7
 8004010:	f842 602c 	str.w	r6, [r2, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004014:	690f      	ldr	r7, [r1, #16]
 8004016:	f891 c01c 	ldrb.w	ip, [r1, #28]
  MODIFY_REG(*preg,
 800401a:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 800401e:	f1bc 0f01 	cmp.w	ip, #1
 8004022:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
 8004026:	bf08      	it	eq
 8004028:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 800402c:	4335      	orrs	r5, r6
 800402e:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
 8004032:	680a      	ldr	r2, [r1, #0]
}
 8004034:	e72c      	b.n	8003e90 <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR,
 8004036:	68dc      	ldr	r4, [r3, #12]
 8004038:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 800403c:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8004040:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8004044:	60dc      	str	r4, [r3, #12]
 8004046:	e71d      	b.n	8003e84 <HAL_ADCEx_InjectedConfigChannel+0x8c>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004048:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800404a:	680a      	ldr	r2, [r1, #0]
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800404c:	2b00      	cmp	r3, #0
 800404e:	d06a      	beq.n	8004126 <HAL_ADCEx_InjectedConfigChannel+0x32e>
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004050:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004052:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004056:	0c55      	lsrs	r5, r2, #17
 8004058:	4323      	orrs	r3, r4
 800405a:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 800405e:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8004060:	6803      	ldr	r3, [r0, #0]
 8004062:	4e55      	ldr	r6, [pc, #340]	; (80041b8 <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8004064:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004066:	4034      	ands	r4, r6
 8004068:	432c      	orrs	r4, r5
 800406a:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 800406c:	6645      	str	r5, [r0, #100]	; 0x64
 800406e:	e6f5      	b.n	8003e5c <HAL_ADCEx_InjectedConfigChannel+0x64>
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004070:	e9d1 2600 	ldrd	r2, r6, [r1]
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004074:	6e43      	ldr	r3, [r0, #100]	; 0x64
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004076:	f3c2 6584 	ubfx	r5, r2, #26, #5
 800407a:	f006 061f 	and.w	r6, r6, #31
 800407e:	40b5      	lsls	r5, r6
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004080:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 8004082:	3c01      	subs	r4, #1
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004084:	e9c0 5419 	strd	r5, r4, [r0, #100]	; 0x64
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004088:	6803      	ldr	r3, [r0, #0]
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800408a:	2c00      	cmp	r4, #0
 800408c:	f47f aee6 	bne.w	8003e5c <HAL_ADCEx_InjectedConfigChannel+0x64>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004090:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004092:	4e49      	ldr	r6, [pc, #292]	; (80041b8 <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8004094:	4034      	ands	r4, r6
 8004096:	4325      	orrs	r5, r4
 8004098:	64dd      	str	r5, [r3, #76]	; 0x4c
 800409a:	e6df      	b.n	8003e5c <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800409c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800409e:	2c00      	cmp	r4, #0
 80040a0:	f43f af5d 	beq.w	8003f5e <HAL_ADCEx_InjectedConfigChannel+0x166>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80040a4:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 80040a8:	2c01      	cmp	r4, #1
 80040aa:	f000 8154 	beq.w	8004356 <HAL_ADCEx_InjectedConfigChannel+0x55e>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80040ae:	68dc      	ldr	r4, [r3, #12]
 80040b0:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 80040b4:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040b6:	462c      	mov	r4, r5
 80040b8:	e75c      	b.n	8003f74 <HAL_ADCEx_InjectedConfigChannel+0x17c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80040ba:	f1bc 0f00 	cmp.w	ip, #0
 80040be:	f040 80c7 	bne.w	8004250 <HAL_ADCEx_InjectedConfigChannel+0x458>
 80040c2:	0e92      	lsrs	r2, r2, #26
 80040c4:	1c55      	adds	r5, r2, #1
 80040c6:	f005 071f 	and.w	r7, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040ca:	2f09      	cmp	r7, #9
 80040cc:	f240 80f9 	bls.w	80042c2 <HAL_ADCEx_InjectedConfigChannel+0x4ca>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80040d0:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 80040d4:	06ae      	lsls	r6, r5, #26
 80040d6:	3a1e      	subs	r2, #30
 80040d8:	2501      	movs	r5, #1
 80040da:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80040de:	fa05 f707 	lsl.w	r7, r5, r7
 80040e2:	0512      	lsls	r2, r2, #20
 80040e4:	433e      	orrs	r6, r7
 80040e6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040ea:	4332      	orrs	r2, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80040ec:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 80040f0:	f00c 0c04 	and.w	ip, ip, #4
 80040f4:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 80040f8:	688e      	ldr	r6, [r1, #8]
 80040fa:	f85c 5007 	ldr.w	r5, [ip, r7]
 80040fe:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004102:	f04f 0e07 	mov.w	lr, #7
 8004106:	fa0e fe02 	lsl.w	lr, lr, r2
 800410a:	ea25 050e 	bic.w	r5, r5, lr
 800410e:	fa06 f202 	lsl.w	r2, r6, r2
 8004112:	432a      	orrs	r2, r5
 8004114:	f84c 2007 	str.w	r2, [ip, r7]
 8004118:	680a      	ldr	r2, [r1, #0]
}
 800411a:	e6d1      	b.n	8003ec0 <HAL_ADCEx_InjectedConfigChannel+0xc8>
  __HAL_LOCK(hadc);
 800411c:	2402      	movs	r4, #2
}
 800411e:	4620      	mov	r0, r4
 8004120:	b002      	add	sp, #8
 8004122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004126:	0c55      	lsrs	r5, r2, #17
 8004128:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 800412c:	e798      	b.n	8004060 <HAL_ADCEx_InjectedConfigChannel+0x268>
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800412e:	4e23      	ldr	r6, [pc, #140]	; (80041bc <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
 8004130:	42b2      	cmp	r2, r6
 8004132:	f47f aee2 	bne.w	8003efa <HAL_ADCEx_InjectedConfigChannel+0x102>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004136:	0249      	lsls	r1, r1, #9
 8004138:	f53f aedf 	bmi.w	8003efa <HAL_ADCEx_InjectedConfigChannel+0x102>
      if (ADC_VREFINT_INSTANCE(hadc))
 800413c:	4a1b      	ldr	r2, [pc, #108]	; (80041ac <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	f43f aedb 	beq.w	8003efa <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004144:	68ab      	ldr	r3, [r5, #8]
 8004146:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800414a:	431f      	orrs	r7, r3
 800414c:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 8004150:	60af      	str	r7, [r5, #8]
}
 8004152:	e6d2      	b.n	8003efa <HAL_ADCEx_InjectedConfigChannel+0x102>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004154:	0dd7      	lsrs	r7, r2, #23
 8004156:	f007 0704 	and.w	r7, r7, #4
 800415a:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 800415e:	f3c2 5e04 	ubfx	lr, r2, #20, #5
 8004162:	f04f 0c07 	mov.w	ip, #7
 8004166:	59ba      	ldr	r2, [r7, r6]
 8004168:	fa0c fc0e 	lsl.w	ip, ip, lr
 800416c:	ea22 020c 	bic.w	r2, r2, ip
 8004170:	51ba      	str	r2, [r7, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004172:	695a      	ldr	r2, [r3, #20]
 8004174:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004178:	615a      	str	r2, [r3, #20]
}
 800417a:	e721      	b.n	8003fc0 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
      MODIFY_REG(hadc->Instance->CFGR2,
 800417c:	691f      	ldr	r7, [r3, #16]
 800417e:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8004180:	f427 7cff 	bic.w	ip, r7, #510	; 0x1fe
 8004184:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 8004186:	433e      	orrs	r6, r7
 8004188:	ea46 060c 	orr.w	r6, r6, ip
 800418c:	f046 0602 	orr.w	r6, r6, #2
 8004190:	611e      	str	r6, [r3, #16]
 8004192:	e6f8      	b.n	8003f86 <HAL_ADCEx_InjectedConfigChannel+0x18e>
 8004194:	0007ffff 	.word	0x0007ffff
 8004198:	80080000 	.word	0x80080000
 800419c:	50000300 	.word	0x50000300
 80041a0:	c3210000 	.word	0xc3210000
 80041a4:	90c00010 	.word	0x90c00010
 80041a8:	c7520000 	.word	0xc7520000
 80041ac:	50000100 	.word	0x50000100
 80041b0:	20000694 	.word	0x20000694
 80041b4:	053e2d63 	.word	0x053e2d63
 80041b8:	04104000 	.word	0x04104000
 80041bc:	cb840000 	.word	0xcb840000
 80041c0:	407f0000 	.word	0x407f0000
 80041c4:	03fff000 	.word	0x03fff000
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80041c8:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041ca:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80041cc:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80041ce:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041d2:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80041d6:	2e00      	cmp	r6, #0
 80041d8:	d07d      	beq.n	80042d6 <HAL_ADCEx_InjectedConfigChannel+0x4de>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041da:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80041de:	b126      	cbz	r6, 80041ea <HAL_ADCEx_InjectedConfigChannel+0x3f2>
  return __builtin_clz(value);
 80041e0:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041e4:	42b5      	cmp	r5, r6
 80041e6:	f000 80bb 	beq.w	8004360 <HAL_ADCEx_InjectedConfigChannel+0x568>
 80041ea:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80041ec:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041ee:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041f2:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80041f6:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fa:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80041fe:	b126      	cbz	r6, 800420a <HAL_ADCEx_InjectedConfigChannel+0x412>
  return __builtin_clz(value);
 8004200:	fab6 f686 	clz	r6, r6
 8004204:	42b7      	cmp	r7, r6
 8004206:	f000 80c0 	beq.w	800438a <HAL_ADCEx_InjectedConfigChannel+0x592>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800420a:	68ae      	ldr	r6, [r5, #8]
 800420c:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800420e:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004212:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004216:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800421a:	b126      	cbz	r6, 8004226 <HAL_ADCEx_InjectedConfigChannel+0x42e>
  return __builtin_clz(value);
 800421c:	fab6 f686 	clz	r6, r6
 8004220:	42b7      	cmp	r7, r6
 8004222:	f000 80c7 	beq.w	80043b4 <HAL_ADCEx_InjectedConfigChannel+0x5bc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004226:	68ee      	ldr	r6, [r5, #12]
 8004228:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800422a:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800422c:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004230:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004234:	2e00      	cmp	r6, #0
 8004236:	f43f ae2b 	beq.w	8003e90 <HAL_ADCEx_InjectedConfigChannel+0x98>
  return __builtin_clz(value);
 800423a:	fab6 f686 	clz	r6, r6
 800423e:	42be      	cmp	r6, r7
 8004240:	f47f ae26 	bne.w	8003e90 <HAL_ADCEx_InjectedConfigChannel+0x98>
  MODIFY_REG(*preg,
 8004244:	682a      	ldr	r2, [r5, #0]
 8004246:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800424a:	602a      	str	r2, [r5, #0]
 800424c:	680a      	ldr	r2, [r1, #0]
}
 800424e:	e61f      	b.n	8003e90 <HAL_ADCEx_InjectedConfigChannel+0x98>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004250:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004254:	2d00      	cmp	r5, #0
 8004256:	d05a      	beq.n	800430e <HAL_ADCEx_InjectedConfigChannel+0x516>
  return __builtin_clz(value);
 8004258:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800425c:	3501      	adds	r5, #1
 800425e:	f005 051f 	and.w	r5, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004262:	2d09      	cmp	r5, #9
 8004264:	d953      	bls.n	800430e <HAL_ADCEx_InjectedConfigChannel+0x516>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004266:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800426a:	2e00      	cmp	r6, #0
 800426c:	f000 80c2 	beq.w	80043f4 <HAL_ADCEx_InjectedConfigChannel+0x5fc>
  return __builtin_clz(value);
 8004270:	fab6 f686 	clz	r6, r6
 8004274:	3601      	adds	r6, #1
 8004276:	06b6      	lsls	r6, r6, #26
 8004278:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427c:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004280:	2d00      	cmp	r5, #0
 8004282:	f000 80b5 	beq.w	80043f0 <HAL_ADCEx_InjectedConfigChannel+0x5f8>
  return __builtin_clz(value);
 8004286:	fab5 f585 	clz	r5, r5
 800428a:	3501      	adds	r5, #1
 800428c:	f005 051f 	and.w	r5, r5, #31
 8004290:	2701      	movs	r7, #1
 8004292:	fa07 f505 	lsl.w	r5, r7, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004296:	432e      	orrs	r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004298:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800429c:	2a00      	cmp	r2, #0
 800429e:	f000 80a5 	beq.w	80043ec <HAL_ADCEx_InjectedConfigChannel+0x5f4>
  return __builtin_clz(value);
 80042a2:	fab2 f582 	clz	r5, r2
 80042a6:	3501      	adds	r5, #1
 80042a8:	f005 051f 	and.w	r5, r5, #31
 80042ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042b0:	f1a5 021e 	sub.w	r2, r5, #30
 80042b4:	0512      	lsls	r2, r2, #20
 80042b6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80042ba:	e716      	b.n	80040ea <HAL_ADCEx_InjectedConfigChannel+0x2f2>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 80042bc:	3b01      	subs	r3, #1
 80042be:	461c      	mov	r4, r3
 80042c0:	e5ba      	b.n	8003e38 <HAL_ADCEx_InjectedConfigChannel+0x40>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80042c2:	06ae      	lsls	r6, r5, #26
 80042c4:	2501      	movs	r5, #1
 80042c6:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80042ca:	40bd      	lsls	r5, r7
 80042cc:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 80042d0:	432e      	orrs	r6, r5
 80042d2:	0512      	lsls	r2, r2, #20
 80042d4:	e709      	b.n	80040ea <HAL_ADCEx_InjectedConfigChannel+0x2f2>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80042d6:	f3c2 6684 	ubfx	r6, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042da:	42b5      	cmp	r5, r6
 80042dc:	d040      	beq.n	8004360 <HAL_ADCEx_InjectedConfigChannel+0x568>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042de:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80042e0:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042e2:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042e6:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80042ea:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 80042ee:	42b7      	cmp	r7, r6
 80042f0:	d04b      	beq.n	800438a <HAL_ADCEx_InjectedConfigChannel+0x592>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042f2:	68af      	ldr	r7, [r5, #8]
 80042f4:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042f6:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042fa:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80042fe:	42b7      	cmp	r7, r6
 8004300:	d058      	beq.n	80043b4 <HAL_ADCEx_InjectedConfigChannel+0x5bc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004302:	68ef      	ldr	r7, [r5, #12]
 8004304:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004306:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004308:	f3c7 6784 	ubfx	r7, r7, #26, #5
 800430c:	e797      	b.n	800423e <HAL_ADCEx_InjectedConfigChannel+0x446>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430e:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004312:	2e00      	cmp	r6, #0
 8004314:	d064      	beq.n	80043e0 <HAL_ADCEx_InjectedConfigChannel+0x5e8>
  return __builtin_clz(value);
 8004316:	fab6 f686 	clz	r6, r6
 800431a:	3601      	adds	r6, #1
 800431c:	06b6      	lsls	r6, r6, #26
 800431e:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004322:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004326:	2d00      	cmp	r5, #0
 8004328:	d058      	beq.n	80043dc <HAL_ADCEx_InjectedConfigChannel+0x5e4>
  return __builtin_clz(value);
 800432a:	fab5 f585 	clz	r5, r5
 800432e:	3501      	adds	r5, #1
 8004330:	f005 051f 	and.w	r5, r5, #31
 8004334:	2701      	movs	r7, #1
 8004336:	fa07 f505 	lsl.w	r5, r7, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800433a:	432e      	orrs	r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004340:	2a00      	cmp	r2, #0
 8004342:	d050      	beq.n	80043e6 <HAL_ADCEx_InjectedConfigChannel+0x5ee>
  return __builtin_clz(value);
 8004344:	fab2 f582 	clz	r5, r2
 8004348:	3501      	adds	r5, #1
 800434a:	f005 051f 	and.w	r5, r5, #31
 800434e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004352:	052a      	lsls	r2, r5, #20
 8004354:	e6c9      	b.n	80040ea <HAL_ADCEx_InjectedConfigChannel+0x2f2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004356:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 8004358:	f046 0620 	orr.w	r6, r6, #32
 800435c:	65c6      	str	r6, [r0, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 800435e:	e609      	b.n	8003f74 <HAL_ADCEx_InjectedConfigChannel+0x17c>
  MODIFY_REG(*preg,
 8004360:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004362:	461d      	mov	r5, r3
 8004364:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004368:	f845 2f60 	str.w	r2, [r5, #96]!
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800436c:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800436e:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8004370:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8004372:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004376:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800437a:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800437e:	2e00      	cmp	r6, #0
 8004380:	f47f af3b 	bne.w	80041fa <HAL_ADCEx_InjectedConfigChannel+0x402>
 8004384:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8004388:	e7b1      	b.n	80042ee <HAL_ADCEx_InjectedConfigChannel+0x4f6>
  MODIFY_REG(*preg,
 800438a:	f8dc 2000 	ldr.w	r2, [ip]
 800438e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004392:	f8cc 2000 	str.w	r2, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004396:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004398:	68ae      	ldr	r6, [r5, #8]
 800439a:	68af      	ldr	r7, [r5, #8]
 800439c:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043a0:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043a4:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80043a8:	2e00      	cmp	r6, #0
 80043aa:	f47f af34 	bne.w	8004216 <HAL_ADCEx_InjectedConfigChannel+0x41e>
 80043ae:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80043b2:	e7a4      	b.n	80042fe <HAL_ADCEx_InjectedConfigChannel+0x506>
  MODIFY_REG(*preg,
 80043b4:	f8dc 2000 	ldr.w	r2, [ip]
 80043b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80043bc:	f8cc 2000 	str.w	r2, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80043c0:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043c2:	68ee      	ldr	r6, [r5, #12]
 80043c4:	68ef      	ldr	r7, [r5, #12]
 80043c6:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043ca:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043ce:	350c      	adds	r5, #12
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80043d0:	2e00      	cmp	r6, #0
 80043d2:	f47f af2d 	bne.w	8004230 <HAL_ADCEx_InjectedConfigChannel+0x438>
 80043d6:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80043da:	e730      	b.n	800423e <HAL_ADCEx_InjectedConfigChannel+0x446>
 80043dc:	2502      	movs	r5, #2
 80043de:	e7ac      	b.n	800433a <HAL_ADCEx_InjectedConfigChannel+0x542>
 80043e0:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 80043e4:	e79d      	b.n	8004322 <HAL_ADCEx_InjectedConfigChannel+0x52a>
 80043e6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80043ea:	e67e      	b.n	80040ea <HAL_ADCEx_InjectedConfigChannel+0x2f2>
 80043ec:	4a03      	ldr	r2, [pc, #12]	; (80043fc <HAL_ADCEx_InjectedConfigChannel+0x604>)
 80043ee:	e67c      	b.n	80040ea <HAL_ADCEx_InjectedConfigChannel+0x2f2>
 80043f0:	2502      	movs	r5, #2
 80043f2:	e750      	b.n	8004296 <HAL_ADCEx_InjectedConfigChannel+0x49e>
 80043f4:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 80043f8:	e740      	b.n	800427c <HAL_ADCEx_InjectedConfigChannel+0x484>
 80043fa:	bf00      	nop
 80043fc:	fe500000 	.word	0xfe500000

08004400 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004400:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004402:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004406:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8004408:	2a01      	cmp	r2, #1
{
 800440a:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 800440c:	d04f      	beq.n	80044ae <HAL_ADCEx_MultiModeConfigChannel+0xae>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800440e:	6804      	ldr	r4, [r0, #0]
 8004410:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004412:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004414:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004416:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800441a:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 800441c:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004420:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004422:	d008      	beq.n	8004436 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004424:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004426:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800442a:	f041 0120 	orr.w	r1, r1, #32
 800442e:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004430:	b01c      	add	sp, #112	; 0x70
 8004432:	bcf0      	pop	{r4, r5, r6, r7}
 8004434:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004436:	4a23      	ldr	r2, [pc, #140]	; (80044c4 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8004438:	6890      	ldr	r0, [r2, #8]
 800443a:	0740      	lsls	r0, r0, #29
 800443c:	d50b      	bpl.n	8004456 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800443e:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004440:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004442:	f042 0220 	orr.w	r2, r2, #32
 8004446:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004448:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8004450:	b01c      	add	sp, #112	; 0x70
 8004452:	bcf0      	pop	{r4, r5, r6, r7}
 8004454:	4770      	bx	lr
 8004456:	68a0      	ldr	r0, [r4, #8]
 8004458:	0746      	lsls	r6, r0, #29
 800445a:	d4f1      	bmi.n	8004440 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800445c:	b1d5      	cbz	r5, 8004494 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800445e:	4e1a      	ldr	r6, [pc, #104]	; (80044c8 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8004460:	684f      	ldr	r7, [r1, #4]
 8004462:	68b0      	ldr	r0, [r6, #8]
 8004464:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8004468:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 800446c:	4338      	orrs	r0, r7
 800446e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8004472:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004474:	68a4      	ldr	r4, [r4, #8]
 8004476:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004478:	4320      	orrs	r0, r4
 800447a:	f010 0001 	ands.w	r0, r0, #1
 800447e:	d114      	bne.n	80044aa <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        MODIFY_REG(tmpADC_Common->CCR,
 8004480:	68b4      	ldr	r4, [r6, #8]
 8004482:	688a      	ldr	r2, [r1, #8]
 8004484:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 8004488:	4315      	orrs	r5, r2
 800448a:	f021 010f 	bic.w	r1, r1, #15
 800448e:	430d      	orrs	r5, r1
 8004490:	60b5      	str	r5, [r6, #8]
 8004492:	e7da      	b.n	800444a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004494:	4d0c      	ldr	r5, [pc, #48]	; (80044c8 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8004496:	68a9      	ldr	r1, [r5, #8]
 8004498:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800449c:	60a9      	str	r1, [r5, #8]
 800449e:	68a1      	ldr	r1, [r4, #8]
 80044a0:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044a2:	4308      	orrs	r0, r1
 80044a4:	f010 0001 	ands.w	r0, r0, #1
 80044a8:	d005      	beq.n	80044b6 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044aa:	2000      	movs	r0, #0
 80044ac:	e7cd      	b.n	800444a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80044ae:	2002      	movs	r0, #2
}
 80044b0:	b01c      	add	sp, #112	; 0x70
 80044b2:	bcf0      	pop	{r4, r5, r6, r7}
 80044b4:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80044b6:	68aa      	ldr	r2, [r5, #8]
 80044b8:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80044bc:	f022 020f 	bic.w	r2, r2, #15
 80044c0:	60aa      	str	r2, [r5, #8]
 80044c2:	e7c2      	b.n	800444a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80044c4:	50000100 	.word	0x50000100
 80044c8:	50000300 	.word	0x50000300

080044cc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80044cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ce:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80044d0:	2300      	movs	r3, #0
 80044d2:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80044d4:	2800      	cmp	r0, #0
 80044d6:	d054      	beq.n	8004582 <HAL_COMP_Init+0xb6>
  {
    status = HAL_ERROR;
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80044d8:	6802      	ldr	r2, [r0, #0]
 80044da:	6813      	ldr	r3, [r2, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	4604      	mov	r4, r0
 80044e0:	db4f      	blt.n	8004582 <HAL_COMP_Init+0xb6>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80044e2:	7f43      	ldrb	r3, [r0, #29]
 80044e4:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d078      	beq.n	80045de <HAL_COMP_Init+0x112>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 80044ec:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
    tmp_csr = (hcomp->Init.InputMinus
 80044f0:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
               | hcomp->Init.BlankingSrce
 80044f4:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80044f6:	6817      	ldr	r7, [r2, #0]
               | hcomp->Init.InputPlus
 80044f8:	4333      	orrs	r3, r6
               | hcomp->Init.BlankingSrce
 80044fa:	430b      	orrs	r3, r1
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80044fc:	6816      	ldr	r6, [r2, #0]
 80044fe:	4940      	ldr	r1, [pc, #256]	; (8004600 <HAL_COMP_Init+0x134>)
               | hcomp->Init.Hysteresis
 8004500:	432b      	orrs	r3, r5
    tmp_csr = (hcomp->Init.InputMinus
 8004502:	4303      	orrs	r3, r0
    MODIFY_REG(hcomp->Instance->CSR,
 8004504:	4031      	ands	r1, r6
 8004506:	430b      	orrs	r3, r1
 8004508:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800450a:	6813      	ldr	r3, [r2, #0]
 800450c:	0218      	lsls	r0, r3, #8
 800450e:	d501      	bpl.n	8004514 <HAL_COMP_Init+0x48>
 8004510:	023b      	lsls	r3, r7, #8
 8004512:	d54e      	bpl.n	80045b2 <HAL_COMP_Init+0xe6>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004514:	4b3b      	ldr	r3, [pc, #236]	; (8004604 <HAL_COMP_Init+0x138>)
 8004516:	429a      	cmp	r2, r3
 8004518:	d067      	beq.n	80045ea <HAL_COMP_Init+0x11e>
 800451a:	4b3b      	ldr	r3, [pc, #236]	; (8004608 <HAL_COMP_Init+0x13c>)
 800451c:	429a      	cmp	r2, r3
 800451e:	d069      	beq.n	80045f4 <HAL_COMP_Init+0x128>
 8004520:	3304      	adds	r3, #4
 8004522:	429a      	cmp	r2, r3
 8004524:	bf0b      	itete	eq
 8004526:	f06f 5200 	mvneq.w	r2, #536870912	; 0x20000000
 800452a:	f06f 4280 	mvnne.w	r2, #1073741824	; 0x40000000
 800452e:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 8004532:	f04f 4180 	movne.w	r1, #1073741824	; 0x40000000

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004536:	69a3      	ldr	r3, [r4, #24]
 8004538:	079f      	lsls	r7, r3, #30
 800453a:	d025      	beq.n	8004588 <HAL_COMP_Init+0xbc>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800453c:	4d33      	ldr	r5, [pc, #204]	; (800460c <HAL_COMP_Init+0x140>)
 800453e:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8004540:	06de      	lsls	r6, r3, #27
 8004542:	bf4c      	ite	mi
 8004544:	4308      	orrmi	r0, r1
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004546:	4010      	andpl	r0, r2
 8004548:	60a8      	str	r0, [r5, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800454a:	4d30      	ldr	r5, [pc, #192]	; (800460c <HAL_COMP_Init+0x140>)
 800454c:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800454e:	069f      	lsls	r7, r3, #26
 8004550:	bf4c      	ite	mi
 8004552:	4308      	orrmi	r0, r1
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004554:	4010      	andpl	r0, r2
 8004556:	60e8      	str	r0, [r5, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004558:	482c      	ldr	r0, [pc, #176]	; (800460c <HAL_COMP_Init+0x140>)
 800455a:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800455c:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800455e:	079e      	lsls	r6, r3, #30
 8004560:	bf4c      	ite	mi
 8004562:	430d      	orrmi	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004564:	4015      	andpl	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004566:	07db      	lsls	r3, r3, #31
 8004568:	6045      	str	r5, [r0, #4]
 800456a:	d51d      	bpl.n	80045a8 <HAL_COMP_Init+0xdc>
  SET_BIT(EXTI->IMR1, ExtiLine);
 800456c:	4b27      	ldr	r3, [pc, #156]	; (800460c <HAL_COMP_Init+0x140>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	4311      	orrs	r1, r2
 8004572:	6019      	str	r1, [r3, #0]
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004574:	7f63      	ldrb	r3, [r4, #29]
 8004576:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800457a:	b18b      	cbz	r3, 80045a0 <HAL_COMP_Init+0xd4>
  HAL_StatusTypeDef status = HAL_OK;
 800457c:	2000      	movs	r0, #0
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 800457e:	b003      	add	sp, #12
 8004580:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 8004582:	2001      	movs	r0, #1
}
 8004584:	b003      	add	sp, #12
 8004586:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004588:	4b20      	ldr	r3, [pc, #128]	; (800460c <HAL_COMP_Init+0x140>)
 800458a:	6859      	ldr	r1, [r3, #4]
 800458c:	4011      	ands	r1, r2
 800458e:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004590:	6819      	ldr	r1, [r3, #0]
 8004592:	400a      	ands	r2, r1
 8004594:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004596:	7f63      	ldrb	r3, [r4, #29]
 8004598:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1ed      	bne.n	800457c <HAL_COMP_Init+0xb0>
      hcomp->State = HAL_COMP_STATE_READY;
 80045a0:	2301      	movs	r3, #1
 80045a2:	7763      	strb	r3, [r4, #29]
}
 80045a4:	b003      	add	sp, #12
 80045a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045a8:	4918      	ldr	r1, [pc, #96]	; (800460c <HAL_COMP_Init+0x140>)
 80045aa:	680b      	ldr	r3, [r1, #0]
 80045ac:	401a      	ands	r2, r3
 80045ae:	600a      	str	r2, [r1, #0]
}
 80045b0:	e7f1      	b.n	8004596 <HAL_COMP_Init+0xca>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045b2:	4b17      	ldr	r3, [pc, #92]	; (8004610 <HAL_COMP_Init+0x144>)
 80045b4:	4917      	ldr	r1, [pc, #92]	; (8004614 <HAL_COMP_Init+0x148>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	099b      	lsrs	r3, r3, #6
 80045ba:	fba1 1303 	umull	r1, r3, r1, r3
 80045be:	099b      	lsrs	r3, r3, #6
 80045c0:	3301      	adds	r3, #1
 80045c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80045ca:	9b01      	ldr	r3, [sp, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0a1      	beq.n	8004514 <HAL_COMP_Init+0x48>
        wait_loop_index--;
 80045d0:	9b01      	ldr	r3, [sp, #4]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80045d6:	9b01      	ldr	r3, [sp, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1f9      	bne.n	80045d0 <HAL_COMP_Init+0x104>
 80045dc:	e79a      	b.n	8004514 <HAL_COMP_Init+0x48>
      hcomp->Lock = HAL_UNLOCKED;
 80045de:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 80045e0:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 80045e2:	f7fe f845 	bl	8002670 <HAL_COMP_MspInit>
 80045e6:	6822      	ldr	r2, [r4, #0]
 80045e8:	e780      	b.n	80044ec <HAL_COMP_Init+0x20>
 80045ea:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80045ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045f2:	e7a0      	b.n	8004536 <HAL_COMP_Init+0x6a>
 80045f4:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80045f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045fc:	e79b      	b.n	8004536 <HAL_COMP_Init+0x6a>
 80045fe:	bf00      	nop
 8004600:	ff007e0f 	.word	0xff007e0f
 8004604:	40010200 	.word	0x40010200
 8004608:	40010204 	.word	0x40010204
 800460c:	40010400 	.word	0x40010400
 8004610:	20000694 	.word	0x20000694
 8004614:	053e2d63 	.word	0x053e2d63

08004618 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004618:	b1b0      	cbz	r0, 8004648 <HAL_CORDIC_Init+0x30>
{
 800461a:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800461c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004620:	4604      	mov	r4, r0
 8004622:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004626:	b153      	cbz	r3, 800463e <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004628:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800462a:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800462c:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 800462e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 8004632:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8004636:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800463a:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 800463c:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 800463e:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8004642:	f7fe f875 	bl	8002730 <HAL_CORDIC_MspInit>
 8004646:	e7ef      	b.n	8004628 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8004648:	2001      	movs	r0, #1
}
 800464a:	4770      	bx	lr

0800464c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800464c:	4908      	ldr	r1, [pc, #32]	; (8004670 <HAL_NVIC_SetPriorityGrouping+0x24>)
 800464e:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004650:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004652:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004654:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8004658:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800465a:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800465e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004668:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 800466c:	60cb      	str	r3, [r1, #12]
 800466e:	4770      	bx	lr
 8004670:	e000ed00 	.word	0xe000ed00

08004674 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004674:	4b19      	ldr	r3, [pc, #100]	; (80046dc <HAL_NVIC_SetPriority+0x68>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800467c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800467e:	f1c3 0507 	rsb	r5, r3, #7
 8004682:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004684:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004688:	bf28      	it	cs
 800468a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800468c:	2c06      	cmp	r4, #6
 800468e:	d919      	bls.n	80046c4 <HAL_NVIC_SetPriority+0x50>
 8004690:	3b03      	subs	r3, #3
 8004692:	f04f 34ff 	mov.w	r4, #4294967295
 8004696:	409c      	lsls	r4, r3
 8004698:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800469c:	f04f 34ff 	mov.w	r4, #4294967295
 80046a0:	40ac      	lsls	r4, r5
 80046a2:	ea21 0104 	bic.w	r1, r1, r4
 80046a6:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80046a8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046aa:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80046ae:	db0c      	blt.n	80046ca <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80046b4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80046b8:	0109      	lsls	r1, r1, #4
 80046ba:	b2c9      	uxtb	r1, r1
 80046bc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80046c0:	bc30      	pop	{r4, r5}
 80046c2:	4770      	bx	lr
 80046c4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046c6:	4613      	mov	r3, r2
 80046c8:	e7e8      	b.n	800469c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ca:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <HAL_NVIC_SetPriority+0x6c>)
 80046cc:	f000 000f 	and.w	r0, r0, #15
 80046d0:	0109      	lsls	r1, r1, #4
 80046d2:	4403      	add	r3, r0
 80046d4:	b2c9      	uxtb	r1, r1
 80046d6:	7619      	strb	r1, [r3, #24]
 80046d8:	bc30      	pop	{r4, r5}
 80046da:	4770      	bx	lr
 80046dc:	e000ed00 	.word	0xe000ed00
 80046e0:	e000ecfc 	.word	0xe000ecfc

080046e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80046e4:	2800      	cmp	r0, #0
 80046e6:	db07      	blt.n	80046f8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046e8:	4a04      	ldr	r2, [pc, #16]	; (80046fc <HAL_NVIC_EnableIRQ+0x18>)
 80046ea:	f000 011f 	and.w	r1, r0, #31
 80046ee:	2301      	movs	r3, #1
 80046f0:	0940      	lsrs	r0, r0, #5
 80046f2:	408b      	lsls	r3, r1
 80046f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	e000e100 	.word	0xe000e100

08004700 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004700:	3801      	subs	r0, #1
 8004702:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004706:	d20e      	bcs.n	8004726 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004708:	4b08      	ldr	r3, [pc, #32]	; (800472c <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800470a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800470c:	4c08      	ldr	r4, [pc, #32]	; (8004730 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800470e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004710:	20f0      	movs	r0, #240	; 0xf0
 8004712:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004716:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004718:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800471a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800471c:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 800471e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004722:	6019      	str	r1, [r3, #0]
 8004724:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004726:	2001      	movs	r0, #1
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	e000e010 	.word	0xe000e010
 8004730:	e000ed00 	.word	0xe000ed00

08004734 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop

08004738 <HAL_SYSTICK_IRQHandler>:
{
 8004738:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800473a:	f7ff fffb 	bl	8004734 <HAL_SYSTICK_Callback>
}
 800473e:	bd08      	pop	{r3, pc}

08004740 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004740:	b188      	cbz	r0, 8004766 <HAL_DAC_Init+0x26>
{
 8004742:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004744:	7903      	ldrb	r3, [r0, #4]
 8004746:	4604      	mov	r4, r0
 8004748:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800474c:	b13b      	cbz	r3, 800475e <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800474e:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8004750:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004752:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8004754:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004756:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8004758:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800475a:	4618      	mov	r0, r3
}
 800475c:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800475e:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8004760:	f7fd fffe 	bl	8002760 <HAL_DAC_MspInit>
 8004764:	e7f3      	b.n	800474e <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8004766:	2001      	movs	r0, #1
}
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop

0800476c <HAL_DAC_ConfigChannel>:
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800476c:	2800      	cmp	r0, #0
 800476e:	f000 80c8 	beq.w	8004902 <HAL_DAC_ConfigChannel+0x196>
{
 8004772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004776:	460d      	mov	r5, r1
  if ((hdac == NULL) || (sConfig == NULL))
 8004778:	2900      	cmp	r1, #0
 800477a:	f000 80c4 	beq.w	8004906 <HAL_DAC_ConfigChannel+0x19a>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800477e:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004780:	688f      	ldr	r7, [r1, #8]
  __HAL_LOCK(hdac);
 8004782:	2b01      	cmp	r3, #1
 8004784:	4606      	mov	r6, r0
 8004786:	f000 80ca 	beq.w	800491e <HAL_DAC_ConfigChannel+0x1b2>
 800478a:	4614      	mov	r4, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800478c:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 800478e:	2201      	movs	r2, #1

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004790:	2f04      	cmp	r7, #4
  __HAL_LOCK(hdac);
 8004792:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8004794:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004796:	d077      	beq.n	8004888 <HAL_DAC_ConfigChannel+0x11c>
 8004798:	6803      	ldr	r3, [r0, #0]
 800479a:	f004 0410 	and.w	r4, r4, #16
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800479e:	69ea      	ldr	r2, [r5, #28]
 80047a0:	2a01      	cmp	r2, #1
 80047a2:	d108      	bne.n	80047b6 <HAL_DAC_ConfigChannel+0x4a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80047a4:	6b99      	ldr	r1, [r3, #56]	; 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047a6:	6a2a      	ldr	r2, [r5, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80047a8:	201f      	movs	r0, #31
 80047aa:	40a0      	lsls	r0, r4
 80047ac:	ea21 0100 	bic.w	r1, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047b0:	40a2      	lsls	r2, r4
 80047b2:	430a      	orrs	r2, r1
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80047b4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80047b6:	69a9      	ldr	r1, [r5, #24]
  tmpreg1 = hdac->Instance->MCR;
 80047b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80047ba:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80047be:	f04f 0807 	mov.w	r8, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80047c2:	2901      	cmp	r1, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80047c4:	fa08 f004 	lsl.w	r0, r8, r4
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80047c8:	f000 8099 	beq.w	80048fe <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80047cc:	2902      	cmp	r1, #2
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80047ce:	bf16      	itet	ne
 80047d0:	fabc f18c 	clzne	r1, ip
    connectOnChip = DAC_MCR_MODE1_0;
 80047d4:	2101      	moveq	r1, #1
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80047d6:	0949      	lsrne	r1, r1, #5
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80047d8:	f44f 7880 	mov.w	r8, #256	; 0x100
 80047dc:	fa08 f804 	lsl.w	r8, r8, r4
 80047e0:	ea48 0800 	orr.w	r8, r8, r0
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80047e4:	ea41 010c 	orr.w	r1, r1, ip
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80047e8:	ea22 0808 	bic.w	r8, r2, r8
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80047ec:	f895 c004 	ldrb.w	ip, [r5, #4]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80047f0:	f44f 7200 	mov.w	r2, #512	; 0x200
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80047f4:	430f      	orrs	r7, r1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80047f6:	40a2      	lsls	r2, r4
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80047f8:	7969      	ldrb	r1, [r5, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80047fa:	f1bc 0f01 	cmp.w	ip, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80047fe:	ea28 0802 	bic.w	r8, r8, r2
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004802:	682a      	ldr	r2, [r5, #0]
 8004804:	bf08      	it	eq
 8004806:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800480a:	2901      	cmp	r1, #1
 800480c:	bf08      	it	eq
 800480e:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004812:	2a02      	cmp	r2, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004814:	f428 4840 	bic.w	r8, r8, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004818:	d078      	beq.n	800490c <HAL_DAC_ConfigChannel+0x1a0>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800481a:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800481e:	40a7      	lsls	r7, r4
 8004820:	ea47 0708 	orr.w	r7, r7, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004824:	63df      	str	r7, [r3, #60]	; 0x3c
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004826:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8004830:	40a5      	lsls	r5, r4
 8004832:	ea20 0005 	bic.w	r0, r0, r5
 8004836:	6018      	str	r0, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 8004838:	6818      	ldr	r0, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800483a:	f640 75fe 	movw	r5, #4094	; 0xffe
 800483e:	40a5      	lsls	r5, r4
 8004840:	ea20 0505 	bic.w	r5, r0, r5
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004844:	fa01 f004 	lsl.w	r0, r1, r4
 8004848:	4328      	orrs	r0, r5
  hdac->Instance->CR = tmpreg1;
 800484a:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	25c0      	movs	r5, #192	; 0xc0
 8004850:	40a5      	lsls	r5, r4
 8004852:	ea20 0005 	bic.w	r0, r0, r5
 8004856:	6018      	str	r0, [r3, #0]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004858:	0192      	lsls	r2, r2, #6
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800485a:	6e18      	ldr	r0, [r3, #96]	; 0x60
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800485c:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004860:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8004864:	f640 750f 	movw	r5, #3855	; 0xf0f
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004868:	430a      	orrs	r2, r1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800486a:	fa05 f104 	lsl.w	r1, r5, r4
 800486e:	fa02 f404 	lsl.w	r4, r2, r4
 8004872:	ea20 0201 	bic.w	r2, r0, r1
 8004876:	4314      	orrs	r4, r2
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004878:	2101      	movs	r1, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800487a:	2200      	movs	r2, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800487c:	661c      	str	r4, [r3, #96]	; 0x60

  /* Return function status */
  return status;
 800487e:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 8004880:	7131      	strb	r1, [r6, #4]
  __HAL_UNLOCK(hdac);
 8004882:	7172      	strb	r2, [r6, #5]
}
 8004884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 8004888:	f7fe ff32 	bl	80036f0 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800488c:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800488e:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (Channel == DAC_CHANNEL_1)
 8004892:	b154      	cbz	r4, 80048aa <HAL_DAC_ConfigChannel+0x13e>
 8004894:	e018      	b.n	80048c8 <HAL_DAC_ConfigChannel+0x15c>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004896:	f7fe ff2b 	bl	80036f0 <HAL_GetTick>
 800489a:	1bc3      	subs	r3, r0, r7
 800489c:	2b01      	cmp	r3, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800489e:	6833      	ldr	r3, [r6, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80048a0:	d902      	bls.n	80048a8 <HAL_DAC_ConfigChannel+0x13c>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80048a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a4:	0411      	lsls	r1, r2, #16
 80048a6:	d443      	bmi.n	8004930 <HAL_DAC_ConfigChannel+0x1c4>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80048a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048aa:	0412      	lsls	r2, r2, #16
 80048ac:	d4f3      	bmi.n	8004896 <HAL_DAC_ConfigChannel+0x12a>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80048ae:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80048b0:	641a      	str	r2, [r3, #64]	; 0x40
 80048b2:	e00d      	b.n	80048d0 <HAL_DAC_ConfigChannel+0x164>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80048b4:	f7fe ff1c 	bl	80036f0 <HAL_GetTick>
 80048b8:	1bc3      	subs	r3, r0, r7
 80048ba:	2b01      	cmp	r3, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80048bc:	6833      	ldr	r3, [r6, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80048be:	d902      	bls.n	80048c6 <HAL_DAC_ConfigChannel+0x15a>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80048c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048c2:	2a00      	cmp	r2, #0
 80048c4:	db34      	blt.n	8004930 <HAL_DAC_ConfigChannel+0x1c4>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80048c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048c8:	2a00      	cmp	r2, #0
 80048ca:	dbf3      	blt.n	80048b4 <HAL_DAC_ConfigChannel+0x148>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80048cc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80048ce:	645a      	str	r2, [r3, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80048d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048d2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80048d4:	68af      	ldr	r7, [r5, #8]
 80048d6:	f004 0410 	and.w	r4, r4, #16
 80048da:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80048de:	40a0      	lsls	r0, r4
 80048e0:	ea22 0200 	bic.w	r2, r2, r0
 80048e4:	40a1      	lsls	r1, r4
 80048e6:	430a      	orrs	r2, r1
 80048e8:	649a      	str	r2, [r3, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80048ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048ec:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80048ee:	20ff      	movs	r0, #255	; 0xff
 80048f0:	40a0      	lsls	r0, r4
 80048f2:	ea22 0200 	bic.w	r2, r2, r0
 80048f6:	40a1      	lsls	r1, r4
 80048f8:	430a      	orrs	r2, r1
 80048fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80048fc:	e74f      	b.n	800479e <HAL_DAC_ConfigChannel+0x32>
    connectOnChip = 0x00000000UL;
 80048fe:	2100      	movs	r1, #0
 8004900:	e76a      	b.n	80047d8 <HAL_DAC_ConfigChannel+0x6c>
    return HAL_ERROR;
 8004902:	2001      	movs	r0, #1
}
 8004904:	4770      	bx	lr
    return HAL_ERROR;
 8004906:	2001      	movs	r0, #1
}
 8004908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800490c:	f000 fdbc 	bl	8005488 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <HAL_DAC_ConfigChannel+0x1d4>)
 8004912:	4298      	cmp	r0, r3
 8004914:	d905      	bls.n	8004922 <HAL_DAC_ConfigChannel+0x1b6>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004916:	6833      	ldr	r3, [r6, #0]
 8004918:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 800491c:	e77f      	b.n	800481e <HAL_DAC_ConfigChannel+0xb2>
  __HAL_LOCK(hdac);
 800491e:	2002      	movs	r0, #2
 8004920:	e7b0      	b.n	8004884 <HAL_DAC_ConfigChannel+0x118>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004922:	4b08      	ldr	r3, [pc, #32]	; (8004944 <HAL_DAC_ConfigChannel+0x1d8>)
 8004924:	4298      	cmp	r0, r3
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004926:	bf88      	it	hi
 8004928:	f448 4880 	orrhi.w	r8, r8, #16384	; 0x4000
 800492c:	6833      	ldr	r3, [r6, #0]
 800492e:	e776      	b.n	800481e <HAL_DAC_ConfigChannel+0xb2>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004930:	6933      	ldr	r3, [r6, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004932:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004934:	f043 0308 	orr.w	r3, r3, #8
 8004938:	6133      	str	r3, [r6, #16]
            return HAL_TIMEOUT;
 800493a:	4610      	mov	r0, r2
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800493c:	7132      	strb	r2, [r6, #4]
            return HAL_TIMEOUT;
 800493e:	e7a1      	b.n	8004884 <HAL_DAC_ConfigChannel+0x118>
 8004940:	09896800 	.word	0x09896800
 8004944:	04c4b400 	.word	0x04c4b400

08004948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800494c:	680c      	ldr	r4, [r1, #0]
{
 800494e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004950:	2c00      	cmp	r4, #0
 8004952:	f000 8084 	beq.w	8004a5e <HAL_GPIO_Init+0x116>
  uint32_t position = 0x00U;
 8004956:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004958:	f04f 0b01 	mov.w	fp, #1
 800495c:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8004960:	ea1e 0a04 	ands.w	sl, lr, r4
 8004964:	d076      	beq.n	8004a54 <HAL_GPIO_Init+0x10c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004966:	684e      	ldr	r6, [r1, #4]
 8004968:	f006 0203 	and.w	r2, r6, #3
 800496c:	1e55      	subs	r5, r2, #1
 800496e:	2d01      	cmp	r5, #1
 8004970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004974:	d976      	bls.n	8004a64 <HAL_GPIO_Init+0x11c>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004976:	2a03      	cmp	r2, #3
 8004978:	f040 80ba 	bne.w	8004af0 <HAL_GPIO_Init+0x1a8>
 800497c:	fa02 f20c 	lsl.w	r2, r2, ip
 8004980:	43d5      	mvns	r5, r2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004982:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004986:	ea0c 0505 	and.w	r5, ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800498a:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800498c:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8004990:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004992:	d05f      	beq.n	8004a54 <HAL_GPIO_Init+0x10c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004994:	4d64      	ldr	r5, [pc, #400]	; (8004b28 <HAL_GPIO_Init+0x1e0>)
 8004996:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8004998:	f042 0201 	orr.w	r2, r2, #1
 800499c:	662a      	str	r2, [r5, #96]	; 0x60
 800499e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80049a0:	f023 0c03 	bic.w	ip, r3, #3
 80049a4:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 80049a8:	f002 0201 	and.w	r2, r2, #1
 80049ac:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
 80049b0:	9203      	str	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049b2:	f003 0203 	and.w	r2, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049b6:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80049b8:	f8dc 5008 	ldr.w	r5, [ip, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049bc:	0092      	lsls	r2, r2, #2
 80049be:	270f      	movs	r7, #15
 80049c0:	fa07 fe02 	lsl.w	lr, r7, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049c4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049c8:	ea25 050e 	bic.w	r5, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049cc:	d019      	beq.n	8004a02 <HAL_GPIO_Init+0xba>
 80049ce:	4f57      	ldr	r7, [pc, #348]	; (8004b2c <HAL_GPIO_Init+0x1e4>)
 80049d0:	42b8      	cmp	r0, r7
 80049d2:	f000 8098 	beq.w	8004b06 <HAL_GPIO_Init+0x1be>
 80049d6:	4f56      	ldr	r7, [pc, #344]	; (8004b30 <HAL_GPIO_Init+0x1e8>)
 80049d8:	42b8      	cmp	r0, r7
 80049da:	f000 8098 	beq.w	8004b0e <HAL_GPIO_Init+0x1c6>
 80049de:	4f55      	ldr	r7, [pc, #340]	; (8004b34 <HAL_GPIO_Init+0x1ec>)
 80049e0:	42b8      	cmp	r0, r7
 80049e2:	f000 808a 	beq.w	8004afa <HAL_GPIO_Init+0x1b2>
 80049e6:	4f54      	ldr	r7, [pc, #336]	; (8004b38 <HAL_GPIO_Init+0x1f0>)
 80049e8:	42b8      	cmp	r0, r7
 80049ea:	f000 8096 	beq.w	8004b1a <HAL_GPIO_Init+0x1d2>
 80049ee:	4f53      	ldr	r7, [pc, #332]	; (8004b3c <HAL_GPIO_Init+0x1f4>)
 80049f0:	42b8      	cmp	r0, r7
 80049f2:	bf0c      	ite	eq
 80049f4:	f04f 0e05 	moveq.w	lr, #5
 80049f8:	f04f 0e06 	movne.w	lr, #6
 80049fc:	fa0e f202 	lsl.w	r2, lr, r2
 8004a00:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a02:	4a4f      	ldr	r2, [pc, #316]	; (8004b40 <HAL_GPIO_Init+0x1f8>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a04:	f8cc 5008 	str.w	r5, [ip, #8]
        temp = EXTI->RTSR1;
 8004a08:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 8004a0a:	ea6f 0c0a 	mvn.w	ip, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a0e:	02f5      	lsls	r5, r6, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8004a10:	4d4b      	ldr	r5, [pc, #300]	; (8004b40 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 8004a12:	bf54      	ite	pl
 8004a14:	ea0c 0202 	andpl.w	r2, ip, r2
          temp |= iocurrent;
 8004a18:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8004a1c:	60aa      	str	r2, [r5, #8]

        temp = EXTI->FTSR1;
 8004a1e:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a20:	02b2      	lsls	r2, r6, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8004a22:	4a47      	ldr	r2, [pc, #284]	; (8004b40 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 8004a24:	bf54      	ite	pl
 8004a26:	ea0c 0505 	andpl.w	r5, ip, r5
          temp |= iocurrent;
 8004a2a:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->FTSR1 = temp;
 8004a2e:	60d5      	str	r5, [r2, #12]

        temp = EXTI->EMR1;
 8004a30:	6855      	ldr	r5, [r2, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8004a32:	4a43      	ldr	r2, [pc, #268]	; (8004b40 <HAL_GPIO_Init+0x1f8>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a34:	03b7      	lsls	r7, r6, #14
        temp &= ~(iocurrent);
 8004a36:	bf54      	ite	pl
 8004a38:	ea0c 0505 	andpl.w	r5, ip, r5
          temp |= iocurrent;
 8004a3c:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR1 = temp;
 8004a40:	6055      	str	r5, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a42:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a44:	03f5      	lsls	r5, r6, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8004a46:	4d3e      	ldr	r5, [pc, #248]	; (8004b40 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 8004a48:	bf54      	ite	pl
 8004a4a:	ea0c 0202 	andpl.w	r2, ip, r2
          temp |= iocurrent;
 8004a4e:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 8004a52:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 8004a54:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a56:	fa34 f203 	lsrs.w	r2, r4, r3
 8004a5a:	f47f af7f 	bne.w	800495c <HAL_GPIO_Init+0x14>
  }
}
 8004a5e:	b005      	add	sp, #20
 8004a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8004a64:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a68:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a6a:	2503      	movs	r5, #3
 8004a6c:	fa05 f50c 	lsl.w	r5, r5, ip
 8004a70:	ea28 0805 	bic.w	r8, r8, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a74:	fa07 f90c 	lsl.w	r9, r7, ip
 8004a78:	ea49 0808 	orr.w	r8, r9, r8
        GPIOx->OSPEEDR = temp;
 8004a7c:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8004a80:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a84:	f3c6 1900 	ubfx	r9, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a88:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a8c:	fa09 fe03 	lsl.w	lr, r9, r3
 8004a90:	ea4e 0e08 	orr.w	lr, lr, r8
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a94:	43ed      	mvns	r5, r5
        GPIOx->OTYPER = temp;
 8004a96:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8004a9a:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a9e:	688f      	ldr	r7, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004aa0:	ea08 0805 	and.w	r8, r8, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004aa4:	fa07 fe0c 	lsl.w	lr, r7, ip
 8004aa8:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aac:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8004aae:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ab2:	d002      	beq.n	8004aba <HAL_GPIO_Init+0x172>
 8004ab4:	fa02 f20c 	lsl.w	r2, r2, ip
 8004ab8:	e763      	b.n	8004982 <HAL_GPIO_Init+0x3a>
        temp = GPIOx->AFR[position >> 3U];
 8004aba:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8004abe:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ac2:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004ac6:	f8d8 7020 	ldr.w	r7, [r8, #32]
 8004aca:	9701      	str	r7, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004acc:	690f      	ldr	r7, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ace:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ad2:	fa07 f90e 	lsl.w	r9, r7, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ad6:	270f      	movs	r7, #15
 8004ad8:	fa07 fe0e 	lsl.w	lr, r7, lr
 8004adc:	9f01      	ldr	r7, [sp, #4]
 8004ade:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ae2:	ea49 0e0e 	orr.w	lr, r9, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004ae6:	fa02 f20c 	lsl.w	r2, r2, ip
 8004aea:	f8c8 e020 	str.w	lr, [r8, #32]
 8004aee:	e748      	b.n	8004982 <HAL_GPIO_Init+0x3a>
 8004af0:	2503      	movs	r5, #3
 8004af2:	fa05 f50c 	lsl.w	r5, r5, ip
 8004af6:	43ed      	mvns	r5, r5
 8004af8:	e7cf      	b.n	8004a9a <HAL_GPIO_Init+0x152>
 8004afa:	f04f 0e03 	mov.w	lr, #3
 8004afe:	fa0e f202 	lsl.w	r2, lr, r2
 8004b02:	4315      	orrs	r5, r2
 8004b04:	e77d      	b.n	8004a02 <HAL_GPIO_Init+0xba>
 8004b06:	fa0b f202 	lsl.w	r2, fp, r2
 8004b0a:	4315      	orrs	r5, r2
 8004b0c:	e779      	b.n	8004a02 <HAL_GPIO_Init+0xba>
 8004b0e:	f04f 0e02 	mov.w	lr, #2
 8004b12:	fa0e f202 	lsl.w	r2, lr, r2
 8004b16:	4315      	orrs	r5, r2
 8004b18:	e773      	b.n	8004a02 <HAL_GPIO_Init+0xba>
 8004b1a:	f04f 0e04 	mov.w	lr, #4
 8004b1e:	fa0e f202 	lsl.w	r2, lr, r2
 8004b22:	4315      	orrs	r5, r2
 8004b24:	e76d      	b.n	8004a02 <HAL_GPIO_Init+0xba>
 8004b26:	bf00      	nop
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	48000400 	.word	0x48000400
 8004b30:	48000800 	.word	0x48000800
 8004b34:	48000c00 	.word	0x48000c00
 8004b38:	48001000 	.word	0x48001000
 8004b3c:	48001400 	.word	0x48001400
 8004b40:	40010400 	.word	0x40010400

08004b44 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004b44:	2800      	cmp	r0, #0
 8004b46:	d07d      	beq.n	8004c44 <HAL_OPAMP_Init+0x100>
{
 8004b48:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004b4a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004b4e:	2b05      	cmp	r3, #5
{
 8004b50:	b082      	sub	sp, #8
 8004b52:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004b54:	d057      	beq.n	8004c06 <HAL_OPAMP_Init+0xc2>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004b56:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d053      	beq.n	8004c06 <HAL_OPAMP_Init+0xc2>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b5e:	4b3a      	ldr	r3, [pc, #232]	; (8004c48 <HAL_OPAMP_Init+0x104>)
 8004b60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b62:	f042 0201 	orr.w	r2, r2, #1
 8004b66:	661a      	str	r2, [r3, #96]	; 0x60
 8004b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	9301      	str	r3, [sp, #4]
 8004b70:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004b72:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004b76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004b7a:	b90b      	cbnz	r3, 8004b80 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004b7c:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004b80:	4620      	mov	r0, r4
 8004b82:	f7fd fe05 	bl	8002790 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004b86:	68a3      	ldr	r3, [r4, #8]
 8004b88:	f023 0220 	bic.w	r2, r3, #32
 8004b8c:	2a40      	cmp	r2, #64	; 0x40
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004b8e:	6822      	ldr	r2, [r4, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004b90:	d03c      	beq.n	8004c0c <HAL_OPAMP_Init+0xc8>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004b92:	6860      	ldr	r0, [r4, #4]
 8004b94:	68e6      	ldr	r6, [r4, #12]
 8004b96:	6811      	ldr	r1, [r2, #0]
 8004b98:	6925      	ldr	r5, [r4, #16]
 8004b9a:	4303      	orrs	r3, r0
 8004b9c:	4333      	orrs	r3, r6
 8004b9e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004ba0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004ba2:	432b      	orrs	r3, r5
      MODIFY_REG(hopamp->Instance->CSR,
 8004ba4:	f021 0110 	bic.w	r1, r1, #16
      MODIFY_REG(hopamp->Instance->CSR,
 8004ba8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 8004baa:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8004bac:	4333      	orrs	r3, r6
 8004bae:	e9d4 600c 	ldrd	r6, r0, [r4, #48]	; 0x30
      MODIFY_REG(hopamp->Instance->CSR,
 8004bb2:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8004bb4:	432b      	orrs	r3, r5
 8004bb6:	4925      	ldr	r1, [pc, #148]	; (8004c4c <HAL_OPAMP_Init+0x108>)
 8004bb8:	6815      	ldr	r5, [r2, #0]
 8004bba:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8004bbe:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004bc2:	7d20      	ldrb	r0, [r4, #20]
 8004bc4:	4029      	ands	r1, r5
 8004bc6:	2801      	cmp	r0, #1
 8004bc8:	ea43 0301 	orr.w	r3, r3, r1
 8004bcc:	bf0c      	ite	eq
 8004bce:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8004bd2:	2100      	movne	r1, #0
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004bd8:	6993      	ldr	r3, [r2, #24]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	db09      	blt.n	8004bf2 <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004bde:	e9d4 3506 	ldrd	r3, r5, [r4, #24]
 8004be2:	6a20      	ldr	r0, [r4, #32]
 8004be4:	6991      	ldr	r1, [r2, #24]
 8004be6:	432b      	orrs	r3, r5
 8004be8:	4303      	orrs	r3, r0
 8004bea:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004bee:	430b      	orrs	r3, r1
 8004bf0:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004bf2:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8004bf6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004bfa:	bb03      	cbnz	r3, 8004c3e <HAL_OPAMP_Init+0xfa>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
  }
}
 8004c02:	b002      	add	sp, #8
 8004c04:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004c06:	2001      	movs	r0, #1
}
 8004c08:	b002      	add	sp, #8
 8004c0a:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8004c0c:	6866      	ldr	r6, [r4, #4]
 8004c0e:	6811      	ldr	r1, [r2, #0]
 8004c10:	6920      	ldr	r0, [r4, #16]
 8004c12:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8004c14:	4333      	orrs	r3, r6
 8004c16:	4303      	orrs	r3, r0
 8004c18:	f021 0110 	bic.w	r1, r1, #16
      MODIFY_REG(hopamp->Instance->CSR,
 8004c1c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      MODIFY_REG(hopamp->Instance->CSR,
 8004c1e:	4329      	orrs	r1, r5
      MODIFY_REG(hopamp->Instance->CSR,
 8004c20:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 8004c22:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8004c24:	4303      	orrs	r3, r0
 8004c26:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004c28:	6816      	ldr	r6, [r2, #0]
 8004c2a:	4908      	ldr	r1, [pc, #32]	; (8004c4c <HAL_OPAMP_Init+0x108>)
 8004c2c:	432b      	orrs	r3, r5
 8004c2e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004c30:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 8004c34:	4031      	ands	r1, r6
 8004c36:	7d20      	ldrb	r0, [r4, #20]
 8004c38:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8004c3c:	e7c3      	b.n	8004bc6 <HAL_OPAMP_Init+0x82>
    return status;
 8004c3e:	2000      	movs	r0, #0
}
 8004c40:	b002      	add	sp, #8
 8004c42:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004c44:	2001      	movs	r0, #1
}
 8004c46:	4770      	bx	lr
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	e0003e11 	.word	0xe0003e11

08004c50 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c50:	4a3b      	ldr	r2, [pc, #236]	; (8004d40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8004c52:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c54:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c56:	b968      	cbnz	r0, 8004c74 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c60:	d014      	beq.n	8004c8c <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c62:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004c66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c6a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8004c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c72:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c74:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004c78:	d02f      	beq.n	8004cda <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c82:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004c84:	2000      	movs	r0, #0
}
 8004c86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c8a:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c8c:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c90:	4b2c      	ldr	r3, [pc, #176]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004c92:	482d      	ldr	r0, [pc, #180]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c94:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004c98:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c9c:	6811      	ldr	r1, [r2, #0]
 8004c9e:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8004ca2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004ca6:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ca8:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004caa:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cac:	2332      	movs	r3, #50	; 0x32
 8004cae:	fb03 f304 	mul.w	r3, r3, r4
 8004cb2:	fba0 0303 	umull	r0, r3, r0, r3
 8004cb6:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cb8:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cba:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cbe:	d506      	bpl.n	8004cce <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004cc0:	e000      	b.n	8004cc4 <HAL_PWREx_ControlVoltageScaling+0x74>
 8004cc2:	b123      	cbz	r3, 8004cce <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004cc4:	6951      	ldr	r1, [r2, #20]
 8004cc6:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004cc8:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ccc:	d4f9      	bmi.n	8004cc2 <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cce:	4b1c      	ldr	r3, [pc, #112]	; (8004d40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	055c      	lsls	r4, r3, #21
 8004cd4:	d5d6      	bpl.n	8004c84 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8004cd6:	2003      	movs	r0, #3
 8004cd8:	e7c9      	b.n	8004c6e <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce2:	d009      	beq.n	8004cf8 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ce4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8004ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8004cf0:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cf2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8004cf6:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cf8:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cfc:	4b11      	ldr	r3, [pc, #68]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004cfe:	4812      	ldr	r0, [pc, #72]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d00:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004d04:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d08:	6811      	ldr	r1, [r2, #0]
 8004d0a:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8004d0e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004d12:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d14:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d16:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d18:	2332      	movs	r3, #50	; 0x32
 8004d1a:	fb03 f304 	mul.w	r3, r3, r4
 8004d1e:	fba0 0303 	umull	r0, r3, r0, r3
 8004d22:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d24:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d26:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d2a:	d5d0      	bpl.n	8004cce <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004d2c:	e001      	b.n	8004d32 <HAL_PWREx_ControlVoltageScaling+0xe2>
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0cd      	beq.n	8004cce <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004d32:	6951      	ldr	r1, [r2, #20]
 8004d34:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004d36:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d3a:	d5c8      	bpl.n	8004cce <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004d3c:	e7f7      	b.n	8004d2e <HAL_PWREx_ControlVoltageScaling+0xde>
 8004d3e:	bf00      	nop
 8004d40:	40007000 	.word	0x40007000
 8004d44:	20000694 	.word	0x20000694
 8004d48:	431bde83 	.word	0x431bde83

08004d4c <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004d4c:	4a02      	ldr	r2, [pc, #8]	; (8004d58 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8004d4e:	6893      	ldr	r3, [r2, #8]
 8004d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d54:	6093      	str	r3, [r2, #8]
}
 8004d56:	4770      	bx	lr
 8004d58:	40007000 	.word	0x40007000

08004d5c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	f000 8200 	beq.w	8005162 <HAL_RCC_OscConfig+0x406>
{
 8004d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d66:	6803      	ldr	r3, [r0, #0]
 8004d68:	07d9      	lsls	r1, r3, #31
{
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d6e:	d52d      	bpl.n	8004dcc <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d70:	49af      	ldr	r1, [pc, #700]	; (8005030 <HAL_RCC_OscConfig+0x2d4>)
 8004d72:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d74:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d76:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d7a:	2a0c      	cmp	r2, #12
 8004d7c:	f000 8107 	beq.w	8004f8e <HAL_RCC_OscConfig+0x232>
 8004d80:	2a08      	cmp	r2, #8
 8004d82:	f000 8109 	beq.w	8004f98 <HAL_RCC_OscConfig+0x23c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d86:	6863      	ldr	r3, [r4, #4]
 8004d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d8c:	f000 8177 	beq.w	800507e <HAL_RCC_OscConfig+0x322>
 8004d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d94:	f000 81d8 	beq.w	8005148 <HAL_RCC_OscConfig+0x3ec>
 8004d98:	4da5      	ldr	r5, [pc, #660]	; (8005030 <HAL_RCC_OscConfig+0x2d4>)
 8004d9a:	682a      	ldr	r2, [r5, #0]
 8004d9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004da0:	602a      	str	r2, [r5, #0]
 8004da2:	682a      	ldr	r2, [r5, #0]
 8004da4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004da8:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f040 816c 	bne.w	8005088 <HAL_RCC_OscConfig+0x32c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fe fc9e 	bl	80036f0 <HAL_GetTick>
 8004db4:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004db6:	e005      	b.n	8004dc4 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004db8:	f7fe fc9a 	bl	80036f0 <HAL_GetTick>
 8004dbc:	1b80      	subs	r0, r0, r6
 8004dbe:	2864      	cmp	r0, #100	; 0x64
 8004dc0:	f200 817f 	bhi.w	80050c2 <HAL_RCC_OscConfig+0x366>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dc4:	682b      	ldr	r3, [r5, #0]
 8004dc6:	039f      	lsls	r7, r3, #14
 8004dc8:	d4f6      	bmi.n	8004db8 <HAL_RCC_OscConfig+0x5c>
 8004dca:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dcc:	079e      	lsls	r6, r3, #30
 8004dce:	d528      	bpl.n	8004e22 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dd0:	4a97      	ldr	r2, [pc, #604]	; (8005030 <HAL_RCC_OscConfig+0x2d4>)
 8004dd2:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dd4:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dd6:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004dda:	2b0c      	cmp	r3, #12
 8004ddc:	f000 8130 	beq.w	8005040 <HAL_RCC_OscConfig+0x2e4>
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	f000 8132 	beq.w	800504a <HAL_RCC_OscConfig+0x2ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004de6:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004de8:	4d91      	ldr	r5, [pc, #580]	; (8005030 <HAL_RCC_OscConfig+0x2d4>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 815a 	beq.w	80050a4 <HAL_RCC_OscConfig+0x348>
        __HAL_RCC_HSI_ENABLE();
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df6:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df8:	f7fe fc7a 	bl	80036f0 <HAL_GetTick>
 8004dfc:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dfe:	e005      	b.n	8004e0c <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e00:	f7fe fc76 	bl	80036f0 <HAL_GetTick>
 8004e04:	1b80      	subs	r0, r0, r6
 8004e06:	2802      	cmp	r0, #2
 8004e08:	f200 815b 	bhi.w	80050c2 <HAL_RCC_OscConfig+0x366>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e0c:	682b      	ldr	r3, [r5, #0]
 8004e0e:	0558      	lsls	r0, r3, #21
 8004e10:	d5f6      	bpl.n	8004e00 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e12:	686b      	ldr	r3, [r5, #4]
 8004e14:	6922      	ldr	r2, [r4, #16]
 8004e16:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004e1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e1e:	606b      	str	r3, [r5, #4]
 8004e20:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e22:	071a      	lsls	r2, r3, #28
 8004e24:	d519      	bpl.n	8004e5a <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e26:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e28:	4d81      	ldr	r5, [pc, #516]	; (8005030 <HAL_RCC_OscConfig+0x2d4>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 809a 	beq.w	8004f64 <HAL_RCC_OscConfig+0x208>
      __HAL_RCC_LSI_ENABLE();
 8004e30:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004e34:	f043 0301 	orr.w	r3, r3, #1
 8004e38:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3c:	f7fe fc58 	bl	80036f0 <HAL_GetTick>
 8004e40:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e42:	e005      	b.n	8004e50 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e44:	f7fe fc54 	bl	80036f0 <HAL_GetTick>
 8004e48:	1b80      	subs	r0, r0, r6
 8004e4a:	2802      	cmp	r0, #2
 8004e4c:	f200 8139 	bhi.w	80050c2 <HAL_RCC_OscConfig+0x366>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e50:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004e54:	079b      	lsls	r3, r3, #30
 8004e56:	d5f5      	bpl.n	8004e44 <HAL_RCC_OscConfig+0xe8>
 8004e58:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e5a:	075e      	lsls	r6, r3, #29
 8004e5c:	d541      	bpl.n	8004ee2 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e5e:	4b74      	ldr	r3, [pc, #464]	; (8005030 <HAL_RCC_OscConfig+0x2d4>)
 8004e60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e62:	00d5      	lsls	r5, r2, #3
 8004e64:	f100 8131 	bmi.w	80050ca <HAL_RCC_OscConfig+0x36e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e6e:	659a      	str	r2, [r3, #88]	; 0x58
 8004e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004e7a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e7c:	4e6d      	ldr	r6, [pc, #436]	; (8005034 <HAL_RCC_OscConfig+0x2d8>)
 8004e7e:	6833      	ldr	r3, [r6, #0]
 8004e80:	05d8      	lsls	r0, r3, #23
 8004e82:	f140 8150 	bpl.w	8005126 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e86:	68a3      	ldr	r3, [r4, #8]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	f000 8120 	beq.w	80050ce <HAL_RCC_OscConfig+0x372>
 8004e8e:	2b05      	cmp	r3, #5
 8004e90:	f000 8169 	beq.w	8005166 <HAL_RCC_OscConfig+0x40a>
 8004e94:	4e66      	ldr	r6, [pc, #408]	; (8005030 <HAL_RCC_OscConfig+0x2d4>)
 8004e96:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8004e9a:	f022 0201 	bic.w	r2, r2, #1
 8004e9e:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8004ea2:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8004ea6:	f022 0204 	bic.w	r2, r2, #4
 8004eaa:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f040 8114 	bne.w	80050dc <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb4:	f7fe fc1c 	bl	80036f0 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004ebc:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ebe:	e005      	b.n	8004ecc <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec0:	f7fe fc16 	bl	80036f0 <HAL_GetTick>
 8004ec4:	1bc0      	subs	r0, r0, r7
 8004ec6:	4540      	cmp	r0, r8
 8004ec8:	f200 80fb 	bhi.w	80050c2 <HAL_RCC_OscConfig+0x366>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ecc:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8004ed0:	079b      	lsls	r3, r3, #30
 8004ed2:	d4f5      	bmi.n	8004ec0 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ed4:	b125      	cbz	r5, 8004ee0 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ed6:	4a56      	ldr	r2, [pc, #344]	; (8005030 <HAL_RCC_OscConfig+0x2d4>)
 8004ed8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ede:	6593      	str	r3, [r2, #88]	; 0x58
 8004ee0:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ee2:	069d      	lsls	r5, r3, #26
 8004ee4:	d518      	bpl.n	8004f18 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ee6:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ee8:	4d51      	ldr	r5, [pc, #324]	; (8005030 <HAL_RCC_OscConfig+0x2d4>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 8107 	beq.w	80050fe <HAL_RCC_OscConfig+0x3a2>
      __HAL_RCC_HSI48_ENABLE();
 8004ef0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efc:	f7fe fbf8 	bl	80036f0 <HAL_GetTick>
 8004f00:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f02:	e005      	b.n	8004f10 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f04:	f7fe fbf4 	bl	80036f0 <HAL_GetTick>
 8004f08:	1b80      	subs	r0, r0, r6
 8004f0a:	2802      	cmp	r0, #2
 8004f0c:	f200 80d9 	bhi.w	80050c2 <HAL_RCC_OscConfig+0x366>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f10:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004f14:	0798      	lsls	r0, r3, #30
 8004f16:	d5f5      	bpl.n	8004f04 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f18:	69e0      	ldr	r0, [r4, #28]
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	f000 8084 	beq.w	8005028 <HAL_RCC_OscConfig+0x2cc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f20:	4d43      	ldr	r5, [pc, #268]	; (8005030 <HAL_RCC_OscConfig+0x2d4>)
 8004f22:	68ab      	ldr	r3, [r5, #8]
 8004f24:	f003 030c 	and.w	r3, r3, #12
 8004f28:	2b0c      	cmp	r3, #12
 8004f2a:	f000 812a 	beq.w	8005182 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2e:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f30:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f36:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f38:	d03b      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x256>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3a:	f7fe fbd9 	bl	80036f0 <HAL_GetTick>

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f3e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8004f40:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f42:	e005      	b.n	8004f50 <HAL_RCC_OscConfig+0x1f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f44:	f7fe fbd4 	bl	80036f0 <HAL_GetTick>
 8004f48:	1b40      	subs	r0, r0, r5
 8004f4a:	2802      	cmp	r0, #2
 8004f4c:	f200 80b9 	bhi.w	80050c2 <HAL_RCC_OscConfig+0x366>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8004f56:	d1f5      	bne.n	8004f44 <HAL_RCC_OscConfig+0x1e8>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f58:	68e1      	ldr	r1, [r4, #12]
 8004f5a:	4a37      	ldr	r2, [pc, #220]	; (8005038 <HAL_RCC_OscConfig+0x2dc>)
 8004f5c:	400a      	ands	r2, r1
      }
    }
  }
  }

  return HAL_OK;
 8004f5e:	4618      	mov	r0, r3
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f60:	60e2      	str	r2, [r4, #12]
 8004f62:	e062      	b.n	800502a <HAL_RCC_OscConfig+0x2ce>
      __HAL_RCC_LSI_DISABLE();
 8004f64:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004f68:	f023 0301 	bic.w	r3, r3, #1
 8004f6c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004f70:	f7fe fbbe 	bl	80036f0 <HAL_GetTick>
 8004f74:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f76:	e005      	b.n	8004f84 <HAL_RCC_OscConfig+0x228>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f78:	f7fe fbba 	bl	80036f0 <HAL_GetTick>
 8004f7c:	1b80      	subs	r0, r0, r6
 8004f7e:	2802      	cmp	r0, #2
 8004f80:	f200 809f 	bhi.w	80050c2 <HAL_RCC_OscConfig+0x366>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f84:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004f88:	079f      	lsls	r7, r3, #30
 8004f8a:	d4f5      	bmi.n	8004f78 <HAL_RCC_OscConfig+0x21c>
 8004f8c:	e764      	b.n	8004e58 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f8e:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004f92:	2903      	cmp	r1, #3
 8004f94:	f47f aef7 	bne.w	8004d86 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f98:	4a25      	ldr	r2, [pc, #148]	; (8005030 <HAL_RCC_OscConfig+0x2d4>)
 8004f9a:	6812      	ldr	r2, [r2, #0]
 8004f9c:	0392      	lsls	r2, r2, #14
 8004f9e:	f57f af15 	bpl.w	8004dcc <HAL_RCC_OscConfig+0x70>
 8004fa2:	6862      	ldr	r2, [r4, #4]
 8004fa4:	2a00      	cmp	r2, #0
 8004fa6:	f47f af11 	bne.w	8004dcc <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8004faa:	2001      	movs	r0, #1
}
 8004fac:	b002      	add	sp, #8
 8004fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8004fb2:	f7fe fb9d 	bl	80036f0 <HAL_GetTick>
 8004fb6:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fb8:	e004      	b.n	8004fc4 <HAL_RCC_OscConfig+0x268>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fba:	f7fe fb99 	bl	80036f0 <HAL_GetTick>
 8004fbe:	1b80      	subs	r0, r0, r6
 8004fc0:	2802      	cmp	r0, #2
 8004fc2:	d87e      	bhi.n	80050c2 <HAL_RCC_OscConfig+0x366>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fc4:	682b      	ldr	r3, [r5, #0]
 8004fc6:	019a      	lsls	r2, r3, #6
 8004fc8:	d4f7      	bmi.n	8004fba <HAL_RCC_OscConfig+0x25e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fca:	68e9      	ldr	r1, [r5, #12]
 8004fcc:	4b1b      	ldr	r3, [pc, #108]	; (800503c <HAL_RCC_OscConfig+0x2e0>)
 8004fce:	6a22      	ldr	r2, [r4, #32]
 8004fd0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004fd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fd4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004fd6:	400b      	ands	r3, r1
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8004fde:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8004fe2:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8004fe6:	3801      	subs	r0, #1
 8004fe8:	0849      	lsrs	r1, r1, #1
 8004fea:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004fee:	3901      	subs	r1, #1
 8004ff0:	0852      	lsrs	r2, r2, #1
 8004ff2:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8004ff6:	3a01      	subs	r2, #1
 8004ff8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004ffc:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8004ffe:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005000:	4e0b      	ldr	r6, [pc, #44]	; (8005030 <HAL_RCC_OscConfig+0x2d4>)
        __HAL_RCC_PLL_ENABLE();
 8005002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005006:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005008:	68eb      	ldr	r3, [r5, #12]
 800500a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800500e:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005010:	f7fe fb6e 	bl	80036f0 <HAL_GetTick>
 8005014:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005016:	e004      	b.n	8005022 <HAL_RCC_OscConfig+0x2c6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005018:	f7fe fb6a 	bl	80036f0 <HAL_GetTick>
 800501c:	1b00      	subs	r0, r0, r4
 800501e:	2802      	cmp	r0, #2
 8005020:	d84f      	bhi.n	80050c2 <HAL_RCC_OscConfig+0x366>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005022:	6833      	ldr	r3, [r6, #0]
 8005024:	019b      	lsls	r3, r3, #6
 8005026:	d5f7      	bpl.n	8005018 <HAL_RCC_OscConfig+0x2bc>
  return HAL_OK;
 8005028:	2000      	movs	r0, #0
}
 800502a:	b002      	add	sp, #8
 800502c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005030:	40021000 	.word	0x40021000
 8005034:	40007000 	.word	0x40007000
 8005038:	feeefffc 	.word	0xfeeefffc
 800503c:	019f800c 	.word	0x019f800c
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005040:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005044:	2a02      	cmp	r2, #2
 8005046:	f47f aece 	bne.w	8004de6 <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800504a:	4b68      	ldr	r3, [pc, #416]	; (80051ec <HAL_RCC_OscConfig+0x490>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	055d      	lsls	r5, r3, #21
 8005050:	d502      	bpl.n	8005058 <HAL_RCC_OscConfig+0x2fc>
 8005052:	68e3      	ldr	r3, [r4, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0a8      	beq.n	8004faa <HAL_RCC_OscConfig+0x24e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005058:	4a64      	ldr	r2, [pc, #400]	; (80051ec <HAL_RCC_OscConfig+0x490>)
 800505a:	6920      	ldr	r0, [r4, #16]
 800505c:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800505e:	4964      	ldr	r1, [pc, #400]	; (80051f0 <HAL_RCC_OscConfig+0x494>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005060:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005064:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005068:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800506a:	6808      	ldr	r0, [r1, #0]
 800506c:	f7fe fafe 	bl	800366c <HAL_InitTick>
 8005070:	2800      	cmp	r0, #0
 8005072:	d19a      	bne.n	8004faa <HAL_RCC_OscConfig+0x24e>
 8005074:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005076:	071a      	lsls	r2, r3, #28
 8005078:	f57f aeef 	bpl.w	8004e5a <HAL_RCC_OscConfig+0xfe>
 800507c:	e6d3      	b.n	8004e26 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800507e:	4a5b      	ldr	r2, [pc, #364]	; (80051ec <HAL_RCC_OscConfig+0x490>)
 8005080:	6813      	ldr	r3, [r2, #0]
 8005082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005086:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005088:	f7fe fb32 	bl	80036f0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800508c:	4e57      	ldr	r6, [pc, #348]	; (80051ec <HAL_RCC_OscConfig+0x490>)
        tickstart = HAL_GetTick();
 800508e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005090:	e004      	b.n	800509c <HAL_RCC_OscConfig+0x340>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005092:	f7fe fb2d 	bl	80036f0 <HAL_GetTick>
 8005096:	1b40      	subs	r0, r0, r5
 8005098:	2864      	cmp	r0, #100	; 0x64
 800509a:	d812      	bhi.n	80050c2 <HAL_RCC_OscConfig+0x366>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800509c:	6833      	ldr	r3, [r6, #0]
 800509e:	039b      	lsls	r3, r3, #14
 80050a0:	d5f7      	bpl.n	8005092 <HAL_RCC_OscConfig+0x336>
 80050a2:	e692      	b.n	8004dca <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80050ac:	f7fe fb20 	bl	80036f0 <HAL_GetTick>
 80050b0:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050b2:	682b      	ldr	r3, [r5, #0]
 80050b4:	0559      	lsls	r1, r3, #21
 80050b6:	d5dd      	bpl.n	8005074 <HAL_RCC_OscConfig+0x318>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050b8:	f7fe fb1a 	bl	80036f0 <HAL_GetTick>
 80050bc:	1b80      	subs	r0, r0, r6
 80050be:	2802      	cmp	r0, #2
 80050c0:	d9f7      	bls.n	80050b2 <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 80050c2:	2003      	movs	r0, #3
}
 80050c4:	b002      	add	sp, #8
 80050c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 80050ca:	2500      	movs	r5, #0
 80050cc:	e6d6      	b.n	8004e7c <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ce:	4a47      	ldr	r2, [pc, #284]	; (80051ec <HAL_RCC_OscConfig+0x490>)
 80050d0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80050d4:	f043 0301 	orr.w	r3, r3, #1
 80050d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80050dc:	f7fe fb08 	bl	80036f0 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050e0:	4f42      	ldr	r7, [pc, #264]	; (80051ec <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 80050e2:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050e4:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050e8:	e004      	b.n	80050f4 <HAL_RCC_OscConfig+0x398>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ea:	f7fe fb01 	bl	80036f0 <HAL_GetTick>
 80050ee:	1b80      	subs	r0, r0, r6
 80050f0:	4540      	cmp	r0, r8
 80050f2:	d8e6      	bhi.n	80050c2 <HAL_RCC_OscConfig+0x366>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050f8:	079a      	lsls	r2, r3, #30
 80050fa:	d5f6      	bpl.n	80050ea <HAL_RCC_OscConfig+0x38e>
 80050fc:	e6ea      	b.n	8004ed4 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 80050fe:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005102:	f023 0301 	bic.w	r3, r3, #1
 8005106:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 800510a:	f7fe faf1 	bl	80036f0 <HAL_GetTick>
 800510e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005110:	e004      	b.n	800511c <HAL_RCC_OscConfig+0x3c0>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005112:	f7fe faed 	bl	80036f0 <HAL_GetTick>
 8005116:	1b80      	subs	r0, r0, r6
 8005118:	2802      	cmp	r0, #2
 800511a:	d8d2      	bhi.n	80050c2 <HAL_RCC_OscConfig+0x366>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800511c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005120:	0799      	lsls	r1, r3, #30
 8005122:	d4f6      	bmi.n	8005112 <HAL_RCC_OscConfig+0x3b6>
 8005124:	e6f8      	b.n	8004f18 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005126:	6833      	ldr	r3, [r6, #0]
 8005128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800512c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800512e:	f7fe fadf 	bl	80036f0 <HAL_GetTick>
 8005132:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005134:	6833      	ldr	r3, [r6, #0]
 8005136:	05d9      	lsls	r1, r3, #23
 8005138:	f53f aea5 	bmi.w	8004e86 <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800513c:	f7fe fad8 	bl	80036f0 <HAL_GetTick>
 8005140:	1bc0      	subs	r0, r0, r7
 8005142:	2802      	cmp	r0, #2
 8005144:	d9f6      	bls.n	8005134 <HAL_RCC_OscConfig+0x3d8>
 8005146:	e7bc      	b.n	80050c2 <HAL_RCC_OscConfig+0x366>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005148:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800514c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800515e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005160:	e792      	b.n	8005088 <HAL_RCC_OscConfig+0x32c>
    return HAL_ERROR;
 8005162:	2001      	movs	r0, #1
}
 8005164:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005166:	4b21      	ldr	r3, [pc, #132]	; (80051ec <HAL_RCC_OscConfig+0x490>)
 8005168:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800516c:	f042 0204 	orr.w	r2, r2, #4
 8005170:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005174:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005178:	f042 0201 	orr.w	r2, r2, #1
 800517c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005180:	e7ac      	b.n	80050dc <HAL_RCC_OscConfig+0x380>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005182:	2801      	cmp	r0, #1
 8005184:	f43f af51 	beq.w	800502a <HAL_RCC_OscConfig+0x2ce>
      temp_pllckcfg = RCC->PLLCFGR;
 8005188:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800518a:	6a22      	ldr	r2, [r4, #32]
 800518c:	f003 0103 	and.w	r1, r3, #3
 8005190:	4291      	cmp	r1, r2
 8005192:	f47f af0a 	bne.w	8004faa <HAL_RCC_OscConfig+0x24e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005196:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005198:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800519c:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800519e:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80051a2:	f47f af02 	bne.w	8004faa <HAL_RCC_OscConfig+0x24e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80051a6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80051a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051ac:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80051b0:	f47f aefb 	bne.w	8004faa <HAL_RCC_OscConfig+0x24e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80051b6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80051ba:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80051be:	f47f aef4 	bne.w	8004faa <HAL_RCC_OscConfig+0x24e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80051c4:	0852      	lsrs	r2, r2, #1
 80051c6:	3a01      	subs	r2, #1
 80051c8:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051cc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80051d0:	f47f aeeb 	bne.w	8004faa <HAL_RCC_OscConfig+0x24e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051d4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80051d6:	0852      	lsrs	r2, r2, #1
 80051d8:	3a01      	subs	r2, #1
 80051da:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051de:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 80051e2:	bf14      	ite	ne
 80051e4:	2001      	movne	r0, #1
 80051e6:	2000      	moveq	r0, #0
 80051e8:	e71f      	b.n	800502a <HAL_RCC_OscConfig+0x2ce>
 80051ea:	bf00      	nop
 80051ec:	40021000 	.word	0x40021000
 80051f0:	2000069c 	.word	0x2000069c

080051f4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80051f4:	4b18      	ldr	r3, [pc, #96]	; (8005258 <HAL_RCC_GetSysClockFreq+0x64>)
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	f002 020c 	and.w	r2, r2, #12
 80051fc:	2a04      	cmp	r2, #4
 80051fe:	d027      	beq.n	8005250 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	f002 020c 	and.w	r2, r2, #12
 8005206:	2a08      	cmp	r2, #8
 8005208:	d024      	beq.n	8005254 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	f002 020c 	and.w	r2, r2, #12
 8005210:	2a0c      	cmp	r2, #12
 8005212:	d001      	beq.n	8005218 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8005214:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8005216:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005218:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800521a:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800521c:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800521e:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005222:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 8005226:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005228:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800522c:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005230:	bf0c      	ite	eq
 8005232:	480a      	ldreq	r0, [pc, #40]	; (800525c <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005234:	480a      	ldrne	r0, [pc, #40]	; (8005260 <HAL_RCC_GetSysClockFreq+0x6c>)
 8005236:	fbb0 f0f2 	udiv	r0, r0, r2
 800523a:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800523e:	4b06      	ldr	r3, [pc, #24]	; (8005258 <HAL_RCC_GetSysClockFreq+0x64>)
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8005246:	3301      	adds	r3, #1
 8005248:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800524a:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800524e:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8005250:	4803      	ldr	r0, [pc, #12]	; (8005260 <HAL_RCC_GetSysClockFreq+0x6c>)
 8005252:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8005254:	4801      	ldr	r0, [pc, #4]	; (800525c <HAL_RCC_GetSysClockFreq+0x68>)
 8005256:	4770      	bx	lr
 8005258:	40021000 	.word	0x40021000
 800525c:	007a1200 	.word	0x007a1200
 8005260:	00f42400 	.word	0x00f42400

08005264 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005264:	2800      	cmp	r0, #0
 8005266:	f000 80ef 	beq.w	8005448 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800526a:	4a7f      	ldr	r2, [pc, #508]	; (8005468 <HAL_RCC_ClockConfig+0x204>)
{
 800526c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005270:	6813      	ldr	r3, [r2, #0]
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	428b      	cmp	r3, r1
 8005278:	460d      	mov	r5, r1
 800527a:	4604      	mov	r4, r0
 800527c:	d20c      	bcs.n	8005298 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527e:	6813      	ldr	r3, [r2, #0]
 8005280:	f023 030f 	bic.w	r3, r3, #15
 8005284:	430b      	orrs	r3, r1
 8005286:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005288:	6813      	ldr	r3, [r2, #0]
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	428b      	cmp	r3, r1
 8005290:	d002      	beq.n	8005298 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8005292:	2001      	movs	r0, #1
}
 8005294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	07de      	lsls	r6, r3, #31
 800529c:	d563      	bpl.n	8005366 <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800529e:	6862      	ldr	r2, [r4, #4]
 80052a0:	2a03      	cmp	r2, #3
 80052a2:	f000 809a 	beq.w	80053da <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052a6:	4b71      	ldr	r3, [pc, #452]	; (800546c <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052a8:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052aa:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ac:	f000 8091 	beq.w	80053d2 <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052b0:	055b      	lsls	r3, r3, #21
 80052b2:	d5ee      	bpl.n	8005292 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80052b4:	f7ff ff9e 	bl	80051f4 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80052b8:	4b6d      	ldr	r3, [pc, #436]	; (8005470 <HAL_RCC_ClockConfig+0x20c>)
 80052ba:	4298      	cmp	r0, r3
 80052bc:	f200 80c6 	bhi.w	800544c <HAL_RCC_ClockConfig+0x1e8>
 80052c0:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80052c2:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052c6:	4e69      	ldr	r6, [pc, #420]	; (800546c <HAL_RCC_ClockConfig+0x208>)
 80052c8:	68b3      	ldr	r3, [r6, #8]
 80052ca:	f023 0303 	bic.w	r3, r3, #3
 80052ce:	431a      	orrs	r2, r3
 80052d0:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 80052d2:	f7fe fa0d 	bl	80036f0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052d6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80052da:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052dc:	e004      	b.n	80052e8 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052de:	f7fe fa07 	bl	80036f0 <HAL_GetTick>
 80052e2:	1bc0      	subs	r0, r0, r7
 80052e4:	4540      	cmp	r0, r8
 80052e6:	d871      	bhi.n	80053cc <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e8:	68b3      	ldr	r3, [r6, #8]
 80052ea:	6862      	ldr	r2, [r4, #4]
 80052ec:	f003 030c 	and.w	r3, r3, #12
 80052f0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80052f4:	d1f3      	bne.n	80052de <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	079f      	lsls	r7, r3, #30
 80052fa:	d436      	bmi.n	800536a <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 80052fc:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8005300:	d103      	bne.n	800530a <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005302:	68b3      	ldr	r3, [r6, #8]
 8005304:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005308:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800530a:	4e57      	ldr	r6, [pc, #348]	; (8005468 <HAL_RCC_ClockConfig+0x204>)
 800530c:	6833      	ldr	r3, [r6, #0]
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	42ab      	cmp	r3, r5
 8005314:	d846      	bhi.n	80053a4 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	075a      	lsls	r2, r3, #29
 800531a:	d506      	bpl.n	800532a <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800531c:	4953      	ldr	r1, [pc, #332]	; (800546c <HAL_RCC_ClockConfig+0x208>)
 800531e:	68e0      	ldr	r0, [r4, #12]
 8005320:	688a      	ldr	r2, [r1, #8]
 8005322:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005326:	4302      	orrs	r2, r0
 8005328:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532a:	071b      	lsls	r3, r3, #28
 800532c:	d507      	bpl.n	800533e <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800532e:	4a4f      	ldr	r2, [pc, #316]	; (800546c <HAL_RCC_ClockConfig+0x208>)
 8005330:	6921      	ldr	r1, [r4, #16]
 8005332:	6893      	ldr	r3, [r2, #8]
 8005334:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005338:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800533c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800533e:	f7ff ff59 	bl	80051f4 <HAL_RCC_GetSysClockFreq>
 8005342:	4a4a      	ldr	r2, [pc, #296]	; (800546c <HAL_RCC_ClockConfig+0x208>)
 8005344:	4c4b      	ldr	r4, [pc, #300]	; (8005474 <HAL_RCC_ClockConfig+0x210>)
 8005346:	6892      	ldr	r2, [r2, #8]
 8005348:	494b      	ldr	r1, [pc, #300]	; (8005478 <HAL_RCC_ClockConfig+0x214>)
 800534a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800534e:	4603      	mov	r3, r0
 8005350:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8005352:	484a      	ldr	r0, [pc, #296]	; (800547c <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005354:	f002 021f 	and.w	r2, r2, #31
 8005358:	40d3      	lsrs	r3, r2
 800535a:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 800535c:	6800      	ldr	r0, [r0, #0]
}
 800535e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8005362:	f7fe b983 	b.w	800366c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005366:	0798      	lsls	r0, r3, #30
 8005368:	d5cf      	bpl.n	800530a <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800536a:	0758      	lsls	r0, r3, #29
 800536c:	d504      	bpl.n	8005378 <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800536e:	493f      	ldr	r1, [pc, #252]	; (800546c <HAL_RCC_ClockConfig+0x208>)
 8005370:	688a      	ldr	r2, [r1, #8]
 8005372:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005376:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005378:	0719      	lsls	r1, r3, #28
 800537a:	d506      	bpl.n	800538a <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800537c:	4a3b      	ldr	r2, [pc, #236]	; (800546c <HAL_RCC_ClockConfig+0x208>)
 800537e:	6893      	ldr	r3, [r2, #8]
 8005380:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005384:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005388:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800538a:	4a38      	ldr	r2, [pc, #224]	; (800546c <HAL_RCC_ClockConfig+0x208>)
 800538c:	68a1      	ldr	r1, [r4, #8]
 800538e:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005390:	4e35      	ldr	r6, [pc, #212]	; (8005468 <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005396:	430b      	orrs	r3, r1
 8005398:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800539a:	6833      	ldr	r3, [r6, #0]
 800539c:	f003 030f 	and.w	r3, r3, #15
 80053a0:	42ab      	cmp	r3, r5
 80053a2:	d9b8      	bls.n	8005316 <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a4:	6833      	ldr	r3, [r6, #0]
 80053a6:	f023 030f 	bic.w	r3, r3, #15
 80053aa:	432b      	orrs	r3, r5
 80053ac:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80053ae:	f7fe f99f 	bl	80036f0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053b2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80053b6:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b8:	6833      	ldr	r3, [r6, #0]
 80053ba:	f003 030f 	and.w	r3, r3, #15
 80053be:	42ab      	cmp	r3, r5
 80053c0:	d0a9      	beq.n	8005316 <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053c2:	f7fe f995 	bl	80036f0 <HAL_GetTick>
 80053c6:	1bc0      	subs	r0, r0, r7
 80053c8:	4540      	cmp	r0, r8
 80053ca:	d9f5      	bls.n	80053b8 <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 80053cc:	2003      	movs	r0, #3
}
 80053ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053d2:	039a      	lsls	r2, r3, #14
 80053d4:	f53f af6e 	bmi.w	80052b4 <HAL_RCC_ClockConfig+0x50>
 80053d8:	e75b      	b.n	8005292 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053da:	4824      	ldr	r0, [pc, #144]	; (800546c <HAL_RCC_ClockConfig+0x208>)
 80053dc:	6801      	ldr	r1, [r0, #0]
 80053de:	0189      	lsls	r1, r1, #6
 80053e0:	f57f af57 	bpl.w	8005292 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053e4:	68c7      	ldr	r7, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053e6:	68c1      	ldr	r1, [r0, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053e8:	68c0      	ldr	r0, [r0, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053ea:	f007 0703 	and.w	r7, r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053ee:	f3c1 1103 	ubfx	r1, r1, #4, #4
  switch (pllsource)
 80053f2:	2f03      	cmp	r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053f4:	f101 0601 	add.w	r6, r1, #1
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053f8:	bf0c      	ite	eq
 80053fa:	4921      	ldreq	r1, [pc, #132]	; (8005480 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053fc:	4921      	ldrne	r1, [pc, #132]	; (8005484 <HAL_RCC_ClockConfig+0x220>)
 80053fe:	fbb1 f1f6 	udiv	r1, r1, r6
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005402:	4e1a      	ldr	r6, [pc, #104]	; (800546c <HAL_RCC_ClockConfig+0x208>)
      if(pllfreq > 80000000U)
 8005404:	4f1a      	ldr	r7, [pc, #104]	; (8005470 <HAL_RCC_ClockConfig+0x20c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005406:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800540a:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800540e:	68f0      	ldr	r0, [r6, #12]
 8005410:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8005414:	3001      	adds	r0, #1
 8005416:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8005418:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 800541c:	42b9      	cmp	r1, r7
 800541e:	d920      	bls.n	8005462 <HAL_RCC_ClockConfig+0x1fe>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005420:	68b1      	ldr	r1, [r6, #8]
 8005422:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8005426:	d005      	beq.n	8005434 <HAL_RCC_ClockConfig+0x1d0>
 8005428:	f013 0902 	ands.w	r9, r3, #2
 800542c:	f43f af4b 	beq.w	80052c6 <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005430:	68a3      	ldr	r3, [r4, #8]
 8005432:	b9b3      	cbnz	r3, 8005462 <HAL_RCC_ClockConfig+0x1fe>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005434:	490d      	ldr	r1, [pc, #52]	; (800546c <HAL_RCC_ClockConfig+0x208>)
 8005436:	688b      	ldr	r3, [r1, #8]
 8005438:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800543c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005440:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005442:	f04f 0980 	mov.w	r9, #128	; 0x80
 8005446:	e73e      	b.n	80052c6 <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 8005448:	2001      	movs	r0, #1
}
 800544a:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800544c:	4a07      	ldr	r2, [pc, #28]	; (800546c <HAL_RCC_ClockConfig+0x208>)
 800544e:	6893      	ldr	r3, [r2, #8]
 8005450:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005458:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800545a:	6862      	ldr	r2, [r4, #4]
 800545c:	f04f 0980 	mov.w	r9, #128	; 0x80
 8005460:	e731      	b.n	80052c6 <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005462:	f04f 0900 	mov.w	r9, #0
 8005466:	e72e      	b.n	80052c6 <HAL_RCC_ClockConfig+0x62>
 8005468:	40022000 	.word	0x40022000
 800546c:	40021000 	.word	0x40021000
 8005470:	04c4b400 	.word	0x04c4b400
 8005474:	08008f80 	.word	0x08008f80
 8005478:	20000694 	.word	0x20000694
 800547c:	2000069c 	.word	0x2000069c
 8005480:	007a1200 	.word	0x007a1200
 8005484:	00f42400 	.word	0x00f42400

08005488 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8005488:	4b01      	ldr	r3, [pc, #4]	; (8005490 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800548a:	6818      	ldr	r0, [r3, #0]
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	20000694 	.word	0x20000694

08005494 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005494:	4b05      	ldr	r3, [pc, #20]	; (80054ac <HAL_RCC_GetPCLK1Freq+0x18>)
 8005496:	4a06      	ldr	r2, [pc, #24]	; (80054b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005498:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800549a:	4906      	ldr	r1, [pc, #24]	; (80054b4 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800549c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80054a0:	6808      	ldr	r0, [r1, #0]
 80054a2:	5cd3      	ldrb	r3, [r2, r3]
 80054a4:	f003 031f 	and.w	r3, r3, #31
}
 80054a8:	40d8      	lsrs	r0, r3
 80054aa:	4770      	bx	lr
 80054ac:	40021000 	.word	0x40021000
 80054b0:	08008f90 	.word	0x08008f90
 80054b4:	20000694 	.word	0x20000694

080054b8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054b8:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80054ba:	4a06      	ldr	r2, [pc, #24]	; (80054d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80054bc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80054be:	4906      	ldr	r1, [pc, #24]	; (80054d8 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054c0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80054c4:	6808      	ldr	r0, [r1, #0]
 80054c6:	5cd3      	ldrb	r3, [r2, r3]
 80054c8:	f003 031f 	and.w	r3, r3, #31
}
 80054cc:	40d8      	lsrs	r0, r3
 80054ce:	4770      	bx	lr
 80054d0:	40021000 	.word	0x40021000
 80054d4:	08008f90 	.word	0x08008f90
 80054d8:	20000694 	.word	0x20000694

080054dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054e0:	6803      	ldr	r3, [r0, #0]
{
 80054e2:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054e4:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 80054e8:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054ea:	d056      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ec:	4b9f      	ldr	r3, [pc, #636]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80054ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80054f0:	00d5      	lsls	r5, r2, #3
 80054f2:	f140 810c 	bpl.w	800570e <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 80054f6:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054f8:	4d9d      	ldr	r5, [pc, #628]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80054fa:	682b      	ldr	r3, [r5, #0]
 80054fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005500:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005502:	f7fe f8f5 	bl	80036f0 <HAL_GetTick>
 8005506:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005508:	e005      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800550a:	f7fe f8f1 	bl	80036f0 <HAL_GetTick>
 800550e:	1b83      	subs	r3, r0, r6
 8005510:	2b02      	cmp	r3, #2
 8005512:	f200 8107 	bhi.w	8005724 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005516:	682b      	ldr	r3, [r5, #0]
 8005518:	05d8      	lsls	r0, r3, #23
 800551a:	d5f6      	bpl.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800551c:	4d93      	ldr	r5, [pc, #588]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800551e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005522:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005526:	d027      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8005528:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800552a:	429a      	cmp	r2, r3
 800552c:	d025      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800552e:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005532:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800553a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800553e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005542:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800554a:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800554c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8005550:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005554:	f140 8108 	bpl.w	8005768 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005558:	f7fe f8ca 	bl	80036f0 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800555c:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005560:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005562:	e005      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005564:	f7fe f8c4 	bl	80036f0 <HAL_GetTick>
 8005568:	1b80      	subs	r0, r0, r6
 800556a:	4540      	cmp	r0, r8
 800556c:	f200 80da 	bhi.w	8005724 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005570:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005574:	079b      	lsls	r3, r3, #30
 8005576:	d5f5      	bpl.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8005578:	6c23      	ldr	r3, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800557a:	497c      	ldr	r1, [pc, #496]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800557c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005580:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005584:	4313      	orrs	r3, r2
 8005586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800558a:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800558c:	b127      	cbz	r7, 8005598 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800558e:	4a77      	ldr	r2, [pc, #476]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005590:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005596:	6593      	str	r3, [r2, #88]	; 0x58
 8005598:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800559a:	07de      	lsls	r6, r3, #31
 800559c:	d508      	bpl.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800559e:	4973      	ldr	r1, [pc, #460]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80055a0:	6865      	ldr	r5, [r4, #4]
 80055a2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80055a6:	f022 0203 	bic.w	r2, r2, #3
 80055aa:	432a      	orrs	r2, r5
 80055ac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055b0:	079d      	lsls	r5, r3, #30
 80055b2:	d508      	bpl.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055b4:	496d      	ldr	r1, [pc, #436]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80055b6:	68a5      	ldr	r5, [r4, #8]
 80055b8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80055bc:	f022 020c 	bic.w	r2, r2, #12
 80055c0:	432a      	orrs	r2, r5
 80055c2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055c6:	0759      	lsls	r1, r3, #29
 80055c8:	d508      	bpl.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055ca:	4968      	ldr	r1, [pc, #416]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80055cc:	68e5      	ldr	r5, [r4, #12]
 80055ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80055d2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80055d6:	432a      	orrs	r2, r5
 80055d8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055dc:	071a      	lsls	r2, r3, #28
 80055de:	d508      	bpl.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055e0:	4962      	ldr	r1, [pc, #392]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80055e2:	6925      	ldr	r5, [r4, #16]
 80055e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80055e8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80055ec:	432a      	orrs	r2, r5
 80055ee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055f2:	069f      	lsls	r7, r3, #26
 80055f4:	d508      	bpl.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055f6:	495d      	ldr	r1, [pc, #372]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80055f8:	6965      	ldr	r5, [r4, #20]
 80055fa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80055fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005602:	432a      	orrs	r2, r5
 8005604:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005608:	065e      	lsls	r6, r3, #25
 800560a:	d508      	bpl.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800560c:	4957      	ldr	r1, [pc, #348]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800560e:	69a5      	ldr	r5, [r4, #24]
 8005610:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005614:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005618:	432a      	orrs	r2, r5
 800561a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800561e:	061d      	lsls	r5, r3, #24
 8005620:	d508      	bpl.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005622:	4952      	ldr	r1, [pc, #328]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005624:	69e5      	ldr	r5, [r4, #28]
 8005626:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800562a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800562e:	432a      	orrs	r2, r5
 8005630:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005634:	05d9      	lsls	r1, r3, #23
 8005636:	d508      	bpl.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005638:	494c      	ldr	r1, [pc, #304]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800563a:	6a25      	ldr	r5, [r4, #32]
 800563c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005640:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005644:	432a      	orrs	r2, r5
 8005646:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800564a:	059a      	lsls	r2, r3, #22
 800564c:	d508      	bpl.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800564e:	4947      	ldr	r1, [pc, #284]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005650:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005652:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005656:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800565a:	432a      	orrs	r2, r5
 800565c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005660:	055f      	lsls	r7, r3, #21
 8005662:	d50b      	bpl.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005664:	4941      	ldr	r1, [pc, #260]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005666:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005668:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800566c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005670:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005672:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005676:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800567a:	d055      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800567c:	051e      	lsls	r6, r3, #20
 800567e:	d50b      	bpl.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005680:	493a      	ldr	r1, [pc, #232]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005682:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005684:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005688:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800568c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800568e:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005692:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005696:	d04c      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005698:	04dd      	lsls	r5, r3, #19
 800569a:	d50b      	bpl.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800569c:	4933      	ldr	r1, [pc, #204]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800569e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80056a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80056a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80056a8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80056aa:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80056b2:	d043      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056b4:	0499      	lsls	r1, r3, #18
 80056b6:	d50b      	bpl.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056b8:	492c      	ldr	r1, [pc, #176]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80056ba:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80056bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80056c0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80056c4:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056c6:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056ce:	d03a      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056d0:	045a      	lsls	r2, r3, #17
 80056d2:	d50b      	bpl.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056d4:	4925      	ldr	r1, [pc, #148]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80056d6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80056d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80056dc:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80056e0:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056e2:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056e6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056ea:	d031      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80056ec:	041b      	lsls	r3, r3, #16
 80056ee:	d50b      	bpl.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80056f0:	4a1e      	ldr	r2, [pc, #120]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80056f2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80056f4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80056f8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80056fc:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80056fe:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005702:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005706:	d028      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 8005708:	b002      	add	sp, #8
 800570a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800570e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005710:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005714:	659a      	str	r2, [r3, #88]	; 0x58
 8005716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571c:	9301      	str	r3, [sp, #4]
 800571e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005720:	2701      	movs	r7, #1
 8005722:	e6e9      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8005724:	2003      	movs	r0, #3
 8005726:	e731      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005728:	68ca      	ldr	r2, [r1, #12]
 800572a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800572e:	60ca      	str	r2, [r1, #12]
 8005730:	e7a4      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005732:	68ca      	ldr	r2, [r1, #12]
 8005734:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005738:	60ca      	str	r2, [r1, #12]
 800573a:	e7ad      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800573c:	68ca      	ldr	r2, [r1, #12]
 800573e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005742:	60ca      	str	r2, [r1, #12]
 8005744:	e7b6      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005746:	68ca      	ldr	r2, [r1, #12]
 8005748:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800574c:	60ca      	str	r2, [r1, #12]
 800574e:	e7bf      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005750:	68ca      	ldr	r2, [r1, #12]
 8005752:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005756:	60ca      	str	r2, [r1, #12]
 8005758:	e7c8      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800575a:	68d3      	ldr	r3, [r2, #12]
 800575c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005760:	60d3      	str	r3, [r2, #12]
}
 8005762:	b002      	add	sp, #8
 8005764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005768:	4613      	mov	r3, r2
 800576a:	e706      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800576c:	40021000 	.word	0x40021000
 8005770:	40007000 	.word	0x40007000

08005774 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005774:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005776:	6a02      	ldr	r2, [r0, #32]
 8005778:	f022 0201 	bic.w	r2, r2, #1
 800577c:	6202      	str	r2, [r0, #32]
{
 800577e:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005780:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005782:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005784:	4f18      	ldr	r7, [pc, #96]	; (80057e8 <TIM_OC1_SetConfig+0x74>)
  tmpccer |= OC_Config->OCPolarity;
 8005786:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8005788:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800578a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 800578e:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005792:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005796:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 8005798:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 800579c:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057a0:	d00e      	beq.n	80057c0 <TIM_OC1_SetConfig+0x4c>
 80057a2:	4c12      	ldr	r4, [pc, #72]	; (80057ec <TIM_OC1_SetConfig+0x78>)
 80057a4:	42a0      	cmp	r0, r4
 80057a6:	d00b      	beq.n	80057c0 <TIM_OC1_SetConfig+0x4c>
 80057a8:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80057ac:	42a0      	cmp	r0, r4
 80057ae:	d007      	beq.n	80057c0 <TIM_OC1_SetConfig+0x4c>
 80057b0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80057b4:	42a0      	cmp	r0, r4
 80057b6:	d003      	beq.n	80057c0 <TIM_OC1_SetConfig+0x4c>
 80057b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80057bc:	42a0      	cmp	r0, r4
 80057be:	d10b      	bne.n	80057d8 <TIM_OC1_SetConfig+0x64>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057c0:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80057c2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80057c6:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057c8:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057cc:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80057d0:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80057d2:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80057d6:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057d8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80057da:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80057dc:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80057de:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 80057e0:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80057e2:	6203      	str	r3, [r0, #32]
}
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40012c00 	.word	0x40012c00
 80057ec:	40013400 	.word	0x40013400

080057f0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057f0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057f2:	6a02      	ldr	r2, [r0, #32]
 80057f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057f8:	6202      	str	r2, [r0, #32]
{
 80057fa:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057fc:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057fe:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005800:	4f19      	ldr	r7, [pc, #100]	; (8005868 <TIM_OC3_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005802:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8005804:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005806:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 800580a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800580e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005812:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005814:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8005818:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800581c:	d00f      	beq.n	800583e <TIM_OC3_SetConfig+0x4e>
 800581e:	4c13      	ldr	r4, [pc, #76]	; (800586c <TIM_OC3_SetConfig+0x7c>)
 8005820:	42a0      	cmp	r0, r4
 8005822:	d00c      	beq.n	800583e <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005824:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8005828:	42a0      	cmp	r0, r4
 800582a:	d00f      	beq.n	800584c <TIM_OC3_SetConfig+0x5c>
 800582c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005830:	42a0      	cmp	r0, r4
 8005832:	d00b      	beq.n	800584c <TIM_OC3_SetConfig+0x5c>
 8005834:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005838:	42a0      	cmp	r0, r4
 800583a:	d10e      	bne.n	800585a <TIM_OC3_SetConfig+0x6a>
 800583c:	e006      	b.n	800584c <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800583e:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005844:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005848:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800584c:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005850:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005854:	432c      	orrs	r4, r5
 8005856:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800585a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800585c:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800585e:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005860:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8005862:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005864:	6203      	str	r3, [r0, #32]
}
 8005866:	4770      	bx	lr
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40013400 	.word	0x40013400

08005870 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005870:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005872:	6a02      	ldr	r2, [r0, #32]
 8005874:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005878:	6202      	str	r2, [r0, #32]
{
 800587a:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800587c:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800587e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005880:	4f19      	ldr	r7, [pc, #100]	; (80058e8 <TIM_OC4_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005882:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005884:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005886:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 800588a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800588e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005892:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005894:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005898:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800589c:	d00f      	beq.n	80058be <TIM_OC4_SetConfig+0x4e>
 800589e:	4c13      	ldr	r4, [pc, #76]	; (80058ec <TIM_OC4_SetConfig+0x7c>)
 80058a0:	42a0      	cmp	r0, r4
 80058a2:	d00c      	beq.n	80058be <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a4:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80058a8:	42a0      	cmp	r0, r4
 80058aa:	d00f      	beq.n	80058cc <TIM_OC4_SetConfig+0x5c>
 80058ac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80058b0:	42a0      	cmp	r0, r4
 80058b2:	d00b      	beq.n	80058cc <TIM_OC4_SetConfig+0x5c>
 80058b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80058b8:	42a0      	cmp	r0, r4
 80058ba:	d10e      	bne.n	80058da <TIM_OC4_SetConfig+0x6a>
 80058bc:	e006      	b.n	80058cc <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80058be:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80058c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80058c4:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 80058c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80058cc:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80058d0:	f426 4640 	bic.w	r6, r6, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80058d4:	432c      	orrs	r4, r5
 80058d6:	ea46 1684 	orr.w	r6, r6, r4, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058da:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80058dc:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80058de:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80058e0:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 80058e2:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80058e4:	6203      	str	r3, [r0, #32]
}
 80058e6:	4770      	bx	lr
 80058e8:	40012c00 	.word	0x40012c00
 80058ec:	40013400 	.word	0x40013400

080058f0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80058f0:	2800      	cmp	r0, #0
 80058f2:	f000 8086 	beq.w	8005a02 <HAL_TIM_Base_Init+0x112>
{
 80058f6:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80058f8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80058fc:	4604      	mov	r4, r0
 80058fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005902:	2b00      	cmp	r3, #0
 8005904:	d075      	beq.n	80059f2 <HAL_TIM_Base_Init+0x102>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005906:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005908:	493f      	ldr	r1, [pc, #252]	; (8005a08 <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 800590a:	2202      	movs	r2, #2
 800590c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005910:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8005912:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005914:	d059      	beq.n	80059ca <HAL_TIM_Base_Init+0xda>
 8005916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591a:	d021      	beq.n	8005960 <HAL_TIM_Base_Init+0x70>
 800591c:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8005920:	428b      	cmp	r3, r1
 8005922:	d01d      	beq.n	8005960 <HAL_TIM_Base_Init+0x70>
 8005924:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005928:	428b      	cmp	r3, r1
 800592a:	d019      	beq.n	8005960 <HAL_TIM_Base_Init+0x70>
 800592c:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8005930:	428b      	cmp	r3, r1
 8005932:	d04a      	beq.n	80059ca <HAL_TIM_Base_Init+0xda>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005934:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8005938:	428b      	cmp	r3, r1
 800593a:	d05f      	beq.n	80059fc <HAL_TIM_Base_Init+0x10c>
 800593c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005940:	428b      	cmp	r3, r1
 8005942:	d05b      	beq.n	80059fc <HAL_TIM_Base_Init+0x10c>
 8005944:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005948:	428b      	cmp	r3, r1
 800594a:	d057      	beq.n	80059fc <HAL_TIM_Base_Init+0x10c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800594c:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800594e:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005950:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005952:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005956:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005958:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800595a:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800595c:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800595e:	e010      	b.n	8005982 <HAL_TIM_Base_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8005960:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005962:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005964:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005966:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800596a:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800596c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005970:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005972:	432a      	orrs	r2, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005974:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005978:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 800597a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800597c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800597e:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005980:	6299      	str	r1, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005982:	2201      	movs	r2, #1
 8005984:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	07d2      	lsls	r2, r2, #31
 800598a:	d503      	bpl.n	8005994 <HAL_TIM_Base_Init+0xa4>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800598c:	691a      	ldr	r2, [r3, #16]
 800598e:	f022 0201 	bic.w	r2, r2, #1
 8005992:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005994:	2301      	movs	r3, #1
 8005996:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800599a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800599e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80059a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80059a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80059aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80059b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059ba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80059be:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80059c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80059c6:	2000      	movs	r0, #0
}
 80059c8:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80059ca:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059cc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059ce:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80059d4:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80059d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059da:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059e0:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80059e2:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059e4:	68e2      	ldr	r2, [r4, #12]
 80059e6:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80059e8:	6862      	ldr	r2, [r4, #4]
 80059ea:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80059ec:	6962      	ldr	r2, [r4, #20]
 80059ee:	631a      	str	r2, [r3, #48]	; 0x30
 80059f0:	e7c7      	b.n	8005982 <HAL_TIM_Base_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 80059f2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80059f6:	f7fc ff2b 	bl	8002850 <HAL_TIM_Base_MspInit>
 80059fa:	e784      	b.n	8005906 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059fc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059fe:	69a1      	ldr	r1, [r4, #24]
 8005a00:	e7e9      	b.n	80059d6 <HAL_TIM_Base_Init+0xe6>
    return HAL_ERROR;
 8005a02:	2001      	movs	r0, #1
}
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40012c00 	.word	0x40012c00

08005a0c <HAL_TIM_PWM_MspInit>:
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop

08005a10 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005a10:	2800      	cmp	r0, #0
 8005a12:	f000 8086 	beq.w	8005b22 <HAL_TIM_PWM_Init+0x112>
{
 8005a16:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005a18:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005a1c:	4604      	mov	r4, r0
 8005a1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d075      	beq.n	8005b12 <HAL_TIM_PWM_Init+0x102>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a26:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a28:	493f      	ldr	r1, [pc, #252]	; (8005b28 <HAL_TIM_PWM_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a30:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8005a32:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a34:	d059      	beq.n	8005aea <HAL_TIM_PWM_Init+0xda>
 8005a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a3a:	d021      	beq.n	8005a80 <HAL_TIM_PWM_Init+0x70>
 8005a3c:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8005a40:	428b      	cmp	r3, r1
 8005a42:	d01d      	beq.n	8005a80 <HAL_TIM_PWM_Init+0x70>
 8005a44:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a48:	428b      	cmp	r3, r1
 8005a4a:	d019      	beq.n	8005a80 <HAL_TIM_PWM_Init+0x70>
 8005a4c:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8005a50:	428b      	cmp	r3, r1
 8005a52:	d04a      	beq.n	8005aea <HAL_TIM_PWM_Init+0xda>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a54:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8005a58:	428b      	cmp	r3, r1
 8005a5a:	d05f      	beq.n	8005b1c <HAL_TIM_PWM_Init+0x10c>
 8005a5c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a60:	428b      	cmp	r3, r1
 8005a62:	d05b      	beq.n	8005b1c <HAL_TIM_PWM_Init+0x10c>
 8005a64:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a68:	428b      	cmp	r3, r1
 8005a6a:	d057      	beq.n	8005b1c <HAL_TIM_PWM_Init+0x10c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a6c:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a6e:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005a70:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a76:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005a78:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a7a:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a7c:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a7e:	e010      	b.n	8005aa2 <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8005a80:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a82:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a84:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005a8a:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a8c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a90:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a92:	432a      	orrs	r2, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a98:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8005a9a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005a9c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a9e:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005aa0:	6299      	str	r1, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	07d2      	lsls	r2, r2, #31
 8005aaa:	d503      	bpl.n	8005ab4 <HAL_TIM_PWM_Init+0xa4>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005aac:	691a      	ldr	r2, [r3, #16]
 8005aae:	f022 0201 	bic.w	r2, r2, #1
 8005ab2:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005abe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005ac2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005ac6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005aca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005ad6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ada:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005ade:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005ae2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005ae6:	2000      	movs	r0, #0
}
 8005ae8:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8005aea:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aec:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aee:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005af0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005af4:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8005af6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005afa:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b00:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8005b02:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b04:	68e2      	ldr	r2, [r4, #12]
 8005b06:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005b08:	6862      	ldr	r2, [r4, #4]
 8005b0a:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005b0c:	6962      	ldr	r2, [r4, #20]
 8005b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8005b10:	e7c7      	b.n	8005aa2 <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8005b12:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005b16:	f7ff ff79 	bl	8005a0c <HAL_TIM_PWM_MspInit>
 8005b1a:	e784      	b.n	8005a26 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b1c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b1e:	69a1      	ldr	r1, [r4, #24]
 8005b20:	e7e9      	b.n	8005af6 <HAL_TIM_PWM_Init+0xe6>
    return HAL_ERROR;
 8005b22:	2001      	movs	r0, #1
}
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40012c00 	.word	0x40012c00

08005b2c <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8005b2c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d067      	beq.n	8005c04 <HAL_TIM_SlaveConfigSynchro+0xd8>
{
 8005b34:	b4f0      	push	{r4, r5, r6, r7}
 8005b36:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005b38:	2201      	movs	r2, #1
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b3a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 8005b3c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005b40:	2302      	movs	r3, #2
 8005b42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005b46:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005b48:	e9d1 5300 	ldrd	r5, r3, [r1]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b4c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005b50:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005b54:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005b56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b5a:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005b5e:	432a      	orrs	r2, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005b60:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8005b62:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8005b64:	d05c      	beq.n	8005c20 <HAL_TIM_SlaveConfigSynchro+0xf4>
 8005b66:	d816      	bhi.n	8005b96 <HAL_TIM_SlaveConfigSynchro+0x6a>
 8005b68:	2b40      	cmp	r3, #64	; 0x40
 8005b6a:	d06c      	beq.n	8005c46 <HAL_TIM_SlaveConfigSynchro+0x11a>
 8005b6c:	d932      	bls.n	8005bd4 <HAL_TIM_SlaveConfigSynchro+0xa8>
 8005b6e:	2b50      	cmp	r3, #80	; 0x50
 8005b70:	d140      	bne.n	8005bf4 <HAL_TIM_SlaveConfigSynchro+0xc8>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b72:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b74:	6a06      	ldr	r6, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b76:	688a      	ldr	r2, [r1, #8]
 8005b78:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b7a:	f026 0601 	bic.w	r6, r6, #1
 8005b7e:	6206      	str	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b80:	6983      	ldr	r3, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b82:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8005b8a:	430a      	orrs	r2, r1
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b8c:	ea43 1307 	orr.w	r3, r3, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b90:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005b92:	6202      	str	r2, [r0, #32]
 8005b94:	e00d      	b.n	8005bb2 <HAL_TIM_SlaveConfigSynchro+0x86>
  switch (sSlaveConfig->InputTrigger)
 8005b96:	2b70      	cmp	r3, #112	; 0x70
 8005b98:	d036      	beq.n	8005c08 <HAL_TIM_SlaveConfigSynchro+0xdc>
 8005b9a:	2b6f      	cmp	r3, #111	; 0x6f
 8005b9c:	d92a      	bls.n	8005bf4 <HAL_TIM_SlaveConfigSynchro+0xc8>
 8005b9e:	4a33      	ldr	r2, [pc, #204]	; (8005c6c <HAL_TIM_SlaveConfigSynchro+0x140>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d006      	beq.n	8005bb2 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005ba4:	d91c      	bls.n	8005be0 <HAL_TIM_SlaveConfigSynchro+0xb4>
 8005ba6:	4a32      	ldr	r2, [pc, #200]	; (8005c70 <HAL_TIM_SlaveConfigSynchro+0x144>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d002      	beq.n	8005bb2 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005bac:	3230      	adds	r2, #48	; 0x30
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d120      	bne.n	8005bf4 <HAL_TIM_SlaveConfigSynchro+0xc8>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005bb2:	68c3      	ldr	r3, [r0, #12]
 8005bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb8:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005bba:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 8005bbc:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8005bbe:	2101      	movs	r1, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005bc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bc4:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8005bc6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005bca:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  return HAL_OK;
 8005bce:	4610      	mov	r0, r2
}
 8005bd0:	bcf0      	pop	{r4, r5, r6, r7}
 8005bd2:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d0ec      	beq.n	8005bb2 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005bd8:	d909      	bls.n	8005bee <HAL_TIM_SlaveConfigSynchro+0xc2>
 8005bda:	2b30      	cmp	r3, #48	; 0x30
 8005bdc:	d10a      	bne.n	8005bf4 <HAL_TIM_SlaveConfigSynchro+0xc8>
 8005bde:	e7e8      	b.n	8005bb2 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005be0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005be4:	d0e5      	beq.n	8005bb2 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005be6:	3a10      	subs	r2, #16
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d0e2      	beq.n	8005bb2 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005bec:	e002      	b.n	8005bf4 <HAL_TIM_SlaveConfigSynchro+0xc8>
 8005bee:	f033 0310 	bics.w	r3, r3, #16
 8005bf2:	d0de      	beq.n	8005bb2 <HAL_TIM_SlaveConfigSynchro+0x86>
    htim->State = HAL_TIM_STATE_READY;
 8005bf4:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005bf6:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8005bf8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005bfc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005c00:	bcf0      	pop	{r4, r5, r6, r7}
 8005c02:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005c04:	2002      	movs	r0, #2
}
 8005c06:	4770      	bx	lr

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c08:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8005c0c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c0e:	6909      	ldr	r1, [r1, #16]
 8005c10:	432b      	orrs	r3, r5
 8005c12:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c16:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c1a:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c1c:	6083      	str	r3, [r0, #8]
 8005c1e:	e7c8      	b.n	8005bb2 <HAL_TIM_SlaveConfigSynchro+0x86>
  tmpccer = TIMx->CCER;
 8005c20:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c22:	6a05      	ldr	r5, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c24:	688f      	ldr	r7, [r1, #8]
 8005c26:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c28:	f025 0510 	bic.w	r5, r5, #16
 8005c2c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c2e:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c34:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c38:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c3c:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005c40:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005c42:	6203      	str	r3, [r0, #32]
 8005c44:	e7b5      	b.n	8005bb2 <HAL_TIM_SlaveConfigSynchro+0x86>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005c46:	2d05      	cmp	r5, #5
 8005c48:	d0d4      	beq.n	8005bf4 <HAL_TIM_SlaveConfigSynchro+0xc8>
 8005c4a:	f1b5 1f01 	cmp.w	r5, #65537	; 0x10001
 8005c4e:	d0d1      	beq.n	8005bf4 <HAL_TIM_SlaveConfigSynchro+0xc8>
      tmpccer = htim->Instance->CCER;
 8005c50:	6a05      	ldr	r5, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005c52:	6a02      	ldr	r2, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005c54:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005c56:	f022 0201 	bic.w	r2, r2, #1
 8005c5a:	6202      	str	r2, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005c5c:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005c62:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8005c66:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8005c68:	6205      	str	r5, [r0, #32]
      break;
 8005c6a:	e7a2      	b.n	8005bb2 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005c6c:	00100030 	.word	0x00100030
 8005c70:	00100040 	.word	0x00100040

08005c74 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8005c74:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c76:	6a02      	ldr	r2, [r0, #32]
 8005c78:	f022 0210 	bic.w	r2, r2, #16
 8005c7c:	6202      	str	r2, [r0, #32]
{
 8005c7e:	b4f0      	push	{r4, r5, r6, r7}
  tmpcr2 =  TIMx->CR2;
 8005c80:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005c82:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c84:	4f19      	ldr	r7, [pc, #100]	; (8005cec <TIM_OC2_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c86:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c88:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c8a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8005c8e:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c92:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c96:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c98:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c9c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ca0:	d00f      	beq.n	8005cc2 <TIM_OC2_SetConfig+0x4e>
 8005ca2:	4c13      	ldr	r4, [pc, #76]	; (8005cf0 <TIM_OC2_SetConfig+0x7c>)
 8005ca4:	42a0      	cmp	r0, r4
 8005ca6:	d00c      	beq.n	8005cc2 <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca8:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8005cac:	42a0      	cmp	r0, r4
 8005cae:	d00f      	beq.n	8005cd0 <TIM_OC2_SetConfig+0x5c>
 8005cb0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005cb4:	42a0      	cmp	r0, r4
 8005cb6:	d00b      	beq.n	8005cd0 <TIM_OC2_SetConfig+0x5c>
 8005cb8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005cbc:	42a0      	cmp	r0, r4
 8005cbe:	d10e      	bne.n	8005cde <TIM_OC2_SetConfig+0x6a>
 8005cc0:	e006      	b.n	8005cd0 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cc2:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cc8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cd0:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cd4:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cd8:	432c      	orrs	r4, r5
 8005cda:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8005cde:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005ce0:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005ce2:	6182      	str	r2, [r0, #24]
}
 8005ce4:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8005ce6:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005ce8:	6203      	str	r3, [r0, #32]
}
 8005cea:	4770      	bx	lr
 8005cec:	40012c00 	.word	0x40012c00
 8005cf0:	40013400 	.word	0x40013400

08005cf4 <HAL_TIM_PWM_ConfigChannel>:
{
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005cf6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	f000 80e4 	beq.w	8005ec8 <HAL_TIM_PWM_ConfigChannel+0x1d4>
 8005d00:	2301      	movs	r3, #1
 8005d02:	4604      	mov	r4, r0
 8005d04:	460d      	mov	r5, r1
 8005d06:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005d0a:	2a14      	cmp	r2, #20
 8005d0c:	d80c      	bhi.n	8005d28 <HAL_TIM_PWM_ConfigChannel+0x34>
 8005d0e:	e8df f002 	tbb	[pc, r2]
 8005d12:	0b51      	.short	0x0b51
 8005d14:	0b630b0b 	.word	0x0b630b0b
 8005d18:	0b760b0b 	.word	0x0b760b0b
 8005d1c:	0b880b0b 	.word	0x0b880b0b
 8005d20:	0b9b0b0b 	.word	0x0b9b0b0b
 8005d24:	0b0b      	.short	0x0b0b
 8005d26:	10          	.byte	0x10
 8005d27:	00          	.byte	0x00
  __HAL_LOCK(htim);
 8005d28:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d32:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d34:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpccer = TIMx->CCER;
 8005d38:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d3a:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d3c:	682f      	ldr	r7, [r5, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3e:	4e63      	ldr	r6, [pc, #396]	; (8005ecc <HAL_TIM_PWM_ConfigChannel+0x1d8>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d40:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 8005d44:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005d46:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005d48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d4a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d4e:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d52:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d56:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d58:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d5c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d60:	d00f      	beq.n	8005d82 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8005d62:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005d66:	42b3      	cmp	r3, r6
 8005d68:	d00b      	beq.n	8005d82 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8005d6a:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005d6e:	42b3      	cmp	r3, r6
 8005d70:	d007      	beq.n	8005d82 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8005d72:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005d76:	42b3      	cmp	r3, r6
 8005d78:	d003      	beq.n	8005d82 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8005d7a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005d7e:	42b3      	cmp	r3, r6
 8005d80:	d104      	bne.n	8005d8c <HAL_TIM_PWM_ConfigChannel+0x98>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d82:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d84:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d88:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8005d8c:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8005d8e:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005d90:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8005d92:	64de      	str	r6, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8005d94:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d96:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d98:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d9a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005d9e:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005da0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005da2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005da6:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005da8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005daa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005dae:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8005db0:	2000      	movs	r0, #0
      break;
 8005db2:	e7ba      	b.n	8005d2a <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005db4:	6800      	ldr	r0, [r0, #0]
 8005db6:	f7ff fcdd 	bl	8005774 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dba:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dbc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dbe:	6999      	ldr	r1, [r3, #24]
 8005dc0:	f041 0108 	orr.w	r1, r1, #8
 8005dc4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dc6:	6999      	ldr	r1, [r3, #24]
 8005dc8:	f021 0104 	bic.w	r1, r1, #4
 8005dcc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dce:	699a      	ldr	r2, [r3, #24]
 8005dd0:	4302      	orrs	r2, r0
 8005dd2:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd4:	2000      	movs	r0, #0
      break;
 8005dd6:	e7a8      	b.n	8005d2a <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dd8:	6800      	ldr	r0, [r0, #0]
 8005dda:	f7ff ff4b 	bl	8005c74 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dde:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005de0:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005de2:	6999      	ldr	r1, [r3, #24]
 8005de4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005de8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dea:	6999      	ldr	r1, [r3, #24]
 8005dec:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005df0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005df2:	699a      	ldr	r2, [r3, #24]
 8005df4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005df8:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005dfa:	2000      	movs	r0, #0
      break;
 8005dfc:	e795      	b.n	8005d2a <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dfe:	6800      	ldr	r0, [r0, #0]
 8005e00:	f7ff fcf6 	bl	80057f0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e04:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e06:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e08:	69d9      	ldr	r1, [r3, #28]
 8005e0a:	f041 0108 	orr.w	r1, r1, #8
 8005e0e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e10:	69d9      	ldr	r1, [r3, #28]
 8005e12:	f021 0104 	bic.w	r1, r1, #4
 8005e16:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e18:	69da      	ldr	r2, [r3, #28]
 8005e1a:	4302      	orrs	r2, r0
 8005e1c:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005e1e:	2000      	movs	r0, #0
      break;
 8005e20:	e783      	b.n	8005d2a <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e22:	6800      	ldr	r0, [r0, #0]
 8005e24:	f7ff fd24 	bl	8005870 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e28:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e2a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e2c:	69d9      	ldr	r1, [r3, #28]
 8005e2e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005e32:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e34:	69d9      	ldr	r1, [r3, #28]
 8005e36:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005e3a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e3c:	69da      	ldr	r2, [r3, #28]
 8005e3e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005e42:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005e44:	2000      	movs	r0, #0
      break;
 8005e46:	e770      	b.n	8005d2a <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e48:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e4a:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpccer = TIMx->CCER;
 8005e4e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e50:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005e52:	682f      	ldr	r7, [r5, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e54:	4e1d      	ldr	r6, [pc, #116]	; (8005ecc <HAL_TIM_PWM_ConfigChannel+0x1d8>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e56:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8005e5a:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005e5c:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005e5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8005e64:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e68:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6c:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e6e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8005e72:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e76:	d00f      	beq.n	8005e98 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 8005e78:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005e7c:	42b3      	cmp	r3, r6
 8005e7e:	d00b      	beq.n	8005e98 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 8005e80:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005e84:	42b3      	cmp	r3, r6
 8005e86:	d007      	beq.n	8005e98 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 8005e88:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005e8c:	42b3      	cmp	r3, r6
 8005e8e:	d003      	beq.n	8005e98 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 8005e90:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005e94:	42b3      	cmp	r3, r6
 8005e96:	d104      	bne.n	8005ea2 <HAL_TIM_PWM_ConfigChannel+0x1ae>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e98:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e9a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e9e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8005ea2:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8005ea4:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005ea6:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8005ea8:	649e      	str	r6, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8005eaa:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005eac:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005eae:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005eb0:	f041 0108 	orr.w	r1, r1, #8
 8005eb4:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005eb6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005eb8:	f021 0104 	bic.w	r1, r1, #4
 8005ebc:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ebe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ec0:	4302      	orrs	r2, r0
 8005ec2:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8005ec4:	2000      	movs	r0, #0
      break;
 8005ec6:	e730      	b.n	8005d2a <HAL_TIM_PWM_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 8005ec8:	2002      	movs	r0, #2
}
 8005eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ecc:	40012c00 	.word	0x40012c00

08005ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ed0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d03c      	beq.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0x82>
{
 8005ed8:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eda:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005edc:	4c1e      	ldr	r4, [pc, #120]	; (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005ede:	2302      	movs	r3, #2
 8005ee0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ee4:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 8005ee6:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005ee8:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005eea:	d026      	beq.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8005eec:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005ef0:	42a2      	cmp	r2, r4
 8005ef2:	d022      	beq.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ef4:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ef6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005efe:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f00:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8005f04:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f06:	d00a      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005f08:	4b14      	ldr	r3, [pc, #80]	; (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d007      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005f0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d003      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005f16:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d104      	bne.n	8005f28 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f1e:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f20:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f24:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f26:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005f28:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005f30:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005f34:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8005f36:	4618      	mov	r0, r3
}
 8005f38:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f3a:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f42:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f44:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f4c:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 8005f4e:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f50:	e7e5      	b.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 8005f52:	2002      	movs	r0, #2
}
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40012c00 	.word	0x40012c00
 8005f5c:	40000400 	.word	0x40000400

08005f60 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d044      	beq.n	8005ff2 <HAL_TIMEx_ConfigBreakDeadTime+0x92>
{
 8005f68:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f6a:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8005f6e:	4602      	mov	r2, r0
 8005f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f74:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f78:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f7e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f84:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f88:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f8e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f94:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f96:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005f9c:	e9d1 5406 	ldrd	r5, r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fa0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005fa2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005fa6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005faa:	6810      	ldr	r0, [r2, #0]
 8005fac:	4d12      	ldr	r5, [pc, #72]	; (8005ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005fb2:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005fb4:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005fb8:	d009      	beq.n	8005fce <HAL_TIMEx_ConfigBreakDeadTime+0x6e>
 8005fba:	4c10      	ldr	r4, [pc, #64]	; (8005ffc <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8005fbc:	42a0      	cmp	r0, r4
 8005fbe:	d006      	beq.n	8005fce <HAL_TIMEx_ConfigBreakDeadTime+0x6e>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8005fc0:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8005fc2:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8005fc4:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8005fc8:	4608      	mov	r0, r1
}
 8005fca:	bc30      	pop	{r4, r5}
 8005fcc:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005fce:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005fd0:	6a0c      	ldr	r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005fd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005fd6:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fde:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005fe0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005fe2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005fe4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005fe8:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005fea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005fee:	430b      	orrs	r3, r1
 8005ff0:	e7e6      	b.n	8005fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
  __HAL_LOCK(htim);
 8005ff2:	2002      	movs	r0, #2
}
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40012c00 	.word	0x40012c00
 8005ffc:	40013400 	.word	0x40013400

08006000 <HAL_TIMEx_ConfigBreakInput>:
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8006000:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006004:	2b01      	cmp	r3, #1
 8006006:	d051      	beq.n	80060ac <HAL_TIMEx_ConfigBreakInput+0xac>

  switch (sBreakInputConfig->Source)
 8006008:	6813      	ldr	r3, [r2, #0]
 800600a:	3b01      	subs	r3, #1
 800600c:	2b0f      	cmp	r3, #15
{
 800600e:	b4f0      	push	{r4, r5, r6, r7}
 8006010:	d827      	bhi.n	8006062 <HAL_TIMEx_ConfigBreakInput+0x62>
 8006012:	4e28      	ldr	r6, [pc, #160]	; (80060b4 <HAL_TIMEx_ConfigBreakInput+0xb4>)
 8006014:	4c28      	ldr	r4, [pc, #160]	; (80060b8 <HAL_TIMEx_ConfigBreakInput+0xb8>)
 8006016:	4f29      	ldr	r7, [pc, #164]	; (80060bc <HAL_TIMEx_ConfigBreakInput+0xbc>)
 8006018:	4d29      	ldr	r5, [pc, #164]	; (80060c0 <HAL_TIMEx_ConfigBreakInput+0xc0>)
 800601a:	f856 6023 	ldr.w	r6, [r6, r3, lsl #2]
 800601e:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8006022:	f857 7023 	ldr.w	r7, [r7, r3, lsl #2]
 8006026:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 800602a:	2901      	cmp	r1, #1
 800602c:	d01f      	beq.n	800606e <HAL_TIMEx_ConfigBreakInput+0x6e>
 800602e:	2902      	cmp	r1, #2
 8006030:	d135      	bne.n	800609e <HAL_TIMEx_ConfigBreakInput+0x9e>
      break;
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8006032:	6801      	ldr	r1, [r0, #0]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006034:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF2;
 8006036:	f8d1 c064 	ldr.w	ip, [r1, #100]	; 0x64

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800603a:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800603c:	40bb      	lsls	r3, r7
 800603e:	ea83 030c 	eor.w	r3, r3, ip
 8006042:	4033      	ands	r3, r6
 8006044:	ea83 030c 	eor.w	r3, r3, ip
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006048:	fa02 f505 	lsl.w	r5, r2, r5
 800604c:	405d      	eors	r5, r3
 800604e:	402c      	ands	r4, r5
 8006050:	4063      	eors	r3, r4
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 8006052:	2200      	movs	r2, #0
      htim->Instance->AF2 = tmporx;
 8006054:	664b      	str	r3, [r1, #100]	; 0x64
  __HAL_UNLOCK(htim);
 8006056:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800605a:	2300      	movs	r3, #0

  return status;
}
 800605c:	4618      	mov	r0, r3
 800605e:	bcf0      	pop	{r4, r5, r6, r7}
 8006060:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8006062:	2500      	movs	r5, #0
  switch (BreakInput)
 8006064:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8006066:	462f      	mov	r7, r5
 8006068:	462c      	mov	r4, r5
 800606a:	462e      	mov	r6, r5
  switch (BreakInput)
 800606c:	d1df      	bne.n	800602e <HAL_TIMEx_ConfigBreakInput+0x2e>
      tmporx = htim->Instance->AF1;
 800606e:	6801      	ldr	r1, [r0, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006070:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF1;
 8006072:	f8d1 c060 	ldr.w	ip, [r1, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006076:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006078:	40bb      	lsls	r3, r7
 800607a:	ea83 030c 	eor.w	r3, r3, ip
 800607e:	4033      	ands	r3, r6
 8006080:	ea83 030c 	eor.w	r3, r3, ip
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006084:	fa02 f505 	lsl.w	r5, r2, r5
 8006088:	405d      	eors	r5, r3
 800608a:	402c      	ands	r4, r5
 800608c:	4063      	eors	r3, r4
  __HAL_UNLOCK(htim);
 800608e:	2200      	movs	r2, #0
      htim->Instance->AF1 = tmporx;
 8006090:	660b      	str	r3, [r1, #96]	; 0x60
  __HAL_UNLOCK(htim);
 8006092:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	bcf0      	pop	{r4, r5, r6, r7}
 800609c:	4770      	bx	lr
  __HAL_UNLOCK(htim);
 800609e:	2200      	movs	r2, #0
 80060a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  switch (BreakInput)
 80060a4:	2301      	movs	r3, #1
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	bcf0      	pop	{r4, r5, r6, r7}
 80060aa:	4770      	bx	lr
  __HAL_LOCK(htim);
 80060ac:	2302      	movs	r3, #2
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	08008f98 	.word	0x08008f98
 80060b8:	08008fd8 	.word	0x08008fd8
 80060bc:	08009018 	.word	0x08009018
 80060c0:	08009058 	.word	0x08009058

080060c4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80060c6:	071a      	lsls	r2, r3, #28
{
 80060c8:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060ca:	d506      	bpl.n	80060da <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060cc:	6801      	ldr	r1, [r0, #0]
 80060ce:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80060d0:	684a      	ldr	r2, [r1, #4]
 80060d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060d6:	4322      	orrs	r2, r4
 80060d8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060da:	07dc      	lsls	r4, r3, #31
 80060dc:	d506      	bpl.n	80060ec <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060de:	6801      	ldr	r1, [r0, #0]
 80060e0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80060e2:	684a      	ldr	r2, [r1, #4]
 80060e4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80060e8:	4322      	orrs	r2, r4
 80060ea:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060ec:	0799      	lsls	r1, r3, #30
 80060ee:	d506      	bpl.n	80060fe <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060f0:	6801      	ldr	r1, [r0, #0]
 80060f2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80060f4:	684a      	ldr	r2, [r1, #4]
 80060f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80060fa:	4322      	orrs	r2, r4
 80060fc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060fe:	075a      	lsls	r2, r3, #29
 8006100:	d506      	bpl.n	8006110 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006102:	6801      	ldr	r1, [r0, #0]
 8006104:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006106:	684a      	ldr	r2, [r1, #4]
 8006108:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800610c:	4322      	orrs	r2, r4
 800610e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006110:	06dc      	lsls	r4, r3, #27
 8006112:	d506      	bpl.n	8006122 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006114:	6801      	ldr	r1, [r0, #0]
 8006116:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006118:	688a      	ldr	r2, [r1, #8]
 800611a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800611e:	4322      	orrs	r2, r4
 8006120:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006122:	0699      	lsls	r1, r3, #26
 8006124:	d506      	bpl.n	8006134 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006126:	6801      	ldr	r1, [r0, #0]
 8006128:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800612a:	688a      	ldr	r2, [r1, #8]
 800612c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006130:	4322      	orrs	r2, r4
 8006132:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006134:	065a      	lsls	r2, r3, #25
 8006136:	d509      	bpl.n	800614c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006138:	6801      	ldr	r1, [r0, #0]
 800613a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800613c:	684a      	ldr	r2, [r1, #4]
 800613e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006142:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006144:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006148:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800614a:	d00b      	beq.n	8006164 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800614c:	061b      	lsls	r3, r3, #24
 800614e:	d506      	bpl.n	800615e <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006150:	6802      	ldr	r2, [r0, #0]
 8006152:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006154:	6853      	ldr	r3, [r2, #4]
 8006156:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800615a:	430b      	orrs	r3, r1
 800615c:	6053      	str	r3, [r2, #4]
  }
}
 800615e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006162:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006164:	684a      	ldr	r2, [r1, #4]
 8006166:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006168:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800616c:	4322      	orrs	r2, r4
 800616e:	604a      	str	r2, [r1, #4]
 8006170:	e7ec      	b.n	800614c <UART_AdvFeatureConfig+0x88>
 8006172:	bf00      	nop

08006174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006174:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006176:	2300      	movs	r3, #0
{
 8006178:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800617a:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800617e:	f7fd fab7 	bl	80036f0 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006182:	6822      	ldr	r2, [r4, #0]
 8006184:	6813      	ldr	r3, [r2, #0]
 8006186:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8006188:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800618a:	d40e      	bmi.n	80061aa <UART_CheckIdleState+0x36>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800618c:	6813      	ldr	r3, [r2, #0]
 800618e:	0759      	lsls	r1, r3, #29
 8006190:	d432      	bmi.n	80061f8 <UART_CheckIdleState+0x84>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006192:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006194:	2220      	movs	r2, #32
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);
 8006196:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 800619a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88

  return HAL_OK;
 800619e:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80061a0:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a4:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061a6:	6723      	str	r3, [r4, #112]	; 0x70
}
 80061a8:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061aa:	69d3      	ldr	r3, [r2, #28]
 80061ac:	0298      	lsls	r0, r3, #10
 80061ae:	d4ed      	bmi.n	800618c <UART_CheckIdleState+0x18>
 80061b0:	e00c      	b.n	80061cc <UART_CheckIdleState+0x58>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061b2:	6819      	ldr	r1, [r3, #0]
 80061b4:	0749      	lsls	r1, r1, #29
 80061b6:	461a      	mov	r2, r3
 80061b8:	d505      	bpl.n	80061c6 <UART_CheckIdleState+0x52>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061ba:	69d9      	ldr	r1, [r3, #28]
 80061bc:	0708      	lsls	r0, r1, #28
 80061be:	d44f      	bmi.n	8006260 <UART_CheckIdleState+0xec>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061c0:	69d9      	ldr	r1, [r3, #28]
 80061c2:	0509      	lsls	r1, r1, #20
 80061c4:	d47a      	bmi.n	80062bc <UART_CheckIdleState+0x148>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	0298      	lsls	r0, r3, #10
 80061ca:	d4df      	bmi.n	800618c <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061cc:	f7fd fa90 	bl	80036f0 <HAL_GetTick>
 80061d0:	1b40      	subs	r0, r0, r5
 80061d2:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	d3eb      	bcc.n	80061b2 <UART_CheckIdleState+0x3e>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80061de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e2:	e843 2100 	strex	r1, r2, [r3]
 80061e6:	2900      	cmp	r1, #0
 80061e8:	d1f7      	bne.n	80061da <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 80061ea:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 80061ec:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->gState = HAL_UART_STATE_READY;
 80061f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 80061f4:	2003      	movs	r0, #3
}
 80061f6:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061f8:	69d3      	ldr	r3, [r2, #28]
 80061fa:	025b      	lsls	r3, r3, #9
 80061fc:	d4c9      	bmi.n	8006192 <UART_CheckIdleState+0x1e>
 80061fe:	e00d      	b.n	800621c <UART_CheckIdleState+0xa8>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	0750      	lsls	r0, r2, #29
 8006204:	d507      	bpl.n	8006216 <UART_CheckIdleState+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006206:	69da      	ldr	r2, [r3, #28]
 8006208:	0711      	lsls	r1, r2, #28
 800620a:	f100 8085 	bmi.w	8006318 <UART_CheckIdleState+0x1a4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800620e:	69da      	ldr	r2, [r3, #28]
 8006210:	0512      	lsls	r2, r2, #20
 8006212:	f100 80af 	bmi.w	8006374 <UART_CheckIdleState+0x200>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	025b      	lsls	r3, r3, #9
 800621a:	d4ba      	bmi.n	8006192 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800621c:	f7fd fa68 	bl	80036f0 <HAL_GetTick>
 8006220:	1b40      	subs	r0, r0, r5
 8006222:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	d3ea      	bcc.n	8006200 <UART_CheckIdleState+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622a:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800622e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	e843 2100 	strex	r1, r2, [r3]
 8006236:	2900      	cmp	r1, #0
 8006238:	d1f7      	bne.n	800622a <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623a:	f103 0208 	add.w	r2, r3, #8
 800623e:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006242:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	f103 0008 	add.w	r0, r3, #8
 800624a:	e840 2100 	strex	r1, r2, [r0]
 800624e:	2900      	cmp	r1, #0
 8006250:	d1f3      	bne.n	800623a <UART_CheckIdleState+0xc6>
      huart->RxState = HAL_UART_STATE_READY;
 8006252:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 8006254:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->RxState = HAL_UART_STATE_READY;
 8006258:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      return HAL_TIMEOUT;
 800625c:	2003      	movs	r0, #3
}
 800625e:	bd38      	pop	{r3, r4, r5, pc}
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006260:	2208      	movs	r2, #8
 8006262:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006268:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626c:	e843 2100 	strex	r1, r2, [r3]
 8006270:	2900      	cmp	r1, #0
 8006272:	d1f7      	bne.n	8006264 <UART_CheckIdleState+0xf0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006274:	4856      	ldr	r0, [pc, #344]	; (80063d0 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006276:	f103 0208 	add.w	r2, r3, #8
 800627a:	e852 2f00 	ldrex	r2, [r2]
 800627e:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	f103 0508 	add.w	r5, r3, #8
 8006284:	e845 2100 	strex	r1, r2, [r5]
 8006288:	2900      	cmp	r1, #0
 800628a:	d1f4      	bne.n	8006276 <UART_CheckIdleState+0x102>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800628c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800628e:	2a01      	cmp	r2, #1
 8006290:	d00b      	beq.n	80062aa <UART_CheckIdleState+0x136>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006292:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006294:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006296:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006298:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800629c:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629e:	66e2      	str	r2, [r4, #108]	; 0x6c
          __HAL_UNLOCK(huart);
 80062a0:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062a4:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_ERROR;
 80062a8:	e797      	b.n	80061da <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062aa:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ae:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b2:	e843 2100 	strex	r1, r2, [r3]
 80062b6:	2900      	cmp	r1, #0
 80062b8:	d1f7      	bne.n	80062aa <UART_CheckIdleState+0x136>
 80062ba:	e7ea      	b.n	8006292 <UART_CheckIdleState+0x11e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062c0:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	e843 2100 	strex	r1, r2, [r3]
 80062ce:	2900      	cmp	r1, #0
 80062d0:	d1f7      	bne.n	80062c2 <UART_CheckIdleState+0x14e>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062d2:	483f      	ldr	r0, [pc, #252]	; (80063d0 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d4:	f103 0208 	add.w	r2, r3, #8
 80062d8:	e852 2f00 	ldrex	r2, [r2]
 80062dc:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062de:	f103 0508 	add.w	r5, r3, #8
 80062e2:	e845 2100 	strex	r1, r2, [r5]
 80062e6:	2900      	cmp	r1, #0
 80062e8:	d1f4      	bne.n	80062d4 <UART_CheckIdleState+0x160>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ea:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80062ec:	2a01      	cmp	r2, #1
 80062ee:	d00a      	beq.n	8006306 <UART_CheckIdleState+0x192>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f0:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80062f2:	2120      	movs	r1, #32
 80062f4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 80062f8:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fa:	66e2      	str	r2, [r4, #108]	; 0x6c
          __HAL_UNLOCK(huart);
 80062fc:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006300:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_TIMEOUT;
 8006304:	e769      	b.n	80061da <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006306:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800630a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	e843 2100 	strex	r1, r2, [r3]
 8006312:	2900      	cmp	r1, #0
 8006314:	d1f7      	bne.n	8006306 <UART_CheckIdleState+0x192>
 8006316:	e7eb      	b.n	80062f0 <UART_CheckIdleState+0x17c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006318:	2208      	movs	r2, #8
 800631a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006320:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006324:	e843 2100 	strex	r1, r2, [r3]
 8006328:	2900      	cmp	r1, #0
 800632a:	d1f7      	bne.n	800631c <UART_CheckIdleState+0x1a8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800632c:	4828      	ldr	r0, [pc, #160]	; (80063d0 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632e:	f103 0208 	add.w	r2, r3, #8
 8006332:	e852 2f00 	ldrex	r2, [r2]
 8006336:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	f103 0508 	add.w	r5, r3, #8
 800633c:	e845 2100 	strex	r1, r2, [r5]
 8006340:	2900      	cmp	r1, #0
 8006342:	d1f4      	bne.n	800632e <UART_CheckIdleState+0x1ba>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006344:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006346:	2a01      	cmp	r2, #1
 8006348:	d00b      	beq.n	8006362 <UART_CheckIdleState+0x1ee>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800634a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800634c:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800634e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006350:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 8006354:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006356:	66e2      	str	r2, [r4, #108]	; 0x6c
          __HAL_UNLOCK(huart);
 8006358:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800635c:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_ERROR;
 8006360:	e763      	b.n	800622a <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006366:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	e843 2100 	strex	r1, r2, [r3]
 800636e:	2900      	cmp	r1, #0
 8006370:	d1f7      	bne.n	8006362 <UART_CheckIdleState+0x1ee>
 8006372:	e7ea      	b.n	800634a <UART_CheckIdleState+0x1d6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006378:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800637e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	e843 2100 	strex	r1, r2, [r3]
 8006386:	2900      	cmp	r1, #0
 8006388:	d1f7      	bne.n	800637a <UART_CheckIdleState+0x206>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800638a:	4811      	ldr	r0, [pc, #68]	; (80063d0 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638c:	f103 0208 	add.w	r2, r3, #8
 8006390:	e852 2f00 	ldrex	r2, [r2]
 8006394:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	f103 0508 	add.w	r5, r3, #8
 800639a:	e845 2100 	strex	r1, r2, [r5]
 800639e:	2900      	cmp	r1, #0
 80063a0:	d1f4      	bne.n	800638c <UART_CheckIdleState+0x218>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80063a4:	2a01      	cmp	r2, #1
 80063a6:	d00a      	beq.n	80063be <UART_CheckIdleState+0x24a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80063aa:	2120      	movs	r1, #32
 80063ac:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 80063b0:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b2:	66e2      	str	r2, [r4, #108]	; 0x6c
          __HAL_UNLOCK(huart);
 80063b4:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063b8:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_TIMEOUT;
 80063bc:	e735      	b.n	800622a <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c6:	e843 2100 	strex	r1, r2, [r3]
 80063ca:	2900      	cmp	r1, #0
 80063cc:	d1f7      	bne.n	80063be <UART_CheckIdleState+0x24a>
 80063ce:	e7eb      	b.n	80063a8 <UART_CheckIdleState+0x234>
 80063d0:	effffffe 	.word	0xeffffffe

080063d4 <HAL_UART_Init>:
  if (huart == NULL)
 80063d4:	2800      	cmp	r0, #0
 80063d6:	f000 8179 	beq.w	80066cc <HAL_UART_Init+0x2f8>
  if (huart->gState == HAL_UART_STATE_RESET)
 80063da:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 80063de:	b570      	push	{r4, r5, r6, lr}
 80063e0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d05f      	beq.n	80064a6 <HAL_UART_Init+0xd2>
  __HAL_UART_DISABLE(huart);
 80063e6:	6823      	ldr	r3, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063e8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 80063ea:	2224      	movs	r2, #36	; 0x24
 80063ec:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	f022 0201 	bic.w	r2, r2, #1
 80063f6:	601a      	str	r2, [r3, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063f8:	2900      	cmp	r1, #0
 80063fa:	d14f      	bne.n	800649c <HAL_UART_Init+0xc8>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063fc:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
 8006400:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006402:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006404:	69e0      	ldr	r0, [r4, #28]
 8006406:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006408:	49c3      	ldr	r1, [pc, #780]	; (8006718 <HAL_UART_Init+0x344>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800640a:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800640c:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800640e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006410:	430a      	orrs	r2, r1
 8006412:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006418:	4dc0      	ldr	r5, [pc, #768]	; (800671c <HAL_UART_Init+0x348>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800641a:	69a6      	ldr	r6, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800641c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006420:	430a      	orrs	r2, r1
 8006422:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006424:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006426:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006428:	d042      	beq.n	80064b0 <HAL_UART_Init+0xdc>
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800642a:	e9d4 2508 	ldrd	r2, r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800642e:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8006432:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8006436:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006438:	430a      	orrs	r2, r1
 800643a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800643c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800643e:	49b8      	ldr	r1, [pc, #736]	; (8006720 <HAL_UART_Init+0x34c>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006440:	f022 020f 	bic.w	r2, r2, #15
 8006444:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006446:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006448:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800644a:	d013      	beq.n	8006474 <HAL_UART_Init+0xa0>
 800644c:	4ab5      	ldr	r2, [pc, #724]	; (8006724 <HAL_UART_Init+0x350>)
 800644e:	4293      	cmp	r3, r2
 8006450:	f000 8081 	beq.w	8006556 <HAL_UART_Init+0x182>
 8006454:	4ab4      	ldr	r2, [pc, #720]	; (8006728 <HAL_UART_Init+0x354>)
 8006456:	4293      	cmp	r3, r2
 8006458:	f000 812a 	beq.w	80066b0 <HAL_UART_Init+0x2dc>
 800645c:	4ab3      	ldr	r2, [pc, #716]	; (800672c <HAL_UART_Init+0x358>)
 800645e:	4293      	cmp	r3, r2
 8006460:	f000 80d0 	beq.w	8006604 <HAL_UART_Init+0x230>
  huart->NbRxDataToProcess = 1;
 8006464:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8006468:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800646a:	e9c4 331d 	strd	r3, r3, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 800646e:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8006470:	2001      	movs	r0, #1
 8006472:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006474:	4bae      	ldr	r3, [pc, #696]	; (8006730 <HAL_UART_Init+0x35c>)
 8006476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	3b01      	subs	r3, #1
 8006480:	2b02      	cmp	r3, #2
 8006482:	f240 80d7 	bls.w	8006634 <HAL_UART_Init+0x260>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006486:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800648a:	f000 812b 	beq.w	80066e4 <HAL_UART_Init+0x310>
        pclk = HAL_RCC_GetPCLK2Freq();
 800648e:	f7ff f813 	bl	80054b8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006492:	2800      	cmp	r0, #0
 8006494:	f000 8105 	beq.w	80066a2 <HAL_UART_Init+0x2ce>
 8006498:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800649a:	e087      	b.n	80065ac <HAL_UART_Init+0x1d8>
    UART_AdvFeatureConfig(huart);
 800649c:	4620      	mov	r0, r4
 800649e:	f7ff fe11 	bl	80060c4 <UART_AdvFeatureConfig>
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	e7aa      	b.n	80063fc <HAL_UART_Init+0x28>
    huart->Lock = HAL_UNLOCKED;
 80064a6:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 80064aa:	f7fc fa45 	bl	8002938 <HAL_UART_MspInit>
 80064ae:	e79a      	b.n	80063e6 <HAL_UART_Init+0x12>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064b0:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80064b4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80064b8:	4331      	orrs	r1, r6
 80064ba:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064be:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064c0:	489b      	ldr	r0, [pc, #620]	; (8006730 <HAL_UART_Init+0x35c>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064c2:	f022 020f 	bic.w	r2, r2, #15
 80064c6:	430a      	orrs	r2, r1
 80064c8:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064ca:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80064ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064d6:	f000 810f 	beq.w	80066f8 <HAL_UART_Init+0x324>
 80064da:	d80c      	bhi.n	80064f6 <HAL_UART_Init+0x122>
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 8107 	beq.w	80066f0 <HAL_UART_Init+0x31c>
 80064e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064e6:	d1bd      	bne.n	8006464 <HAL_UART_Init+0x90>
        pclk = HAL_RCC_GetSysClockFreq();
 80064e8:	f7fe fe84 	bl	80051f4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80064ec:	2800      	cmp	r0, #0
 80064ee:	f000 8105 	beq.w	80066fc <HAL_UART_Init+0x328>
 80064f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80064f4:	e004      	b.n	8006500 <HAL_UART_Init+0x12c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064fa:	d1b3      	bne.n	8006464 <HAL_UART_Init+0x90>
        pclk = (uint32_t) LSE_VALUE;
 80064fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006500:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006502:	4b8c      	ldr	r3, [pc, #560]	; (8006734 <HAL_UART_Init+0x360>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006504:	eb05 0645 	add.w	r6, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006508:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 800650c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006510:	42b3      	cmp	r3, r6
 8006512:	d3a7      	bcc.n	8006464 <HAL_UART_Init+0x90>
 8006514:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006518:	d8a4      	bhi.n	8006464 <HAL_UART_Init+0x90>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800651a:	2600      	movs	r6, #0
 800651c:	2300      	movs	r3, #0
 800651e:	4631      	mov	r1, r6
 8006520:	f7f9 fe7a 	bl	8000218 <__aeabi_uldivmod>
 8006524:	020b      	lsls	r3, r1, #8
 8006526:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800652a:	0202      	lsls	r2, r0, #8
 800652c:	0868      	lsrs	r0, r5, #1
 800652e:	1810      	adds	r0, r2, r0
 8006530:	f143 0100 	adc.w	r1, r3, #0
 8006534:	462a      	mov	r2, r5
 8006536:	4633      	mov	r3, r6
 8006538:	f7f9 fe6e 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800653c:	4b7e      	ldr	r3, [pc, #504]	; (8006738 <HAL_UART_Init+0x364>)
 800653e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006542:	429a      	cmp	r2, r3
 8006544:	d88e      	bhi.n	8006464 <HAL_UART_Init+0x90>
          huart->Instance->BRR = usartdiv;
 8006546:	6823      	ldr	r3, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8006548:	f04f 1201 	mov.w	r2, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 800654c:	60d8      	str	r0, [r3, #12]
  huart->TxISR = NULL;
 800654e:	e9c4 661d 	strd	r6, r6, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 8006552:	66a2      	str	r2, [r4, #104]	; 0x68
  return ret;
 8006554:	e043      	b.n	80065de <HAL_UART_Init+0x20a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006556:	4b76      	ldr	r3, [pc, #472]	; (8006730 <HAL_UART_Init+0x35c>)
 8006558:	4a78      	ldr	r2, [pc, #480]	; (800673c <HAL_UART_Init+0x368>)
 800655a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655e:	f003 030c 	and.w	r3, r3, #12
 8006562:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006564:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006568:	d067      	beq.n	800663a <HAL_UART_Init+0x266>
    switch (clocksource)
 800656a:	2b08      	cmp	r3, #8
 800656c:	f63f af7a 	bhi.w	8006464 <HAL_UART_Init+0x90>
 8006570:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <HAL_UART_Init+0x1a4>)
 8006572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006576:	bf00      	nop
 8006578:	0800662f 	.word	0x0800662f
 800657c:	0800648f 	.word	0x0800648f
 8006580:	08006601 	.word	0x08006601
 8006584:	08006465 	.word	0x08006465
 8006588:	08006623 	.word	0x08006623
 800658c:	08006465 	.word	0x08006465
 8006590:	08006465 	.word	0x08006465
 8006594:	08006465 	.word	0x08006465
 8006598:	080065a9 	.word	0x080065a9
  UART_GETCLOCKSOURCE(huart, clocksource);
 800659c:	2b30      	cmp	r3, #48	; 0x30
 800659e:	f47f af61 	bne.w	8006464 <HAL_UART_Init+0x90>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065a2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80065a6:	d062      	beq.n	800666e <HAL_UART_Init+0x29a>
 80065a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065ac:	6863      	ldr	r3, [r4, #4]
 80065ae:	4a61      	ldr	r2, [pc, #388]	; (8006734 <HAL_UART_Init+0x360>)
 80065b0:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
 80065b4:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b8:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065bc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80065c0:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c4:	f1a0 0310 	sub.w	r3, r0, #16
 80065c8:	4293      	cmp	r3, r2
 80065ca:	f63f af4b 	bhi.w	8006464 <HAL_UART_Init+0x90>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 80065d2:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 80065d4:	e9c4 221d 	strd	r2, r2, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 80065d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065dc:	66a1      	str	r1, [r4, #104]	; 0x68
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065ec:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80065f4:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80065f6:	601a      	str	r2, [r3, #0]
}
 80065f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (UART_CheckIdleState(huart));
 80065fc:	f7ff bdba 	b.w	8006174 <UART_CheckIdleState>
        pclk = (uint32_t) HSI_VALUE;
 8006600:	484f      	ldr	r0, [pc, #316]	; (8006740 <HAL_UART_Init+0x36c>)
 8006602:	e7d3      	b.n	80065ac <HAL_UART_Init+0x1d8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006604:	4b4a      	ldr	r3, [pc, #296]	; (8006730 <HAL_UART_Init+0x35c>)
 8006606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800660e:	2b80      	cmp	r3, #128	; 0x80
 8006610:	d07b      	beq.n	800670a <HAL_UART_Init+0x336>
 8006612:	d85d      	bhi.n	80066d0 <HAL_UART_Init+0x2fc>
 8006614:	b143      	cbz	r3, 8006628 <HAL_UART_Init+0x254>
 8006616:	2b40      	cmp	r3, #64	; 0x40
 8006618:	f47f af24 	bne.w	8006464 <HAL_UART_Init+0x90>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800661c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006620:	d05a      	beq.n	80066d8 <HAL_UART_Init+0x304>
        pclk = HAL_RCC_GetSysClockFreq();
 8006622:	f7fe fde7 	bl	80051f4 <HAL_RCC_GetSysClockFreq>
        break;
 8006626:	e734      	b.n	8006492 <HAL_UART_Init+0xbe>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006628:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800662c:	d05d      	beq.n	80066ea <HAL_UART_Init+0x316>
        pclk = HAL_RCC_GetPCLK1Freq();
 800662e:	f7fe ff31 	bl	8005494 <HAL_RCC_GetPCLK1Freq>
        break;
 8006632:	e72e      	b.n	8006492 <HAL_UART_Init+0xbe>
 8006634:	4a43      	ldr	r2, [pc, #268]	; (8006744 <HAL_UART_Init+0x370>)
 8006636:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8006638:	e794      	b.n	8006564 <HAL_UART_Init+0x190>
    switch (clocksource)
 800663a:	2b08      	cmp	r3, #8
 800663c:	f63f af12 	bhi.w	8006464 <HAL_UART_Init+0x90>
 8006640:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <HAL_UART_Init+0x274>)
 8006642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006646:	bf00      	nop
 8006648:	080066eb 	.word	0x080066eb
 800664c:	080066e5 	.word	0x080066e5
 8006650:	0800666d 	.word	0x0800666d
 8006654:	08006465 	.word	0x08006465
 8006658:	080066d9 	.word	0x080066d9
 800665c:	08006465 	.word	0x08006465
 8006660:	08006465 	.word	0x08006465
 8006664:	08006465 	.word	0x08006465
 8006668:	0800666f 	.word	0x0800666f
        pclk = (uint32_t) HSI_VALUE;
 800666c:	4834      	ldr	r0, [pc, #208]	; (8006740 <HAL_UART_Init+0x36c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800666e:	6861      	ldr	r1, [r4, #4]
 8006670:	4a30      	ldr	r2, [pc, #192]	; (8006734 <HAL_UART_Init+0x360>)
 8006672:	084b      	lsrs	r3, r1, #1
 8006674:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
 8006678:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800667c:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006680:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006684:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006688:	f1a0 0310 	sub.w	r3, r0, #16
 800668c:	4293      	cmp	r3, r2
 800668e:	f63f aee9 	bhi.w	8006464 <HAL_UART_Init+0x90>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006692:	f020 020f 	bic.w	r2, r0, #15
 8006696:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006698:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	4310      	orrs	r0, r2
 80066a0:	e796      	b.n	80065d0 <HAL_UART_Init+0x1fc>
  huart->NbRxDataToProcess = 1;
 80066a2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80066a6:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80066a8:	e9c4 001d 	strd	r0, r0, [r4, #116]	; 0x74
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	e796      	b.n	80065de <HAL_UART_Init+0x20a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066b0:	4b1f      	ldr	r3, [pc, #124]	; (8006730 <HAL_UART_Init+0x35c>)
 80066b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	d025      	beq.n	800670a <HAL_UART_Init+0x336>
 80066be:	f63f af6d 	bhi.w	800659c <HAL_UART_Init+0x1c8>
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d0b0      	beq.n	8006628 <HAL_UART_Init+0x254>
 80066c6:	2b10      	cmp	r3, #16
 80066c8:	d0a8      	beq.n	800661c <HAL_UART_Init+0x248>
 80066ca:	e6cb      	b.n	8006464 <HAL_UART_Init+0x90>
}
 80066cc:	2001      	movs	r0, #1
 80066ce:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066d0:	2bc0      	cmp	r3, #192	; 0xc0
 80066d2:	f43f af66 	beq.w	80065a2 <HAL_UART_Init+0x1ce>
 80066d6:	e6c5      	b.n	8006464 <HAL_UART_Init+0x90>
        pclk = HAL_RCC_GetSysClockFreq();
 80066d8:	f7fe fd8c 	bl	80051f4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80066dc:	2800      	cmp	r0, #0
 80066de:	d0e0      	beq.n	80066a2 <HAL_UART_Init+0x2ce>
 80066e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80066e2:	e7c4      	b.n	800666e <HAL_UART_Init+0x29a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80066e4:	f7fe fee8 	bl	80054b8 <HAL_RCC_GetPCLK2Freq>
        break;
 80066e8:	e7f8      	b.n	80066dc <HAL_UART_Init+0x308>
        pclk = HAL_RCC_GetPCLK1Freq();
 80066ea:	f7fe fed3 	bl	8005494 <HAL_RCC_GetPCLK1Freq>
        break;
 80066ee:	e7f5      	b.n	80066dc <HAL_UART_Init+0x308>
        pclk = HAL_RCC_GetPCLK1Freq();
 80066f0:	f7fe fed0 	bl	8005494 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80066f4:	b110      	cbz	r0, 80066fc <HAL_UART_Init+0x328>
 80066f6:	e6fc      	b.n	80064f2 <HAL_UART_Init+0x11e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066f8:	4811      	ldr	r0, [pc, #68]	; (8006740 <HAL_UART_Init+0x36c>)
 80066fa:	e701      	b.n	8006500 <HAL_UART_Init+0x12c>
  huart->NbRxDataToProcess = 1;
 80066fc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8006700:	e9c4 001d 	strd	r0, r0, [r4, #116]	; 0x74
 8006704:	6823      	ldr	r3, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8006706:	66a2      	str	r2, [r4, #104]	; 0x68
  return ret;
 8006708:	e769      	b.n	80065de <HAL_UART_Init+0x20a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800670a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 800670e:	480c      	ldr	r0, [pc, #48]	; (8006740 <HAL_UART_Init+0x36c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006710:	f47f af4c 	bne.w	80065ac <HAL_UART_Init+0x1d8>
 8006714:	e7ab      	b.n	800666e <HAL_UART_Init+0x29a>
 8006716:	bf00      	nop
 8006718:	cfff69f3 	.word	0xcfff69f3
 800671c:	40008000 	.word	0x40008000
 8006720:	40013800 	.word	0x40013800
 8006724:	40004400 	.word	0x40004400
 8006728:	40004800 	.word	0x40004800
 800672c:	40004c00 	.word	0x40004c00
 8006730:	40021000 	.word	0x40021000
 8006734:	080090ac 	.word	0x080090ac
 8006738:	000ffcff 	.word	0x000ffcff
 800673c:	0800909c 	.word	0x0800909c
 8006740:	00f42400 	.word	0x00f42400
 8006744:	08009098 	.word	0x08009098

08006748 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006748:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800674c:	2a01      	cmp	r2, #1
 800674e:	d017      	beq.n	8006780 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006750:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006752:	2124      	movs	r1, #36	; 0x24
{
 8006754:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 8006756:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
 800675a:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800675c:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800675e:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006760:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006762:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8006766:	f024 0401 	bic.w	r4, r4, #1
 800676a:	6014      	str	r4, [r2, #0]

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800676c:	2520      	movs	r5, #32
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800676e:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006770:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006772:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84

  return HAL_OK;
 8006776:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006778:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
}
 800677c:	bc30      	pop	{r4, r5}
 800677e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006780:	2002      	movs	r0, #2
}
 8006782:	4770      	bx	lr

08006784 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006784:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 8006788:	2a01      	cmp	r2, #1
 800678a:	d033      	beq.n	80067f4 <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 800678c:	4603      	mov	r3, r0
 800678e:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006790:	681a      	ldr	r2, [r3, #0]
{
 8006792:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8006794:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006798:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800679a:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800679c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800679e:	f020 0001 	bic.w	r0, r0, #1
 80067a2:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067a4:	6890      	ldr	r0, [r2, #8]
 80067a6:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 80067aa:	4301      	orrs	r1, r0
 80067ac:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067ae:	b1f5      	cbz	r5, 80067ee <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067b0:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067b2:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067b4:	4810      	ldr	r0, [pc, #64]	; (80067f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 80067b6:	4f11      	ldr	r7, [pc, #68]	; (80067fc <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067b8:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067bc:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067be:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067c0:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 80067c2:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 80067c4:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067c6:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067c8:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067ca:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067ce:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067d2:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80067d6:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 80067d8:	2520      	movs	r5, #32
 80067da:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067de:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80067e0:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
  return HAL_OK;
 80067e4:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80067e6:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
}
 80067ea:	bcf0      	pop	{r4, r5, r6, r7}
 80067ec:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 80067ee:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80067f0:	4608      	mov	r0, r1
 80067f2:	e7ee      	b.n	80067d2 <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 80067f4:	2002      	movs	r0, #2
}
 80067f6:	4770      	bx	lr
 80067f8:	080090cc 	.word	0x080090cc
 80067fc:	080090c4 	.word	0x080090c4

08006800 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8006800:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 8006804:	2a01      	cmp	r2, #1
 8006806:	d033      	beq.n	8006870 <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 8006808:	4603      	mov	r3, r0
 800680a:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800680c:	681a      	ldr	r2, [r3, #0]
{
 800680e:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8006810:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006814:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006816:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006818:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800681a:	f020 0001 	bic.w	r0, r0, #1
 800681e:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006820:	6890      	ldr	r0, [r2, #8]
 8006822:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8006826:	4301      	orrs	r1, r0
 8006828:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800682a:	b1f5      	cbz	r5, 800686a <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800682c:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800682e:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006830:	4810      	ldr	r0, [pc, #64]	; (8006874 <HAL_UARTEx_SetRxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8006832:	4f11      	ldr	r7, [pc, #68]	; (8006878 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006834:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006838:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800683a:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800683c:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 800683e:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006840:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006842:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006844:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006846:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800684a:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800684e:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8006852:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8006854:	2520      	movs	r5, #32
 8006856:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800685a:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800685c:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
  return HAL_OK;
 8006860:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006862:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
}
 8006866:	bcf0      	pop	{r4, r5, r6, r7}
 8006868:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800686a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800686c:	4608      	mov	r0, r1
 800686e:	e7ee      	b.n	800684e <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 8006870:	2002      	movs	r0, #2
}
 8006872:	4770      	bx	lr
 8006874:	080090cc 	.word	0x080090cc
 8006878:	080090c4 	.word	0x080090c4

0800687c <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 800687c:	88c0      	ldrh	r0, [r0, #6]
 800687e:	4770      	bx	lr

08006880 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8006880:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8006882:	8840      	ldrh	r0, [r0, #2]
 8006884:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8006888:	0c00      	lsrs	r0, r0, #16
 800688a:	4770      	bx	lr

0800688c <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 800688c:	b410      	push	{r4}
 800688e:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8006890:	8802      	ldrh	r2, [r0, #0]
 8006892:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8006894:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8006898:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 800689c:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80068a0:	42a2      	cmp	r2, r4
{
 80068a2:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80068a4:	d219      	bcs.n	80068da <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 80068a6:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 80068aa:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 80068ae:	b2e4      	uxtb	r4, r4
 80068b0:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 80068b4:	8882      	ldrh	r2, [r0, #4]
 80068b6:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80068ba:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 80068bc:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80068c0:	bfbc      	itt	lt
 80068c2:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 80068c6:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	bfbc      	itt	lt
 80068cc:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 80068d0:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80068d2:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80068d6:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 80068da:	b289      	uxth	r1, r1
 80068dc:	2000      	movs	r0, #0
 80068de:	b29b      	uxth	r3, r3
 80068e0:	f361 000f 	bfi	r0, r1, #0, #16
 80068e4:	f363 401f 	bfi	r0, r3, #16, #16
}
 80068e8:	b005      	add	sp, #20
 80068ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 80068f4:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 80068f6:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 80068fa:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 80068fe:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8006902:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
}
 8006906:	4770      	bx	lr

08006908 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8006908:	b120      	cbz	r0, 8006914 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 800690a:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 800690e:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8006910:	9b00      	ldr	r3, [sp, #0]
 8006912:	60c3      	str	r3, [r0, #12]
  }
}
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop

08006918 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8006918:	b190      	cbz	r0, 8006940 <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 800691a:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 800691c:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 800691e:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8006920:	b151      	cbz	r1, 8006938 <FCP_CalcCRC+0x20>
 8006922:	1c82      	adds	r2, r0, #2
 8006924:	3901      	subs	r1, #1
 8006926:	fa52 f181 	uxtab	r1, r2, r1
 800692a:	3001      	adds	r0, #1
    {
      nSum += pFrame->Buffer[idx];
 800692c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006930:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8006932:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8006934:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8006936:	d1f9      	bne.n	800692c <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8006938:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 800693c:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop

08006944 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8006944:	b510      	push	{r4, lr}
 8006946:	f44f 7280 	mov.w	r2, #256	; 0x100
 800694a:	4604      	mov	r4, r0
 800694c:	2100      	movs	r1, #0
 800694e:	f002 fa5b 	bl	8008e08 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8006952:	2300      	movs	r3, #0
 8006954:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8006958:	bd10      	pop	{r4, pc}
 800695a:	bf00      	nop

0800695c <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800695c:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8006960:	1c53      	adds	r3, r2, #1
 8006962:	b29b      	uxth	r3, r3
{
 8006964:	b470      	push	{r4, r5, r6}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8006966:	2b7f      	cmp	r3, #127	; 0x7f
{
 8006968:	4606      	mov	r6, r0
  {
    pHandle->hNextMeasBufferIndex = 0u;
 800696a:	bf88      	it	hi
 800696c:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800696e:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
{
 8006972:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8006974:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8006978:	f8a6 3100 	strh.w	r3, [r6, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800697c:	f106 05fe 	add.w	r5, r6, #254	; 0xfe
 8006980:	1eb3      	subs	r3, r6, #2
  int32_t wAux = 0;
 8006982:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8006984:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006988:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 800698a:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800698c:	d1fa      	bne.n	8006984 <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 800698e:	2a00      	cmp	r2, #0
 8006990:	bfb8      	it	lt
 8006992:	327f      	addlt	r2, #127	; 0x7f
 8006994:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8006996:	f8a6 2104 	strh.w	r2, [r6, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 800699a:	bc70      	pop	{r4, r5, r6}
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop

080069a0 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 80069a0:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop

080069a8 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 80069a8:	8a03      	ldrh	r3, [r0, #16]
 80069aa:	8b42      	ldrh	r2, [r0, #26]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d306      	bcc.n	80069be <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 80069b0:	8b82      	ldrh	r2, [r0, #28]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d901      	bls.n	80069ba <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 80069b6:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 80069b8:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 80069ba:	8ac0      	ldrh	r0, [r0, #22]
 80069bc:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 80069be:	2008      	movs	r0, #8
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop

080069c4 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 80069c4:	2300      	movs	r3, #0
 80069c6:	8203      	strh	r3, [r0, #16]
}
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop

080069cc <NTC_Init>:
{
 80069cc:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 80069ce:	7803      	ldrb	r3, [r0, #0]
{
 80069d0:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 80069d2:	b123      	cbz	r3, 80069de <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80069d4:	8a43      	ldrh	r3, [r0, #18]
 80069d6:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 80069d8:	2200      	movs	r2, #0
 80069da:	82c2      	strh	r2, [r0, #22]
}
 80069dc:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 80069de:	3004      	adds	r0, #4
 80069e0:	f7fb fb74 	bl	80020cc <RCM_RegisterRegConv>
 80069e4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 80069e8:	4620      	mov	r0, r4
 80069ea:	f7ff ffeb 	bl	80069c4 <NTC_Clear>
}
 80069ee:	bd10      	pop	{r4, pc}

080069f0 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 80069f0:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80069f2:	7803      	ldrb	r3, [r0, #0]
{
 80069f4:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 80069f6:	b113      	cbz	r3, 80069fe <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 80069f8:	2000      	movs	r0, #0
 80069fa:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 80069fc:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80069fe:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8006a02:	f7fb fc37 	bl	8002274 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8006a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a0a:	4298      	cmp	r0, r3
 8006a0c:	d007      	beq.n	8006a1e <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8006a0e:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8006a10:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8006a12:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8006a14:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8006a18:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8006a1c:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f7ff ffc2 	bl	80069a8 <NTC_SetFaultState>
 8006a24:	82e0      	strh	r0, [r4, #22]
}
 8006a26:	bd10      	pop	{r4, pc}

08006a28 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8006a28:	7803      	ldrb	r3, [r0, #0]
 8006a2a:	b983      	cbnz	r3, 8006a4e <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8006a2c:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8006a2e:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8006a30:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8006a34:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8006a36:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 8006a38:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	bfbc      	itt	lt
 8006a40:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8006a44:	33ff      	addlt	r3, #255	; 0xff
 8006a46:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8006a4a:	b200      	sxth	r0, r0
 8006a4c:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8006a4e:	8a80      	ldrh	r0, [r0, #20]
}
 8006a50:	b200      	sxth	r0, r0
 8006a52:	4770      	bx	lr

08006a54 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8006a54:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8006a56:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8006a58:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8006a5a:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8006a5c:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8006a5e:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8006a60:	6283      	str	r3, [r0, #40]	; 0x28
}
 8006a62:	4770      	bx	lr

08006a64 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8006a64:	8081      	strh	r1, [r0, #4]
}
 8006a66:	4770      	bx	lr

08006a68 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8006a68:	80c1      	strh	r1, [r0, #6]
}
 8006a6a:	4770      	bx	lr

08006a6c <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8006a6c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop

08006a74 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8006a74:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop

08006a7c <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8006a7c:	6081      	str	r1, [r0, #8]

  return;
}
 8006a7e:	4770      	bx	lr

08006a80 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8006a80:	8b00      	ldrh	r0, [r0, #24]
 8006a82:	4770      	bx	lr

08006a84 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8006a84:	8b40      	ldrh	r0, [r0, #26]
 8006a86:	4770      	bx	lr

08006a88 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8006a88:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8006a8a:	4770      	bx	lr

08006a8c <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8006a8c:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop

08006a94 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006a94:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8006a98:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
{
 8006a9c:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006a9e:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8006aa2:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8006aa6:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8006aaa:	b162      	cbz	r2, 8006ac6 <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8006aac:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8006aae:	fb01 f102 	mul.w	r1, r1, r2

    if ( wIntegral_sum_temp < 0 )
 8006ab2:	1872      	adds	r2, r6, r1
 8006ab4:	d420      	bmi.n	8006af8 <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8006ab6:	2e00      	cmp	r6, #0
 8006ab8:	db29      	blt.n	8006b0e <PI_Controller+0x7a>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8006aba:	68c1      	ldr	r1, [r0, #12]
 8006abc:	4291      	cmp	r1, r2
 8006abe:	db03      	blt.n	8006ac8 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8006ac0:	6901      	ldr	r1, [r0, #16]
 8006ac2:	4291      	cmp	r1, r2
 8006ac4:	dc00      	bgt.n	8006ac8 <PI_Controller+0x34>
 8006ac6:	4611      	mov	r1, r2
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8006ac8:	8b86      	ldrh	r6, [r0, #28]
 8006aca:	8bc2      	ldrh	r2, [r0, #30]
 8006acc:	4133      	asrs	r3, r6
 8006ace:	fa41 f202 	asr.w	r2, r1, r2
 8006ad2:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8006ad4:	429c      	cmp	r4, r3
 8006ad6:	da05      	bge.n	8006ae4 <PI_Controller+0x50>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8006ad8:	1ae3      	subs	r3, r4, r3
 8006ada:	4419      	add	r1, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8006adc:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8006ade:	4620      	mov	r0, r4
 8006ae0:	bc70      	pop	{r4, r5, r6}
 8006ae2:	4770      	bx	lr
  else if ( wOutput_32 < hLowerOutputLimit )
 8006ae4:	429d      	cmp	r5, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 8006ae6:	bfc9      	itett	gt
 8006ae8:	1aeb      	subgt	r3, r5, r3
 8006aea:	b21c      	sxthle	r4, r3
    wOutput_32 = hLowerOutputLimit;
 8006aec:	462c      	movgt	r4, r5
  pHandle->wIntegralTerm += wDischarge;
 8006aee:	18c9      	addgt	r1, r1, r3
 8006af0:	6081      	str	r1, [r0, #8]
}
 8006af2:	4620      	mov	r0, r4
 8006af4:	bc70      	pop	{r4, r5, r6}
 8006af6:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 8006af8:	2e00      	cmp	r6, #0
 8006afa:	ddde      	ble.n	8006aba <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 8006afc:	2900      	cmp	r1, #0
 8006afe:	dddc      	ble.n	8006aba <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8006b00:	68c1      	ldr	r1, [r0, #12]
 8006b02:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006b06:	4291      	cmp	r1, r2
 8006b08:	d1de      	bne.n	8006ac8 <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 8006b0a:	460a      	mov	r2, r1
 8006b0c:	e7db      	b.n	8006ac6 <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 8006b0e:	4e03      	ldr	r6, [pc, #12]	; (8006b1c <PI_Controller+0x88>)
 8006b10:	ea32 0221 	bics.w	r2, r2, r1, asr #32
 8006b14:	bf28      	it	cs
 8006b16:	4632      	movcs	r2, r6
 8006b18:	e7cf      	b.n	8006aba <PI_Controller+0x26>
 8006b1a:	bf00      	nop
 8006b1c:	80000001 	.word	0x80000001

08006b20 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 8006b20:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006b22:	e9d0 4242 	ldrd	r4, r2, [r0, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8006b26:	8b11      	ldrh	r1, [r2, #24]
 8006b28:	89d3      	ldrh	r3, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006b2a:	8995      	ldrh	r5, [r2, #12]
 8006b2c:	8ad2      	ldrh	r2, [r2, #22]
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8006b2e:	fb13 f301 	smulbb	r3, r3, r1
{
 8006b32:	4606      	mov	r6, r0
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006b34:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006b38:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006b3c:	f7ff fea0 	bl	8006880 <VBS_GetAvBusVoltage_V>
 8006b40:	fb04 f200 	mul.w	r2, r4, r0
  wAux /= 65536;
 8006b44:	1e2c      	subs	r4, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006b46:	480e      	ldr	r0, [pc, #56]	; (8006b80 <PQD_CalcElMotorPower+0x60>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8006b48:	490e      	ldr	r1, [pc, #56]	; (8006b84 <PQD_CalcElMotorPower+0x64>)
  wAux /= 65536;
 8006b4a:	bfb8      	it	lt
 8006b4c:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006b50:	fb80 3002 	smull	r3, r0, r0, r2
  wAux /= 65536;
 8006b54:	bfb8      	it	lt
 8006b56:	34ff      	addlt	r4, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006b58:	17d3      	asrs	r3, r2, #31
  wAux /= 65536;
 8006b5a:	1424      	asrs	r4, r4, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006b5c:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
  wAux3 = wAux * wAux2;
 8006b60:	fb03 f304 	mul.w	r3, r3, r4
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8006b64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006b68:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8006b6a:	fb81 2103 	smull	r2, r1, r1, r3
 8006b6e:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8006b70:	4630      	mov	r0, r6
 8006b72:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8006b76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8006b7a:	f7ff beef 	b.w	800695c <MPM_CalcElMotorPower>
 8006b7e:	bf00      	nop
 8006b80:	1b4e81b5 	.word	0x1b4e81b5
 8006b84:	66666667 	.word	0x66666667

08006b88 <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 8006b88:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8006b8a:	4b18      	ldr	r3, [pc, #96]	; (8006bec <startTimers+0x64>)
 8006b8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b8e:	07d2      	lsls	r2, r2, #31
 8006b90:	b082      	sub	sp, #8
 8006b92:	d415      	bmi.n	8006bc0 <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006b94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b96:	f042 0201 	orr.w	r2, r2, #1
 8006b9a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006b9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006b9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006ba2:	f002 0201 	and.w	r2, r2, #1
 8006ba6:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8006ba8:	9a01      	ldr	r2, [sp, #4]
 8006baa:	694a      	ldr	r2, [r1, #20]
 8006bac:	f042 0201 	orr.w	r2, r2, #1
 8006bb0:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8006bb2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006bb4:	f022 0201 	bic.w	r2, r2, #1
 8006bb8:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8006bba:	b002      	add	sp, #8
 8006bbc:	bc30      	pop	{r4, r5}
 8006bbe:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8006bc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006bc4:	4c0a      	ldr	r4, [pc, #40]	; (8006bf0 <startTimers+0x68>)
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	6859      	ldr	r1, [r3, #4]
 8006bca:	4d0a      	ldr	r5, [pc, #40]	; (8006bf4 <startTimers+0x6c>)
 8006bcc:	4021      	ands	r1, r4
 8006bce:	f041 0120 	orr.w	r1, r1, #32
 8006bd2:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006bd4:	6958      	ldr	r0, [r3, #20]
 8006bd6:	f040 0001 	orr.w	r0, r0, #1
 8006bda:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006bdc:	6859      	ldr	r1, [r3, #4]
 8006bde:	402a      	ands	r2, r5
 8006be0:	4021      	ands	r1, r4
 8006be2:	430a      	orrs	r2, r1
 8006be4:	605a      	str	r2, [r3, #4]
}
 8006be6:	b002      	add	sp, #8
 8006be8:	bc30      	pop	{r4, r5}
 8006bea:	4770      	bx	lr
 8006bec:	40021000 	.word	0x40021000
 8006bf0:	fdffff8f 	.word	0xfdffff8f
 8006bf4:	02000070 	.word	0x02000070

08006bf8 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8006bf8:	b4f0      	push	{r4, r5, r6, r7}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8006bfa:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 8006bfc:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 8006c00:	d11a      	bne.n	8006c38 <waitForPolarizationEnd+0x40>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8006c02:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8006c04:	3201      	adds	r2, #1
 8006c06:	0856      	lsrs	r6, r2, #1
 8006c08:	0176      	lsls	r6, r6, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006c0a:	f06f 0702 	mvn.w	r7, #2
 8006c0e:	6107      	str	r7, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8006c10:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8006c12:	781c      	ldrb	r4, [r3, #0]
 8006c14:	2c0f      	cmp	r4, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8006c16:	f102 0501 	add.w	r5, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8006c1a:	d80b      	bhi.n	8006c34 <waitForPolarizationEnd+0x3c>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8006c1c:	6904      	ldr	r4, [r0, #16]
 8006c1e:	07a4      	lsls	r4, r4, #30
 8006c20:	d5f7      	bpl.n	8006c12 <waitForPolarizationEnd+0x1a>
      hCalibrationPeriodCounter++;
 8006c22:	b2aa      	uxth	r2, r5
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8006c24:	4296      	cmp	r6, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006c26:	6107      	str	r7, [r0, #16]
 8006c28:	d8f3      	bhi.n	8006c12 <waitForPolarizationEnd+0x1a>
      {
        if (*cnt < NB_CONVERSIONS)
 8006c2a:	781c      	ldrb	r4, [r3, #0]
 8006c2c:	2c0f      	cmp	r4, #15
 8006c2e:	d8f0      	bhi.n	8006c12 <waitForPolarizationEnd+0x1a>
        {
          *SWerror = 1u;
 8006c30:	2301      	movs	r3, #1
 8006c32:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8006c34:	bcf0      	pop	{r4, r5, r6, r7}
 8006c36:	4770      	bx	lr
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8006c38:	2c60      	cmp	r4, #96	; 0x60
 8006c3a:	d1e3      	bne.n	8006c04 <waitForPolarizationEnd+0xc>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8006c3c:	3201      	adds	r2, #1
 8006c3e:	0156      	lsls	r6, r2, #5
 8006c40:	e7e3      	b.n	8006c0a <waitForPolarizationEnd+0x12>
 8006c42:	bf00      	nop

08006c44 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8006c44:	6843      	ldr	r3, [r0, #4]
 8006c46:	4718      	bx	r3

08006c48 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8006c48:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006c4a:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006c4e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 8006c50:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006c52:	140c      	asrs	r4, r1, #16
{
 8006c54:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006c56:	fb06 f404 	mul.w	r4, r6, r4
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006c5a:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006c5c:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006c60:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8006c64:	eb01 0344 	add.w	r3, r1, r4, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006c68:	ebc1 0144 	rsb	r1, r1, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8006c6c:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006c70:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8006c74:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006c78:	ea4f 0444 	mov.w	r4, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8006c7c:	ea4f 0565 	mov.w	r5, r5, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006c80:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8006c84:	db77      	blt.n	8006d76 <PWMC_SetPhaseVoltage+0x12e>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8006c86:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006c8a:	db4e      	blt.n	8006d2a <PWMC_SetPhaseVoltage+0xe2>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006c8c:	1aad      	subs	r5, r5, r2
 8006c8e:	bf44      	itt	mi
 8006c90:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8006c94:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006c98:	2900      	cmp	r1, #0
 8006c9a:	bfbc      	itt	lt
 8006c9c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8006ca0:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	bfb8      	it	lt
 8006ca8:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006cac:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8006cb0:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006cb4:	bfb8      	it	lt
 8006cb6:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8006cba:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8006cbc:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006cc0:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8006cc4:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8006cc8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
      pHandle->lowDuty = wTimePhB;
 8006ccc:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8006cce:	87c2      	strh	r2, [r0, #62]	; 0x3e

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8006cd0:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8006cd4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8006cd8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8006cdc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006ce0:	b292      	uxth	r2, r2
 8006ce2:	b289      	uxth	r1, r1
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8006ce8:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8006cea:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8006cec:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8006cee:	d118      	bne.n	8006d22 <PWMC_SetPhaseVoltage+0xda>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8006cf0:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 8006cf4:	f9b0 504a 	ldrsh.w	r5, [r0, #74]	; 0x4a
    if ( pHandle->Ia > 0 )
 8006cf8:	2c00      	cmp	r4, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 8006cfa:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8006cfe:	bfcc      	ite	gt
 8006d00:	1912      	addgt	r2, r2, r4
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8006d02:	1b12      	suble	r2, r2, r4
 8006d04:	b292      	uxth	r2, r2
 8006d06:	8642      	strh	r2, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8006d08:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 8006d0c:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 8006d0e:	bfcc      	ite	gt
 8006d10:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8006d12:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8006d14:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8006d16:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8006d18:	bfcc      	ite	gt
 8006d1a:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8006d1c:	1b1b      	suble	r3, r3, r4
 8006d1e:	8681      	strh	r1, [r0, #52]	; 0x34
 8006d20:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8006d22:	6983      	ldr	r3, [r0, #24]
}
 8006d24:	b003      	add	sp, #12
 8006d26:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8006d28:	4718      	bx	r3
      if ( wX <= 0 )
 8006d2a:	2c00      	cmp	r4, #0
 8006d2c:	dd47      	ble.n	8006dbe <PWMC_SetPhaseVoltage+0x176>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006d2e:	1aa5      	subs	r5, r4, r2
 8006d30:	bf44      	itt	mi
 8006d32:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8006d36:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8006d3a:	2900      	cmp	r1, #0
 8006d3c:	bfb8      	it	lt
 8006d3e:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8006d42:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8006d46:	bfb8      	it	lt
 8006d48:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8006d4c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006d50:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8006d52:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006d54:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006d58:	bfb8      	it	lt
 8006d5a:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006d5e:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006d62:	bfb8      	it	lt
 8006d64:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8006d68:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhC;
 8006d6c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8006d70:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8006d72:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8006d74:	e7ac      	b.n	8006cd0 <PWMC_SetPhaseVoltage+0x88>
    if ( wZ < 0 )
 8006d76:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006d7a:	db69      	blt.n	8006e50 <PWMC_SetPhaseVoltage+0x208>
      if ( wX <= 0 )
 8006d7c:	2c00      	cmp	r4, #0
 8006d7e:	dd43      	ble.n	8006e08 <PWMC_SetPhaseVoltage+0x1c0>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006d80:	1b2d      	subs	r5, r5, r4
 8006d82:	bf48      	it	mi
 8006d84:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8006d88:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006d8c:	bf48      	it	mi
 8006d8e:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	bfb8      	it	lt
 8006d96:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8006d9a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006d9e:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8006da2:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8006da6:	bfb8      	it	lt
 8006da8:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8006dac:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006db0:	eb03 4164 	add.w	r1, r3, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 8006db4:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8006db6:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8006db8:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8006dbc:	e788      	b.n	8006cd0 <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006dbe:	1b2d      	subs	r5, r5, r4
 8006dc0:	bf44      	itt	mi
 8006dc2:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8006dc6:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	bfb8      	it	lt
 8006dce:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8006dd2:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8006dd6:	bfb8      	it	lt
 8006dd8:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8006ddc:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8006de0:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006de2:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8006de6:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006dea:	bfb8      	it	lt
 8006dec:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8006df0:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006df4:	bfb8      	it	lt
 8006df6:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8006dfa:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhB;
 8006dfe:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8006e02:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8006e04:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 8006e06:	e763      	b.n	8006cd0 <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006e08:	1aa5      	subs	r5, r4, r2
 8006e0a:	bf44      	itt	mi
 8006e0c:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8006e10:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8006e14:	2900      	cmp	r1, #0
 8006e16:	bfb8      	it	lt
 8006e18:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8006e1c:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8006e20:	bfb8      	it	lt
 8006e22:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 8006e26:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006e2a:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8006e2c:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006e2e:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006e32:	bfb8      	it	lt
 8006e34:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006e38:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006e3c:	bfb8      	it	lt
 8006e3e:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8006e42:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 8006e46:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8006e48:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8006e4a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8006e4e:	e73f      	b.n	8006cd0 <PWMC_SetPhaseVoltage+0x88>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006e50:	1aad      	subs	r5, r5, r2
 8006e52:	bf44      	itt	mi
 8006e54:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8006e58:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006e5c:	2900      	cmp	r1, #0
 8006e5e:	bfbc      	itt	lt
 8006e60:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8006e64:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	bfb8      	it	lt
 8006e6c:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006e70:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8006e74:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006e78:	bfb8      	it	lt
 8006e7a:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8006e7e:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8006e80:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006e84:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8006e88:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8006e8c:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8006e8e:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 8006e90:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8006e94:	e71c      	b.n	8006cd0 <PWMC_SetPhaseVoltage+0x88>
 8006e96:	bf00      	nop

08006e98 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8006e98:	6883      	ldr	r3, [r0, #8]
 8006e9a:	4718      	bx	r3

08006e9c <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8006e9c:	b510      	push	{r4, lr}
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8006ea2:	b199      	cbz	r1, 8006ecc <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8006ea4:	2901      	cmp	r1, #1
 8006ea6:	d002      	beq.n	8006eae <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8006ea8:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8006eaa:	b002      	add	sp, #8
 8006eac:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8006eae:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006eb2:	b1cb      	cbz	r3, 8006ee8 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	9101      	str	r1, [sp, #4]
 8006eba:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1f2      	bne.n	8006ea8 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8006ec2:	6903      	ldr	r3, [r0, #16]
 8006ec4:	4798      	blx	r3
        retVal = true;
 8006ec6:	9901      	ldr	r1, [sp, #4]
 8006ec8:	4608      	mov	r0, r1
 8006eca:	e7ee      	b.n	8006eaa <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8006ecc:	f7ff ffe4 	bl	8006e98 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8006ed0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006ed4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1e5      	bne.n	8006ea8 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8006edc:	4620      	mov	r0, r4
 8006ede:	6923      	ldr	r3, [r4, #16]
 8006ee0:	4798      	blx	r3
      retVal = true;
 8006ee2:	2001      	movs	r0, #1
}
 8006ee4:	b002      	add	sp, #8
 8006ee6:	bd10      	pop	{r4, pc}
      retVal = true;
 8006ee8:	4608      	mov	r0, r1
}
 8006eea:	b002      	add	sp, #8
 8006eec:	bd10      	pop	{r4, pc}
 8006eee:	bf00      	nop

08006ef0 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8006ef0:	69c3      	ldr	r3, [r0, #28]
 8006ef2:	4718      	bx	r3

08006ef4 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006ef4:	6883      	ldr	r3, [r0, #8]
 8006ef6:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006efa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006efe:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006f00:	6883      	ldr	r3, [r0, #8]
 8006f02:	00d9      	lsls	r1, r3, #3
    R3_2_TIMxInit( TIMx, &pHandle->_Super );
  }
}

static void R3_2_ADCxInit( ADC_TypeDef * ADCx )
{
 8006f04:	b082      	sub	sp, #8
 8006f06:	d418      	bmi.n	8006f3a <R3_2_ADCxInit+0x46>
  
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 8006f08:	4b24      	ldr	r3, [pc, #144]	; (8006f9c <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 8006f0a:	6882      	ldr	r2, [r0, #8]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4924      	ldr	r1, [pc, #144]	; (8006fa0 <R3_2_ADCxInit+0xac>)
 8006f10:	099b      	lsrs	r3, r3, #6
 8006f12:	fba1 1303 	umull	r1, r3, r1, r3
 8006f16:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8006f1a:	099b      	lsrs	r3, r3, #6
 8006f1c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006f26:	6082      	str	r2, [r0, #8]
 8006f28:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8006f2a:	9b01      	ldr	r3, [sp, #4]
 8006f2c:	b12b      	cbz	r3, 8006f3a <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 8006f2e:	9b01      	ldr	r3, [sp, #4]
 8006f30:	3b01      	subs	r3, #1
 8006f32:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8006f34:	9b01      	ldr	r3, [sp, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f9      	bne.n	8006f2e <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 8006f3a:	6883      	ldr	r3, [r0, #8]
 8006f3c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006f40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006f44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f48:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006f4a:	6883      	ldr	r3, [r0, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	dbfc      	blt.n	8006f4a <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006f50:	6803      	ldr	r3, [r0, #0]
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0 
  * following a calibration phase, could have no effect on ADC 
  * within certain AHB/ADC clock ratio.
  */
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 8006f52:	07da      	lsls	r2, r3, #31
 8006f54:	d408      	bmi.n	8006f68 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 8006f56:	4a13      	ldr	r2, [pc, #76]	; (8006fa4 <R3_2_ADCxInit+0xb0>)
 8006f58:	6883      	ldr	r3, [r0, #8]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	f043 0301 	orr.w	r3, r3, #1
 8006f60:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006f62:	6803      	ldr	r3, [r0, #0]
 8006f64:	07db      	lsls	r3, r3, #31
 8006f66:	d5f7      	bpl.n	8006f58 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 8006f68:	6882      	ldr	r2, [r0, #8]
 8006f6a:	490e      	ldr	r1, [pc, #56]	; (8006fa4 <R3_2_ADCxInit+0xb0>)
 8006f6c:	400a      	ands	r2, r1
 8006f6e:	f042 0208 	orr.w	r2, r2, #8
 8006f72:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8006f74:	6882      	ldr	r2, [r0, #8]
 8006f76:	400a      	ands	r2, r1
 8006f78:	f042 0220 	orr.w	r2, r2, #32
 8006f7c:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8006f7e:	68c3      	ldr	r3, [r0, #12]
 8006f80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f8c:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 8006f8e:	6883      	ldr	r3, [r0, #8]
 8006f90:	400b      	ands	r3, r1
 8006f92:	f043 0304 	orr.w	r3, r3, #4
 8006f96:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
 }
 8006f98:	b002      	add	sp, #8
 8006f9a:	4770      	bx	lr
 8006f9c:	20000694 	.word	0x20000694
 8006fa0:	053e2d63 	.word	0x053e2d63
 8006fa4:	7fffffc0 	.word	0x7fffffc0

08006fa8 <R3_2_GetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;  
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006fa8:	6f43      	ldr	r3, [r0, #116]	; 0x74
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 8006faa:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8006fae:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006fb0:	689c      	ldr	r4, [r3, #8]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8006fb2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006fb6:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 8006fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8006fba:	682d      	ldr	r5, [r5, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 8006fbc:	681e      	ldr	r6, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006fbe:	6863      	ldr	r3, [r4, #4]
 8006fc0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc8:	6063      	str	r3, [r4, #4]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  switch ( Sector )
 8006fca:	2a05      	cmp	r2, #5
 8006fcc:	f200 8099 	bhi.w	8007102 <R3_2_GetPhaseCurrents+0x15a>
 8006fd0:	e8df f002 	tbb	[pc, r2]
 8006fd4:	031e1e38 	.word	0x031e1e38
 8006fd8:	3803      	.short	0x3803
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8006fda:	6dc4      	ldr	r4, [r0, #92]	; 0x5c

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 8006fdc:	4b4c      	ldr	r3, [pc, #304]	; (8007110 <R3_2_GetPhaseCurrents+0x168>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8006fde:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8006fe0:	429c      	cmp	r4, r3
 8006fe2:	da55      	bge.n	8007090 <R3_2_GetPhaseCurrents+0xe8>
      {
        Iab->a = -INT16_MAX;
      }
      else  if ( Aux > INT16_MAX )
      {
        Iab->a = INT16_MAX;
 8006fe4:	800b      	strh	r3, [r1, #0]
      {
        Iab->a = ( int16_t )Aux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8006fe6:	6e02      	ldr	r2, [r0, #96]	; 0x60

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 8006fe8:	4f49      	ldr	r7, [pc, #292]	; (8007110 <R3_2_GetPhaseCurrents+0x168>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8006fea:	1b92      	subs	r2, r2, r6
      if ( Aux < -INT16_MAX )
 8006fec:	42ba      	cmp	r2, r7
 8006fee:	da55      	bge.n	800709c <R3_2_GetPhaseCurrents+0xf4>
      {
        Iab->b = -INT16_MAX;
 8006ff0:	f9b1 5000 	ldrsh.w	r5, [r1]
 8006ff4:	804f      	strh	r7, [r1, #2]
 8006ff6:	b2ab      	uxth	r3, r5
 8006ff8:	f248 0201 	movw	r2, #32769	; 0x8001
      break;
  }

  pHandle->_Super.Ia = Iab->a;
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006ffc:	4413      	add	r3, r2
 8006ffe:	425b      	negs	r3, r3
  pHandle->_Super.Ia = Iab->a;
 8007000:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
  pHandle->_Super.Ib = Iab->b;
 8007004:	f8a0 704a 	strh.w	r7, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007008:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 800700c:	bcf0      	pop	{r4, r5, r6, r7}
 800700e:	4770      	bx	lr
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8007010:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      if ( Aux < -INT16_MAX )
 8007012:	4b3f      	ldr	r3, [pc, #252]	; (8007110 <R3_2_GetPhaseCurrents+0x168>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8007014:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8007016:	429c      	cmp	r4, r3
 8007018:	db34      	blt.n	8007084 <R3_2_GetPhaseCurrents+0xdc>
      else  if ( Aux > INT16_MAX )
 800701a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800701e:	db68      	blt.n	80070f2 <R3_2_GetPhaseCurrents+0x14a>
        Iab->a = INT16_MAX;
 8007020:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007024:	4613      	mov	r3, r2
 8007026:	800a      	strh	r2, [r1, #0]
 8007028:	4614      	mov	r4, r2
 800702a:	4615      	mov	r5, r2
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 800702c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800702e:	1ab2      	subs	r2, r6, r2
      Aux -= ( int32_t )Iab->a;             /* Ib */
 8007030:	1b12      	subs	r2, r2, r4
      if ( Aux > INT16_MAX )
 8007032:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007036:	db44      	blt.n	80070c2 <R3_2_GetPhaseCurrents+0x11a>
        Iab->b = INT16_MAX;
 8007038:	f647 74ff 	movw	r4, #32767	; 0x7fff
 800703c:	4622      	mov	r2, r4
 800703e:	804c      	strh	r4, [r1, #2]
 8007040:	4627      	mov	r7, r4
 8007042:	e7db      	b.n	8006ffc <R3_2_GetPhaseCurrents+0x54>
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8007044:	6e04      	ldr	r4, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 8007046:	4b32      	ldr	r3, [pc, #200]	; (8007110 <R3_2_GetPhaseCurrents+0x168>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8007048:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 800704a:	429c      	cmp	r4, r3
 800704c:	db14      	blt.n	8007078 <R3_2_GetPhaseCurrents+0xd0>
      else  if ( Aux > INT16_MAX )
 800704e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007052:	db43      	blt.n	80070dc <R3_2_GetPhaseCurrents+0x134>
        Iab->b = INT16_MAX;
 8007054:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007058:	461a      	mov	r2, r3
 800705a:	804b      	strh	r3, [r1, #2]
 800705c:	461c      	mov	r4, r3
 800705e:	461f      	mov	r7, r3
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8007060:	6e45      	ldr	r5, [r0, #100]	; 0x64
 8007062:	1b73      	subs	r3, r6, r5
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 8007064:	1b1c      	subs	r4, r3, r4
      if ( Aux > INT16_MAX )
 8007066:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800706a:	db23      	blt.n	80070b4 <R3_2_GetPhaseCurrents+0x10c>
        Iab->a = INT16_MAX;
 800706c:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8007070:	4623      	mov	r3, r4
 8007072:	800c      	strh	r4, [r1, #0]
 8007074:	4625      	mov	r5, r4
 8007076:	e7c1      	b.n	8006ffc <R3_2_GetPhaseCurrents+0x54>
        Iab->b = -INT16_MAX;
 8007078:	461c      	mov	r4, r3
 800707a:	804b      	strh	r3, [r1, #2]
 800707c:	461f      	mov	r7, r3
 800707e:	f248 0201 	movw	r2, #32769	; 0x8001
 8007082:	e7ed      	b.n	8007060 <R3_2_GetPhaseCurrents+0xb8>
        Iab->a = -INT16_MAX;
 8007084:	461c      	mov	r4, r3
 8007086:	800b      	strh	r3, [r1, #0]
 8007088:	461d      	mov	r5, r3
 800708a:	f248 0301 	movw	r3, #32769	; 0x8001
 800708e:	e7cd      	b.n	800702c <R3_2_GetPhaseCurrents+0x84>
      else  if ( Aux > INT16_MAX )
 8007090:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007094:	db1c      	blt.n	80070d0 <R3_2_GetPhaseCurrents+0x128>
        Iab->a = INT16_MAX;
 8007096:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800709a:	e7a3      	b.n	8006fe4 <R3_2_GetPhaseCurrents+0x3c>
      else  if ( Aux > INT16_MAX )
 800709c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80070a0:	db20      	blt.n	80070e4 <R3_2_GetPhaseCurrents+0x13c>
        Iab->b = INT16_MAX;
 80070a2:	f9b1 5000 	ldrsh.w	r5, [r1]
 80070a6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80070aa:	804b      	strh	r3, [r1, #2]
 80070ac:	461a      	mov	r2, r3
 80070ae:	461f      	mov	r7, r3
 80070b0:	b2ab      	uxth	r3, r5
 80070b2:	e7a3      	b.n	8006ffc <R3_2_GetPhaseCurrents+0x54>
      else  if ( Aux < -INT16_MAX )
 80070b4:	4d16      	ldr	r5, [pc, #88]	; (8007110 <R3_2_GetPhaseCurrents+0x168>)
 80070b6:	42ac      	cmp	r4, r5
 80070b8:	da1f      	bge.n	80070fa <R3_2_GetPhaseCurrents+0x152>
        Iab->a = -INT16_MAX;
 80070ba:	800d      	strh	r5, [r1, #0]
 80070bc:	f248 0301 	movw	r3, #32769	; 0x8001
 80070c0:	e79c      	b.n	8006ffc <R3_2_GetPhaseCurrents+0x54>
      else  if ( Aux < -INT16_MAX )
 80070c2:	4f13      	ldr	r7, [pc, #76]	; (8007110 <R3_2_GetPhaseCurrents+0x168>)
 80070c4:	42ba      	cmp	r2, r7
 80070c6:	da05      	bge.n	80070d4 <R3_2_GetPhaseCurrents+0x12c>
        Iab->b = -INT16_MAX;
 80070c8:	804f      	strh	r7, [r1, #2]
 80070ca:	f248 0201 	movw	r2, #32769	; 0x8001
 80070ce:	e795      	b.n	8006ffc <R3_2_GetPhaseCurrents+0x54>
        Iab->a = ( int16_t )Aux;
 80070d0:	800c      	strh	r4, [r1, #0]
 80070d2:	e788      	b.n	8006fe6 <R3_2_GetPhaseCurrents+0x3e>
        Iab->b = ( int16_t )Aux;
 80070d4:	b217      	sxth	r7, r2
 80070d6:	804f      	strh	r7, [r1, #2]
 80070d8:	b292      	uxth	r2, r2
 80070da:	e78f      	b.n	8006ffc <R3_2_GetPhaseCurrents+0x54>
        Iab->b = ( int16_t )Aux;
 80070dc:	b227      	sxth	r7, r4
 80070de:	804f      	strh	r7, [r1, #2]
 80070e0:	b2a2      	uxth	r2, r4
 80070e2:	e7bd      	b.n	8007060 <R3_2_GetPhaseCurrents+0xb8>
        Iab->b = ( int16_t )Aux;
 80070e4:	f9b1 5000 	ldrsh.w	r5, [r1]
 80070e8:	b217      	sxth	r7, r2
 80070ea:	b2ab      	uxth	r3, r5
 80070ec:	804f      	strh	r7, [r1, #2]
 80070ee:	b292      	uxth	r2, r2
 80070f0:	e784      	b.n	8006ffc <R3_2_GetPhaseCurrents+0x54>
        Iab->a = ( int16_t )Aux;
 80070f2:	b225      	sxth	r5, r4
 80070f4:	800d      	strh	r5, [r1, #0]
 80070f6:	b2a3      	uxth	r3, r4
 80070f8:	e798      	b.n	800702c <R3_2_GetPhaseCurrents+0x84>
        Iab->a = ( int16_t )Aux;
 80070fa:	b225      	sxth	r5, r4
 80070fc:	800d      	strh	r5, [r1, #0]
 80070fe:	b2a3      	uxth	r3, r4
 8007100:	e77c      	b.n	8006ffc <R3_2_GetPhaseCurrents+0x54>
 8007102:	f9b1 5000 	ldrsh.w	r5, [r1]
 8007106:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 800710a:	880b      	ldrh	r3, [r1, #0]
 800710c:	884a      	ldrh	r2, [r1, #2]
 800710e:	e775      	b.n	8006ffc <R3_2_GetPhaseCurrents+0x54>
 8007110:	ffff8001 	.word	0xffff8001

08007114 <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 8007114:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007116:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8007118:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 800711c:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8007120:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007124:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8007126:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007128:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800712a:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 800712c:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 800712e:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007130:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8007132:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007134:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007136:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007138:	4904      	ldr	r1, [pc, #16]	; (800714c <R3_2_SetADCSampPointPolarization+0x38>)
 800713a:	685b      	ldr	r3, [r3, #4]
}
 800713c:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007140:	420b      	tst	r3, r1
}
 8007142:	bf14      	ite	ne
 8007144:	2001      	movne	r0, #1
 8007146:	2000      	moveq	r0, #0
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	02000070 	.word	0x02000070

08007150 <R3_2_SetADCSampPointSectX>:
{
 8007150:	b470      	push	{r4, r5, r6}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 8007152:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 8007156:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8007158:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800715a:	1aca      	subs	r2, r1, r3
 800715c:	f8b4 60b2 	ldrh.w	r6, [r4, #178]	; 0xb2
 8007160:	b292      	uxth	r2, r2
 8007162:	42b2      	cmp	r2, r6
 8007164:	d914      	bls.n	8007190 <R3_2_SetADCSampPointSectX+0x40>
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8007166:	1e4b      	subs	r3, r1, #1
    pHandle->_Super.Sector = SECTOR_5;
 8007168:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 800716a:	b29b      	uxth	r3, r3
    pHandle->_Super.Sector = SECTOR_5;
 800716c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007170:	68a2      	ldr	r2, [r4, #8]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8007172:	8e45      	ldrh	r5, [r0, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8007174:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8007176:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007178:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800717a:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800717c:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800717e:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007180:	6852      	ldr	r2, [r2, #4]
 8007182:	4b0f      	ldr	r3, [pc, #60]	; (80071c0 <R3_2_SetADCSampPointSectX+0x70>)
 8007184:	421a      	tst	r2, r3
}
 8007186:	bf14      	ite	ne
 8007188:	2001      	movne	r0, #1
 800718a:	2000      	moveq	r0, #0
 800718c:	bc70      	pop	{r4, r5, r6}
 800718e:	4770      	bx	lr
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 8007190:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
 8007192:	1b5d      	subs	r5, r3, r5
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 8007194:	b2ad      	uxth	r5, r5
 8007196:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 800719a:	d904      	bls.n	80071a6 <R3_2_SetADCSampPointSectX+0x56>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800719c:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
 80071a0:	1a9b      	subs	r3, r3, r2
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	e7e4      	b.n	8007170 <R3_2_SetADCSampPointSectX+0x20>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 80071a6:	4433      	add	r3, r6
 80071a8:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 80071aa:	4299      	cmp	r1, r3
 80071ac:	d8e0      	bhi.n	8007170 <R3_2_SetADCSampPointSectX+0x20>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 80071ae:	43db      	mvns	r3, r3
 80071b0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 80071b4:	f44f 7280 	mov.w	r2, #256	; 0x100
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 80071b8:	b29b      	uxth	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 80071ba:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 80071be:	e7d7      	b.n	8007170 <R3_2_SetADCSampPointSectX+0x20>
 80071c0:	02000070 	.word	0x02000070

080071c4 <R3_2_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHdl Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 80071c4:	b470      	push	{r4, r5, r6}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80071c6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80071c8:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 80071cc:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 80071ce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80071d2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80071d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 80071d6:	6826      	ldr	r6, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80071d8:	681d      	ldr	r5, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80071da:	6853      	ldr	r3, [r2, #4]
 80071dc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80071e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e4:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80071e6:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 80071ea:	2b0f      	cmp	r3, #15
 80071ec:	d80b      	bhi.n	8007206 <R3_2_HFCurrentsPolarizationAB+0x42>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
    pHandle-> PhaseBOffset += ADCDataReg2;
 80071ee:	e9d0 4217 	ldrd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 80071f2:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseAOffset += ADCDataReg1;
 80071f6:	4434      	add	r4, r6
    pHandle-> PhaseBOffset += ADCDataReg2;
 80071f8:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 80071fa:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 80071fc:	e9c0 4217 	strd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 8007200:	b2db      	uxtb	r3, r3
 8007202:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8007206:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8007208:	bc70      	pop	{r4, r5, r6}
  Iab->a = 0;
 800720a:	600b      	str	r3, [r1, #0]
}
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop

08007210 <R3_2_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007210:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8007212:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8007214:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007218:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800721a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800721e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007220:	681c      	ldr	r4, [r3, #0]
 8007222:	6853      	ldr	r3, [r2, #4]
 8007224:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800722c:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800722e:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8007232:	2b0f      	cmp	r3, #15
 8007234:	d808      	bhi.n	8007248 <R3_2_HFCurrentsPolarizationC+0x38>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 8007236:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800723a:	6e42      	ldr	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 800723c:	3301      	adds	r3, #1
 800723e:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8007240:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8007242:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8007246:	6642      	str	r2, [r0, #100]	; 0x64
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8007248:	2300      	movs	r3, #0
  Iab->b = 0;
}
 800724a:	f85d 4b04 	ldr.w	r4, [sp], #4
  Iab->a = 0;
 800724e:	600b      	str	r3, [r1, #0]
}
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop

08007254 <R3_2_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007254:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->_Super.TurnOnLowSidesAction = true;
 8007256:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007258:	688a      	ldr	r2, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800725a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 800725e:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007260:	f06f 0001 	mvn.w	r0, #1
 8007264:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007266:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007268:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800726a:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800726c:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800726e:	07db      	lsls	r3, r3, #31
 8007270:	d5fc      	bpl.n	800726c <R3_2_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007272:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8007274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007278:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800727a:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 800727e:	2b02      	cmp	r3, #2
 8007280:	d000      	beq.n	8007284 <R3_2_TurnOnLowSides+0x30>
 8007282:	4770      	bx	lr
{
 8007284:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007286:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800728a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800728c:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007290:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007294:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007298:	61ae      	str	r6, [r5, #24]
 800729a:	6184      	str	r4, [r0, #24]
  }
  return;
}
 800729c:	bc70      	pop	{r4, r5, r6}
 800729e:	619a      	str	r2, [r3, #24]
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop

080072a4 <R3_2_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80072a4:	6f41      	ldr	r1, [r0, #116]	; 0x74
  pHandle->ADCRegularLocked=true; 

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 80072a6:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80072aa:	688b      	ldr	r3, [r1, #8]
{
 80072ac:	b430      	push	{r4, r5}
  pHandle->ADCRegularLocked=true; 
 80072ae:	2401      	movs	r4, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 80072b0:	2500      	movs	r5, #0
  pHandle->ADCRegularLocked=true; 
 80072b2:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
  pHandle->_Super.TurnOnLowSidesAction = false;
 80072b6:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 80072ba:	fa22 f404 	lsr.w	r4, r2, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80072be:	f06f 0001 	mvn.w	r0, #1
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 80072c2:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 80072c4:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80072c6:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80072c8:	63dc      	str	r4, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80072ca:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80072cc:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80072ce:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 80072d0:	07d2      	lsls	r2, r2, #31
 80072d2:	d5fc      	bpl.n	80072ce <R3_2_SwitchOnPWM+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80072d4:	f06f 0201 	mvn.w	r2, #1
 80072d8:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80072da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072e0:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80072e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072e8:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80072ea:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 80072ee:	2a02      	cmp	r2, #2
 80072f0:	d008      	beq.n	8007304 <R3_2_SwitchOnPWM+0x60>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80072f2:	f06f 0201 	mvn.w	r2, #1
 80072f6:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80072f8:	68da      	ldr	r2, [r3, #12]
 80072fa:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 80072fe:	bc30      	pop	{r4, r5}
 8007300:	60da      	str	r2, [r3, #12]
 8007302:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8007304:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007306:	6a0c      	ldr	r4, [r1, #32]
 8007308:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800730c:	f240 5255 	movw	r2, #1365	; 0x555
 8007310:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007312:	e9d1 0209 	ldrd	r0, r2, [r1, #36]	; 0x24
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8007316:	d007      	beq.n	8007328 <R3_2_SwitchOnPWM+0x84>
 8007318:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800731a:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800731e:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8007322:	6184      	str	r4, [r0, #24]
 8007324:	6191      	str	r1, [r2, #24]
}
 8007326:	e7e4      	b.n	80072f2 <R3_2_SwitchOnPWM+0x4e>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8007328:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800732a:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800732e:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8007332:	6284      	str	r4, [r0, #40]	; 0x28
 8007334:	6291      	str	r1, [r2, #40]	; 0x28
}
 8007336:	e7dc      	b.n	80072f2 <R3_2_SwitchOnPWM+0x4e>

08007338 <R3_2_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007338:	6f41      	ldr	r1, [r0, #116]	; 0x74
 800733a:	688a      	ldr	r2, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800733c:	68d3      	ldr	r3, [r2, #12]
 800733e:	f023 0301 	bic.w	r3, r3, #1
{
 8007342:	b430      	push	{r4, r5}

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 8007344:	f890 4070 	ldrb.w	r4, [r0, #112]	; 0x70
 8007348:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800734a:	6c53      	ldr	r3, [r2, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 800734c:	2500      	movs	r5, #0
 800734e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007352:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 8007356:	6453      	str	r3, [r2, #68]	; 0x44
  if ( pHandle->BrakeActionLock == true )
 8007358:	b91c      	cbnz	r4, 8007362 <R3_2_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800735a:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 800735e:	2b02      	cmp	r3, #2
 8007360:	d00d      	beq.n	800737e <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007362:	f06f 0301 	mvn.w	r3, #1
 8007366:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007368:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800736a:	07db      	lsls	r3, r3, #31
 800736c:	d5fc      	bpl.n	8007368 <R3_2_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800736e:	f06f 0101 	mvn.w	r1, #1
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 8007372:	2300      	movs	r3, #0
 8007374:	6111      	str	r1, [r2, #16]
}
 8007376:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked=false; 
 8007378:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
}
 800737c:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800737e:	e9d1 3408 	ldrd	r3, r4, [r1, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007382:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 8007386:	629d      	str	r5, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007388:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800738a:	f8b1 50ae 	ldrh.w	r5, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800738e:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8007392:	62a5      	str	r5, [r4, #40]	; 0x28
 8007394:	6299      	str	r1, [r3, #40]	; 0x28
}
 8007396:	e7e4      	b.n	8007362 <R3_2_SwitchOffPWM+0x2a>

08007398 <R3_2_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
static void R3_2_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 8007398:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800739a:	6f44      	ldr	r4, [r0, #116]	; 0x74
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 800739c:	6e03      	ldr	r3, [r0, #96]	; 0x60
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800739e:	68a5      	ldr	r5, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80073a0:	686a      	ldr	r2, [r5, #4]
 80073a2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80073a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80073aa:	606a      	str	r2, [r5, #4]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 80073ac:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
  
  /* Check saturation */
  if ( wAux > -INT16_MAX )
 80073b0:	4a0c      	ldr	r2, [pc, #48]	; (80073e4 <R3_2_RLGetPhaseCurrents+0x4c>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 80073b2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80073b6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80073b8:	6800      	ldr	r0, [r0, #0]
 80073ba:	1a1b      	subs	r3, r3, r0
  if ( wAux > -INT16_MAX )
 80073bc:	4293      	cmp	r3, r2
 80073be:	db05      	blt.n	80073cc <R3_2_RLGetPhaseCurrents+0x34>
  {
    if ( wAux < INT16_MAX )
 80073c0:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80073c4:	4293      	cmp	r3, r2
 80073c6:	dc0a      	bgt.n	80073de <R3_2_RLGetPhaseCurrents+0x46>
 80073c8:	b21b      	sxth	r3, r3
 80073ca:	e000      	b.n	80073ce <R3_2_RLGetPhaseCurrents+0x36>
 80073cc:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <R3_2_RLGetPhaseCurrents+0x50>)
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 80073ce:	2200      	movs	r2, #0
 80073d0:	f363 020f 	bfi	r2, r3, #0, #16
 80073d4:	f363 421f 	bfi	r2, r3, #16, #16
  pStator_Currents->b = (int16_t)wAux;
}
 80073d8:	bc30      	pop	{r4, r5}
  pStator_Currents->a = (int16_t)wAux;
 80073da:	600a      	str	r2, [r1, #0]
}
 80073dc:	4770      	bx	lr
 80073de:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80073e2:	e7f4      	b.n	80073ce <R3_2_RLGetPhaseCurrents+0x36>
 80073e4:	ffff8002 	.word	0xffff8002
 80073e8:	ffff8001 	.word	0xffff8001

080073ec <R3_2_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80073ec:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->ADCRegularLocked=true;
 80073ee:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80073f0:	688a      	ldr	r2, [r1, #8]
  pHandle->ADCRegularLocked=true;
 80073f2:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
  WRITE_REG(TIMx->CCR1, CompareValue);
 80073f6:	2000      	movs	r0, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80073f8:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80073fc:	6350      	str	r0, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80073fe:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007400:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8007402:	07db      	lsls	r3, r3, #31
 8007404:	d5fc      	bpl.n	8007400 <R3_2_RLTurnOnLowSides+0x14>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007406:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8007408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800740c:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800740e:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 8007412:	2b02      	cmp	r3, #2
 8007414:	d000      	beq.n	8007418 <R3_2_RLTurnOnLowSides+0x2c>
 8007416:	4770      	bx	lr
{
 8007418:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800741a:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800741e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007420:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007424:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007428:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BSRR, PinMask);
 800742c:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800742e:	6284      	str	r4, [r0, #40]	; 0x28
  }
  return;
}
 8007430:	bc70      	pop	{r4, r5, r6}
 8007432:	629a      	str	r2, [r3, #40]	; 0x28
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop

08007438 <R3_2_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007438:	6f41      	ldr	r1, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;

  pHandle->ADCRegularLocked=true;
 800743a:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800743c:	688b      	ldr	r3, [r1, #8]
{
 800743e:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007440:	e9d1 5400 	ldrd	r5, r4, [r1]
  pHandle->ADCRegularLocked=true;
 8007444:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007448:	f06f 0201 	mvn.w	r2, #1
 800744c:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800744e:	691a      	ldr	r2, [r3, #16]
  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8007450:	07d6      	lsls	r6, r2, #31
 8007452:	d5fc      	bpl.n	800744e <R3_2_RLSwitchOnPWM+0x16>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 8007454:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007458:	f06f 0701 	mvn.w	r7, #1
 800745c:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800745e:	2601      	movs	r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007460:	611f      	str	r7, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007462:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007464:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007466:	691a      	ldr	r2, [r3, #16]

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8007468:	07d2      	lsls	r2, r2, #31
 800746a:	d5fc      	bpl.n	8007466 <R3_2_RLSwitchOnPWM+0x2e>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	f042 0201 	orr.w	r2, r2, #1
 8007472:	60da      	str	r2, [r3, #12]

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8007474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007476:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800747a:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800747c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800747e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007482:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007484:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 8007488:	2a02      	cmp	r2, #2
 800748a:	d00f      	beq.n	80074ac <R3_2_RLSwitchOnPWM+0x74>
    }
  }

  /* set the sector that correspond to Phase B and C sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 800748c:	2303      	movs	r3, #3
 800748e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  MODIFY_REG(ADCx->CR,
 8007492:	68aa      	ldr	r2, [r5, #8]
 8007494:	4913      	ldr	r1, [pc, #76]	; (80074e4 <R3_2_RLSwitchOnPWM+0xac>)
 8007496:	400a      	ands	r2, r1
 8007498:	f042 0208 	orr.w	r2, r2, #8
 800749c:	60aa      	str	r2, [r5, #8]
 800749e:	68a3      	ldr	r3, [r4, #8]
 80074a0:	400b      	ands	r3, r1
 80074a2:	f043 0308 	orr.w	r3, r3, #8
 80074a6:	60a3      	str	r3, [r4, #8]

  LL_ADC_INJ_StartConversion( ADCx_1 );
  LL_ADC_INJ_StartConversion( ADCx_2 );

  return;
}
 80074a8:	bcf0      	pop	{r4, r5, r6, r7}
 80074aa:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80074ac:	6a1a      	ldr	r2, [r3, #32]
 80074ae:	f240 5355 	movw	r3, #1365	; 0x555
 80074b2:	421a      	tst	r2, r3
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80074b4:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80074b8:	f8b1 20ac 	ldrh.w	r2, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80074bc:	d008      	beq.n	80074d0 <R3_2_RLSwitchOnPWM+0x98>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80074be:	619a      	str	r2, [r3, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80074c0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80074c2:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80074c6:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 80074ca:	61b7      	str	r7, [r6, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80074cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80074ce:	e7dd      	b.n	800748c <R3_2_RLSwitchOnPWM+0x54>
  WRITE_REG(GPIOx->BRR, PinMask);
 80074d0:	629a      	str	r2, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80074d2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80074d4:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80074d8:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 80074dc:	62b7      	str	r7, [r6, #40]	; 0x28
 80074de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80074e0:	e7d4      	b.n	800748c <R3_2_RLSwitchOnPWM+0x54>
 80074e2:	bf00      	nop
 80074e4:	7fffffc0 	.word	0x7fffffc0

080074e8 <R3_2_SetAOReferenceVoltage>:
{
 80074e8:	b430      	push	{r4, r5}
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 80074ea:	0c84      	lsrs	r4, r0, #18
 80074ec:	f004 043c 	and.w	r4, r4, #60	; 0x3c
 80074f0:	f101 0508 	add.w	r5, r1, #8
 80074f4:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 80074f6:	5963      	ldr	r3, [r4, r5]
 80074f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007500:	431a      	orrs	r2, r3
 8007502:	5162      	str	r2, [r4, r5]
  SET_BIT(DACx->SWTRIGR,
 8007504:	684a      	ldr	r2, [r1, #4]
 8007506:	f000 0303 	and.w	r3, r0, #3
 800750a:	4313      	orrs	r3, r2
 800750c:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 800750e:	680a      	ldr	r2, [r1, #0]
 8007510:	2301      	movs	r3, #1
 8007512:	f000 0010 	and.w	r0, r0, #16
 8007516:	fa03 f000 	lsl.w	r0, r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 800751a:	ea30 0302 	bics.w	r3, r0, r2
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800751e:	4b15      	ldr	r3, [pc, #84]	; (8007574 <R3_2_SetAOReferenceVoltage+0x8c>)
 8007520:	d014      	beq.n	800754c <R3_2_SetAOReferenceVoltage+0x64>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4c14      	ldr	r4, [pc, #80]	; (8007578 <R3_2_SetAOReferenceVoltage+0x90>)
  SET_BIT(DACx->CR,
 8007526:	680a      	ldr	r2, [r1, #0]
 8007528:	fba4 4303 	umull	r4, r3, r4, r3
 800752c:	0cdb      	lsrs	r3, r3, #19
 800752e:	00db      	lsls	r3, r3, #3
 8007530:	4310      	orrs	r0, r2
 8007532:	6008      	str	r0, [r1, #0]
 8007534:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 8007536:	9b00      	ldr	r3, [sp, #0]
 8007538:	b12b      	cbz	r3, 8007546 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 800753a:	9b00      	ldr	r3, [sp, #0]
 800753c:	3b01      	subs	r3, #1
 800753e:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 8007540:	9b00      	ldr	r3, [sp, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1f9      	bne.n	800753a <R3_2_SetAOReferenceVoltage+0x52>
}
 8007546:	b002      	add	sp, #8
 8007548:	bc30      	pop	{r4, r5}
 800754a:	4770      	bx	lr
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800754c:	4a0a      	ldr	r2, [pc, #40]	; (8007578 <R3_2_SetAOReferenceVoltage+0x90>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	fba2 2303 	umull	r2, r3, r2, r3
 8007554:	0cdb      	lsrs	r3, r3, #19
 8007556:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800755a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800755c:	9b01      	ldr	r3, [sp, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0f1      	beq.n	8007546 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 8007562:	9b01      	ldr	r3, [sp, #4]
 8007564:	3b01      	subs	r3, #1
 8007566:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8007568:	9b01      	ldr	r3, [sp, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1f9      	bne.n	8007562 <R3_2_SetAOReferenceVoltage+0x7a>
}
 800756e:	b002      	add	sp, #8
 8007570:	bc30      	pop	{r4, r5}
 8007572:	4770      	bx	lr
 8007574:	20000694 	.word	0x20000694
 8007578:	431bde83 	.word	0x431bde83

0800757c <R3_2_Init>:
{
 800757c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007580:	4607      	mov	r7, r0
 8007582:	b087      	sub	sp, #28
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8007584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    if ( TIMx == TIM1 )
 8007586:	f8df e284 	ldr.w	lr, [pc, #644]	; 800780c <R3_2_Init+0x290>
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 800758a:	681d      	ldr	r5, [r3, #0]
  DAC_TypeDef * DAC_OCPAx = pHandle->pParams_str->DAC_OCP_ASelection;
 800758c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800758e:	686a      	ldr	r2, [r5, #4]
 8007590:	9100      	str	r1, [sp, #0]
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8007592:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007594:	9101      	str	r1, [sp, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8007596:	2004      	movs	r0, #4
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8007598:	6b59      	ldr	r1, [r3, #52]	; 0x34
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800759a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 800759e:	9102      	str	r1, [sp, #8]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80075a0:	f022 0204 	bic.w	r2, r2, #4
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 80075a4:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
  DAC_TypeDef * DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 80075a8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80075aa:	9103      	str	r1, [sp, #12]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 80075ac:	e9d3 ba04 	ldrd	fp, sl, [r3, #16]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 80075b0:	e9d3 9806 	ldrd	r9, r8, [r3, #24]
 80075b4:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80075b6:	6028      	str	r0, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80075b8:	686a      	ldr	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80075ba:	2120      	movs	r1, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80075bc:	f022 0220 	bic.w	r2, r2, #32
 80075c0:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80075c2:	6029      	str	r1, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80075c4:	6872      	ldr	r2, [r6, #4]
 80075c6:	f022 0204 	bic.w	r2, r2, #4
 80075ca:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80075cc:	6030      	str	r0, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80075ce:	6872      	ldr	r2, [r6, #4]
 80075d0:	f022 0220 	bic.w	r2, r2, #32
 80075d4:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80075d6:	6031      	str	r1, [r6, #0]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80075d8:	498b      	ldr	r1, [pc, #556]	; (8007808 <R3_2_Init+0x28c>)
 80075da:	690a      	ldr	r2, [r1, #16]
    if ( TIMx == TIM1 )
 80075dc:	4574      	cmp	r4, lr
 80075de:	bf0c      	ite	eq
 80075e0:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 80075e4:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 80075e8:	610a      	str	r2, [r1, #16]
    if ( OPAMPParams != NULL )
 80075ea:	f1bc 0f00 	cmp.w	ip, #0
 80075ee:	d014      	beq.n	800761a <R3_2_Init+0x9e>
     if (OPAMPParams -> OPAMPx_1 != NULL ) 
 80075f0:	f8dc 2000 	ldr.w	r2, [ip]
 80075f4:	b11a      	cbz	r2, 80075fe <R3_2_Init+0x82>
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 80075f6:	6811      	ldr	r1, [r2, #0]
 80075f8:	f041 0101 	orr.w	r1, r1, #1
 80075fc:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_2 != NULL ) 
 80075fe:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8007602:	b11a      	cbz	r2, 800760c <R3_2_Init+0x90>
 8007604:	6811      	ldr	r1, [r2, #0]
 8007606:	f041 0101 	orr.w	r1, r1, #1
 800760a:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_3 != NULL ) 
 800760c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8007610:	b11a      	cbz	r2, 800761a <R3_2_Init+0x9e>
 8007612:	6811      	ldr	r1, [r2, #0]
 8007614:	f041 0101 	orr.w	r1, r1, #1
 8007618:	6011      	str	r1, [r2, #0]
    if ( COMP_OCPAx != NULL )
 800761a:	f1bb 0f00 	cmp.w	fp, #0
 800761e:	d017      	beq.n	8007650 <R3_2_Init+0xd4>
      if (( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE ) && (DAC_OCPAx != MC_NULL))
 8007620:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
 8007624:	2a01      	cmp	r2, #1
 8007626:	d007      	beq.n	8007638 <R3_2_Init+0xbc>
 8007628:	9a00      	ldr	r2, [sp, #0]
 800762a:	b12a      	cbz	r2, 8007638 <R3_2_Init+0xbc>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800762c:	4611      	mov	r1, r2
 800762e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007630:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 8007634:	f7ff ff58 	bl	80074e8 <R3_2_SetAOReferenceVoltage>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8007638:	f8db 3000 	ldr.w	r3, [fp]
 800763c:	f043 0301 	orr.w	r3, r3, #1
 8007640:	f8cb 3000 	str.w	r3, [fp]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8007644:	f8db 3000 	ldr.w	r3, [fp]
 8007648:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800764c:	f8cb 3000 	str.w	r3, [fp]
    if ( COMP_OCPBx != NULL )
 8007650:	f1ba 0f00 	cmp.w	sl, #0
 8007654:	d018      	beq.n	8007688 <R3_2_Init+0x10c>
      if (( pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE ) && (DAC_OCPBx != MC_NULL))
 8007656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007658:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 800765c:	2a01      	cmp	r2, #1
 800765e:	d007      	beq.n	8007670 <R3_2_Init+0xf4>
 8007660:	9a01      	ldr	r2, [sp, #4]
 8007662:	b12a      	cbz	r2, 8007670 <R3_2_Init+0xf4>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8007664:	4611      	mov	r1, r2
 8007666:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007668:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 800766c:	f7ff ff3c 	bl	80074e8 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8007670:	f8da 3000 	ldr.w	r3, [sl]
 8007674:	f043 0301 	orr.w	r3, r3, #1
 8007678:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800767c:	f8da 3000 	ldr.w	r3, [sl]
 8007680:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007684:	f8ca 3000 	str.w	r3, [sl]
    if ( COMP_OCPCx != NULL )
 8007688:	f1b9 0f00 	cmp.w	r9, #0
 800768c:	d018      	beq.n	80076c0 <R3_2_Init+0x144>
      if (( pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE )  && (DAC_OCPCx != MC_NULL))
 800768e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007690:	f893 20bf 	ldrb.w	r2, [r3, #191]	; 0xbf
 8007694:	2a01      	cmp	r2, #1
 8007696:	d007      	beq.n	80076a8 <R3_2_Init+0x12c>
 8007698:	9a02      	ldr	r2, [sp, #8]
 800769a:	b12a      	cbz	r2, 80076a8 <R3_2_Init+0x12c>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800769c:	4611      	mov	r1, r2
 800769e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80076a0:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 80076a4:	f7ff ff20 	bl	80074e8 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80076a8:	f8d9 3000 	ldr.w	r3, [r9]
 80076ac:	f043 0301 	orr.w	r3, r3, #1
 80076b0:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80076b4:	f8d9 3000 	ldr.w	r3, [r9]
 80076b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076bc:	f8c9 3000 	str.w	r3, [r9]
    if ( COMP_OVPx != NULL )
 80076c0:	f1b8 0f00 	cmp.w	r8, #0
 80076c4:	d018      	beq.n	80076f8 <R3_2_Init+0x17c>
      if (( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE ) && (DAC_OVPx != MC_NULL))
 80076c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076c8:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 80076cc:	2a01      	cmp	r2, #1
 80076ce:	d007      	beq.n	80076e0 <R3_2_Init+0x164>
 80076d0:	9a03      	ldr	r2, [sp, #12]
 80076d2:	b12a      	cbz	r2, 80076e0 <R3_2_Init+0x164>
          R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 80076d4:	4611      	mov	r1, r2
 80076d6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80076d8:	f8b3 20b8 	ldrh.w	r2, [r3, #184]	; 0xb8
 80076dc:	f7ff ff04 	bl	80074e8 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80076e0:	f8d8 3000 	ldr.w	r3, [r8]
 80076e4:	f043 0301 	orr.w	r3, r3, #1
 80076e8:	f8c8 3000 	str.w	r3, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80076ec:	f8d8 3000 	ldr.w	r3, [r8]
 80076f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076f4:	f8c8 3000 	str.w	r3, [r8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80076f8:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled (ADCx_1) == 0)
 80076fa:	07d8      	lsls	r0, r3, #31
 80076fc:	d56c      	bpl.n	80077d8 <R3_2_Init+0x25c>
 80076fe:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 8007700:	07d9      	lsls	r1, r3, #31
 8007702:	d575      	bpl.n	80077f0 <R3_2_Init+0x274>
  volatile uint32_t Brk2Timeout = 1000;
 8007704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007708:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800770a:	6823      	ldr	r3, [r4, #0]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 800770c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800770e:	f023 0301 	bic.w	r3, r3, #1
 8007712:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007714:	6863      	ldr	r3, [r4, #4]
 8007716:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800771a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800771e:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007720:	69a3      	ldr	r3, [r4, #24]
 8007722:	f043 0308 	orr.w	r3, r3, #8
 8007726:	61a3      	str	r3, [r4, #24]
 8007728:	69a3      	ldr	r3, [r4, #24]
 800772a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800772e:	61a3      	str	r3, [r4, #24]
 8007730:	69e3      	ldr	r3, [r4, #28]
 8007732:	f043 0308 	orr.w	r3, r3, #8
 8007736:	61e3      	str	r3, [r4, #28]
 8007738:	69e3      	ldr	r3, [r4, #28]
 800773a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800773e:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007740:	6963      	ldr	r3, [r4, #20]
 8007742:	f043 0301 	orr.w	r3, r3, #1
 8007746:	6163      	str	r3, [r4, #20]
 8007748:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 800774c:	2b02      	cmp	r3, #2
 800774e:	d029      	beq.n	80077a4 <R3_2_Init+0x228>
    if ( pHandle->_Super.Motor == M1 )
 8007750:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007754:	b92b      	cbnz	r3, 8007762 <R3_2_Init+0x1e6>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 8007756:	f892 30bb 	ldrb.w	r3, [r2, #187]	; 0xbb
 800775a:	2b01      	cmp	r3, #1
 800775c:	d030      	beq.n	80077c0 <R3_2_Init+0x244>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800775e:	2b03      	cmp	r3, #3
 8007760:	d04a      	beq.n	80077f8 <R3_2_Init+0x27c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8007762:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8007766:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8007768:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 800776c:	b16b      	cbz	r3, 800778a <R3_2_Init+0x20e>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800776e:	6923      	ldr	r3, [r4, #16]
 8007770:	05da      	lsls	r2, r3, #23
 8007772:	d50a      	bpl.n	800778a <R3_2_Init+0x20e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8007774:	f46f 7280 	mvn.w	r2, #256	; 0x100
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 8007778:	9b05      	ldr	r3, [sp, #20]
 800777a:	b133      	cbz	r3, 800778a <R3_2_Init+0x20e>
 800777c:	6122      	str	r2, [r4, #16]
      Brk2Timeout--;
 800777e:	9b05      	ldr	r3, [sp, #20]
 8007780:	3b01      	subs	r3, #1
 8007782:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8007784:	6923      	ldr	r3, [r4, #16]
 8007786:	05db      	lsls	r3, r3, #23
 8007788:	d4f6      	bmi.n	8007778 <R3_2_Init+0x1fc>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800778a:	68e3      	ldr	r3, [r4, #12]
 800778c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007790:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 8007792:	6a23      	ldr	r3, [r4, #32]
 8007794:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8007798:	f043 0305 	orr.w	r3, r3, #5
 800779c:	6223      	str	r3, [r4, #32]
}
 800779e:	b007      	add	sp, #28
 80077a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 80077a4:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d109      	bne.n	80077c0 <R3_2_Init+0x244>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 80077ac:	f892 10bb 	ldrb.w	r1, [r2, #187]	; 0xbb
 80077b0:	2903      	cmp	r1, #3
 80077b2:	d105      	bne.n	80077c0 <R3_2_Init+0x244>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80077b4:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80077b6:	6963      	ldr	r3, [r4, #20]
 80077b8:	f043 0301 	orr.w	r3, r3, #1
 80077bc:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80077be:	6321      	str	r1, [r4, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 80077c0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80077c4:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 80077c6:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80077c8:	f06f 0380 	mvn.w	r3, #128	; 0x80
 80077cc:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 80077ce:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1cb      	bne.n	800776e <R3_2_Init+0x1f2>
 80077d6:	e7d8      	b.n	800778a <R3_2_Init+0x20e>
      R3_2_ADCxInit (ADCx_1);
 80077d8:	4628      	mov	r0, r5
 80077da:	f7ff fb8b 	bl	8006ef4 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80077de:	2340      	movs	r3, #64	; 0x40
 80077e0:	602b      	str	r3, [r5, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 80077e2:	686b      	ldr	r3, [r5, #4]
 80077e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077e8:	606b      	str	r3, [r5, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80077ea:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 80077ec:	07d9      	lsls	r1, r3, #31
 80077ee:	d489      	bmi.n	8007704 <R3_2_Init+0x188>
      R3_2_ADCxInit (ADCx_2);
 80077f0:	4630      	mov	r0, r6
 80077f2:	f7ff fb7f 	bl	8006ef4 <R3_2_ADCxInit>
 80077f6:	e785      	b.n	8007704 <R3_2_Init+0x188>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80077f8:	2101      	movs	r1, #1
 80077fa:	6321      	str	r1, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80077fc:	6961      	ldr	r1, [r4, #20]
 80077fe:	f041 0101 	orr.w	r1, r1, #1
 8007802:	6161      	str	r1, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007804:	6323      	str	r3, [r4, #48]	; 0x30
}
 8007806:	e7ac      	b.n	8007762 <R3_2_Init+0x1e6>
 8007808:	e0042000 	.word	0xe0042000
 800780c:	40012c00 	.word	0x40012c00

08007810 <R3_2_CurrentReadingPolarization>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007810:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8007812:	4946      	ldr	r1, [pc, #280]	; (800792c <R3_2_CurrentReadingPolarization+0x11c>)
{
 8007814:	b5f0      	push	{r4, r5, r6, r7, lr}
  pHandle->PhaseAOffset = 0u;
 8007816:	2200      	movs	r2, #0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007818:	689d      	ldr	r5, [r3, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800781a:	e9d3 7600 	ldrd	r7, r6, [r3]
  pHandle->PolarizationCounter = 0u;
 800781e:	f880 206c 	strb.w	r2, [r0, #108]	; 0x6c
  CLEAR_BIT(TIMx->CCER, Channels);
 8007822:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 8007824:	65c2      	str	r2, [r0, #92]	; 0x5c
 8007826:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 800782a:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 800782e:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8007832:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8007834:	4b3e      	ldr	r3, [pc, #248]	; (8007930 <R3_2_CurrentReadingPolarization+0x120>)
 8007836:	6183      	str	r3, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8007838:	2280      	movs	r2, #128	; 0x80
  pHandle->PolarizationSector=SECTOR_5;
 800783a:	2304      	movs	r3, #4
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 800783c:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
{
 8007840:	b083      	sub	sp, #12
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8007842:	6041      	str	r1, [r0, #4]
  pHandle->PolarizationSector=SECTOR_5;
 8007844:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_5;   
 8007848:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
{
 800784c:	4604      	mov	r4, r0
  R3_2_SwitchOnPWM( &pHandle->_Super );
 800784e:	f7ff fd29 	bl	80072a4 <R3_2_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 8007852:	4a38      	ldr	r2, [pc, #224]	; (8007934 <R3_2_CurrentReadingPolarization+0x124>)
 8007854:	686b      	ldr	r3, [r5, #4]
 8007856:	4013      	ands	r3, r2
 8007858:	2b70      	cmp	r3, #112	; 0x70
 800785a:	d1fb      	bne.n	8007854 <R3_2_CurrentReadingPolarization+0x44>
  MODIFY_REG(ADCx->CR,
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	4936      	ldr	r1, [pc, #216]	; (8007938 <R3_2_CurrentReadingPolarization+0x128>)
  waitForPolarizationEnd( TIMx,
 8007860:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8007862:	400a      	ands	r2, r1
 8007864:	f042 0208 	orr.w	r2, r2, #8
 8007868:	60ba      	str	r2, [r7, #8]
 800786a:	68b3      	ldr	r3, [r6, #8]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800786c:	4f33      	ldr	r7, [pc, #204]	; (800793c <R3_2_CurrentReadingPolarization+0x12c>)
 800786e:	400b      	ands	r3, r1
 8007870:	f043 0308 	orr.w	r3, r3, #8
 8007874:	60b3      	str	r3, [r6, #8]
  waitForPolarizationEnd( TIMx,
 8007876:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800787a:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800787e:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
 8007882:	4628      	mov	r0, r5
 8007884:	e9cd 3100 	strd	r3, r1, [sp]
 8007888:	f7ff f9b6 	bl	8006bf8 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 800788c:	4620      	mov	r0, r4
 800788e:	f7ff fd53 	bl	8007338 <R3_2_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 8007892:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 8007894:	4a2a      	ldr	r2, [pc, #168]	; (8007940 <R3_2_CurrentReadingPolarization+0x130>)
 8007896:	6062      	str	r2, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8007898:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 800789a:	f884 606c 	strb.w	r6, [r4, #108]	; 0x6c
  pHandle->PolarizationSector=SECTOR_1;
 800789e:	f884 606d 	strb.w	r6, [r4, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_1;   
 80078a2:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 80078a6:	f7ff fcfd 	bl	80072a4 <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 80078aa:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80078ac:	e9dd 3100 	ldrd	r3, r1, [sp]
 80078b0:	f892 20bb 	ldrb.w	r2, [r2, #187]	; 0xbb
 80078b4:	4628      	mov	r0, r5
 80078b6:	f7ff f99f 	bl	8006bf8 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 80078ba:	4620      	mov	r0, r4
 80078bc:	f7ff fd3c 	bl	8007338 <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80078c0:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 80078c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 80078c6:	481f      	ldr	r0, [pc, #124]	; (8007944 <R3_2_CurrentReadingPolarization+0x134>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 80078c8:	6067      	str	r7, [r4, #4]
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 80078ca:	0909      	lsrs	r1, r1, #4
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80078cc:	0912      	lsrs	r2, r2, #4
 80078ce:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 80078d2:	091b      	lsrs	r3, r3, #4
 80078d4:	6663      	str	r3, [r4, #100]	; 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80078d6:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 80078d8:	61a0      	str	r0, [r4, #24]
 80078da:	f023 0308 	bic.w	r3, r3, #8
 80078de:	61ab      	str	r3, [r5, #24]
 80078e0:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 80078e2:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80078e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078ea:	61aa      	str	r2, [r5, #24]
 80078ec:	69ea      	ldr	r2, [r5, #28]
 80078ee:	f022 0208 	bic.w	r2, r2, #8
 80078f2:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80078f4:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80078f6:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80078f8:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80078fa:	69ab      	ldr	r3, [r5, #24]
 80078fc:	f043 0308 	orr.w	r3, r3, #8
 8007900:	61ab      	str	r3, [r5, #24]
 8007902:	69ab      	ldr	r3, [r5, #24]
 8007904:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007908:	61ab      	str	r3, [r5, #24]
 800790a:	69eb      	ldr	r3, [r5, #28]
 800790c:	f043 0308 	orr.w	r3, r3, #8
 8007910:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007912:	6a2b      	ldr	r3, [r5, #32]
 8007914:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8007918:	f043 0305 	orr.w	r3, r3, #5
  pHandle->_Super.Sector=SECTOR_5;
 800791c:	2204      	movs	r2, #4
 800791e:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 8007920:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
  pHandle->_Super.Sector=SECTOR_5;
 8007924:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
}
 8007928:	b003      	add	sp, #12
 800792a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800792c:	080071c5 	.word	0x080071c5
 8007930:	08007115 	.word	0x08007115
 8007934:	02000070 	.word	0x02000070
 8007938:	7fffffc0 	.word	0x7fffffc0
 800793c:	08006fa9 	.word	0x08006fa9
 8007940:	08007211 	.word	0x08007211
 8007944:	08007151 	.word	0x08007151

08007948 <R3_2_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007948:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 800794a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800794e:	4604      	mov	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007950:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007954:	e9d2 1800 	ldrd	r1, r8, [r2]
  if ( OPAMPParams != NULL )
 8007958:	2800      	cmp	r0, #0
 800795a:	d033      	beq.n	80079c4 <R3_2_TIMx_UP_IRQHandler+0x7c>
    while (ADCx_1->JSQR != 0x0u)
 800795c:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1fc      	bne.n	800795c <R3_2_TIMx_UP_IRQHandler+0x14>
    Opamp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8007962:	f894 c03a 	ldrb.w	ip, [r4, #58]	; 0x3a
 8007966:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 800796a:	68df      	ldr	r7, [r3, #12]
    if (Opamp != NULL )
 800796c:	b12f      	cbz	r7, 800797a <R3_2_TIMx_UP_IRQHandler+0x32>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 800796e:	6838      	ldr	r0, [r7, #0]
 8007970:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8007972:	f420 7086 	bic.w	r0, r0, #268	; 0x10c
 8007976:	4330      	orrs	r0, r6
 8007978:	6038      	str	r0, [r7, #0]
     Opamp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 800797a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    if (Opamp != NULL )
 800797c:	b13f      	cbz	r7, 800798e <R3_2_TIMx_UP_IRQHandler+0x46>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 800797e:	6838      	ldr	r0, [r7, #0]
 8007980:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
 8007984:	f420 7386 	bic.w	r3, r0, #268	; 0x10c
 8007988:	ea43 030e 	orr.w	r3, r3, lr
 800798c:	603b      	str	r3, [r7, #0]
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800798e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8007992:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8007996:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007998:	f8d2 7094 	ldr.w	r7, [r2, #148]	; 0x94
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800799c:	4318      	orrs	r0, r3
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800799e:	433b      	orrs	r3, r7
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80079a0:	64c8      	str	r0, [r1, #76]	; 0x4c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80079a2:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80079a6:	686b      	ldr	r3, [r5, #4]
 80079a8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80079ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079b0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80079b4:	2280      	movs	r2, #128	; 0x80
 80079b6:	606b      	str	r3, [r5, #4]
}
 80079b8:	f104 0046 	add.w	r0, r4, #70	; 0x46
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80079bc:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
}
 80079c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c4:	f894 c03a 	ldrb.w	ip, [r4, #58]	; 0x3a
 80079c8:	e7e1      	b.n	800798e <R3_2_TIMx_UP_IRQHandler+0x46>
 80079ca:	bf00      	nop

080079cc <R3_2_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 80079cc:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80079d0:	b923      	cbnz	r3, 80079dc <R3_2_BRK2_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80079d2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80079d4:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
 80079d8:	2a02      	cmp	r2, #2
 80079da:	d004      	beq.n	80079e6 <R3_2_BRK2_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 80079dc:	2301      	movs	r3, #1
 80079de:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 80079e2:	3046      	adds	r0, #70	; 0x46
 80079e4:	4770      	bx	lr
{
 80079e6:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80079e8:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80079ec:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80079f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 80079f2:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80079f4:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80079f8:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80079fc:	628c      	str	r4, [r1, #40]	; 0x28
 80079fe:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 8007a00:	2301      	movs	r3, #1
 8007a02:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 8007a06:	bc30      	pop	{r4, r5}
 8007a08:	3046      	adds	r0, #70	; 0x46
 8007a0a:	4770      	bx	lr

08007a0c <R3_2_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007a0c:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 8007a0e:	4603      	mov	r3, r0
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007a10:	6890      	ldr	r0, [r2, #8]
 8007a12:	6c42      	ldr	r2, [r0, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 8007a14:	2101      	movs	r1, #1
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007a16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a1a:	6442      	str	r2, [r0, #68]	; 0x44
}
 8007a1c:	f103 0046 	add.w	r0, r3, #70	; 0x46
  pHandle->OverVoltageFlag = true;
 8007a20:	f883 106f 	strb.w	r1, [r3, #111]	; 0x6f
  pHandle->BrakeActionLock = true;
 8007a24:	f883 1070 	strb.w	r1, [r3, #112]	; 0x70
}
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop

08007a2c <R3_2_IsOverCurrentOccurred>:
{
 8007a2c:	4603      	mov	r3, r0
  if ( pHandle->OverVoltageFlag == true )
 8007a2e:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
 8007a32:	b160      	cbz	r0, 8007a4e <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 8007a3a:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8007a3c:	2002      	movs	r0, #2
  if ( pHandle->OverCurrentFlag == true )
 8007a3e:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 8007a42:	b11a      	cbz	r2, 8007a4c <R3_2_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 8007a44:	2200      	movs	r2, #0
    retVal |= MC_BREAK_IN;
 8007a46:	4608      	mov	r0, r1
    pHandle->OverCurrentFlag = false;
 8007a48:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
}
 8007a4c:	4770      	bx	lr
 8007a4e:	2140      	movs	r1, #64	; 0x40
 8007a50:	e7f5      	b.n	8007a3e <R3_2_IsOverCurrentOccurred+0x12>
 8007a52:	bf00      	nop

08007a54 <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8007a54:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 8007a58:	b410      	push	{r4}
  if ( pHandle->_Super.RLDetectionMode == false )
 8007a5a:	2900      	cmp	r1, #0
 8007a5c:	d13c      	bne.n	8007ad8 <R3_2_RLDetectionModeEnable+0x84>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007a5e:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8007a60:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007a62:	699a      	ldr	r2, [r3, #24]
 8007a64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007a68:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007a6c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007a70:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007a72:	6a1a      	ldr	r2, [r3, #32]
 8007a74:	f042 0201 	orr.w	r2, r2, #1
 8007a78:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007a7a:	6a1a      	ldr	r2, [r3, #32]
 8007a7c:	f022 0204 	bic.w	r2, r2, #4
 8007a80:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007a82:	6359      	str	r1, [r3, #52]	; 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8007a84:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 8007a88:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007a8a:	f103 0118 	add.w	r1, r3, #24
 8007a8e:	d031      	beq.n	8007af4 <R3_2_RLDetectionModeEnable+0xa0>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007a90:	2a02      	cmp	r2, #2
 8007a92:	d10f      	bne.n	8007ab4 <R3_2_RLDetectionModeEnable+0x60>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007a94:	699a      	ldr	r2, [r3, #24]
 8007a96:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007a9a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007a9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007aa2:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007aa4:	6a1a      	ldr	r2, [r3, #32]
 8007aa6:	f042 0210 	orr.w	r2, r2, #16
 8007aaa:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007aac:	6a1a      	ldr	r2, [r3, #32]
 8007aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ab2:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007ab4:	684a      	ldr	r2, [r1, #4]
 8007ab6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007aba:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007abe:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8007ac2:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007ac4:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8007ac6:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8007ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007acc:	621a      	str	r2, [r3, #32]
 8007ace:	6a1a      	ldr	r2, [r3, #32]
 8007ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ad4:	621a      	str	r2, [r3, #32]
 8007ad6:	65c1      	str	r1, [r0, #92]	; 0x5c
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8007ad8:	4b0f      	ldr	r3, [pc, #60]	; (8007b18 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8007ada:	4910      	ldr	r1, [pc, #64]	; (8007b1c <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007adc:	4a10      	ldr	r2, [pc, #64]	; (8007b20 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8007ade:	4c11      	ldr	r4, [pc, #68]	; (8007b24 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8007ae0:	6043      	str	r3, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 8007ae2:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8007ae4:	6144      	str	r4, [r0, #20]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007ae6:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8007aea:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 8007aee:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8007af2:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007af4:	699a      	ldr	r2, [r3, #24]
 8007af6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007afa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007afe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b02:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007b04:	6a1a      	ldr	r2, [r3, #32]
 8007b06:	f022 0210 	bic.w	r2, r2, #16
 8007b0a:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007b0c:	6a1a      	ldr	r2, [r3, #32]
 8007b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b12:	621a      	str	r2, [r3, #32]
}
 8007b14:	e7ce      	b.n	8007ab4 <R3_2_RLDetectionModeEnable+0x60>
 8007b16:	bf00      	nop
 8007b18:	08007399 	.word	0x08007399
 8007b1c:	08007439 	.word	0x08007439
 8007b20:	08007339 	.word	0x08007339
 8007b24:	080073ed 	.word	0x080073ed

08007b28 <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8007b28:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d059      	beq.n	8007be4 <R3_2_RLDetectionModeDisable+0xbc>
{
 8007b30:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007b32:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8007b34:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007b36:	699a      	ldr	r2, [r3, #24]
 8007b38:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007b3c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007b40:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007b44:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007b46:	6a1a      	ldr	r2, [r3, #32]
 8007b48:	f042 0201 	orr.w	r2, r2, #1
 8007b4c:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8007b4e:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 8007b52:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007b54:	f103 0518 	add.w	r5, r3, #24
 8007b58:	d045      	beq.n	8007be6 <R3_2_RLDetectionModeDisable+0xbe>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007b5a:	2a02      	cmp	r2, #2
 8007b5c:	d103      	bne.n	8007b66 <R3_2_RLDetectionModeDisable+0x3e>
  CLEAR_BIT(TIMx->CCER, Channels);
 8007b5e:	6a1a      	ldr	r2, [r3, #32]
 8007b60:	f022 0204 	bic.w	r2, r2, #4
 8007b64:	621a      	str	r2, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8007b66:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 8007b6a:	0849      	lsrs	r1, r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007b6c:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007b6e:	699a      	ldr	r2, [r3, #24]
 8007b70:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007b74:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007b78:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8007b7c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007b7e:	6a1a      	ldr	r2, [r3, #32]
 8007b80:	f042 0210 	orr.w	r2, r2, #16
 8007b84:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8007b86:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 8007b8a:	2a01      	cmp	r2, #1
 8007b8c:	d035      	beq.n	8007bfa <R3_2_RLDetectionModeDisable+0xd2>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007b8e:	2a02      	cmp	r2, #2
 8007b90:	d103      	bne.n	8007b9a <R3_2_RLDetectionModeDisable+0x72>
  CLEAR_BIT(TIMx->CCER, Channels);
 8007b92:	6a1a      	ldr	r2, [r3, #32]
 8007b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b98:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007b9a:	6399      	str	r1, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007b9c:	686a      	ldr	r2, [r5, #4]
 8007b9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007ba2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007ba6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007baa:	606a      	str	r2, [r5, #4]
  SET_BIT(TIMx->CCER, Channels);
 8007bac:	6a1a      	ldr	r2, [r3, #32]
 8007bae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bb2:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8007bb4:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 8007bb8:	2a01      	cmp	r2, #1
 8007bba:	d019      	beq.n	8007bf0 <R3_2_RLDetectionModeDisable+0xc8>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007bbc:	2a02      	cmp	r2, #2
 8007bbe:	d103      	bne.n	8007bc8 <R3_2_RLDetectionModeDisable+0xa0>
  CLEAR_BIT(TIMx->CCER, Channels);
 8007bc0:	6a1a      	ldr	r2, [r3, #32]
 8007bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bc6:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8007bc8:	4c0e      	ldr	r4, [pc, #56]	; (8007c04 <R3_2_RLDetectionModeDisable+0xdc>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007bca:	4a0f      	ldr	r2, [pc, #60]	; (8007c08 <R3_2_RLDetectionModeDisable+0xe0>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007bcc:	63d9      	str	r1, [r3, #60]	; 0x3c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8007bce:	4e0f      	ldr	r6, [pc, #60]	; (8007c0c <R3_2_RLDetectionModeDisable+0xe4>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8007bd0:	4d0f      	ldr	r5, [pc, #60]	; (8007c10 <R3_2_RLDetectionModeDisable+0xe8>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8007bd2:	6046      	str	r6, [r0, #4]
    pHandle->_Super.RLDetectionMode = false;
 8007bd4:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007bd6:	e9c0 2402 	strd	r2, r4, [r0, #8]
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8007bda:	6145      	str	r5, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 8007bdc:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8007be0:	bc70      	pop	{r4, r5, r6}
 8007be2:	4770      	bx	lr
 8007be4:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8007be6:	6a1a      	ldr	r2, [r3, #32]
 8007be8:	f042 0204 	orr.w	r2, r2, #4
 8007bec:	621a      	str	r2, [r3, #32]
}
 8007bee:	e7ba      	b.n	8007b66 <R3_2_RLDetectionModeDisable+0x3e>
  SET_BIT(TIMx->CCER, Channels);
 8007bf0:	6a1a      	ldr	r2, [r3, #32]
 8007bf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007bf6:	621a      	str	r2, [r3, #32]
}
 8007bf8:	e7e6      	b.n	8007bc8 <R3_2_RLDetectionModeDisable+0xa0>
  SET_BIT(TIMx->CCER, Channels);
 8007bfa:	6a1a      	ldr	r2, [r3, #32]
 8007bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c00:	621a      	str	r2, [r3, #32]
}
 8007c02:	e7ca      	b.n	8007b9a <R3_2_RLDetectionModeDisable+0x72>
 8007c04:	080072a5 	.word	0x080072a5
 8007c08:	08007339 	.word	0x08007339
 8007c0c:	08006fa9 	.word	0x08006fa9
 8007c10:	08007255 	.word	0x08007255

08007c14 <R3_2_RLDetectionModeSetDuty>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007c14:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007c16:	689b      	ldr	r3, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007c18:	69da      	ldr	r2, [r3, #28]
{
 8007c1a:	b470      	push	{r4, r5, r6}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007c1c:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8007c20:	f8b0 6056 	ldrh.w	r6, [r0, #86]	; 0x56
 8007c24:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007c28:	fb01 f104 	mul.w	r1, r1, r4
  pHandle->ADCRegularLocked=true;
 8007c2c:	2501      	movs	r5, #1
 8007c2e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007c32:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007c36:	0c09      	lsrs	r1, r1, #16
  LL_TIM_OC_SetCompareCH3(TIMx, ( uint32_t )pHandle->_Super.Toff);
 8007c38:	f8b0 5058 	ldrh.w	r5, [r0, #88]	; 0x58
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8007c3c:	8641      	strh	r1, [r0, #50]	; 0x32
 8007c3e:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8007c42:	1ba4      	subs	r4, r4, r6
 8007c44:	61da      	str	r2, [r3, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007c46:	641c      	str	r4, [r3, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007c48:	63dd      	str	r5, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007c4a:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007c4c:	685a      	ldr	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007c4e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8007c50:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8007c54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007c58:	f042 0270 	orr.w	r2, r2, #112	; 0x70
  pHdl->Sector = SECTOR_4;
 8007c5c:	2403      	movs	r4, #3
 8007c5e:	605a      	str	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007c60:	2901      	cmp	r1, #1
  pHdl->Sector = SECTOR_4;
 8007c62:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007c66:	685b      	ldr	r3, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007c68:	d007      	beq.n	8007c7a <R3_2_RLDetectionModeSetDuty+0x66>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007c6a:	4a06      	ldr	r2, [pc, #24]	; (8007c84 <R3_2_RLDetectionModeSetDuty+0x70>)
 8007c6c:	4213      	tst	r3, r2
    hAux = MC_FOC_DURATION;
 8007c6e:	bf14      	ite	ne
 8007c70:	2101      	movne	r1, #1
 8007c72:	2100      	moveq	r1, #0
}
 8007c74:	4608      	mov	r0, r1
 8007c76:	bc70      	pop	{r4, r5, r6}
 8007c78:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	8703      	strh	r3, [r0, #56]	; 0x38
}
 8007c7e:	bc70      	pop	{r4, r5, r6}
 8007c80:	4608      	mov	r0, r1
 8007c82:	4770      	bx	lr
 8007c84:	02000070 	.word	0x02000070

08007c88 <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 8007c88:	b430      	push	{r4, r5}
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8007c8a:	8b82      	ldrh	r2, [r0, #28]
 8007c8c:	8b44      	ldrh	r4, [r0, #26]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007c8e:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8007c90:	4414      	add	r4, r2
 8007c92:	0864      	lsrs	r4, r4, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007c94:	b14b      	cbz	r3, 8007caa <RVBS_Clear+0x22>
  {
    pHandle->aBuffer[index] = aux;
 8007c96:	6a05      	ldr	r5, [r0, #32]
 8007c98:	2300      	movs	r3, #0
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	f825 4012 	strh.w	r4, [r5, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007ca2:	8b01      	ldrh	r1, [r0, #24]
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	4291      	cmp	r1, r2
 8007ca8:	d8f7      	bhi.n	8007c9a <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
 8007caa:	2300      	movs	r3, #0
 8007cac:	f364 030f 	bfi	r3, r4, #0, #16
 8007cb0:	f364 431f 	bfi	r3, r4, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8007cb4:	2200      	movs	r2, #0
}
 8007cb6:	bc30      	pop	{r4, r5}
  pHandle->_Super.LatestConv = aux;
 8007cb8:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 8007cba:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8007cbe:	4770      	bx	lr

08007cc0 <RVBS_Init>:
{
 8007cc0:	b510      	push	{r4, lr}
 8007cc2:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8007cc4:	300c      	adds	r0, #12
 8007cc6:	f7fa fa01 	bl	80020cc <RCM_RegisterRegConv>
 8007cca:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f7ff ffda 	bl	8007c88 <RVBS_Clear>
}
 8007cd4:	bd10      	pop	{r4, pc}
 8007cd6:	bf00      	nop

08007cd8 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8007cd8:	88c3      	ldrh	r3, [r0, #6]
 8007cda:	8b42      	ldrh	r2, [r0, #26]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d305      	bcc.n	8007cec <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8007ce0:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8007ce2:	4298      	cmp	r0, r3
 8007ce4:	bf8c      	ite	hi
 8007ce6:	2004      	movhi	r0, #4
 8007ce8:	2000      	movls	r0, #0
 8007cea:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8007cec:	2002      	movs	r0, #2
  }
  return fault;
}
 8007cee:	4770      	bx	lr

08007cf0 <RVBS_CalcAvVbus>:
{
 8007cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf2:	4605      	mov	r5, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8007cf4:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8007cf8:	f7fa fabc 	bl	8002274 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8007cfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d00:	4298      	cmp	r0, r3
 8007d02:	d01c      	beq.n	8007d3e <RVBS_CalcAvVbus+0x4e>
    pHandle->aBuffer[pHandle->index] = hAux;
 8007d04:	6a2f      	ldr	r7, [r5, #32]
 8007d06:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8007d0a:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007d0e:	8b2e      	ldrh	r6, [r5, #24]
 8007d10:	b1d6      	cbz	r6, 8007d48 <RVBS_CalcAvVbus+0x58>
 8007d12:	2300      	movs	r3, #0
    wtemp = 0;
 8007d14:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8007d16:	f837 4013 	ldrh.w	r4, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	b2d9      	uxtb	r1, r3
 8007d1e:	42b1      	cmp	r1, r6
      wtemp += pHandle->aBuffer[i];
 8007d20:	4422      	add	r2, r4
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007d22:	460b      	mov	r3, r1
 8007d24:	d3f7      	bcc.n	8007d16 <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8007d26:	fbb2 f2f6 	udiv	r2, r2, r6
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8007d2a:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8007d2e:	80ea      	strh	r2, [r5, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8007d30:	3e01      	subs	r6, #1
 8007d32:	42b3      	cmp	r3, r6
    pHandle->_Super.LatestConv = hAux;
 8007d34:	80a8      	strh	r0, [r5, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8007d36:	da09      	bge.n	8007d4c <RVBS_CalcAvVbus+0x5c>
      pHandle->index++;
 8007d38:	3301      	adds	r3, #1
 8007d3a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8007d3e:	4628      	mov	r0, r5
 8007d40:	f7ff ffca 	bl	8007cd8 <RVBS_CheckFaultState>
 8007d44:	8128      	strh	r0, [r5, #8]
}
 8007d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8007d48:	80ee      	strh	r6, [r5, #6]
    pHandle->_Super.LatestConv = hAux;
 8007d4a:	80a8      	strh	r0, [r5, #4]
      pHandle->index = 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8007d52:	4628      	mov	r0, r5
 8007d54:	f7ff ffc0 	bl	8007cd8 <RVBS_CheckFaultState>
 8007d58:	8128      	strh	r0, [r5, #8]
}
 8007d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d5c <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8007d5c:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8007d5e:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8007d60:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8007d64:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8007d68:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8007d6a:	4770      	bx	lr

08007d6c <REMNG_Calc>:
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 8007d6c:	e9d0 3102 	ldrd	r3, r1, [r0, #8]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8007d70:	2901      	cmp	r1, #1
 8007d72:	d90c      	bls.n	8007d8e <REMNG_Calc+0x22>
{
 8007d74:	b410      	push	{r4}
 8007d76:	e9d0 4204 	ldrd	r4, r2, [r0, #16]
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 8007d7a:	3901      	subs	r1, #1
    current_ref += pHandle->IncDecAmount;
 8007d7c:	4423      	add	r3, r4
    pHandle->RampRemainingStep --;
 8007d7e:	60c1      	str	r1, [r0, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 8007d80:	6083      	str	r3, [r0, #8]
 8007d82:	fb93 f2f2 	sdiv	r2, r3, r2
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
#endif

  return ret_val;
}
 8007d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	4770      	bx	lr
  else if ( pHandle->RampRemainingStep == 1u )
 8007d8e:	d005      	beq.n	8007d9c <REMNG_Calc+0x30>
 8007d90:	6942      	ldr	r2, [r0, #20]
  pHandle->Ext = current_ref;
 8007d92:	6083      	str	r3, [r0, #8]
 8007d94:	fb93 f2f2 	sdiv	r2, r3, r2
}
 8007d98:	4610      	mov	r0, r2
 8007d9a:	4770      	bx	lr
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007d9c:	6842      	ldr	r2, [r0, #4]
 8007d9e:	6943      	ldr	r3, [r0, #20]
    pHandle->RampRemainingStep = 0u;
 8007da0:	2100      	movs	r1, #0
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007da2:	fb03 f302 	mul.w	r3, r3, r2
    pHandle->RampRemainingStep = 0u;
 8007da6:	60c1      	str	r1, [r0, #12]
  pHandle->Ext = current_ref;
 8007da8:	6083      	str	r3, [r0, #8]
}
 8007daa:	4610      	mov	r0, r2
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop

08007db0 <REMNG_RampCompleted>:
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
  bool retVal = false;
  if ( pHandle->RampRemainingStep == 0u )
 8007db0:	68c0      	ldr	r0, [r0, #12]
  {
    retVal = true;
  }
  return retVal;
}
 8007db2:	fab0 f080 	clz	r0, r0
 8007db6:	0940      	lsrs	r0, r0, #5
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop

08007dbc <getScalingFactor>:
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
  {
    aux = -Target;
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	bfb8      	it	lt
 8007dc0:	4240      	neglt	r0, r0
{
 8007dc2:	2301      	movs	r3, #1
  {
    TargetAbs = ( uint32_t )( Target );
  }
  for ( i = 1u; i < 32u; i++ )
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8007dc4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007dc8:	e002      	b.n	8007dd0 <getScalingFactor+0x14>
 8007dca:	3301      	adds	r3, #1
  for ( i = 1u; i < 32u; i++ )
 8007dcc:	2b20      	cmp	r3, #32
 8007dce:	d007      	beq.n	8007de0 <getScalingFactor+0x24>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8007dd0:	fa21 f203 	lsr.w	r2, r1, r3
    if ( TargetAbs >= limit )
 8007dd4:	4290      	cmp	r0, r2
 8007dd6:	d3f8      	bcc.n	8007dca <getScalingFactor+0xe>
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	2001      	movs	r0, #1
 8007ddc:	4098      	lsls	r0, r3
    {
      break;
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
}
 8007dde:	4770      	bx	lr
 8007de0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop

08007de8 <REMNG_ExecRamp>:
{
 8007de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dec:	4604      	mov	r4, r0
 8007dee:	460d      	mov	r5, r1
  if ( Durationms == 0u )
 8007df0:	4690      	mov	r8, r2
 8007df2:	b95a      	cbnz	r2, 8007e0c <REMNG_ExecRamp+0x24>
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8007df4:	4608      	mov	r0, r1
 8007df6:	f7ff ffe1 	bl	8007dbc <getScalingFactor>
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007dfa:	fb05 f500 	mul.w	r5, r5, r0
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8007dfe:	6160      	str	r0, [r4, #20]
    pHandle->IncDecAmount = 0;
 8007e00:	e9c4 8803 	strd	r8, r8, [r4, #12]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007e04:	60a5      	str	r5, [r4, #8]
}
 8007e06:	2001      	movs	r0, #1
 8007e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8007e0c:	6943      	ldr	r3, [r0, #20]
 8007e0e:	6887      	ldr	r7, [r0, #8]
 8007e10:	fb97 f7f3 	sdiv	r7, r7, r3
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 8007e14:	1bce      	subs	r6, r1, r7
 8007e16:	4630      	mov	r0, r6
 8007e18:	f7ff ffd0 	bl	8007dbc <getScalingFactor>
 8007e1c:	4682      	mov	sl, r0
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 8007e1e:	4638      	mov	r0, r7
 8007e20:	f7ff ffcc 	bl	8007dbc <getScalingFactor>
 8007e24:	4681      	mov	r9, r0
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8007e26:	4628      	mov	r0, r5
 8007e28:	f7ff ffc8 	bl	8007dbc <getScalingFactor>
    if ( wScalingFactor <  wScalingFactor2 )
 8007e2c:	45ca      	cmp	sl, r9
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8007e2e:	4603      	mov	r3, r0
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8007e30:	6821      	ldr	r1, [r4, #0]
    pHandle->TargetFinal = TargetFinal;
 8007e32:	6065      	str	r5, [r4, #4]
 8007e34:	bf2c      	ite	cs
 8007e36:	4648      	movcs	r0, r9
 8007e38:	4650      	movcc	r0, sl
      if ( wScalingFactor2 < wScalingFactor3 )
 8007e3a:	4298      	cmp	r0, r3
 8007e3c:	bf28      	it	cs
 8007e3e:	4618      	movcs	r0, r3
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8007e40:	fb01 f308 	mul.w	r3, r1, r8
    aux /= 1000u;
 8007e44:	4908      	ldr	r1, [pc, #32]	; (8007e68 <REMNG_ExecRamp+0x80>)
    pHandle->ScalingFactor = wScalingFactorMin;
 8007e46:	6160      	str	r0, [r4, #20]
    aux /= 1000u;
 8007e48:	fba1 2303 	umull	r2, r3, r1, r3
 8007e4c:	099b      	lsrs	r3, r3, #6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8007e4e:	fb07 f700 	mul.w	r7, r7, r0
    pHandle->RampRemainingStep++;
 8007e52:	3301      	adds	r3, #1
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 8007e54:	fb00 f006 	mul.w	r0, r0, r6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8007e58:	60a7      	str	r7, [r4, #8]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 8007e5a:	fb90 f0f3 	sdiv	r0, r0, r3
    pHandle->IncDecAmount = aux1;
 8007e5e:	e9c4 3003 	strd	r3, r0, [r4, #12]
}
 8007e62:	2001      	movs	r0, #1
 8007e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e68:	10624dd3 	.word	0x10624dd3

08007e6c <RUC_Init>:
__weak void RUC_Init( RevUpCtrl_Handle_t * pHandle,
               SpeednTorqCtrl_Handle_t * pSTC,
               VirtualSpeedSensor_Handle_t * pVSS,
               STO_Handle_t * pSNSL,
               PWMC_Handle_t * pPWM )
{
 8007e6c:	b430      	push	{r4, r5}
  pHandle->OTFSCLowside = false;
  pHandle->EnteredZone1 = false;

  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
  {
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8007e6e:	6944      	ldr	r4, [r0, #20]
{
 8007e70:	9d02      	ldr	r5, [sp, #8]
  pHandle->pSTC = pSTC;
 8007e72:	6681      	str	r1, [r0, #104]	; 0x68
  pHandle->OTFSCLowside = false;
 8007e74:	2100      	movs	r1, #0
  pHandle->pSNSL = pSNSL;
 8007e76:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
  pHandle->pPWM = pPWM;
 8007e7a:	6745      	str	r5, [r0, #116]	; 0x74
  pHandle->OTFSCLowside = false;
 8007e7c:	f8a0 1054 	strh.w	r1, [r0, #84]	; 0x54
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8007e80:	b30c      	cbz	r4, 8007ec6 <RUC_Init+0x5a>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8007e82:	68a3      	ldr	r3, [r4, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8007e84:	b30b      	cbz	r3, 8007eca <RUC_Init+0x5e>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8007e86:	689b      	ldr	r3, [r3, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8007e88:	b30b      	cbz	r3, 8007ece <RUC_Init+0x62>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8007e8a:	689b      	ldr	r3, [r3, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8007e8c:	b1c3      	cbz	r3, 8007ec0 <RUC_Init+0x54>
 8007e8e:	689b      	ldr	r3, [r3, #8]
    bPhase++;
 8007e90:	2105      	movs	r1, #5
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8007e92:	b1b3      	cbz	r3, 8007ec2 <RUC_Init+0x56>
 8007e94:	2204      	movs	r2, #4
 8007e96:	2105      	movs	r1, #5
  }
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

  pHandle->bPhaseNbr = bPhase;

  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8007e98:	8805      	ldrh	r5, [r0, #0]
 8007e9a:	4c0e      	ldr	r4, [pc, #56]	; (8007ed4 <RUC_Init+0x68>)
 8007e9c:	2364      	movs	r3, #100	; 0x64
 8007e9e:	fb03 f305 	mul.w	r3, r3, r5
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007ea2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8007ea6:	fba4 4303 	umull	r4, r3, r4, r3
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007eaa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007eae:	2400      	movs	r4, #0
  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8007eb0:	099b      	lsrs	r3, r3, #6
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007eb2:	6154      	str	r4, [r2, #20]

}
 8007eb4:	bc30      	pop	{r4, r5}
  pHandle->bPhaseNbr = bPhase;
 8007eb6:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8007eba:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
}
 8007ebe:	4770      	bx	lr
    bPhase++;
 8007ec0:	2104      	movs	r1, #4
 8007ec2:	1e4a      	subs	r2, r1, #1
 8007ec4:	e7e8      	b.n	8007e98 <RUC_Init+0x2c>
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	e7fb      	b.n	8007ec2 <RUC_Init+0x56>
 8007eca:	2102      	movs	r1, #2
 8007ecc:	e7f9      	b.n	8007ec2 <RUC_Init+0x56>
 8007ece:	2103      	movs	r1, #3
 8007ed0:	e7f7      	b.n	8007ec2 <RUC_Init+0x56>
 8007ed2:	bf00      	nop
 8007ed4:	10624dd3 	.word	0x10624dd3

08007ed8 <RUC_Clear>:
  * @param  hMotorDirection: rotor rotation direction.
  *         This parameter must be -1 or +1.
  *  @retval none
  */
__weak void RUC_Clear( RevUpCtrl_Handle_t * pHandle, int16_t hMotorDirection )
{
 8007ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  VirtualSpeedSensor_Handle_t * pVSS = pHandle->pVSS;
  SpeednTorqCtrl_Handle_t * pSTC = pHandle->pSTC;
 8007edc:	e9d0 871a 	ldrd	r8, r7, [r0, #104]	; 0x68
{
 8007ee0:	4604      	mov	r4, r0

  pHandle->hDirection = hMotorDirection;
  pHandle->EnteredZone1 = false;

  /*Initializes the rev up stages counter.*/
  pHandle->bStageCnt = 0u;
 8007ee2:	2600      	movs	r6, #0
  pHandle->hDirection = hMotorDirection;
 8007ee4:	80c1      	strh	r1, [r0, #6]
  pHandle->bOTFRelCounter = 0u;
  pHandle->OTFSCLowside = false;

  /* Calls the clear method of VSS.*/
  VSS_Clear( pVSS );
 8007ee6:	4638      	mov	r0, r7
  pHandle->bStageCnt = 0u;
 8007ee8:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
  pHandle->bOTFRelCounter = 0u;
 8007eec:	f884 6053 	strb.w	r6, [r4, #83]	; 0x53
  pHandle->OTFSCLowside = false;
 8007ef0:	f8a4 6054 	strh.w	r6, [r4, #84]	; 0x54
{
 8007ef4:	460d      	mov	r5, r1
  VSS_Clear( pVSS );
 8007ef6:	f000 fe5f 	bl	8008bb8 <VSS_Clear>

  /* Sets the STC in torque mode.*/
  STC_SetControlMode( pSTC, STC_TORQUE_MODE );
 8007efa:	4631      	mov	r1, r6
 8007efc:	4640      	mov	r0, r8
 8007efe:	f000 f90d 	bl	800811c <STC_SetControlMode>

  /* Sets the mechanical starting angle of VSS.*/
  VSS_SetMecAngle( pVSS, pHandle->hStartingMecAngle * hMotorDirection );
 8007f02:	8861      	ldrh	r1, [r4, #2]
 8007f04:	b2ad      	uxth	r5, r5
 8007f06:	fb11 f105 	smulbb	r1, r1, r5
 8007f0a:	b209      	sxth	r1, r1
 8007f0c:	4638      	mov	r0, r7
 8007f0e:	f000 feff 	bl	8008d10 <VSS_SetMecAngle>

  /* Sets to zero the starting torque of STC */
  STC_ExecRamp( pSTC, 0, 0u );
 8007f12:	4632      	mov	r2, r6
 8007f14:	4631      	mov	r1, r6
 8007f16:	4640      	mov	r0, r8
 8007f18:	f000 f904 	bl	8008124 <STC_ExecRamp>

  /* Gives the first command to STC and VSS.*/
  STC_ExecRamp( pSTC, pPhaseParams->hFinalTorque * hMotorDirection,
 8007f1c:	8a21      	ldrh	r1, [r4, #16]
 8007f1e:	89a2      	ldrh	r2, [r4, #12]
 8007f20:	fb11 f105 	smulbb	r1, r1, r5
 8007f24:	b209      	sxth	r1, r1
 8007f26:	4640      	mov	r0, r8
 8007f28:	f000 f8fc 	bl	8008124 <STC_ExecRamp>
                ( uint32_t )( pPhaseParams->hDurationms ) );

  VSS_SetMecAcceleration( pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection,
 8007f2c:	89e1      	ldrh	r1, [r4, #14]
 8007f2e:	89a2      	ldrh	r2, [r4, #12]
 8007f30:	fb11 f105 	smulbb	r1, r1, r5
 8007f34:	4638      	mov	r0, r7
 8007f36:	b209      	sxth	r1, r1
 8007f38:	f000 fef2 	bl	8008d20 <VSS_SetMecAcceleration>
                          pPhaseParams->hDurationms );

  /* Compute hPhaseRemainingTicks.*/
  pHandle->hPhaseRemainingTicks =
    ( uint16_t )( ( ( uint32_t )pPhaseParams->hDurationms *
 8007f3c:	89a0      	ldrh	r0, [r4, #12]
                    ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007f3e:	8823      	ldrh	r3, [r4, #0]
 8007f40:	4906      	ldr	r1, [pc, #24]	; (8007f5c <RUC_Clear+0x84>)

  pHandle->hPhaseRemainingTicks++;

  /*Set the next phases parameter pointer.*/
  pHandle->pCurrentPhaseParams = pPhaseParams->pNext;
 8007f42:	6962      	ldr	r2, [r4, #20]

  /*Timeout counter for PLL reset during OTF.*/
  pHandle->bResetPLLCnt = 0u;
 8007f44:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
    ( uint16_t )( ( ( uint32_t )pPhaseParams->hDurationms *
 8007f48:	fb03 f300 	mul.w	r3, r3, r0
                    ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007f4c:	fba1 1303 	umull	r1, r3, r1, r3
 8007f50:	099b      	lsrs	r3, r3, #6
  pHandle->hPhaseRemainingTicks++;
 8007f52:	3301      	adds	r3, #1
 8007f54:	80a3      	strh	r3, [r4, #4]
  pHandle->pCurrentPhaseParams = pPhaseParams->pNext;
 8007f56:	60a2      	str	r2, [r4, #8]
}
 8007f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f5c:	10624dd3 	.word	0x10624dd3

08007f60 <RUC_Exec>:
  * @brief  Main revup controller procedure executing overall programmed phases.
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  *  @retval Boolean set to false when entire revup phases have been completed.
  */
__weak bool RUC_Exec( RevUpCtrl_Handle_t * pHandle )
{
 8007f60:	b538      	push	{r3, r4, r5, lr}
  bool retVal = true;

  if ( pHandle->hPhaseRemainingTicks > 0u )
 8007f62:	8883      	ldrh	r3, [r0, #4]
{
 8007f64:	4604      	mov	r4, r0
  if ( pHandle->hPhaseRemainingTicks > 0u )
 8007f66:	bb43      	cbnz	r3, 8007fba <RUC_Exec+0x5a>

  } /* hPhaseRemainingTicks > 0 */

  if ( pHandle->hPhaseRemainingTicks == 0u )
  {
    if ( pHandle->pCurrentPhaseParams != MC_NULL )
 8007f68:	68a0      	ldr	r0, [r4, #8]
 8007f6a:	b328      	cbz	r0, 8007fb8 <RUC_Exec+0x58>
    {

      /* If it becomes zero the current phase has been completed.*/
      /* Gives the next command to STC and VSS.*/
      STC_ExecRamp( pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8007f6c:	8881      	ldrh	r1, [r0, #4]
 8007f6e:	88e3      	ldrh	r3, [r4, #6]
 8007f70:	8802      	ldrh	r2, [r0, #0]
 8007f72:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007f74:	fb11 f103 	smulbb	r1, r1, r3
 8007f78:	b209      	sxth	r1, r1
 8007f7a:	f000 f8d3 	bl	8008124 <STC_ExecRamp>
                    ( uint32_t )( pHandle->pCurrentPhaseParams->hDurationms ) );

      VSS_SetMecAcceleration( pHandle->pVSS,
                              pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8007f7e:	68a3      	ldr	r3, [r4, #8]
 8007f80:	88e5      	ldrh	r5, [r4, #6]
 8007f82:	8859      	ldrh	r1, [r3, #2]
      VSS_SetMecAcceleration( pHandle->pVSS,
 8007f84:	881a      	ldrh	r2, [r3, #0]
 8007f86:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
                              pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8007f88:	fb11 f105 	smulbb	r1, r1, r5
      VSS_SetMecAcceleration( pHandle->pVSS,
 8007f8c:	b209      	sxth	r1, r1
 8007f8e:	f000 fec7 	bl	8008d20 <VSS_SetMecAcceleration>
                              pHandle->pCurrentPhaseParams->hDurationms );

      /* Compute hPhaseRemainingTicks.*/
      pHandle->hPhaseRemainingTicks =
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 8007f92:	68a2      	ldr	r2, [r4, #8]
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007f94:	8823      	ldrh	r3, [r4, #0]
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 8007f96:	8810      	ldrh	r0, [r2, #0]
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007f98:	490b      	ldr	r1, [pc, #44]	; (8007fc8 <RUC_Exec+0x68>)
      pHandle->hPhaseRemainingTicks++;

      /*Set the next phases parameter pointer.*/
      pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext;
 8007f9a:	6892      	ldr	r2, [r2, #8]
 8007f9c:	60a2      	str	r2, [r4, #8]
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 8007f9e:	fb03 f300 	mul.w	r3, r3, r0
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007fa2:	fba1 2303 	umull	r2, r3, r1, r3

      /*Increases the rev up stages counter.*/
      pHandle->bStageCnt++;
 8007fa6:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007faa:	099b      	lsrs	r3, r3, #6
      pHandle->hPhaseRemainingTicks++;
 8007fac:	3301      	adds	r3, #1
      pHandle->bStageCnt++;
 8007fae:	3201      	adds	r2, #1
      pHandle->hPhaseRemainingTicks++;
 8007fb0:	80a3      	strh	r3, [r4, #4]
      pHandle->bStageCnt++;
 8007fb2:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
  bool retVal = true;
 8007fb6:	2001      	movs	r0, #1
    {
      retVal = false;
    }
  }
  return retVal;
}
 8007fb8:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->hPhaseRemainingTicks--;
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	8083      	strh	r3, [r0, #4]
  if ( pHandle->hPhaseRemainingTicks == 0u )
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0d1      	beq.n	8007f68 <RUC_Exec+0x8>
  bool retVal = true;
 8007fc4:	2001      	movs	r0, #1
}
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	10624dd3 	.word	0x10624dd3

08007fcc <RUC_FirstAccelerationStageReached>:
  */
__weak bool RUC_FirstAccelerationStageReached( RevUpCtrl_Handle_t * pHandle )
{
  bool retVal = false;

  if ( pHandle->bStageCnt >= pHandle->bFirstAccelerationStage )
 8007fcc:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8007fd0:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
  {
    retVal = true;
  }
  return retVal;
}
 8007fd4:	4282      	cmp	r2, r0
 8007fd6:	bf34      	ite	cc
 8007fd8:	2000      	movcc	r0, #0
 8007fda:	2001      	movcs	r0, #1
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop

08007fe0 <RUC_SetPhaseDurationms>:
  *         This parameter must be set in millisecond.
  *  @retval none
  */
__weak void RUC_SetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, uint16_t hDurationms )
{
  pHandle->ParamsData[bPhase].hDurationms = hDurationms;
 8007fe0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007fe4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007fe8:	818a      	strh	r2, [r1, #12]
}
 8007fea:	4770      	bx	lr

08007fec <RUC_SetPhaseFinalMecSpeedUnit>:
  *  @retval none
  */
__weak void RUC_SetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase,
                                    int16_t hFinalMecSpeedUnit )
{
  pHandle->ParamsData[bPhase].hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007fec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007ff0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007ff4:	81ca      	strh	r2, [r1, #14]
}
 8007ff6:	4770      	bx	lr

08007ff8 <RUC_SetPhaseFinalTorque>:
  * @param  hFinalTorque: new targetted motor torque.
  *  @retval none
  */
__weak void RUC_SetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, int16_t hFinalTorque )
{
  pHandle->ParamsData[bPhase].hFinalTorque = hFinalTorque;
 8007ff8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007ffc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008000:	820a      	strh	r2, [r1, #16]
}
 8008002:	4770      	bx	lr

08008004 <RUC_GetPhaseDurationms>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns duration used in selected phase.
  */
__weak uint16_t RUC_GetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( uint16_t )pHandle->ParamsData[bPhase].hDurationms );
 8008004:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008008:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800800c:	8988      	ldrh	r0, [r1, #12]
 800800e:	4770      	bx	lr

08008010 <RUC_GetPhaseFinalMecSpeedUnit>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted rotor speed set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalMecSpeedUnit );
 8008010:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008014:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8008018:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop

08008020 <RUC_GetPhaseFinalTorque>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted motor torque set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalTorque );
 8008020:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008024:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8008028:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop

08008030 <RUC_GetNumberOfPhases>:
  *  @retval Returns number of phases relative to the programmed revup.
  */
__weak uint8_t RUC_GetNumberOfPhases( RevUpCtrl_Handle_t * pHandle )
{
  return ( ( uint8_t )pHandle->bPhaseNbr );
}
 8008030:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop

08008038 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8008038:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop

08008040 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8008040:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop

08008048 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8008048:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop

08008050 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8008050:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8008054:	8a81      	ldrh	r1, [r0, #20]
{
 8008056:	b430      	push	{r4, r5}
  if ( *pMecSpeedUnit < 0 )
 8008058:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 800805a:	bfb8      	it	lt
 800805c:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800805e:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8008060:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8008062:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8008064:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8008066:	429d      	cmp	r5, r3
 8008068:	d817      	bhi.n	800809a <SPD_IsMecSpeedReliable+0x4a>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800806a:	4299      	cmp	r1, r3
 800806c:	bf2c      	ite	cs
 800806e:	2300      	movcs	r3, #0
 8008070:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8008072:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8008076:	8b05      	ldrh	r5, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8008078:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 800807a:	bfb8      	it	lt
 800807c:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 800807e:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8008080:	428d      	cmp	r5, r1
 8008082:	d300      	bcc.n	8008086 <SPD_IsMecSpeedReliable+0x36>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8008084:	b15b      	cbz	r3, 800809e <SPD_IsMecSpeedReliable+0x4e>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8008086:	4294      	cmp	r4, r2
 8008088:	d901      	bls.n	800808e <SPD_IsMecSpeedReliable+0x3e>
    {
      bSpeedErrorNumber++;
 800808a:	3201      	adds	r2, #1
 800808c:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800808e:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 8008090:	1b10      	subs	r0, r2, r4
 8008092:	bf18      	it	ne
 8008094:	2001      	movne	r0, #1
 8008096:	bc30      	pop	{r4, r5}
 8008098:	4770      	bx	lr
    SpeedError = true;
 800809a:	2301      	movs	r3, #1
 800809c:	e7e9      	b.n	8008072 <SPD_IsMecSpeedReliable+0x22>
      bSpeedErrorNumber = 0u;
 800809e:	4294      	cmp	r4, r2
 80080a0:	bf88      	it	hi
 80080a2:	2200      	movhi	r2, #0
 80080a4:	e7f3      	b.n	800808e <SPD_IsMecSpeedReliable+0x3e>
 80080a6:	bf00      	nop

080080a8 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 80080a8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80080ac:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 80080b0:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80080b4:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 80080b8:	b200      	sxth	r0, r0
 80080ba:	4770      	bx	lr

080080bc <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 80080bc:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80080be:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80080c2:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	; 0x2c
  pHandle->Mode = pHandle->ModeDefault;
 80080c6:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
  pHandle->PISpeed = pPI;
 80080ca:	6101      	str	r1, [r0, #16]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80080cc:	0424      	lsls	r4, r4, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80080ce:	0419      	lsls	r1, r3, #16
  pHandle->TargetFinal = 0;
 80080d0:	2300      	movs	r3, #0
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80080d2:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 80080d6:	7005      	strb	r5, [r0, #0]
  pHandle->SPD = SPD_Handle;
 80080d8:	6142      	str	r2, [r0, #20]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 80080da:	bc30      	pop	{r4, r5}
  pHandle->TargetFinal = 0;
 80080dc:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 80080de:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80080e0:	6183      	str	r3, [r0, #24]
}
 80080e2:	4770      	bx	lr

080080e4 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 80080e4:	6141      	str	r1, [r0, #20]
}
 80080e6:	4770      	bx	lr

080080e8 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 80080e8:	6940      	ldr	r0, [r0, #20]
 80080ea:	4770      	bx	lr

080080ec <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 80080ec:	7803      	ldrb	r3, [r0, #0]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d000      	beq.n	80080f4 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 80080f2:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 80080f4:	6900      	ldr	r0, [r0, #16]
 80080f6:	2100      	movs	r1, #0
 80080f8:	f7fe bcc0 	b.w	8006a7c <PID_SetIntegralTerm>

080080fc <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 80080fc:	6840      	ldr	r0, [r0, #4]
 80080fe:	2800      	cmp	r0, #0
 8008100:	bfbc      	itt	lt
 8008102:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8008106:	30ff      	addlt	r0, #255	; 0xff
}
 8008108:	1400      	asrs	r0, r0, #16
 800810a:	4770      	bx	lr

0800810c <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800810c:	6880      	ldr	r0, [r0, #8]
 800810e:	2800      	cmp	r0, #0
 8008110:	bfbc      	itt	lt
 8008112:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8008116:	30ff      	addlt	r0, #255	; 0xff
}
 8008118:	1400      	asrs	r0, r0, #16
 800811a:	4770      	bx	lr

0800811c <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800811c:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 800811e:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008120:	60c3      	str	r3, [r0, #12]
}
 8008122:	4770      	bx	lr

08008124 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8008124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8008126:	7806      	ldrb	r6, [r0, #0]
{
 8008128:	4604      	mov	r4, r0
 800812a:	460d      	mov	r5, r1
 800812c:	4617      	mov	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800812e:	b326      	cbz	r6, 800817a <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008130:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008132:	8be1      	ldrh	r1, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008134:	2800      	cmp	r0, #0
 8008136:	bfbc      	itt	lt
 8008138:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800813c:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800813e:	428d      	cmp	r5, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008140:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008144:	dd01      	ble.n	800814a <STC_ExecRamp+0x26>
      AllowedRange = false;
 8008146:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8008148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800814a:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
 800814e:	42a9      	cmp	r1, r5
 8008150:	dcf9      	bgt.n	8008146 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8008152:	8c23      	ldrh	r3, [r4, #32]
 8008154:	429d      	cmp	r5, r3
 8008156:	da03      	bge.n	8008160 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8008158:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 800815c:	42ab      	cmp	r3, r5
 800815e:	dbf2      	blt.n	8008146 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8008160:	b9af      	cbnz	r7, 800818e <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8008162:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8008164:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8008166:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8008168:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800816c:	bf0c      	ite	eq
 800816e:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8008170:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8008172:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8008174:	61a3      	str	r3, [r4, #24]
 8008176:	2001      	movs	r0, #1
}
 8008178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800817a:	f7ff ffc7 	bl	800810c <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800817e:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 8008180:	42b5      	cmp	r5, r6
 8008182:	dce0      	bgt.n	8008146 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8008184:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8008188:	42ab      	cmp	r3, r5
 800818a:	dcdc      	bgt.n	8008146 <STC_ExecRamp+0x22>
 800818c:	e7e8      	b.n	8008160 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800818e:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 8008190:	4a07      	ldr	r2, [pc, #28]	; (80081b0 <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 8008192:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8008194:	fb07 f303 	mul.w	r3, r7, r3
      wAux /= 1000u;
 8008198:	fba2 2303 	umull	r2, r3, r2, r3
 800819c:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800819e:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 80081a0:	1a2d      	subs	r5, r5, r0
 80081a2:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 80081a4:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 80081a6:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 80081aa:	2001      	movs	r0, #1
 80081ac:	61a5      	str	r5, [r4, #24]
}
 80081ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081b0:	10624dd3 	.word	0x10624dd3

080081b4 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 80081b4:	2300      	movs	r3, #0
 80081b6:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80081b8:	6183      	str	r3, [r0, #24]
}
 80081ba:	4770      	bx	lr

080081bc <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 80081bc:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 80081be:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80081c2:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 80081c4:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 80081c6:	2a00      	cmp	r2, #0
 80081c8:	bf08      	it	eq
 80081ca:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 80081cc:	2b01      	cmp	r3, #1
{
 80081ce:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 80081d0:	d90c      	bls.n	80081ec <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 80081d2:	6981      	ldr	r1, [r0, #24]
 80081d4:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 80081d6:	3b01      	subs	r3, #1
 80081d8:	2e00      	cmp	r6, #0
 80081da:	60c3      	str	r3, [r0, #12]
 80081dc:	4630      	mov	r0, r6
 80081de:	db09      	blt.n	80081f4 <STC_CalcTorqueReference+0x38>
 80081e0:	1405      	asrs	r5, r0, #16
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 80081e2:	2a01      	cmp	r2, #1
 80081e4:	d00a      	beq.n	80081fc <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 80081e6:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 80081e8:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 80081ea:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 80081ec:	d012      	beq.n	8008214 <STC_CalcTorqueReference+0x58>
 80081ee:	2e00      	cmp	r6, #0
 80081f0:	4630      	mov	r0, r6
 80081f2:	daf5      	bge.n	80081e0 <STC_CalcTorqueReference+0x24>
 80081f4:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 80081f8:	30ff      	adds	r0, #255	; 0xff
 80081fa:	e7f1      	b.n	80081e0 <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 80081fc:	6960      	ldr	r0, [r4, #20]
 80081fe:	f7ff ff1f 	bl	8008040 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8008202:	1a28      	subs	r0, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8008204:	b201      	sxth	r1, r0
 8008206:	6920      	ldr	r0, [r4, #16]
 8008208:	f7fe fc44 	bl	8006a94 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800820c:	0403      	lsls	r3, r0, #16
 800820e:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 8008212:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8008214:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8008218:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800821a:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 800821c:	60c3      	str	r3, [r0, #12]
 800821e:	e7e0      	b.n	80081e2 <STC_CalcTorqueReference+0x26>

08008220 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8008220:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop

08008228 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8008228:	8bc0      	ldrh	r0, [r0, #30]
 800822a:	4770      	bx	lr

0800822c <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 800822c:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop

08008234 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8008234:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8008238:	2200      	movs	r2, #0
 800823a:	b299      	uxth	r1, r3
 800823c:	f361 020f 	bfi	r2, r1, #0, #16
 8008240:	0c1b      	lsrs	r3, r3, #16
 8008242:	f363 421f 	bfi	r2, r3, #16, #16
{
 8008246:	b082      	sub	sp, #8
}
 8008248:	4610      	mov	r0, r2
 800824a:	b002      	add	sp, #8
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop

08008250 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8008250:	b510      	push	{r4, lr}
 8008252:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8008254:	6940      	ldr	r0, [r0, #20]
 8008256:	f7ff fef3 	bl	8008040 <SPD_GetAvrgMecSpeedUnit>
 800825a:	0400      	lsls	r0, r0, #16
 800825c:	6060      	str	r0, [r4, #4]
}
 800825e:	bd10      	pop	{r4, pc}

08008260 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8008260:	2300      	movs	r3, #0
 8008262:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8008264:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop

0800826c <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 800826c:	b430      	push	{r4, r5}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800826e:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8008270:	8885      	ldrh	r5, [r0, #4]
  State_t LocalState =  pHandle->bState;
 8008272:	7804      	ldrb	r4, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8008274:	430b      	orrs	r3, r1
 8008276:	ea23 0202 	bic.w	r2, r3, r2
 800827a:	b292      	uxth	r2, r2
  pHandle->hFaultOccurred |= hSetErrors;
 800827c:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 800827e:	2c0a      	cmp	r4, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8008280:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8008282:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 8008284:	d008      	beq.n	8008298 <STM_FaultProcessing+0x2c>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8008286:	b912      	cbnz	r2, 800828e <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8008288:	4620      	mov	r0, r4
 800828a:	bc30      	pop	{r4, r5}
 800828c:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 800828e:	240a      	movs	r4, #10
 8008290:	7004      	strb	r4, [r0, #0]
}
 8008292:	4620      	mov	r0, r4
 8008294:	bc30      	pop	{r4, r5}
 8008296:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8008298:	2a00      	cmp	r2, #0
 800829a:	d1f5      	bne.n	8008288 <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 800829c:	240b      	movs	r4, #11
 800829e:	7004      	strb	r4, [r0, #0]
}
 80082a0:	4620      	mov	r0, r4
 80082a2:	bc30      	pop	{r4, r5}
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop

080082a8 <STM_NextState>:
{
 80082a8:	b508      	push	{r3, lr}
 80082aa:	7803      	ldrb	r3, [r0, #0]
 80082ac:	2b14      	cmp	r3, #20
 80082ae:	d810      	bhi.n	80082d2 <STM_NextState+0x2a>
 80082b0:	e8df f003 	tbb	[pc, r3]
 80082b4:	240d545e 	.word	0x240d545e
 80082b8:	390d352e 	.word	0x390d352e
 80082bc:	0f0f3f3c 	.word	0x0f0f3f3c
 80082c0:	47650b44 	.word	0x47650b44
 80082c4:	504d1b4a 	.word	0x504d1b4a
 80082c8:	5b          	.byte	0x5b
 80082c9:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 80082ca:	290e      	cmp	r1, #14
 80082cc:	d013      	beq.n	80082f6 <STM_NextState+0x4e>
      if ( bState == ANY_STOP )
 80082ce:	2907      	cmp	r1, #7
 80082d0:	d011      	beq.n	80082f6 <STM_NextState+0x4e>
 80082d2:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d018      	beq.n	800830c <STM_NextState+0x64>
 80082da:	2907      	cmp	r1, #7
 80082dc:	d016      	beq.n	800830c <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 80082de:	2200      	movs	r2, #0
 80082e0:	2180      	movs	r1, #128	; 0x80
 80082e2:	f7ff ffc3 	bl	800826c <STM_FaultProcessing>
 80082e6:	2000      	movs	r0, #0
}
 80082e8:	bd08      	pop	{r3, pc}
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 80082ea:	2914      	cmp	r1, #20
 80082ec:	d8f1      	bhi.n	80082d2 <STM_NextState+0x2a>
 80082ee:	4b26      	ldr	r3, [pc, #152]	; (8008388 <STM_NextState+0xe0>)
 80082f0:	40cb      	lsrs	r3, r1
 80082f2:	07db      	lsls	r3, r3, #31
 80082f4:	d5ed      	bpl.n	80082d2 <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 80082f6:	7001      	strb	r1, [r0, #0]
 80082f8:	2001      	movs	r0, #1
}
 80082fa:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 80082fc:	2911      	cmp	r1, #17
 80082fe:	d8ee      	bhi.n	80082de <STM_NextState+0x36>
 8008300:	4b22      	ldr	r3, [pc, #136]	; (800838c <STM_NextState+0xe4>)
 8008302:	40cb      	lsrs	r3, r1
 8008304:	07da      	lsls	r2, r3, #31
 8008306:	d4f6      	bmi.n	80082f6 <STM_NextState+0x4e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8008308:	2903      	cmp	r1, #3
 800830a:	d1e8      	bne.n	80082de <STM_NextState+0x36>
 800830c:	2000      	movs	r0, #0
}
 800830e:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8008310:	2913      	cmp	r1, #19
 8008312:	d0f0      	beq.n	80082f6 <STM_NextState+0x4e>
 8008314:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8008318:	2b05      	cmp	r3, #5
 800831a:	d1dc      	bne.n	80082d6 <STM_NextState+0x2e>
 800831c:	e7eb      	b.n	80082f6 <STM_NextState+0x4e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 800831e:	1f8b      	subs	r3, r1, #6
 8008320:	2b01      	cmp	r3, #1
 8008322:	d8d6      	bhi.n	80082d2 <STM_NextState+0x2a>
 8008324:	e7e7      	b.n	80082f6 <STM_NextState+0x4e>
      if ( bState == STOP )
 8008326:	2908      	cmp	r1, #8
 8008328:	d1d3      	bne.n	80082d2 <STM_NextState+0x2a>
 800832a:	e7e4      	b.n	80082f6 <STM_NextState+0x4e>
      if ( bState == STOP_IDLE )
 800832c:	2909      	cmp	r1, #9
 800832e:	d1d0      	bne.n	80082d2 <STM_NextState+0x2a>
 8008330:	e7e1      	b.n	80082f6 <STM_NextState+0x4e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8008332:	2900      	cmp	r1, #0
 8008334:	d0df      	beq.n	80082f6 <STM_NextState+0x4e>
 8008336:	290c      	cmp	r1, #12
 8008338:	d1cb      	bne.n	80082d2 <STM_NextState+0x2a>
 800833a:	e7dc      	b.n	80082f6 <STM_NextState+0x4e>
      if ( bState == IDLE )
 800833c:	2900      	cmp	r1, #0
 800833e:	d0da      	beq.n	80082f6 <STM_NextState+0x4e>
 8008340:	e7c7      	b.n	80082d2 <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8008342:	2902      	cmp	r1, #2
 8008344:	d1c3      	bne.n	80082ce <STM_NextState+0x26>
 8008346:	e7d6      	b.n	80082f6 <STM_NextState+0x4e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8008348:	2911      	cmp	r1, #17
 800834a:	d1c0      	bne.n	80082ce <STM_NextState+0x26>
 800834c:	e7d3      	b.n	80082f6 <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800834e:	2904      	cmp	r1, #4
 8008350:	d1bd      	bne.n	80082ce <STM_NextState+0x26>
 8008352:	e7d0      	b.n	80082f6 <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8008354:	1f0b      	subs	r3, r1, #4
 8008356:	2b01      	cmp	r3, #1
 8008358:	d8b9      	bhi.n	80082ce <STM_NextState+0x26>
 800835a:	e7cc      	b.n	80082f6 <STM_NextState+0x4e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 800835c:	2907      	cmp	r1, #7
 800835e:	d0ca      	beq.n	80082f6 <STM_NextState+0x4e>
 8008360:	f1a1 030d 	sub.w	r3, r1, #13
 8008364:	2b01      	cmp	r3, #1
 8008366:	d8b4      	bhi.n	80082d2 <STM_NextState+0x2a>
 8008368:	e7c5      	b.n	80082f6 <STM_NextState+0x4e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800836a:	2912      	cmp	r1, #18
 800836c:	d1af      	bne.n	80082ce <STM_NextState+0x26>
 800836e:	e7c2      	b.n	80082f6 <STM_NextState+0x4e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8008370:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8008374:	2b01      	cmp	r3, #1
 8008376:	d0be      	beq.n	80082f6 <STM_NextState+0x4e>
           || ( bState == ICLWAIT ) )
 8008378:	290c      	cmp	r1, #12
 800837a:	d1ae      	bne.n	80082da <STM_NextState+0x32>
 800837c:	e7bb      	b.n	80082f6 <STM_NextState+0x4e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 800837e:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 8008382:	2b07      	cmp	r3, #7
 8008384:	d1a5      	bne.n	80082d2 <STM_NextState+0x2a>
 8008386:	e7b6      	b.n	80082f6 <STM_NextState+0x4e>
 8008388:	00140080 	.word	0x00140080
 800838c:	00030092 	.word	0x00030092

08008390 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8008390:	7800      	ldrb	r0, [r0, #0]
 8008392:	4770      	bx	lr

08008394 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8008394:	7803      	ldrb	r3, [r0, #0]
 8008396:	2b0b      	cmp	r3, #11
 8008398:	d001      	beq.n	800839e <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 800839a:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 800839c:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 800839e:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80083a0:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 80083a2:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80083a4:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 80083a6:	2001      	movs	r0, #1
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop

080083ac <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 80083ac:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 80083ae:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 80083b0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop

080083b8 <STO_PLL_CalcElAngle>:
  * @param  pHandle: handler of the current instance of the STO component
  * @param  pInputVars_str pointer to the observer inputs structure
  * @retval int16_t rotor electrical angle (s16Degrees)
  */
__weak int16_t STO_PLL_CalcElAngle( STO_PLL_Handle_t * pHandle, Observer_Inputs_t * pInputs )
{
 80083b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t wBemf_alfa_est_Next, wBemf_beta_est_Next;
  int16_t hAux, hAux_Alfa, hAux_Beta, hIalfa_err, hIbeta_err, hRotor_Speed,
          hValfa, hVbeta;


  if ( pHandle->wBemf_alfa_est > ( int32_t )( pHandle->hF2 )*INT16_MAX )
 80083bc:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 80083c0:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
 80083c4:	ebc3 32c3 	rsb	r2, r3, r3, lsl #15
 80083c8:	4596      	cmp	lr, r2
{
 80083ca:	4604      	mov	r4, r0
 80083cc:	b089      	sub	sp, #36	; 0x24
  if ( pHandle->wBemf_alfa_est > ( int32_t )( pHandle->hF2 )*INT16_MAX )
 80083ce:	ea4f 30c3 	mov.w	r0, r3, lsl #15
 80083d2:	f340 80c3 	ble.w	800855c <STO_PLL_CalcElAngle+0x1a4>
  {
    pHandle->wBemf_alfa_est = INT16_MAX * ( int32_t )( pHandle->hF2 );
 80083d6:	66a2      	str	r2, [r4, #104]	; 0x68
 80083d8:	4696      	mov	lr, r2
  {
  }
#ifdef FULL_MISRA_C_COMPLIANCY
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est / pHandle->hF2 );
#else
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est >> pHandle->F2LOG );
 80083da:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
#endif

  if ( pHandle->wBemf_beta_est > INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 80083de:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est >> pHandle->F2LOG );
 80083e2:	fa4e f605 	asr.w	r6, lr, r5
 80083e6:	9603      	str	r6, [sp, #12]
  if ( pHandle->wBemf_beta_est > INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 80083e8:	4562      	cmp	r2, ip
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est >> pHandle->F2LOG );
 80083ea:	b236      	sxth	r6, r6
 80083ec:	9601      	str	r6, [sp, #4]
  if ( pHandle->wBemf_beta_est > INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 80083ee:	f280 80ca 	bge.w	8008586 <STO_PLL_CalcElAngle+0x1ce>
  {
    pHandle->wBemf_beta_est = INT16_MAX * ( int32_t )( pHandle->hF2 );
 80083f2:	66e2      	str	r2, [r4, #108]	; 0x6c
 80083f4:	4694      	mov	ip, r2
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est / pHandle->hF2 );
#else
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est >> pHandle->F2LOG );
#endif

  if ( pHandle->Ialfa_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 80083f6:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80083fa:	6e20      	ldr	r0, [r4, #96]	; 0x60
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est >> pHandle->F2LOG );
 80083fc:	fa4c f205 	asr.w	r2, ip, r5
  if ( pHandle->Ialfa_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 8008400:	ebc3 35c3 	rsb	r5, r3, r3, lsl #15
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est >> pHandle->F2LOG );
 8008404:	9204      	str	r2, [sp, #16]
  if ( pHandle->Ialfa_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 8008406:	42a8      	cmp	r0, r5
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est >> pHandle->F2LOG );
 8008408:	b212      	sxth	r2, r2
 800840a:	9202      	str	r2, [sp, #8]
  if ( pHandle->Ialfa_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 800840c:	ea4f 36c3 	mov.w	r6, r3, lsl #15
 8008410:	f340 80b3 	ble.w	800857a <STO_PLL_CalcElAngle+0x1c2>
  {
    pHandle->Ialfa_est = INT16_MAX * ( int32_t )( pHandle->hF1 );
 8008414:	6625      	str	r5, [r4, #96]	; 0x60
 8008416:	4628      	mov	r0, r5
  }
  else
  {
  }

  if ( pHandle->Ibeta_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 8008418:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800841a:	4295      	cmp	r5, r2
 800841c:	f280 80a7 	bge.w	800856e <STO_PLL_CalcElAngle+0x1b6>
  {
    pHandle->Ibeta_est = INT16_MAX * ( int32_t )( pHandle->hF1 );
 8008420:	6665      	str	r5, [r4, #100]	; 0x64
 8008422:	462a      	mov	r2, r5
  }

#ifdef FULL_MISRA_C_COMPLIANCY
  hIalfa_err = ( int16_t )( pHandle->Ialfa_est / pHandle->hF1 );
#else
  hIalfa_err = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 8008424:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
  hIbeta_err = ( int16_t )( pHandle->Ibeta_est / pHandle->hF1 );
#else
  hIbeta_err = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
#endif

  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8008428:	f8b1 a006 	ldrh.w	sl, [r1, #6]

  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.alpha;
 800842c:	890d      	ldrh	r5, [r1, #8]
  hValfa = ( int16_t ) ( wAux / 65536 );
#else
  hValfa = ( int16_t ) ( wAux >> 16 );
#endif

  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.beta;
 800842e:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8008432:	888e      	ldrh	r6, [r1, #4]
  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.alpha;
 8008434:	f9b1 7000 	ldrsh.w	r7, [r1]
  hAux = ( int16_t ) ( pHandle->Ialfa_est / pHandle->hF1 );
#else
  hAux = ( int16_t ) ( pHandle->Ialfa_est >> pHandle->F1LOG );
#endif

  wAux = ( int32_t ) ( pHandle->hC1 ) * hAux;
 8008438:	f9b4 9020 	ldrsh.w	r9, [r4, #32]
  wAux = wAux * pHandle->hC6;
  wAux = pHandle->_Super.hElSpeedDpp * wAux;
  wBemf_beta_est_Next -= wAux;

  /*Calls the PLL blockset*/
  pHandle->hBemf_alfa_est = hAux_Alfa;
 800843c:	9901      	ldr	r1, [sp, #4]
 800843e:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
  hIalfa_err = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 8008442:	fa40 f103 	asr.w	r1, r0, r3
  hIbeta_err = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
 8008446:	fa42 f303 	asr.w	r3, r2, r3
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800844a:	1b8e      	subs	r6, r1, r6
  wAux = ( int32_t ) ( pHandle->hC1 ) * hAux;
 800844c:	fb11 f109 	smulbb	r1, r1, r9
  wAux = ( int32_t )  ( pHandle->hC1 ) * hAux;
 8008450:	fb13 f909 	smulbb	r9, r3, r9
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8008454:	eba3 030a 	sub.w	r3, r3, sl
  wAux = ( int32_t ) ( pHandle->hC2 ) * hIalfa_err;
 8008458:	f9b4 b022 	ldrsh.w	fp, [r4, #34]	; 0x22
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800845c:	9305      	str	r3, [sp, #20]
  pHandle->hBemf_beta_est = hAux_Beta;
 800845e:	9b02      	ldr	r3, [sp, #8]
  wAux = ( int32_t ) ( pHandle->hC5 ) * hValfa;
 8008460:	f9b4 a028 	ldrsh.w	sl, [r4, #40]	; 0x28
  pHandle->hBemf_beta_est = hAux_Beta;
 8008464:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8008468:	b236      	sxth	r6, r6
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800846a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 800846e:	1a41      	subs	r1, r0, r1
  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.alpha;
 8008470:	fb05 f707 	mul.w	r7, r5, r7
  wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 8008474:	eba2 0209 	sub.w	r2, r2, r9
  wIalfa_est_Next += wAux;
 8008478:	fb0b 1106 	mla	r1, fp, r6, r1
  hValfa = ( int16_t ) ( wAux >> 16 );
 800847c:	143f      	asrs	r7, r7, #16
  wIbeta_est_Next += wAux;
 800847e:	fb0b 2b03 	mla	fp, fp, r3, r2
  wIalfa_est_Next += wAux;
 8008482:	fb0a 1107 	mla	r1, sl, r7, r1
  wAux = ( int32_t ) hAux_Beta >> pHandle->F3POW2;
 8008486:	8e60      	ldrh	r0, [r4, #50]	; 0x32
  wAux = ( int32_t ) hAux_Alfa >> pHandle->F3POW2;
 8008488:	9a01      	ldr	r2, [sp, #4]
  wAux = ( int32_t ) hAux_Beta >> pHandle->F3POW2;
 800848a:	9f02      	ldr	r7, [sp, #8]
  wAux = ( int32_t )( pHandle->hC4 ) * hIalfa_err;
 800848c:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.beta;
 8008490:	fb05 f508 	mul.w	r5, r5, r8
  hVbeta = ( int16_t ) ( wAux >> 16 );
 8008494:	142d      	asrs	r5, r5, #16
  wAux = wAux * pHandle->hC6;
 8008496:	f9b4 802a 	ldrsh.w	r8, [r4, #42]	; 0x2a
  wIbeta_est_Next += wAux;
 800849a:	fb0a b505 	mla	r5, sl, r5, fp
  wAux = ( int32_t ) hAux_Beta >> pHandle->F3POW2;
 800849e:	4107      	asrs	r7, r0
  wAux = pHandle->_Super.hElSpeedDpp * wAux;
 80084a0:	f9b4 a00e 	ldrsh.w	sl, [r4, #14]
  wAux = ( int32_t )  ( pHandle->hC3 ) * hAux_Alfa;
 80084a4:	f9b4 b024 	ldrsh.w	fp, [r4, #36]	; 0x24
  wAux = ( int32_t ) hAux_Alfa >> pHandle->F3POW2;
 80084a8:	fa42 f000 	asr.w	r0, r2, r0
  wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 80084ac:	fb06 e609 	mla	r6, r6, r9, lr
  wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 80084b0:	fb09 c303 	mla	r3, r9, r3, ip
  wAux = wAux * pHandle->hC6;
 80084b4:	fb07 f708 	mul.w	r7, r7, r8
  wAux = wAux * pHandle->hC6;
 80084b8:	fb00 f008 	mul.w	r0, r0, r8
  wBemf_alfa_est_Next += wAux;
 80084bc:	fb07 670a 	mla	r7, r7, sl, r6
  wBemf_beta_est_Next -= wAux;
 80084c0:	fb00 361a 	mls	r6, r0, sl, r3
  wIalfa_est_Next -= wAux;
 80084c4:	9b01      	ldr	r3, [sp, #4]

  if (pHandle->hForcedDirection ==0)
 80084c6:	f994 2124 	ldrsb.w	r2, [r4, #292]	; 0x124
  wIalfa_est_Next -= wAux;
 80084ca:	fb0b 1813 	mls	r8, fp, r3, r1
  wIbeta_est_Next -= wAux;
 80084ce:	9b02      	ldr	r3, [sp, #8]
 80084d0:	fb0b 5513 	mls	r5, fp, r3, r5
  if (pHandle->hForcedDirection ==0)
 80084d4:	2a00      	cmp	r2, #0
 80084d6:	d147      	bne.n	8008568 <STO_PLL_CalcElAngle+0x1b0>
  {
    /* we are in auxiliary mode, then rely on the speed detected */
    if(pHandle->_Super.hElSpeedDpp >= 0)
 80084d8:	f1ba 0f00 	cmp.w	sl, #0
 80084dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084e0:	bfac      	ite	ge
 80084e2:	f04f 0901 	movge.w	r9, #1
 80084e6:	4691      	movlt	r9, r2
  int32_t wAlfa_Sin_tmp, wBeta_Cos_tmp;
  int16_t hOutput;
  Trig_Components Local_Components;
  int16_t hAux1, hAux2;

  Local_Components = MCM_Trig_Functions( pHandle->_Super.hElAngle );
 80084e8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80084ec:	f7f8 fd28 	bl	8000f40 <MCM_Trig_Functions>
  hAux_Beta = ( int16_t )( hAux_Beta * wDirection  );
 80084f0:	9b04      	ldr	r3, [sp, #16]
  hAux_Alfa = ( int16_t )( hAux_Alfa * wDirection  );
 80084f2:	9a03      	ldr	r2, [sp, #12]
  hAux_Beta = ( int16_t )( hAux_Beta * wDirection  );
 80084f4:	fb13 f309 	smulbb	r3, r3, r9
  hAux_Alfa = ( int16_t )( hAux_Alfa * wDirection  );
 80084f8:	fb12 f109 	smulbb	r1, r2, r9
  hRotor_Speed = STO_ExecutePLL( pHandle, hAux_Alfa, -hAux_Beta );
 80084fc:	425b      	negs	r3, r3

  /* Alfa & Beta BEMF multiplied by Cos & Sin*/
  wAlfa_Sin_tmp = ( int32_t )( hBemf_alfa_est ) * ( int32_t )Local_Components.hSin;
  wBeta_Cos_tmp = ( int32_t )( hBemf_beta_est ) * ( int32_t )Local_Components.hCos;
 80084fe:	fb10 f303 	smulbb	r3, r0, r3
  wAlfa_Sin_tmp = ( int32_t )( hBemf_alfa_est ) * ( int32_t )Local_Components.hSin;
 8008502:	fb10 f021 	smultb	r0, r0, r1
#else
  hAux2 = ( int16_t )( wAlfa_Sin_tmp >> 15 );
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller( & pHandle->PIRegulator, ( int32_t )( hAux1 ) - hAux2 );
 8008506:	f343 33cf 	sbfx	r3, r3, #15, #16
 800850a:	f340 31cf 	sbfx	r1, r0, #15, #16
 800850e:	1a59      	subs	r1, r3, r1
 8008510:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008514:	f7fe fabe 	bl	8006a94 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 8008518:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
  if ( bBuffer_index == pHandle->SpeedBufferSizeUnit )
 800851c:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
  pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 8008520:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 8008522:	3301      	adds	r3, #1
 8008524:	b2db      	uxtb	r3, r3
  if ( bBuffer_index == pHandle->SpeedBufferSizeUnit )
 8008526:	429a      	cmp	r2, r3
 8008528:	bf0a      	itet	eq
 800852a:	2200      	moveq	r2, #0
 800852c:	461a      	movne	r2, r3
    bBuffer_index = 0u;
 800852e:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8008530:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8008534:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 8008538:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 800853c:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
  pHandle->_Super.hElAngle += hRotor_Speed;
 8008540:	88a2      	ldrh	r2, [r4, #4]
  pHandle->Speed_Buffer_Index = bBuffer_index;
 8008542:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
  pHandle->_Super.hElAngle += hRotor_Speed;
 8008546:	4410      	add	r0, r2
 8008548:	b200      	sxth	r0, r0
  pHandle->Ibeta_est = wIbeta_est_Next;
 800854a:	e9c4 5719 	strd	r5, r7, [r4, #100]	; 0x64
  pHandle->Ialfa_est = wIalfa_est_Next;
 800854e:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
  pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 8008552:	66e6      	str	r6, [r4, #108]	; 0x6c
  pHandle->_Super.hElAngle += hRotor_Speed;
 8008554:	80a0      	strh	r0, [r4, #4]
}
 8008556:	b009      	add	sp, #36	; 0x24
 8008558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if ( pHandle->wBemf_alfa_est <= -INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 800855c:	1a1d      	subs	r5, r3, r0
 800855e:	45ae      	cmp	lr, r5
    pHandle->wBemf_alfa_est = -INT16_MAX * ( int32_t )( pHandle->hF2 );
 8008560:	bfdc      	itt	le
 8008562:	66a5      	strle	r5, [r4, #104]	; 0x68
 8008564:	46ae      	movle	lr, r5
 8008566:	e738      	b.n	80083da <STO_PLL_CalcElAngle+0x22>
    wDirection = pHandle->hForcedDirection;
 8008568:	fa1f f982 	uxth.w	r9, r2
 800856c:	e7bc      	b.n	80084e8 <STO_PLL_CalcElAngle+0x130>
  else if ( pHandle->Ibeta_est <= -INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 800856e:	1b9b      	subs	r3, r3, r6
 8008570:	429a      	cmp	r2, r3
    pHandle->Ibeta_est = -INT16_MAX * ( int32_t )( pHandle->hF1 );
 8008572:	bfdc      	itt	le
 8008574:	6663      	strle	r3, [r4, #100]	; 0x64
 8008576:	461a      	movle	r2, r3
 8008578:	e754      	b.n	8008424 <STO_PLL_CalcElAngle+0x6c>
  else if ( pHandle->Ialfa_est <= -INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 800857a:	1b9a      	subs	r2, r3, r6
 800857c:	4290      	cmp	r0, r2
    pHandle->Ialfa_est = -INT16_MAX * ( int32_t )( pHandle->hF1 );
 800857e:	bfdc      	itt	le
 8008580:	6622      	strle	r2, [r4, #96]	; 0x60
 8008582:	4610      	movle	r0, r2
 8008584:	e748      	b.n	8008418 <STO_PLL_CalcElAngle+0x60>
  else if ( pHandle->wBemf_beta_est <= -INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 8008586:	1a1b      	subs	r3, r3, r0
 8008588:	459c      	cmp	ip, r3
    pHandle->wBemf_beta_est = -INT16_MAX * ( int32_t )( pHandle->hF2 );
 800858a:	bfdc      	itt	le
 800858c:	66e3      	strle	r3, [r4, #108]	; 0x6c
 800858e:	469c      	movle	ip, r3
 8008590:	e731      	b.n	80083f6 <STO_PLL_CalcElAngle+0x3e>
 8008592:	bf00      	nop

08008594 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 8008594:	b4f0      	push	{r4, r5, r6, r7}
  uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 8008596:	f890 c10e 	ldrb.w	ip, [r0, #270]	; 0x10e
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 800859a:	f1bc 0f00 	cmp.w	ip, #0
 800859e:	f000 8098 	beq.w	80086d2 <STO_PLL_CalcAvrgMecSpeedUnit+0x13e>
 80085a2:	f10c 34ff 	add.w	r4, ip, #4294967295
 80085a6:	b2e3      	uxtb	r3, r4
 80085a8:	f100 0672 	add.w	r6, r0, #114	; 0x72
 80085ac:	f100 0474 	add.w	r4, r0, #116	; 0x74
 80085b0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
  int32_t wAvrSpeed_dpp = ( int32_t )0;
 80085b4:	2500      	movs	r5, #0
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80085b6:	4633      	mov	r3, r6
    wAvrSpeed_dpp += ( int32_t )( pHandle->Speed_Buffer[i] );
 80085b8:	f933 7f02 	ldrsh.w	r7, [r3, #2]!
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80085bc:	429c      	cmp	r4, r3
    wAvrSpeed_dpp += ( int32_t )( pHandle->Speed_Buffer[i] );
 80085be:	443d      	add	r5, r7
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80085c0:	d1fa      	bne.n	80085b8 <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
  wAvrSpeed_dpp = wAvrSpeed_dpp / ( int16_t )bSpeedBufferSizeUnit;
 80085c2:	fb95 f5fc 	sdiv	r5, r5, ip
 80085c6:	2200      	movs	r2, #0
    wError = ( int32_t )( pHandle->Speed_Buffer[i] ) - wAvrSpeed_dpp;
 80085c8:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 80085cc:	1b5b      	subs	r3, r3, r5
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80085ce:	42a6      	cmp	r6, r4
    wAvrQuadraticError += wError;
 80085d0:	fb03 2203 	mla	r2, r3, r3, r2
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80085d4:	d1f8      	bne.n	80085c8 <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
 80085d6:	fbb2 f2fc 	udiv	r2, r2, ip
 80085da:	fb05 f405 	mul.w	r4, r5, r5
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 80085de:	f8b0 3110 	ldrh.w	r3, [r0, #272]	; 0x110
  wAux = wAux * ( int32_t ) ( pHandle->_Super.SpeedUnit );
 80085e2:	7887      	ldrb	r7, [r0, #2]
  if ( pHandle->EnableDualCheck == true ) /*do algorithm if it's enabled*/
 80085e4:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 80085e8:	fb04 f403 	mul.w	r4, r4, r3
  wAux = wAvrSpeed_dpp * ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 80085ec:	8b43      	ldrh	r3, [r0, #26]
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 80085ee:	2c00      	cmp	r4, #0
 80085f0:	bfb8      	it	lt
 80085f2:	347f      	addlt	r4, #127	; 0x7f
  wAux = wAvrSpeed_dpp * ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 80085f4:	fb05 f503 	mul.w	r5, r5, r3
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 80085f8:	ebb2 1fe4 	cmp.w	r2, r4, asr #7
  wAux = wAux * ( int32_t ) ( pHandle->_Super.SpeedUnit );
 80085fc:	fb05 f307 	mul.w	r3, r5, r7
  wAux = wAux / ( int32_t )( pHandle->_Super.DPPConvFactor);
 8008600:	69c5      	ldr	r5, [r0, #28]
 8008602:	fb93 f3f5 	sdiv	r3, r3, r5
  wAux = wAux / ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008606:	7845      	ldrb	r5, [r0, #1]
 8008608:	fb93 f3f5 	sdiv	r3, r3, r5
  *pMecSpeedUnit = ( int16_t )wAux;
 800860c:	b21d      	sxth	r5, r3
 800860e:	800d      	strh	r5, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wAux;
 8008610:	8185      	strh	r5, [r0, #12]
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 8008612:	bfb4      	ite	lt
 8008614:	2501      	movlt	r5, #1
 8008616:	2500      	movge	r5, #0
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 8008618:	11e4      	asrs	r4, r4, #7
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 800861a:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
  if ( pHandle->EnableDualCheck == true ) /*do algorithm if it's enabled*/
 800861e:	b9b6      	cbnz	r6, 800864e <STO_PLL_CalcAvrgMecSpeedUnit+0xba>
  if ( pHandle->IsAlgorithmConverged == false )
 8008620:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
 8008624:	b35b      	cbz	r3, 800867e <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
    if ( ( pHandle->IsSpeedReliable == false ) || ( bIs_Bemf_Consistent == false ) )
 8008626:	4294      	cmp	r4, r2
 8008628:	dc26      	bgt.n	8008678 <STO_PLL_CalcAvrgMecSpeedUnit+0xe4>
      pHandle->ReliabilityCounter++;
 800862a:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 800862e:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
      pHandle->ReliabilityCounter++;
 8008632:	3301      	adds	r3, #1
 8008634:	b2db      	uxtb	r3, r3
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 8008636:	429a      	cmp	r2, r3
      pHandle->ReliabilityCounter++;
 8008638:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 800863c:	d81f      	bhi.n	800867e <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
        pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800863e:	78c2      	ldrb	r2, [r0, #3]
 8008640:	7002      	strb	r2, [r0, #0]
        pHandle->ReliabilityCounter = 0u;
 8008642:	2300      	movs	r3, #0
 8008644:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 8008648:	bcf0      	pop	{r4, r5, r6, r7}
 800864a:	4618      	mov	r0, r3
 800864c:	4770      	bx	lr
    wAux = ( wAux < 0 ? ( -wAux ) : ( wAux ) ); /* wAux abs value   */
 800864e:	2b00      	cmp	r3, #0
    if ( wAux < ( int32_t )( pHandle->MaxAppPositiveMecSpeedUnit ) )
 8008650:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
    wAux = ( wAux < 0 ? ( -wAux ) : ( wAux ) ); /* wAux abs value   */
 8008654:	bfb8      	it	lt
 8008656:	425b      	neglt	r3, r3
    if ( wAux < ( int32_t )( pHandle->MaxAppPositiveMecSpeedUnit ) )
 8008658:	429d      	cmp	r5, r3
 800865a:	dc13      	bgt.n	8008684 <STO_PLL_CalcAvrgMecSpeedUnit+0xf0>
  bool bIs_Bemf_Consistent = false;
 800865c:	2500      	movs	r5, #0
  int32_t wObsBemfSq = 0, wEstBemfSq = 0;
 800865e:	462b      	mov	r3, r5
 8008660:	462e      	mov	r6, r5
  if ( pHandle->IsAlgorithmConverged == false )
 8008662:	f890 70f8 	ldrb.w	r7, [r0, #248]	; 0xf8
    pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 8008666:	f880 50f9 	strb.w	r5, [r0, #249]	; 0xf9
    pHandle->Est_Bemf_Level = wEstBemfSq;
 800866a:	e9c0 633f 	strd	r6, r3, [r0, #252]	; 0xfc
  if ( pHandle->IsAlgorithmConverged == false )
 800866e:	b137      	cbz	r7, 800867e <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
    if ( ( pHandle->IsSpeedReliable == false ) || ( bIs_Bemf_Consistent == false ) )
 8008670:	4294      	cmp	r4, r2
 8008672:	ddda      	ble.n	800862a <STO_PLL_CalcAvrgMecSpeedUnit+0x96>
 8008674:	2d00      	cmp	r5, #0
 8008676:	d0d8      	beq.n	800862a <STO_PLL_CalcAvrgMecSpeedUnit+0x96>
      pHandle->ReliabilityCounter = 0u;
 8008678:	2300      	movs	r3, #0
 800867a:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 800867e:	bcf0      	pop	{r4, r5, r6, r7}
      bAux = SPD_IsMecSpeedReliable ( &pHandle->_Super, pMecSpeedUnit );
 8008680:	f7ff bce6 	b.w	8008050 <SPD_IsMecSpeedReliable>
      wEstBemfSq = ( wEstBemf * ( int32_t )( pHandle->BemfConsistencyGain ) ) / 64;
 8008684:	f890 5119 	ldrb.w	r5, [r0, #281]	; 0x119
      wEstBemf = ( wAux * 32767 ) / ( int16_t )( pHandle->_Super.hMaxReliableMecSpeedUnit );
 8008688:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
      wObsBemf = ( int32_t )( pHandle->hBemf_alfa_est );
 800868c:	f9b0 7070 	ldrsh.w	r7, [r0, #112]	; 0x70
      wObsBemf = ( int32_t )( pHandle->hBemf_beta_est );
 8008690:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
      wEstBemf = ( wAux * 32767 ) / ( int16_t )( pHandle->_Super.hMaxReliableMecSpeedUnit );
 8008694:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8008698:	fb93 f3fc 	sdiv	r3, r3, ip
      wEstBemfSq = ( wEstBemf * ( int32_t )( pHandle->BemfConsistencyGain ) ) / 64;
 800869c:	fb03 f505 	mul.w	r5, r3, r5
 80086a0:	2d00      	cmp	r5, #0
 80086a2:	bfb8      	it	lt
 80086a4:	353f      	addlt	r5, #63	; 0x3f
 80086a6:	11ad      	asrs	r5, r5, #6
      wEstBemfSq *= wEstBemf;
 80086a8:	fb05 f303 	mul.w	r3, r5, r3
      wObsBemfSq = wObsBemf * wObsBemf;
 80086ac:	fb07 f707 	mul.w	r7, r7, r7
                     ( wEstBemfSq / 64 ) * ( int32_t )( pHandle->BemfConsistencyCheck );
 80086b0:	2b00      	cmp	r3, #0
      wObsBemfSq += wObsBemf * wObsBemf;
 80086b2:	fb06 7606 	mla	r6, r6, r6, r7
                     ( wEstBemfSq / 64 ) * ( int32_t )( pHandle->BemfConsistencyCheck );
 80086b6:	461d      	mov	r5, r3
 80086b8:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 80086bc:	bfb8      	it	lt
 80086be:	f103 053f 	addlt.w	r5, r3, #63	; 0x3f
 80086c2:	11ad      	asrs	r5, r5, #6
      wEstBemfSqLo = wEstBemfSq -
 80086c4:	fb07 3515 	mls	r5, r7, r5, r3
      if ( wObsBemfSq > wEstBemfSqLo )
 80086c8:	42ae      	cmp	r6, r5
 80086ca:	bfd4      	ite	le
 80086cc:	2500      	movle	r5, #0
 80086ce:	2501      	movgt	r5, #1
 80086d0:	e7c7      	b.n	8008662 <STO_PLL_CalcAvrgMecSpeedUnit+0xce>
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80086d2:	4664      	mov	r4, ip
 80086d4:	4662      	mov	r2, ip
  wAvrSpeed_dpp = wAvrSpeed_dpp / ( int16_t )bSpeedBufferSizeUnit;
 80086d6:	4665      	mov	r5, ip
 80086d8:	e781      	b.n	80085de <STO_PLL_CalcAvrgMecSpeedUnit+0x4a>
 80086da:	bf00      	nop

080086dc <STO_PLL_CalcAvrgElSpeedDpp>:
  int16_t hSpeedBufferSizeUnit = ( int16_t )( pHandle->SpeedBufferSizeUnit );
 80086dc:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
  hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 80086e0:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
  int16_t hIndexNew = ( int16_t )pHandle->Speed_Buffer_Index;
 80086e4:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
  hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 80086e8:	1acb      	subs	r3, r1, r3
 80086ea:	b29b      	uxth	r3, r3
{
 80086ec:	b470      	push	{r4, r5, r6}
  int32_t wSum = pHandle->DppBufferSum;
 80086ee:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
  if ( hBufferSizeDiff == 0 )
 80086f2:	b97b      	cbnz	r3, 8008714 <STO_PLL_CalcAvrgElSpeedDpp+0x38>
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 80086f4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
           pHandle->SpeedBufferOldestEl;
 80086f8:	f9b0 110c 	ldrsh.w	r1, [r0, #268]	; 0x10c
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 80086fc:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 8008700:	4423      	add	r3, r4
 8008702:	1a5b      	subs	r3, r3, r1
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8008704:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
  pHandle->DppBufferSum = wSum;
 8008708:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800870c:	4113      	asrs	r3, r2
}
 800870e:	bc70      	pop	{r4, r5, r6}
  pHandle->_Super.hElSpeedDpp = ( int16_t )wAvrSpeed_dpp;
 8008710:	81c3      	strh	r3, [r0, #14]
}
 8008712:	4770      	bx	lr
    hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8008714:	4413      	add	r3, r2
 8008716:	b21d      	sxth	r5, r3
    if ( hIndexOldTemp >= hSpeedBufferSizeUnit )
 8008718:	42a9      	cmp	r1, r5
    hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800871a:	b29b      	uxth	r3, r3
    if ( hIndexOldTemp >= hSpeedBufferSizeUnit )
 800871c:	dc02      	bgt.n	8008724 <STO_PLL_CalcAvrgElSpeedDpp+0x48>
 800871e:	b28e      	uxth	r6, r1
      hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 8008720:	1b9b      	subs	r3, r3, r6
 8008722:	b21d      	sxth	r5, r3
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8008724:	eb00 0242 	add.w	r2, r0, r2, lsl #1
           pHandle->Speed_Buffer[hIndexOld];
 8008728:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 800872c:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
           pHandle->Speed_Buffer[hIndexOld];
 8008730:	f9b5 2074 	ldrsh.w	r2, [r5, #116]	; 0x74
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8008734:	4423      	add	r3, r4
 8008736:	1a9b      	subs	r3, r3, r2
 8008738:	e7e4      	b.n	8008704 <STO_PLL_CalcAvrgElSpeedDpp+0x28>
 800873a:	bf00      	nop

0800873c <STO_PLL_Clear>:
{
 800873c:	b510      	push	{r4, lr}
  * @retval none
  */
static void STO_InitSpeedBuffer( STO_PLL_Handle_t * pHandle )
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 800873e:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
  pHandle->Ialfa_est = ( int32_t )0;
 8008742:	2100      	movs	r1, #0
  pHandle->Ibeta_est = ( int32_t )0;
 8008744:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
  pHandle->wBemf_beta_est = ( int32_t )0;
 8008748:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
  pHandle->Est_Bemf_Level = ( int32_t )0;
 800874c:	e9c0 113f 	strd	r1, r1, [r0, #252]	; 0xfc
{
 8008750:	4604      	mov	r4, r0
  pHandle->_Super.hElAngle = ( int16_t )0;
 8008752:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hElSpeedDpp = ( int16_t )0;
 8008754:	81c1      	strh	r1, [r0, #14]
  pHandle->ConsistencyCounter = 0u;
 8008756:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
  pHandle->IsAlgorithmConverged = false;
 800875a:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
  pHandle->DppBufferSum = ( int32_t )0;
 800875e:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
  pHandle->ForceConvergency = false;
 8008762:	f8a0 1122 	strh.w	r1, [r0, #290]	; 0x122

  /*init speed buffer*/
  for ( b_i = 0u; b_i < bSpeedBufferSize; b_i++ )
 8008766:	b132      	cbz	r2, 8008776 <STO_PLL_Clear+0x3a>
  {
    pHandle->Speed_Buffer[b_i] = ( int16_t )0;
 8008768:	3a01      	subs	r2, #1
 800876a:	b2d2      	uxtb	r2, r2
 800876c:	3201      	adds	r2, #1
 800876e:	0052      	lsls	r2, r2, #1
 8008770:	3074      	adds	r0, #116	; 0x74
 8008772:	f000 fb49 	bl	8008e08 <memset>
  }
  pHandle->Speed_Buffer_Index = 0u;
 8008776:	2100      	movs	r1, #0
 8008778:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
  pHandle->SpeedBufferOldestEl = ( int16_t )0;
 800877c:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
  PID_SetIntegralTerm( & pHandle->PIRegulator, ( int32_t )0 );
 8008780:	f104 0034 	add.w	r0, r4, #52	; 0x34
}
 8008784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  PID_SetIntegralTerm( & pHandle->PIRegulator, ( int32_t )0 );
 8008788:	f7fe b978 	b.w	8006a7c <PID_SetIntegralTerm>

0800878c <STO_PLL_Init>:
{
 800878c:	b570      	push	{r4, r5, r6, lr}
 800878e:	4605      	mov	r5, r0
  htempk = ( int16_t )( C6_COMP_CONST1 / ( pHandle->hF2 ) );
 8008790:	f9b0 602e 	ldrsh.w	r6, [r0, #46]	; 0x2e
 8008794:	4b17      	ldr	r3, [pc, #92]	; (80087f4 <STO_PLL_Init+0x68>)
  pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8008796:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
  htempk = ( int16_t )( C6_COMP_CONST1 / ( pHandle->hF2 ) );
 800879a:	fb93 f3f6 	sdiv	r3, r3, r6
  pHandle->F3POW2 = 0u;
 800879e:	2100      	movs	r1, #0
  pHandle->EnableDualCheck = true;
 80087a0:	2201      	movs	r2, #1
  htempk = ( int16_t )( C6_COMP_CONST1 / ( pHandle->hF2 ) );
 80087a2:	b21b      	sxth	r3, r3
  pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 80087a4:	f885 00f6 	strb.w	r0, [r5, #246]	; 0xf6
  pHandle->F3POW2 = 0u;
 80087a8:	8669      	strh	r1, [r5, #50]	; 0x32
  pHandle->EnableDualCheck = true;
 80087aa:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
  while ( htempk != 0 )
 80087ae:	b1fb      	cbz	r3, 80087f0 <STO_PLL_Init+0x64>
  wAux = ( int32_t )1;
 80087b0:	4611      	mov	r1, r2
    htempk /= ( int16_t )2;
 80087b2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    wAux *= ( int32_t )2;
 80087b6:	1c54      	adds	r4, r2, #1
  while ( htempk != 0 )
 80087b8:	105b      	asrs	r3, r3, #1
 80087ba:	4610      	mov	r0, r2
    wAux *= ( int32_t )2;
 80087bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
  while ( htempk != 0 )
 80087c0:	b2a2      	uxth	r2, r4
 80087c2:	d1f6      	bne.n	80087b2 <STO_PLL_Init+0x26>
 80087c4:	b20a      	sxth	r2, r1
 80087c6:	fb06 f102 	mul.w	r1, r6, r2
 80087ca:	8668      	strh	r0, [r5, #50]	; 0x32
  pHandle->hC6 = ( int16_t )( wAux / C6_COMP_CONST2 );
 80087cc:	4b0a      	ldr	r3, [pc, #40]	; (80087f8 <STO_PLL_Init+0x6c>)
  pHandle->hF3 = ( int16_t )wAux;
 80087ce:	862a      	strh	r2, [r5, #48]	; 0x30
  pHandle->hC6 = ( int16_t )( wAux / C6_COMP_CONST2 );
 80087d0:	fb83 2301 	smull	r2, r3, r3, r1
 80087d4:	17c9      	asrs	r1, r1, #31
 80087d6:	ebc1 2123 	rsb	r1, r1, r3, asr #8
 80087da:	8569      	strh	r1, [r5, #42]	; 0x2a
  STO_PLL_Clear( pHandle );
 80087dc:	4628      	mov	r0, r5
 80087de:	f7ff ffad 	bl	800873c <STO_PLL_Clear>
  PID_HandleInit( & pHandle->PIRegulator );
 80087e2:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80087e6:	f7fe f935 	bl	8006a54 <PID_HandleInit>
  pHandle->_Super.hMecAccelUnitP = 0;
 80087ea:	2300      	movs	r3, #0
 80087ec:	826b      	strh	r3, [r5, #18]
}
 80087ee:	bd70      	pop	{r4, r5, r6, pc}
 80087f0:	4631      	mov	r1, r6
 80087f2:	e7eb      	b.n	80087cc <STO_PLL_Init+0x40>
 80087f4:	000fea5e 	.word	0x000fea5e
 80087f8:	06488dc5 	.word	0x06488dc5

080087fc <STO_PLL_IsObserverConverged>:
  int16_t hEstimatedSpeedUnit, hUpperThreshold, hLowerThreshold;
  int32_t wAux;
  bool bAux = false;
  int32_t wtemp;
  
  if ( pHandle->ForceConvergency2 == true )
 80087fc:	f890 3123 	ldrb.w	r3, [r0, #291]	; 0x123
 8008800:	b10b      	cbz	r3, 8008806 <STO_PLL_IsObserverConverged+0xa>
  {
    hForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8008802:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  }

  if ( pHandle->ForceConvergency == true )
 8008806:	f890 3122 	ldrb.w	r3, [r0, #290]	; 0x122
 800880a:	b133      	cbz	r3, 800881a <STO_PLL_IsObserverConverged+0x1e>
  {
    bAux = true;
    pHandle->IsAlgorithmConverged = true;
 800880c:	2301      	movs	r3, #1
    pHandle->_Super.bSpeedErrorNumber = 0u;
 800880e:	2200      	movs	r2, #0
    pHandle->IsAlgorithmConverged = true;
 8008810:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
    pHandle->_Super.bSpeedErrorNumber = 0u;
 8008814:	7002      	strb	r2, [r0, #0]
      }
    }
  }

  return ( bAux );
}
 8008816:	4618      	mov	r0, r3
 8008818:	4770      	bx	lr
    hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800881a:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
{
 800881e:	b430      	push	{r4, r5}
    wtemp = ( int32_t )hEstimatedSpeedUnit * ( int32_t )hForcedMecSpeedUnit;
 8008820:	fb02 f401 	mul.w	r4, r2, r1
    if ( wtemp > 0 )
 8008824:	2c00      	cmp	r4, #0
    wtemp = ( int32_t )hEstimatedSpeedUnit * ( int32_t )hForcedMecSpeedUnit;
 8008826:	460d      	mov	r5, r1
    if ( wtemp > 0 )
 8008828:	dd34      	ble.n	8008894 <STO_PLL_IsObserverConverged+0x98>
      if ( hEstimatedSpeedUnit < 0 )
 800882a:	2a00      	cmp	r2, #0
        hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 800882c:	bfbc      	itt	lt
 800882e:	4252      	neglt	r2, r2
 8008830:	b212      	sxthlt	r2, r2
      if ( hForcedMecSpeedUnit < 0 )
 8008832:	2900      	cmp	r1, #0
        hForcedMecSpeedUnit = -hForcedMecSpeedUnit;
 8008834:	bfbc      	itt	lt
 8008836:	4249      	neglt	r1, r1
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_H;
 8008838:	b20d      	sxthlt	r5, r1
      if ( pHandle->IsSpeedReliable == true )
 800883a:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
 800883e:	b361      	cbz	r1, 800889a <STO_PLL_IsObserverConverged+0x9e>
        if ( ( uint16_t )hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed )
 8008840:	f8b0 4114 	ldrh.w	r4, [r0, #276]	; 0x114
 8008844:	b291      	uxth	r1, r2
 8008846:	428c      	cmp	r4, r1
 8008848:	d227      	bcs.n	800889a <STO_PLL_IsObserverConverged+0x9e>
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_L;
 800884a:	f890 1113 	ldrb.w	r1, [r0, #275]	; 0x113
 800884e:	fb05 f101 	mul.w	r1, r5, r1
      hLowerThreshold = ( int16_t )( wAux / ( int32_t )16 );
 8008852:	2900      	cmp	r1, #0
 8008854:	bfb8      	it	lt
 8008856:	310f      	addlt	r1, #15
          if ( hEstimatedSpeedUnit >= hLowerThreshold )
 8008858:	f341 110f 	sbfx	r1, r1, #4, #16
 800885c:	428a      	cmp	r2, r1
 800885e:	db1c      	blt.n	800889a <STO_PLL_IsObserverConverged+0x9e>
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_H;
 8008860:	f890 1112 	ldrb.w	r1, [r0, #274]	; 0x112
 8008864:	fb05 f101 	mul.w	r1, r5, r1
      hUpperThreshold = ( int16_t )( wAux / ( int32_t )16 );
 8008868:	2900      	cmp	r1, #0
 800886a:	bfb8      	it	lt
 800886c:	310f      	addlt	r1, #15
            if ( hEstimatedSpeedUnit <= hUpperThreshold )
 800886e:	f341 110f 	sbfx	r1, r1, #4, #16
 8008872:	428a      	cmp	r2, r1
 8008874:	dc11      	bgt.n	800889a <STO_PLL_IsObserverConverged+0x9e>
              pHandle->ConsistencyCounter++;
 8008876:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
              if ( pHandle->ConsistencyCounter >=
 800887a:	f890 1116 	ldrb.w	r1, [r0, #278]	; 0x116
              pHandle->ConsistencyCounter++;
 800887e:	3201      	adds	r2, #1
 8008880:	b2d2      	uxtb	r2, r2
              if ( pHandle->ConsistencyCounter >=
 8008882:	4291      	cmp	r1, r2
              pHandle->ConsistencyCounter++;
 8008884:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
              if ( pHandle->ConsistencyCounter >=
 8008888:	d804      	bhi.n	8008894 <STO_PLL_IsObserverConverged+0x98>
    pHandle->IsAlgorithmConverged = true;
 800888a:	2301      	movs	r3, #1
    pHandle->_Super.bSpeedErrorNumber = 0u;
 800888c:	2200      	movs	r2, #0
    pHandle->IsAlgorithmConverged = true;
 800888e:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
    pHandle->_Super.bSpeedErrorNumber = 0u;
 8008892:	7002      	strb	r2, [r0, #0]
}
 8008894:	4618      	mov	r0, r3
 8008896:	bc30      	pop	{r4, r5}
 8008898:	4770      	bx	lr
              pHandle->ConsistencyCounter = 0u;
 800889a:	2200      	movs	r2, #0
 800889c:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
}
 80088a0:	bc30      	pop	{r4, r5}
 80088a2:	4618      	mov	r0, r3
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop

080088a8 <STO_PLL_GetEstimatedBemf>:
__weak alphabeta_t STO_PLL_GetEstimatedBemf( STO_PLL_Handle_t * pHandle )
{
  alphabeta_t Vaux;
  Vaux.alpha = pHandle->hBemf_alfa_est;
  Vaux.beta = pHandle->hBemf_beta_est;
  return ( Vaux );
 80088a8:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80088aa:	2200      	movs	r2, #0
 80088ac:	b299      	uxth	r1, r3
 80088ae:	f361 020f 	bfi	r2, r1, #0, #16
 80088b2:	0c1b      	lsrs	r3, r3, #16
 80088b4:	f363 421f 	bfi	r2, r3, #16, #16
{
 80088b8:	b082      	sub	sp, #8
}
 80088ba:	4610      	mov	r0, r2
 80088bc:	b002      	add	sp, #8
 80088be:	4770      	bx	lr

080088c0 <STO_PLL_GetEstimatedCurrent>:
#endif

#ifdef FULL_MISRA_C_COMPLIANCY
  Iaux.beta = ( int16_t )( pHandle->Ibeta_est / ( pHandle->hF1 ) );
#else
  Iaux.beta = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
 80088c0:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
{
 80088c4:	b410      	push	{r4}
  Iaux.alpha = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 80088c6:	f8b0 411c 	ldrh.w	r4, [r0, #284]	; 0x11c
 80088ca:	4122      	asrs	r2, r4
#endif

  return ( Iaux );
 80088cc:	b292      	uxth	r2, r2
 80088ce:	4123      	asrs	r3, r4
 80088d0:	2100      	movs	r1, #0
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	f362 010f 	bfi	r1, r2, #0, #16
 80088d8:	f363 411f 	bfi	r1, r3, #16, #16
{
 80088dc:	b083      	sub	sp, #12
}
 80088de:	4608      	mov	r0, r1
 80088e0:	b003      	add	sp, #12
 80088e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <STO_PLL_GetObserverGains>:
  * @param  phC4 pointer to int16_t used to return parameters hhC4
  * @retval none
  */
__weak void STO_PLL_GetObserverGains( STO_PLL_Handle_t * pHandle, int16_t * phC2, int16_t * phC4 )
{
  *phC2 = pHandle->hC2;
 80088e8:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80088ec:	800b      	strh	r3, [r1, #0]
  *phC4 = pHandle->hC4;
 80088ee:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 80088f2:	8013      	strh	r3, [r2, #0]
}
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop

080088f8 <STO_PLL_SetObserverGains>:
  * @retval none
  */
__weak void STO_PLL_SetObserverGains( STO_PLL_Handle_t * pHandle, int16_t hhC1, int16_t hhC2 )
{

  pHandle->hC2 = hhC1;
 80088f8:	8441      	strh	r1, [r0, #34]	; 0x22
  pHandle->hC4 = hhC2;
 80088fa:	84c2      	strh	r2, [r0, #38]	; 0x26
}
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop

08008900 <STO_GetPLLGains>:
  * @param  pPgain pointer to int16_t used to return PLL proportional gain
  * @param  pIgain pointer to int16_t used to return PLL integral gain
  * @retval none
  */
__weak void STO_GetPLLGains( STO_PLL_Handle_t * pHandle, int16_t * pPgain, int16_t * pIgain )
{
 8008900:	b570      	push	{r4, r5, r6, lr}

  *pPgain = PID_GetKP( & pHandle->PIRegulator );
 8008902:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8008906:	4620      	mov	r0, r4
{
 8008908:	460e      	mov	r6, r1
 800890a:	4615      	mov	r5, r2
  *pPgain = PID_GetKP( & pHandle->PIRegulator );
 800890c:	f7fe f8ae 	bl	8006a6c <PID_GetKP>
 8008910:	8030      	strh	r0, [r6, #0]
  *pIgain = PID_GetKI( & pHandle->PIRegulator );
 8008912:	4620      	mov	r0, r4
 8008914:	f7fe f8ae 	bl	8006a74 <PID_GetKI>
 8008918:	8028      	strh	r0, [r5, #0]
}
 800891a:	bd70      	pop	{r4, r5, r6, pc}

0800891c <STO_SetPLLGains>:
  * @param  hPgain new value for PLL proportional gain
  * @param  hIgain new value for PLL integral gain
  * @retval none
  */
__weak void STO_SetPLLGains( STO_PLL_Handle_t * pHandle, int16_t hPgain, int16_t hIgain )
{
 800891c:	b510      	push	{r4, lr}
 800891e:	b082      	sub	sp, #8
  PID_SetKP( & pHandle->PIRegulator, hPgain );
 8008920:	3034      	adds	r0, #52	; 0x34
{
 8008922:	4614      	mov	r4, r2
  PID_SetKP( & pHandle->PIRegulator, hPgain );
 8008924:	9001      	str	r0, [sp, #4]
 8008926:	f7fe f89d 	bl	8006a64 <PID_SetKP>
  PID_SetKI( & pHandle->PIRegulator, hIgain );
 800892a:	9801      	ldr	r0, [sp, #4]
 800892c:	4621      	mov	r1, r4
}
 800892e:	b002      	add	sp, #8
 8008930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  PID_SetKI( & pHandle->PIRegulator, hIgain );
 8008934:	f7fe b898 	b.w	8006a68 <PID_SetKI>

08008938 <STO_OTF_ResetPLL>:
  * @retval none
  */
__weak void STO_OTF_ResetPLL( STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  PID_SetIntegralTerm( &pHdl->PIRegulator, ( int32_t )0 );
 8008938:	6800      	ldr	r0, [r0, #0]
 800893a:	2100      	movs	r1, #0
 800893c:	3034      	adds	r0, #52	; 0x34
 800893e:	f7fe b89d 	b.w	8006a7c <PID_SetIntegralTerm>
 8008942:	bf00      	nop

08008944 <STO_ResetPLL>:
  * @param  pHandle: handler of the current instance of the STO component
  * @retval none
  */
__weak void STO_ResetPLL( STO_PLL_Handle_t * pHandle )
{
  PID_SetIntegralTerm( &pHandle->PIRegulator, ( int32_t )0 );
 8008944:	3034      	adds	r0, #52	; 0x34
 8008946:	2100      	movs	r1, #0
 8008948:	f7fe b898 	b.w	8006a7c <PID_SetIntegralTerm>

0800894c <STO_PLL_GetEstimatedBemfLevel>:
  * @retval int32_t
  */
__weak int32_t STO_PLL_GetEstimatedBemfLevel( STO_PLL_Handle_t * pHandle )
{
  return ( pHandle->Est_Bemf_Level );
}
 800894c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop

08008954 <STO_PLL_GetObservedBemfLevel>:
  * @retval int32_t
  */
__weak int32_t STO_PLL_GetObservedBemfLevel( STO_PLL_Handle_t * pHandle )
{
  return ( pHandle->Obs_Bemf_Level );
}
 8008954:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop

0800895c <STO_PLL_IsVarianceTight>:
  * @retval bool Variance state
  */
__weak bool STO_PLL_IsVarianceTight( const STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  return ( pHdl->IsSpeedReliable );
 800895c:	6803      	ldr	r3, [r0, #0]
}
 800895e:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 8008962:	4770      	bx	lr

08008964 <STO_PLL_ForceConvergency1>:
  * @param  pHandle: handler of the current instance of the STO component
  */
__weak void STO_PLL_ForceConvergency1( STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  pHdl->ForceConvergency = true;
 8008964:	6803      	ldr	r3, [r0, #0]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
}
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop

08008970 <STO_PLL_ForceConvergency2>:
  * @param  pHandle: handler of the current instance of the STO component
  */
__weak void STO_PLL_ForceConvergency2( STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  pHdl->ForceConvergency2 = true;
 8008970:	6803      	ldr	r3, [r0, #0]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
}
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop

0800897c <STO_SetDirection>:
  * @brief  forces the rotation direction
  * @param  direction: imposed direction
  */
__weak void STO_SetDirection( STO_PLL_Handle_t * pHandle, uint8_t direction )
{
  pHandle->hForcedDirection = direction;
 800897c:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
}
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop

08008984 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8008984:	f7fd bfb4 	b.w	80068f0 <FCP_Init>

08008988 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8008988:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
 800898c:	b163      	cbz	r3, 80089a8 <UFCP_TX_IRQ_Handler+0x20>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 800898e:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8008992:	b1a3      	cbz	r3, 80089be <UFCP_TX_IRQ_Handler+0x36>
 8008994:	2b01      	cmp	r3, #1
 8008996:	d108      	bne.n	80089aa <UFCP_TX_IRQ_Handler+0x22>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 8008998:	7d42      	ldrb	r2, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800899a:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800899e:	628a      	str	r2, [r1, #40]	; 0x28

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 80089a0:	3301      	adds	r3, #1
 80089a2:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
 80089a6:	4770      	bx	lr

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 80089a8:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80089aa:	7d42      	ldrb	r2, [r0, #21]
 80089ac:	3201      	adds	r2, #1
 80089ae:	4293      	cmp	r3, r2
 80089b0:	dc07      	bgt.n	80089c2 <UFCP_TX_IRQ_Handler+0x3a>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 80089b2:	18c2      	adds	r2, r0, r3
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80089b4:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
 80089b8:	7d12      	ldrb	r2, [r2, #20]
 80089ba:	628a      	str	r2, [r1, #40]	; 0x28
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80089bc:	e7f0      	b.n	80089a0 <UFCP_TX_IRQ_Handler+0x18>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 80089be:	7d02      	ldrb	r2, [r0, #20]
        break;
 80089c0:	e7eb      	b.n	800899a <UFCP_TX_IRQ_Handler+0x12>
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80089c2:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 80089c6:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
 80089ca:	6293      	str	r3, [r2, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089cc:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 80089d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d4:	e842 3100 	strex	r1, r3, [r2]
 80089d8:	2900      	cmp	r1, #0
 80089da:	d1f7      	bne.n	80089cc <UFCP_TX_IRQ_Handler+0x44>
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 80089dc:	f880 1097 	strb.w	r1, [r0, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 80089e0:	e9d0 0300 	ldrd	r0, r3, [r0]
 80089e4:	4718      	bx	r3
 80089e6:	bf00      	nop

080089e8 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 80089e8:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 80089ec:	b973      	cbnz	r3, 8008a0c <UFCP_Receive+0x24>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;

    pHandle->RxFrameLevel = 0;
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 80089ee:	2301      	movs	r3, #1
 80089f0:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 80089f4:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f8:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089fc:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a00:	e842 3100 	strex	r1, r3, [r2]
 8008a04:	2900      	cmp	r1, #0
 8008a06:	d1f7      	bne.n	80089f8 <UFCP_Receive+0x10>

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8008a08:	2002      	movs	r0, #2
 8008a0a:	4770      	bx	lr
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8008a0c:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8008a0e:	4770      	bx	lr

08008a10 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8008a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a12:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8008a14:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d148      	bne.n	8008aae <UFCP_Send+0x9e>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
    pHandle->TxFrame.Size = size;
    while ( size-- ) *dest++ = *buffer++;
 8008a1c:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 8008a1e:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8008a20:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8008a22:	b2c0      	uxtb	r0, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8008a24:	f104 0c16 	add.w	ip, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 8008a28:	b34b      	cbz	r3, 8008a7e <UFCP_Send+0x6e>
 8008a2a:	f104 011a 	add.w	r1, r4, #26
 8008a2e:	1d17      	adds	r7, r2, #4
 8008a30:	45bc      	cmp	ip, r7
 8008a32:	bf38      	it	cc
 8008a34:	428a      	cmpcc	r2, r1
 8008a36:	d33c      	bcc.n	8008ab2 <UFCP_Send+0xa2>
 8008a38:	2807      	cmp	r0, #7
 8008a3a:	d93a      	bls.n	8008ab2 <UFCP_Send+0xa2>
 8008a3c:	0899      	lsrs	r1, r3, #2
 8008a3e:	3901      	subs	r1, #1
 8008a40:	b2c9      	uxtb	r1, r1
 8008a42:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 8008a46:	4665      	mov	r5, ip
 8008a48:	4611      	mov	r1, r2
 8008a4a:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a4e:	f845 6b04 	str.w	r6, [r5], #4
 8008a52:	42b9      	cmp	r1, r7
 8008a54:	d1f9      	bne.n	8008a4a <UFCP_Send+0x3a>
 8008a56:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 8008a5a:	1a40      	subs	r0, r0, r1
 8008a5c:	428b      	cmp	r3, r1
 8008a5e:	b2c0      	uxtb	r0, r0
 8008a60:	eb02 0601 	add.w	r6, r2, r1
 8008a64:	eb0c 0501 	add.w	r5, ip, r1
 8008a68:	d009      	beq.n	8008a7e <UFCP_Send+0x6e>
 8008a6a:	5c53      	ldrb	r3, [r2, r1]
 8008a6c:	f80c 3001 	strb.w	r3, [ip, r1]
 8008a70:	b128      	cbz	r0, 8008a7e <UFCP_Send+0x6e>
 8008a72:	7873      	ldrb	r3, [r6, #1]
 8008a74:	706b      	strb	r3, [r5, #1]
 8008a76:	2801      	cmp	r0, #1
 8008a78:	d001      	beq.n	8008a7e <UFCP_Send+0x6e>
 8008a7a:	78b3      	ldrb	r3, [r6, #2]
 8008a7c:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8008a7e:	f104 0014 	add.w	r0, r4, #20
 8008a82:	f7fd ff49 	bl	8006918 <FCP_CalcCRC>

    pHandle->TxFrameLevel = 0;
 8008a86:	2200      	movs	r2, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8008a88:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 8008a8a:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
 8008a8e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8008a92:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8008a96:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9a:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa2:	e842 3100 	strex	r1, r3, [r2]
 8008aa6:	2900      	cmp	r1, #0
 8008aa8:	d1f7      	bne.n	8008a9a <UFCP_Send+0x8a>
 8008aaa:	2002      	movs	r0, #2
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
  }

  return ret_val;
}
 8008aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8008aae:	2001      	movs	r0, #1
}
 8008ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	4410      	add	r0, r2
 8008ab6:	f104 0315 	add.w	r3, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 8008aba:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008abe:	f803 1f01 	strb.w	r1, [r3, #1]!
 8008ac2:	4282      	cmp	r2, r0
 8008ac4:	d1f9      	bne.n	8008aba <UFCP_Send+0xaa>
 8008ac6:	e7da      	b.n	8008a7e <UFCP_Send+0x6e>

08008ac8 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8008ac8:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8008acc:	b90b      	cbnz	r3, 8008ad2 <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008ace:	482e      	ldr	r0, [pc, #184]	; (8008b88 <UFCP_RX_IRQ_Handler+0xc0>)
}
 8008ad0:	4770      	bx	lr
{
 8008ad2:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8008ad4:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 8008ad8:	b083      	sub	sp, #12
 8008ada:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8008adc:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 8008ade:	b1cb      	cbz	r3, 8008b14 <UFCP_RX_IRQ_Handler+0x4c>
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d00c      	beq.n	8008afe <UFCP_RX_IRQ_Handler+0x36>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8008ae4:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
 8008ae8:	3101      	adds	r1, #1
 8008aea:	428b      	cmp	r3, r1
 8008aec:	dc1c      	bgt.n	8008b28 <UFCP_RX_IRQ_Handler+0x60>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8008aee:	18c1      	adds	r1, r0, r3
          pBaseHandle->RxFrameLevel++;
 8008af0:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8008af2:	f881 2099 	strb.w	r2, [r1, #153]	; 0x99
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008af6:	4824      	ldr	r0, [pc, #144]	; (8008b88 <UFCP_RX_IRQ_Handler+0xc0>)
          pBaseHandle->RxFrameLevel++;
 8008af8:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
 8008afc:	e008      	b.n	8008b10 <UFCP_RX_IRQ_Handler+0x48>
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8008afe:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrameLevel++;
 8008b00:	bf54      	ite	pl
 8008b02:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 8008b04:	2300      	movmi	r3, #0
        pBaseHandle->RxFrame.Size = rx_byte;
 8008b06:	f880 209a 	strb.w	r2, [r0, #154]	; 0x9a
          pBaseHandle->RxFrameLevel =0 ;
 8008b0a:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008b0e:	481e      	ldr	r0, [pc, #120]	; (8008b88 <UFCP_RX_IRQ_Handler+0xc0>)
}
 8008b10:	b003      	add	sp, #12
 8008b12:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8008b14:	8a01      	ldrh	r1, [r0, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 8008b16:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 8008b1a:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8008b1c:	8241      	strh	r1, [r0, #18]
        pBaseHandle->RxFrameLevel++;
 8008b1e:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8008b22:	481a      	ldr	r0, [pc, #104]	; (8008b8c <UFCP_RX_IRQ_Handler+0xc4>)
}
 8008b24:	b003      	add	sp, #12
 8008b26:	bd30      	pop	{r4, r5, pc}
          pBaseHandle->RxTimeoutCountdown = 0;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8008b2e:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
          pBaseHandle->RxTimeoutCountdown = 0;
 8008b32:	8243      	strh	r3, [r0, #18]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b34:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008b38:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3c:	e841 3200 	strex	r2, r3, [r1]
 8008b40:	2a00      	cmp	r2, #0
 8008b42:	d1f7      	bne.n	8008b34 <UFCP_RX_IRQ_Handler+0x6c>
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8008b44:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8008b48:	f104 0099 	add.w	r0, r4, #153	; 0x99
 8008b4c:	f7fd fee4 	bl	8006918 <FCP_CalcCRC>
 8008b50:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8008b54:	4283      	cmp	r3, r0
 8008b56:	d10a      	bne.n	8008b6e <UFCP_RX_IRQ_Handler+0xa6>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8008b58:	6820      	ldr	r0, [r4, #0]
 8008b5a:	68a5      	ldr	r5, [r4, #8]
 8008b5c:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8008b60:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 8008b64:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8008b68:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8008b6a:	4809      	ldr	r0, [pc, #36]	; (8008b90 <UFCP_RX_IRQ_Handler+0xc8>)
 8008b6c:	e7d0      	b.n	8008b10 <UFCP_RX_IRQ_Handler+0x48>
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008b6e:	4620      	mov	r0, r4
 8008b70:	2301      	movs	r3, #1
            error_code = FCP_MSG_RX_BAD_CRC;
 8008b72:	240a      	movs	r4, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008b74:	f10d 0207 	add.w	r2, sp, #7
 8008b78:	21ff      	movs	r1, #255	; 0xff
            error_code = FCP_MSG_RX_BAD_CRC;
 8008b7a:	f88d 4007 	strb.w	r4, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008b7e:	f7ff ff47 	bl	8008a10 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8008b82:	4803      	ldr	r0, [pc, #12]	; (8008b90 <UFCP_RX_IRQ_Handler+0xc8>)
  return ret_val;
 8008b84:	e7c4      	b.n	8008b10 <UFCP_RX_IRQ_Handler+0x48>
 8008b86:	bf00      	nop
 8008b88:	080090d4 	.word	0x080090d4
 8008b8c:	080090d6 	.word	0x080090d6
 8008b90:	080090d8 	.word	0x080090d8

08008b94 <UFCP_OVR_IRQ_Handler>:
{
 8008b94:	b510      	push	{r4, lr}
 8008b96:	b082      	sub	sp, #8
  error_code = UFCP_MSG_OVERRUN;
 8008b98:	2408      	movs	r4, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	f10d 0207 	add.w	r2, sp, #7
 8008ba0:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 8008ba2:	f88d 4007 	strb.w	r4, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008ba6:	f7ff ff33 	bl	8008a10 <UFCP_Send>
}
 8008baa:	b002      	add	sp, #8
 8008bac:	bd10      	pop	{r4, pc}
 8008bae:	bf00      	nop

08008bb0 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 8008bb6:	4770      	bx	lr

08008bb8 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 8008bb8:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8008bba:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8008bbc:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->wElSpeedDpp32 = 0;
 8008bbe:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 8008bc2:	7003      	strb	r3, [r0, #0]
  pHandle->_Super.hElAngle = 0;
 8008bc4:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 8008bc6:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 8008bc8:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 8008bca:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 8008bcc:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hElAngleAccu = 0;
 8008bce:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop

08008bd4 <VSS_Init>:
{
 8008bd4:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 8008bd6:	f7ff ffef 	bl	8008bb8 <VSS_Clear>
}
 8008bda:	bd08      	pop	{r3, pc}

08008bdc <VSS_CalcElAngle>:
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;

  if ( pHandle->bCopyObserver == true )
 8008bdc:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 8008be0:	b123      	cbz	r3, 8008bec <VSS_CalcElAngle+0x10>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 8008be2:	f9b1 2000 	ldrsh.w	r2, [r1]
    {
      hRetAngle = pHandle->hElAngleAccu;
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 8008be6:	8082      	strh	r2, [r0, #4]
  return hRetAngle;
}
 8008be8:	4610      	mov	r0, r2
 8008bea:	4770      	bx	lr
{
 8008bec:	b4f0      	push	{r4, r5, r6, r7}
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008bee:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8008bf0:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8008bf4:	88c7      	ldrh	r7, [r0, #6]
    if ( pHandle->bTransitionStarted == true )
 8008bf6:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 8008bfa:	7844      	ldrb	r4, [r0, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8008bfc:	fb95 f4f4 	sdiv	r4, r5, r4
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008c00:	442b      	add	r3, r5
 8008c02:	b21a      	sxth	r2, r3
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8008c04:	443c      	add	r4, r7
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008c06:	8602      	strh	r2, [r0, #48]	; 0x30
 8008c08:	b29b      	uxth	r3, r3
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8008c0a:	80c4      	strh	r4, [r0, #6]
    if ( pHandle->bTransitionStarted == true )
 8008c0c:	b1de      	cbz	r6, 8008c46 <VSS_CalcElAngle+0x6a>
      if ( pHandle->hTransitionRemainingSteps == 0 )
 8008c0e:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
 8008c12:	b1e4      	cbz	r4, 8008c4e <VSS_CalcElAngle+0x72>
        pHandle->hTransitionRemainingSteps--;
 8008c14:	3c01      	subs	r4, #1
 8008c16:	b224      	sxth	r4, r4
 8008c18:	85c4      	strh	r4, [r0, #46]	; 0x2e
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8008c1a:	2d00      	cmp	r5, #0
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8008c1c:	8809      	ldrh	r1, [r1, #0]
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8008c1e:	db27      	blt.n	8008c70 <VSS_CalcElAngle+0x94>
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8008c20:	1acb      	subs	r3, r1, r3
 8008c22:	b21b      	sxth	r3, r3
 8008c24:	2601      	movs	r6, #1
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 8008c26:	f9b0 5036 	ldrsh.w	r5, [r0, #54]	; 0x36
        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 8008c2a:	fb03 f404 	mul.w	r4, r3, r4
        if ( hAngleDiff >= 0 )
 8008c2e:	2b00      	cmp	r3, #0
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 8008c30:	fb94 f4f5 	sdiv	r4, r4, r5
        hAngleCorr *= hSignCorr;
 8008c34:	fb14 f406 	smulbb	r4, r4, r6
 8008c38:	b2a4      	uxth	r4, r4
        if ( hAngleDiff >= 0 )
 8008c3a:	db12      	blt.n	8008c62 <VSS_CalcElAngle+0x86>
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8008c3c:	1b0c      	subs	r4, r1, r4
          pHandle->bTransitionLocked = true;
 8008c3e:	2301      	movs	r3, #1
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8008c40:	b222      	sxth	r2, r4
          pHandle->bTransitionLocked = true;
 8008c42:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  pHandle->_Super.hElAngle = hRetAngle;
 8008c46:	8082      	strh	r2, [r0, #4]
}
 8008c48:	bcf0      	pop	{r4, r5, r6, r7}
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	4770      	bx	lr
        hRetAngle = *( int16_t * )pInputVars_str;
 8008c4e:	f9b1 2000 	ldrsh.w	r2, [r1]
        pHandle->_Super.bSpeedErrorNumber = 0u;
 8008c52:	7004      	strb	r4, [r0, #0]
        pHandle->bTransitionEnded = true;
 8008c54:	2301      	movs	r3, #1
 8008c56:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  pHandle->_Super.hElAngle = hRetAngle;
 8008c5a:	8082      	strh	r2, [r0, #4]
}
 8008c5c:	bcf0      	pop	{r4, r5, r6, r7}
 8008c5e:	4610      	mov	r0, r2
 8008c60:	4770      	bx	lr
          if ( pHandle->bTransitionLocked == false )
 8008c62:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d0ed      	beq.n	8008c46 <VSS_CalcElAngle+0x6a>
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 8008c6a:	440c      	add	r4, r1
 8008c6c:	b222      	sxth	r2, r4
 8008c6e:	e7ea      	b.n	8008c46 <VSS_CalcElAngle+0x6a>
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 8008c70:	1a5b      	subs	r3, r3, r1
 8008c72:	b21b      	sxth	r3, r3
 8008c74:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8008c78:	e7d5      	b.n	8008c26 <VSS_CalcElAngle+0x4a>
 8008c7a:	bf00      	nop

08008c7c <VSS_CalcAvrgMecSpeedUnit>:
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
  bool SpeedSensorReliability = false;

  if ( pHandle->hRemainingStep > 1u )
 8008c7c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8008c7e:	2b01      	cmp	r3, #1
{
 8008c80:	b470      	push	{r4, r5, r6}
  if ( pHandle->hRemainingStep > 1u )
 8008c82:	d925      	bls.n	8008cd0 <VSS_CalcAvrgMecSpeedUnit+0x54>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8008c84:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 8008c88:	4413      	add	r3, r2
 8008c8a:	6243      	str	r3, [r0, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	bfb8      	it	lt
 8008c90:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8008c94:	8b42      	ldrh	r2, [r0, #26]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8008c96:	7846      	ldrb	r6, [r0, #1]
 8008c98:	69c5      	ldr	r5, [r0, #28]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8008c9a:	bfb8      	it	lt
 8008c9c:	33ff      	addlt	r3, #255	; 0xff
 8008c9e:	141c      	asrs	r4, r3, #16
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8008ca0:	fb04 f202 	mul.w	r2, r4, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8008ca4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008ca8:	0053      	lsls	r3, r2, #1
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8008caa:	fb05 f506 	mul.w	r5, r5, r6
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8008cae:	fb93 f3f5 	sdiv	r3, r3, r5
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8008cb2:	b21b      	sxth	r3, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8008cb4:	81c4      	strh	r4, [r0, #14]
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8008cb6:	800b      	strh	r3, [r1, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;

    pHandle->hRemainingStep--;
 8008cb8:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8008cba:	8183      	strh	r3, [r0, #12]
    pHandle->hRemainingStep--;
 8008cbc:	1e53      	subs	r3, r2, #1
 8008cbe:	8503      	strh	r3, [r0, #40]	; 0x28
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 8008cc0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8008cc4:	b963      	cbnz	r3, 8008ce0 <VSS_CalcAvrgMecSpeedUnit+0x64>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8008cc6:	78c2      	ldrb	r2, [r0, #3]
 8008cc8:	7002      	strb	r2, [r0, #0]
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
  }

  return ( SpeedSensorReliability );
}
 8008cca:	bc70      	pop	{r4, r5, r6}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	4770      	bx	lr
  else if ( pHandle->hRemainingStep == 1u )
 8008cd0:	d009      	beq.n	8008ce6 <VSS_CalcAvrgMecSpeedUnit+0x6a>
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8008cd2:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8008cd6:	800b      	strh	r3, [r1, #0]
  if ( pHandle->bTransitionEnded == false )
 8008cd8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d0f2      	beq.n	8008cc6 <VSS_CalcAvrgMecSpeedUnit+0x4a>
}
 8008ce0:	bc70      	pop	{r4, r5, r6}
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 8008ce2:	f7ff b9b5 	b.w	8008050 <SPD_IsMecSpeedReliable>
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8008ce6:	f9b0 502a 	ldrsh.w	r5, [r0, #42]	; 0x2a
 8008cea:	800d      	strh	r5, [r1, #0]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008cec:	8b43      	ldrh	r3, [r0, #26]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8008cee:	69c2      	ldr	r2, [r0, #28]
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008cf0:	7844      	ldrb	r4, [r0, #1]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8008cf2:	8185      	strh	r5, [r0, #12]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008cf4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8008cf8:	fb02 f205 	mul.w	r2, r2, r5
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008cfc:	005b      	lsls	r3, r3, #1
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 8008cfe:	fb92 f3f3 	sdiv	r3, r2, r3
    pHandle->hRemainingStep = 0u;
 8008d02:	2200      	movs	r2, #0
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008d04:	fb14 f303 	smulbb	r3, r4, r3
 8008d08:	81c3      	strh	r3, [r0, #14]
    pHandle->hRemainingStep = 0u;
 8008d0a:	8502      	strh	r2, [r0, #40]	; 0x28
 8008d0c:	e7d8      	b.n	8008cc0 <VSS_CalcAvrgMecSpeedUnit+0x44>
 8008d0e:	bf00      	nop

08008d10 <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008d10:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 8008d12:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hElAngle = hMecAngle;
 8008d14:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008d16:	fb91 f1f3 	sdiv	r1, r1, r3
 8008d1a:	80c1      	strh	r1, [r0, #6]
}
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop

08008d20 <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 8008d20:	b470      	push	{r4, r5, r6}
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 8008d22:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8008d26:	b984      	cbnz	r4, 8008d4a <VSS_SetMecAcceleration+0x2a>
  {
    if ( hDurationms == 0u )
 8008d28:	b98a      	cbnz	r2, 8008d4e <VSS_SetMecAcceleration+0x2e>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008d2a:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8008d2c:	69c4      	ldr	r4, [r0, #28]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008d2e:	7845      	ldrb	r5, [r0, #1]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8008d30:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008d32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008d36:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8008d38:	fb04 f401 	mul.w	r4, r4, r1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008d3c:	fb94 f3f3 	sdiv	r3, r4, r3
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008d40:	fb15 f303 	smulbb	r3, r5, r3

      pHandle->hRemainingStep = 0u;
 8008d44:	8502      	strh	r2, [r0, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008d46:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008d48:	81c3      	strh	r3, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 8008d4a:	bc70      	pop	{r4, r5, r6}
 8008d4c:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8008d4e:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8008d50:	4d11      	ldr	r5, [pc, #68]	; (8008d98 <VSS_SetMecAcceleration+0x78>)
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008d52:	8b44      	ldrh	r4, [r0, #26]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8008d54:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008d58:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8008d5a:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8008d5e:	fba5 2303 	umull	r2, r3, r5, r3
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008d62:	69c2      	ldr	r2, [r0, #28]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 8008d64:	7845      	ldrb	r5, [r0, #1]
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8008d66:	f3c3 138f 	ubfx	r3, r3, #6, #16
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008d6a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008d6e:	0064      	lsls	r4, r4, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008d70:	fb02 f201 	mul.w	r2, r2, r1
      hNbrStep++;
 8008d74:	3301      	adds	r3, #1
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8008d76:	fb96 f1f5 	sdiv	r1, r6, r5
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008d7a:	fb92 f2f4 	sdiv	r2, r2, r4
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8008d7e:	1a52      	subs	r2, r2, r1
      hNbrStep++;
 8008d80:	b29b      	uxth	r3, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8008d82:	0436      	lsls	r6, r6, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8008d84:	0412      	lsls	r2, r2, #16
 8008d86:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8008d8a:	fb05 f202 	mul.w	r2, r5, r2
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8008d8e:	e9c0 2608 	strd	r2, r6, [r0, #32]
      pHandle->hRemainingStep = hNbrStep;
 8008d92:	8503      	strh	r3, [r0, #40]	; 0x28
}
 8008d94:	bc70      	pop	{r4, r5, r6}
 8008d96:	4770      	bx	lr
 8008d98:	10624dd3 	.word	0x10624dd3

08008d9c <VSS_SetStartTransition>:
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
  bool bAux = true;
  if ( bCommand == true )
 8008d9c:	b151      	cbz	r1, 8008db4 <VSS_SetStartTransition+0x18>
  {
    pHandle->bTransitionStarted = true;

    if ( pHandle->hTransitionSteps == 0 )
 8008d9e:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
    pHandle->bTransitionStarted = true;
 8008da2:	2201      	movs	r2, #1
 8008da4:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    if ( pHandle->hTransitionSteps == 0 )
 8008da8:	b923      	cbnz	r3, 8008db4 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionEnded = true;
 8008daa:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 8008dae:	7003      	strb	r3, [r0, #0]
      bAux = false;
 8008db0:	4618      	mov	r0, r3
    }
  }
  return bAux;
}
 8008db2:	4770      	bx	lr
  bool bAux = true;
 8008db4:	2001      	movs	r0, #1
 8008db6:	4770      	bx	lr

08008db8 <VSS_TransitionEnded>:
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
    return pHandle->bTransitionEnded;
}
 8008db8:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop

08008dc0 <__libc_init_array>:
 8008dc0:	b570      	push	{r4, r5, r6, lr}
 8008dc2:	4d0d      	ldr	r5, [pc, #52]	; (8008df8 <__libc_init_array+0x38>)
 8008dc4:	4c0d      	ldr	r4, [pc, #52]	; (8008dfc <__libc_init_array+0x3c>)
 8008dc6:	1b64      	subs	r4, r4, r5
 8008dc8:	10a4      	asrs	r4, r4, #2
 8008dca:	2600      	movs	r6, #0
 8008dcc:	42a6      	cmp	r6, r4
 8008dce:	d109      	bne.n	8008de4 <__libc_init_array+0x24>
 8008dd0:	4d0b      	ldr	r5, [pc, #44]	; (8008e00 <__libc_init_array+0x40>)
 8008dd2:	4c0c      	ldr	r4, [pc, #48]	; (8008e04 <__libc_init_array+0x44>)
 8008dd4:	f000 f820 	bl	8008e18 <_init>
 8008dd8:	1b64      	subs	r4, r4, r5
 8008dda:	10a4      	asrs	r4, r4, #2
 8008ddc:	2600      	movs	r6, #0
 8008dde:	42a6      	cmp	r6, r4
 8008de0:	d105      	bne.n	8008dee <__libc_init_array+0x2e>
 8008de2:	bd70      	pop	{r4, r5, r6, pc}
 8008de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008de8:	4798      	blx	r3
 8008dea:	3601      	adds	r6, #1
 8008dec:	e7ee      	b.n	8008dcc <__libc_init_array+0xc>
 8008dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8008df2:	4798      	blx	r3
 8008df4:	3601      	adds	r6, #1
 8008df6:	e7f2      	b.n	8008dde <__libc_init_array+0x1e>
 8008df8:	080090e4 	.word	0x080090e4
 8008dfc:	080090e4 	.word	0x080090e4
 8008e00:	080090e4 	.word	0x080090e4
 8008e04:	080090e8 	.word	0x080090e8

08008e08 <memset>:
 8008e08:	4402      	add	r2, r0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d100      	bne.n	8008e12 <memset+0xa>
 8008e10:	4770      	bx	lr
 8008e12:	f803 1b01 	strb.w	r1, [r3], #1
 8008e16:	e7f9      	b.n	8008e0c <memset+0x4>

08008e18 <_init>:
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	bf00      	nop
 8008e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1e:	bc08      	pop	{r3}
 8008e20:	469e      	mov	lr, r3
 8008e22:	4770      	bx	lr

08008e24 <_fini>:
 8008e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e26:	bf00      	nop
 8008e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e2a:	bc08      	pop	{r3}
 8008e2c:	469e      	mov	lr, r3
 8008e2e:	4770      	bx	lr
