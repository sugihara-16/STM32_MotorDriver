
cobra_2217_12_with_AS5600.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a58  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08008c30  08008c30  00018c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008edc  08008edc  00020620  2**0
                  CONTENTS
  4 .ARM          00000008  08008edc  08008edc  00018edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ee4  08008ee4  00020620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ee4  08008ee4  00018ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ee8  08008ee8  00018ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000620  20000000  08008eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  20000620  0800950c  00020620  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bcc  0800950c  00020bcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020620  2**0
                  CONTENTS, READONLY
 12 .debug_line   00045c40  00000000  00000000  00020650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0006ab11  00000000  00000000  00066290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009001  00000000  00000000  000d0da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e60  00000000  00000000  000d9da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010173c  00000000  00000000  000dbc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00005280  00000000  00000000  001dd348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c993  00000000  00000000  001e25c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020ef5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a70  00000000  00000000  0020efb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0002989d  00000000  00000000  00214a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000620 	.word	0x20000620
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008c18 	.word	0x08008c18

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000624 	.word	0x20000624
 8000214:	08008c18 	.word	0x08008c18

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000510:	480d      	ldr	r0, [pc, #52]	; (8000548 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000512:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000514:	480d      	ldr	r0, [pc, #52]	; (800054c <LoopForever+0x6>)
  ldr r1, =_edata
 8000516:	490e      	ldr	r1, [pc, #56]	; (8000550 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <LoopForever+0xe>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800051c:	e002      	b.n	8000524 <LoopCopyDataInit>

0800051e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000522:	3304      	adds	r3, #4

08000524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000528:	d3f9      	bcc.n	800051e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052a:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <LoopForever+0x12>)
  ldr r4, =_ebss
 800052c:	4c0b      	ldr	r4, [pc, #44]	; (800055c <LoopForever+0x16>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000530:	e001      	b.n	8000536 <LoopFillZerobss>

08000532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000534:	3204      	adds	r2, #4

08000536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800053a:	f003 f80d 	bl	8003558 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800053e:	f008 fb3f 	bl	8008bc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000542:	f000 f85d 	bl	8000600 <main>

08000546 <LoopForever>:

LoopForever:
    b LoopForever
 8000546:	e7fe      	b.n	8000546 <LoopForever>
  ldr   r0, =_estack
 8000548:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000550:	20000620 	.word	0x20000620
  ldr r2, =_sidata
 8000554:	08008eec 	.word	0x08008eec
  ldr r2, =_sbss
 8000558:	20000620 	.word	0x20000620
  ldr r4, =_ebss
 800055c:	20000bcc 	.word	0x20000bcc

08000560 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <BusFault_Handler>
	...

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	2100      	movs	r1, #0
{
 8000568:	b0a7      	sub	sp, #156	; 0x9c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056a:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056c:	2238      	movs	r2, #56	; 0x38
 800056e:	a806      	add	r0, sp, #24
 8000570:	f008 fb4a 	bl	8008c08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000574:	4621      	mov	r1, r4
 8000576:	2244      	movs	r2, #68	; 0x44
 8000578:	a815      	add	r0, sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057a:	e9cd 4400 	strd	r4, r4, [sp]
 800057e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000582:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000584:	f008 fb40 	bl	8008c08 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000588:	4620      	mov	r0, r4
 800058a:	f004 fad3 	bl	8004b34 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058e:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000592:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000598:	2155      	movs	r1, #85	; 0x55
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800059a:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059e:	e9cd 6706 	strd	r6, r7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a2:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80005a6:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80005ac:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f004 fb46 	bl	8004c40 <HAL_RCC_OscConfig>
 80005b4:	b108      	cbz	r0, 80005ba <SystemClock_Config+0x56>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <SystemClock_Config+0x54>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ba:	4603      	mov	r3, r0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	2200      	movs	r2, #0
 80005c0:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	240f      	movs	r4, #15
 80005c6:	2503      	movs	r5, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c8:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80005ce:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d2:	f004 fdb9 	bl	8005148 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	b108      	cbz	r0, 80005de <SystemClock_Config+0x7a>
 80005da:	b672      	cpsid	i
  while (1)
 80005dc:	e7fe      	b.n	80005dc <SystemClock_Config+0x78>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80005de:	f248 0102 	movw	r1, #32770	; 0x8002
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80005e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e6:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005e8:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80005ea:	9115      	str	r1, [sp, #84]	; 0x54
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80005ec:	9224      	str	r2, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ee:	f004 fee7 	bl	80053c0 <HAL_RCCEx_PeriphCLKConfig>
 80005f2:	b108      	cbz	r0, 80005f8 <SystemClock_Config+0x94>
 80005f4:	b672      	cpsid	i
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <SystemClock_Config+0x92>
}
 80005f8:	b027      	add	sp, #156	; 0x9c
 80005fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fc:	0000      	movs	r0, r0
	...

08000600 <main>:
{
 8000600:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	2600      	movs	r6, #0
{
 8000606:	b0ad      	sub	sp, #180	; 0xb4
  HAL_Init();
 8000608:	f002 ffd6 	bl	80035b8 <HAL_Init>
  SystemClock_Config();
 800060c:	f7ff ffaa 	bl	8000564 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	e9cd 661f 	strd	r6, r6, [sp, #124]	; 0x7c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000614:	4bb2      	ldr	r3, [pc, #712]	; (80008e0 <main+0x2e0>)
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000616:	48b3      	ldr	r0, [pc, #716]	; (80008e4 <main+0x2e4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hadc1.Instance = ADC1;
 800061a:	f8df b308 	ldr.w	fp, [pc, #776]	; 8000924 <main+0x324>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	f042 0204 	orr.w	r2, r2, #4
 8000622:	64da      	str	r2, [r3, #76]	; 0x4c
 8000624:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000626:	f002 0204 	and.w	r2, r2, #4
 800062a:	9202      	str	r2, [sp, #8]
 800062c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800062e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000630:	f042 0220 	orr.w	r2, r2, #32
 8000634:	64da      	str	r2, [r3, #76]	; 0x4c
 8000636:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000638:	f002 0220 	and.w	r2, r2, #32
 800063c:	9203      	str	r2, [sp, #12]
 800063e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000642:	f042 0201 	orr.w	r2, r2, #1
 8000646:	64da      	str	r2, [r3, #76]	; 0x4c
 8000648:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800064a:	f002 0201 	and.w	r2, r2, #1
 800064e:	9204      	str	r2, [sp, #16]
 8000650:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000654:	f042 0202 	orr.w	r2, r2, #2
 8000658:	64da      	str	r2, [r3, #76]	; 0x4c
 800065a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	961e      	str	r6, [sp, #120]	; 0x78
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000664:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000668:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800066c:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800066e:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	9c05      	ldr	r4, [sp, #20]
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000674:	f004 f8da 	bl	800482c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_ENCODER_Z_Pin;
 8000678:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800067c:	f44f 7280 	mov.w	r2, #256	; 0x100
  HAL_GPIO_Init(M1_ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 8000680:	4899      	ldr	r0, [pc, #612]	; (80008e8 <main+0x2e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(M1_ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 8000684:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = M1_ENCODER_Z_Pin;
 8000686:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(M1_ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 800068a:	f004 f8cf 	bl	800482c <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800068e:	4631      	mov	r1, r6
 8000690:	223c      	movs	r2, #60	; 0x3c
 8000692:	a81c      	add	r0, sp, #112	; 0x70
  ADC_MultiModeTypeDef multimode = {0};
 8000694:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
 8000698:	9610      	str	r6, [sp, #64]	; 0x40
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800069a:	f008 fab5 	bl	8008c08 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 800069e:	4631      	mov	r1, r6
 80006a0:	a814      	add	r0, sp, #80	; 0x50
 80006a2:	2220      	movs	r2, #32
 80006a4:	f008 fab0 	bl	8008c08 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006a8:	f44f 2a00 	mov.w	sl, #524288	; 0x80000
  hadc1.Instance = ADC1;
 80006ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80006b0:	f44f 4900 	mov.w	r9, #32768	; 0x8000
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006b4:	2501      	movs	r5, #1
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b6:	f04f 0804 	mov.w	r8, #4
  hadc1.Init.NbrOfConversion = 2;
 80006ba:	2402      	movs	r4, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006bc:	4658      	mov	r0, fp
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006be:	f8ab 601c 	strh.w	r6, [fp, #28]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c2:	e9cb 660b 	strd	r6, r6, [fp, #44]	; 0x2c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006c6:	e9cb 3a00 	strd	r3, sl, [fp]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ca:	e9cb 5805 	strd	r5, r8, [fp, #20]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ce:	f8cb 6008 	str.w	r6, [fp, #8]
  hadc1.Init.GainCompensation = 0;
 80006d2:	f8cb 6010 	str.w	r6, [fp, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d6:	f88b 6024 	strb.w	r6, [fp, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006da:	f88b 6038 	strb.w	r6, [fp, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006de:	f8cb 603c 	str.w	r6, [fp, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006e2:	f88b 6040 	strb.w	r6, [fp, #64]	; 0x40
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80006e6:	f8cb 900c 	str.w	r9, [fp, #12]
  hadc1.Init.NbrOfConversion = 2;
 80006ea:	f8cb 4020 	str.w	r4, [fp, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ee:	f002 ff97 	bl	8003620 <HAL_ADC_Init>
 80006f2:	b108      	cbz	r0, 80006f8 <main+0xf8>
 80006f4:	b672      	cpsid	i
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <main+0xf6>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006f8:	4603      	mov	r3, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006fa:	a90e      	add	r1, sp, #56	; 0x38
 80006fc:	4658      	mov	r0, fp
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006fe:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000700:	f003 fdfc 	bl	80042fc <HAL_ADCEx_MultiModeConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	b108      	cbz	r0, 800070c <main+0x10c>
 8000708:	b672      	cpsid	i
  while (1)
 800070a:	e7fe      	b.n	800070a <main+0x10a>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800070c:	4a77      	ldr	r2, [pc, #476]	; (80008ec <main+0x2ec>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800070e:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000712:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000716:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800071a:	2309      	movs	r3, #9
 800071c:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8000720:	2201      	movs	r2, #1
 8000722:	237f      	movs	r3, #127	; 0x7f
 8000724:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8000728:	2604      	movs	r6, #4
 800072a:	2700      	movs	r7, #0
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 800072c:	2284      	movs	r2, #132	; 0x84
 800072e:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000730:	a91c      	add	r1, sp, #112	; 0x70
 8000732:	4658      	mov	r0, fp
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000734:	e9cd 6720 	strd	r6, r7, [sp, #128]	; 0x80
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000738:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  sConfigInjected.InjectedNbrOfConversion = 2;
 800073c:	9424      	str	r4, [sp, #144]	; 0x90
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800073e:	f003 fadd 	bl	8003cfc <HAL_ADCEx_InjectedConfigChannel>
 8000742:	b108      	cbz	r0, 8000748 <main+0x148>
 8000744:	b672      	cpsid	i
  while (1)
 8000746:	e7fe      	b.n	8000746 <main+0x146>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000748:	a361      	add	r3, pc, #388	; (adr r3, 80008d0 <main+0x2d0>)
 800074a:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800074e:	a91c      	add	r1, sp, #112	; 0x70
 8000750:	4658      	mov	r0, fp
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000752:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000756:	f003 fad1 	bl	8003cfc <HAL_ADCEx_InjectedConfigChannel>
 800075a:	b108      	cbz	r0, 8000760 <main+0x160>
 800075c:	b672      	cpsid	i
  while (1)
 800075e:	e7fe      	b.n	800075e <main+0x15e>
  sConfig.Channel = ADC_CHANNEL_1;
 8000760:	4a63      	ldr	r2, [pc, #396]	; (80008f0 <main+0x2f0>)
 8000762:	2306      	movs	r3, #6
 8000764:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000768:	a914      	add	r1, sp, #80	; 0x50
  sConfig.Channel = ADC_CHANNEL_1;
 800076a:	2204      	movs	r2, #4
 800076c:	237f      	movs	r3, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076e:	4658      	mov	r0, fp
  sConfig.Channel = ADC_CHANNEL_1;
 8000770:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 8000774:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000778:	f003 f858 	bl	800382c <HAL_ADC_ConfigChannel>
 800077c:	b108      	cbz	r0, 8000782 <main+0x182>
 800077e:	b672      	cpsid	i
  while (1)
 8000780:	e7fe      	b.n	8000780 <main+0x180>
  sConfig.Channel = ADC_CHANNEL_5;
 8000782:	a355      	add	r3, pc, #340	; (adr r3, 80008d8 <main+0x2d8>)
 8000784:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000788:	a914      	add	r1, sp, #80	; 0x50
 800078a:	4658      	mov	r0, fp
  sConfig.Channel = ADC_CHANNEL_5;
 800078c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000790:	f003 f84c 	bl	800382c <HAL_ADC_ConfigChannel>
 8000794:	4601      	mov	r1, r0
 8000796:	b108      	cbz	r0, 800079c <main+0x19c>
 8000798:	b672      	cpsid	i
  while (1)
 800079a:	e7fe      	b.n	800079a <main+0x19a>
  hadc2.Instance = ADC2;
 800079c:	f8df b188 	ldr.w	fp, [pc, #392]	; 8000928 <main+0x328>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80007a0:	9001      	str	r0, [sp, #4]
 80007a2:	223c      	movs	r2, #60	; 0x3c
 80007a4:	a81c      	add	r0, sp, #112	; 0x70
 80007a6:	f008 fa2f 	bl	8008c08 <memset>
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007aa:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 80007ac:	4b51      	ldr	r3, [pc, #324]	; (80008f4 <main+0x2f4>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007ae:	f8ab 101c 	strh.w	r1, [fp, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007b2:	4658      	mov	r0, fp
  hadc2.Instance = ADC2;
 80007b4:	f8cb 3000 	str.w	r3, [fp]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80007b8:	e9cb 1902 	strd	r1, r9, [fp, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007bc:	e9cb 1504 	strd	r1, r5, [fp, #16]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80007c0:	f8cb a004 	str.w	sl, [fp, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c4:	f8cb 8018 	str.w	r8, [fp, #24]
  hadc2.Init.NbrOfConversion = 1;
 80007c8:	f8cb 5020 	str.w	r5, [fp, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007cc:	f88b 1024 	strb.w	r1, [fp, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007d0:	f88b 1038 	strb.w	r1, [fp, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007d4:	f8cb 103c 	str.w	r1, [fp, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80007d8:	f88b 1040 	strb.w	r1, [fp, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007dc:	f002 ff20 	bl	8003620 <HAL_ADC_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b108      	cbz	r0, 80007e8 <main+0x1e8>
 80007e4:	b672      	cpsid	i
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <main+0x1e6>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80007e8:	f8df 8100 	ldr.w	r8, [pc, #256]	; 80008ec <main+0x2ec>
  sConfigInjected.InjectedNbrOfConversion = 2;
 80007ec:	9424      	str	r4, [sp, #144]	; 0x90
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80007ee:	f04f 0909 	mov.w	r9, #9
 80007f2:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80007f6:	2484      	movs	r4, #132	; 0x84
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80007f8:	f04f 0801 	mov.w	r8, #1
 80007fc:	f04f 097f 	mov.w	r9, #127	; 0x7f
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000800:	2580      	movs	r5, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000802:	a91c      	add	r1, sp, #112	; 0x70
 8000804:	4658      	mov	r0, fp
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000806:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 800080a:	e9cd 6720 	strd	r6, r7, [sp, #128]	; 0x80
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 800080e:	e9cd 4526 	strd	r4, r5, [sp, #152]	; 0x98
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000812:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000816:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800081a:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800081e:	f003 fa6d 	bl	8003cfc <HAL_ADCEx_InjectedConfigChannel>
 8000822:	b108      	cbz	r0, 8000828 <main+0x228>
 8000824:	b672      	cpsid	i
  while (1)
 8000826:	e7fe      	b.n	8000826 <main+0x226>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8000828:	4a33      	ldr	r2, [pc, #204]	; (80008f8 <main+0x2f8>)
 800082a:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800082e:	4658      	mov	r0, fp
 8000830:	a91c      	add	r1, sp, #112	; 0x70
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8000832:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000836:	f003 fa61 	bl	8003cfc <HAL_ADCEx_InjectedConfigChannel>
 800083a:	b108      	cbz	r0, 8000840 <main+0x240>
 800083c:	b672      	cpsid	i
  while (1)
 800083e:	e7fe      	b.n	800083e <main+0x23e>
  hcomp1.Instance = COMP1;
 8000840:	4b2e      	ldr	r3, [pc, #184]	; (80008fc <main+0x2fc>)
 8000842:	492f      	ldr	r1, [pc, #188]	; (8000900 <main+0x300>)
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000844:	6058      	str	r0, [r3, #4]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000846:	e9c3 0003 	strd	r0, r0, [r3, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800084a:	e9c3 0005 	strd	r0, r0, [r3, #20]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 800084e:	2240      	movs	r2, #64	; 0x40
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000850:	4618      	mov	r0, r3
  hcomp1.Instance = COMP1;
 8000852:	6019      	str	r1, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8000854:	609a      	str	r2, [r3, #8]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000856:	f003 fdb7 	bl	80043c8 <HAL_COMP_Init>
 800085a:	b108      	cbz	r0, 8000860 <main+0x260>
 800085c:	b672      	cpsid	i
  while (1)
 800085e:	e7fe      	b.n	800085e <main+0x25e>
  hcomp2.Instance = COMP2;
 8000860:	4828      	ldr	r0, [pc, #160]	; (8000904 <main+0x304>)
 8000862:	4b29      	ldr	r3, [pc, #164]	; (8000908 <main+0x308>)
 8000864:	6003      	str	r3, [r0, #0]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000866:	2440      	movs	r4, #64	; 0x40
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000868:	2300      	movs	r3, #0
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800086a:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800086e:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000872:	6043      	str	r3, [r0, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000874:	6084      	str	r4, [r0, #8]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000876:	f003 fda7 	bl	80043c8 <HAL_COMP_Init>
 800087a:	b108      	cbz	r0, 8000880 <main+0x280>
 800087c:	b672      	cpsid	i
  while (1)
 800087e:	e7fe      	b.n	800087e <main+0x27e>
  hcomp4.Instance = COMP4;
 8000880:	4b22      	ldr	r3, [pc, #136]	; (800090c <main+0x30c>)
 8000882:	4a23      	ldr	r2, [pc, #140]	; (8000910 <main+0x310>)
 8000884:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000886:	e9c3 0401 	strd	r0, r4, [r3, #4]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800088a:	e9c3 0003 	strd	r0, r0, [r3, #12]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800088e:	e9c3 0005 	strd	r0, r0, [r3, #20]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000892:	4618      	mov	r0, r3
 8000894:	f003 fd98 	bl	80043c8 <HAL_COMP_Init>
 8000898:	b108      	cbz	r0, 800089e <main+0x29e>
 800089a:	b672      	cpsid	i
  while (1)
 800089c:	e7fe      	b.n	800089c <main+0x29c>
  hcordic.Instance = CORDIC;
 800089e:	481d      	ldr	r0, [pc, #116]	; (8000914 <main+0x314>)
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <main+0x318>)
 80008a2:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80008a4:	f003 fe36 	bl	8004514 <HAL_CORDIC_Init>
 80008a8:	4601      	mov	r1, r0
 80008aa:	b108      	cbz	r0, 80008b0 <main+0x2b0>
 80008ac:	b672      	cpsid	i
  while (1)
 80008ae:	e7fe      	b.n	80008ae <main+0x2ae>
  hdac3.Instance = DAC3;
 80008b0:	4d1a      	ldr	r5, [pc, #104]	; (800091c <main+0x31c>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80008b2:	2230      	movs	r2, #48	; 0x30
 80008b4:	a81c      	add	r0, sp, #112	; 0x70
 80008b6:	f008 f9a7 	bl	8008c08 <memset>
  hdac3.Instance = DAC3;
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <main+0x320>)
 80008bc:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 80008be:	4628      	mov	r0, r5
 80008c0:	f003 febc 	bl	800463c <HAL_DAC_Init>
 80008c4:	b390      	cbz	r0, 800092c <main+0x32c>
 80008c6:	b672      	cpsid	i
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <main+0x2c8>
 80008ca:	bf00      	nop
 80008cc:	f3af 8000 	nop.w
 80008d0:	32601000 	.word	0x32601000
 80008d4:	0000010f 	.word	0x0000010f
 80008d8:	14f00020 	.word	0x14f00020
 80008dc:	0000000c 	.word	0x0000000c
 80008e0:	40021000 	.word	0x40021000
 80008e4:	48000800 	.word	0x48000800
 80008e8:	48000400 	.word	0x48000400
 80008ec:	0c900008 	.word	0x0c900008
 80008f0:	04300002 	.word	0x04300002
 80008f4:	50000100 	.word	0x50000100
 80008f8:	cb8c0000 	.word	0xcb8c0000
 80008fc:	200007b4 	.word	0x200007b4
 8000900:	40010200 	.word	0x40010200
 8000904:	20000918 	.word	0x20000918
 8000908:	40010204 	.word	0x40010204
 800090c:	20000814 	.word	0x20000814
 8000910:	4001020c 	.word	0x4001020c
 8000914:	200008a4 	.word	0x200008a4
 8000918:	40020c00 	.word	0x40020c00
 800091c:	200006ac 	.word	0x200006ac
 8000920:	50001000 	.word	0x50001000
 8000924:	20000838 	.word	0x20000838
 8000928:	2000070c 	.word	0x2000070c
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800092c:	2600      	movs	r6, #0
 800092e:	2700      	movs	r7, #0
 8000930:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
 8000934:	2600      	movs	r6, #0
 8000936:	2702      	movs	r7, #2
 8000938:	e9cd 6720 	strd	r6, r7, [sp, #128]	; 0x80
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800093c:	4602      	mov	r2, r0
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800093e:	2302      	movs	r3, #2
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000940:	f8ad 0074 	strh.w	r0, [sp, #116]	; 0x74
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000944:	2602      	movs	r6, #2
 8000946:	2700      	movs	r7, #0
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000948:	a91c      	add	r1, sp, #112	; 0x70
 800094a:	4628      	mov	r0, r5
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800094c:	e9cd 6722 	strd	r6, r7, [sp, #136]	; 0x88
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000950:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000952:	f003 fe89 	bl	8004668 <HAL_DAC_ConfigChannel>
 8000956:	b108      	cbz	r0, 800095c <main+0x35c>
 8000958:	b672      	cpsid	i
  while (1)
 800095a:	e7fe      	b.n	800095a <main+0x35a>
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800095c:	2210      	movs	r2, #16
 800095e:	4628      	mov	r0, r5
 8000960:	a91c      	add	r1, sp, #112	; 0x70
 8000962:	f003 fe81 	bl	8004668 <HAL_DAC_ConfigChannel>
 8000966:	4602      	mov	r2, r0
 8000968:	b108      	cbz	r0, 800096e <main+0x36e>
 800096a:	b672      	cpsid	i
  while (1)
 800096c:	e7fe      	b.n	800096c <main+0x36c>
  hopamp1.Instance = OPAMP1;
 800096e:	48a4      	ldr	r0, [pc, #656]	; (8000c00 <main+0x600>)
 8000970:	49a4      	ldr	r1, [pc, #656]	; (8000c04 <main+0x604>)
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000972:	6042      	str	r2, [r0, #4]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000974:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000978:	f44f 4540 	mov.w	r5, #49152	; 0xc000
 800097c:	e9c0 6509 	strd	r6, r5, [r0, #36]	; 0x24
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000980:	6084      	str	r4, [r0, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000982:	6102      	str	r2, [r0, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000984:	7502      	strb	r2, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000986:	6182      	str	r2, [r0, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000988:	62c2      	str	r2, [r0, #44]	; 0x2c
  hopamp1.Instance = OPAMP1;
 800098a:	6001      	str	r1, [r0, #0]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800098c:	f004 f84c 	bl	8004a28 <HAL_OPAMP_Init>
 8000990:	b108      	cbz	r0, 8000996 <main+0x396>
 8000992:	b672      	cpsid	i
  while (1)
 8000994:	e7fe      	b.n	8000994 <main+0x394>
  hopamp2.Instance = OPAMP2;
 8000996:	4b9c      	ldr	r3, [pc, #624]	; (8000c08 <main+0x608>)
 8000998:	4a9c      	ldr	r2, [pc, #624]	; (8000c0c <main+0x60c>)
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800099a:	6118      	str	r0, [r3, #16]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 800099c:	e9c3 0401 	strd	r0, r4, [r3, #4]
  hopamp2.Init.InternalOutput = DISABLE;
 80009a0:	7518      	strb	r0, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80009a2:	6198      	str	r0, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80009a4:	62d8      	str	r0, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80009a6:	4618      	mov	r0, r3
  hopamp2.Instance = OPAMP2;
 80009a8:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80009aa:	e9c3 6509 	strd	r6, r5, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80009ae:	f004 f83b 	bl	8004a28 <HAL_OPAMP_Init>
 80009b2:	4602      	mov	r2, r0
 80009b4:	b108      	cbz	r0, 80009ba <main+0x3ba>
 80009b6:	b672      	cpsid	i
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <main+0x3b8>
  hopamp3.Instance = OPAMP3;
 80009ba:	4895      	ldr	r0, [pc, #596]	; (8000c10 <main+0x610>)
 80009bc:	4995      	ldr	r1, [pc, #596]	; (8000c14 <main+0x614>)
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80009be:	6246      	str	r6, [r0, #36]	; 0x24
  hopamp3.Init.InternalOutput = ENABLE;
 80009c0:	2601      	movs	r6, #1
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80009c2:	e9c0 2401 	strd	r2, r4, [r0, #4]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80009c6:	e9c0 520a 	strd	r5, r2, [r0, #40]	; 0x28
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80009ca:	6102      	str	r2, [r0, #16]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80009cc:	6182      	str	r2, [r0, #24]
  hopamp3.Instance = OPAMP3;
 80009ce:	6001      	str	r1, [r0, #0]
  hopamp3.Init.InternalOutput = ENABLE;
 80009d0:	7506      	strb	r6, [r0, #20]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80009d2:	f004 f829 	bl	8004a28 <HAL_OPAMP_Init>
 80009d6:	4604      	mov	r4, r0
 80009d8:	b108      	cbz	r0, 80009de <main+0x3de>
 80009da:	b672      	cpsid	i
  while (1)
 80009dc:	e7fe      	b.n	80009dc <main+0x3dc>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009de:	4601      	mov	r1, r0
 80009e0:	2234      	movs	r2, #52	; 0x34
 80009e2:	a81c      	add	r0, sp, #112	; 0x70
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009e4:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 80009e8:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ec:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 80009f0:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 80009f4:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f8:	e9cd 4407 	strd	r4, r4, [sp, #28]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80009fc:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a00:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a02:	9406      	str	r4, [sp, #24]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000a04:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a06:	941a      	str	r4, [sp, #104]	; 0x68
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a08:	f008 f8fe 	bl	8008c08 <memset>
  htim1.Instance = TIM1;
 8000a0c:	4882      	ldr	r0, [pc, #520]	; (8000c18 <main+0x618>)
 8000a0e:	4d83      	ldr	r5, [pc, #524]	; (8000c1c <main+0x61c>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000a10:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000a12:	2120      	movs	r1, #32
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000a14:	f640 3211 	movw	r2, #2833	; 0xb11
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000a18:	f44f 7380 	mov.w	r3, #256	; 0x100
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000a1c:	e9c0 1202 	strd	r1, r2, [r0, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000a20:	6146      	str	r6, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a22:	6184      	str	r4, [r0, #24]
  htim1.Instance = TIM1;
 8000a24:	6005      	str	r5, [r0, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000a26:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a28:	f004 fed4 	bl	80057d4 <HAL_TIM_Base_Init>
 8000a2c:	b108      	cbz	r0, 8000a32 <main+0x432>
 8000a2e:	b672      	cpsid	i
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <main+0x430>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a32:	4879      	ldr	r0, [pc, #484]	; (8000c18 <main+0x618>)
 8000a34:	f004 ff54 	bl	80058e0 <HAL_TIM_PWM_Init>
 8000a38:	b108      	cbz	r0, 8000a3e <main+0x43e>
 8000a3a:	b672      	cpsid	i
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <main+0x43c>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a3e:	2206      	movs	r2, #6
 8000a40:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000a42:	4875      	ldr	r0, [pc, #468]	; (8000c18 <main+0x618>)
 8000a44:	a90e      	add	r1, sp, #56	; 0x38
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a46:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000a4a:	f005 f87f 	bl	8005b4c <HAL_TIM_SlaveConfigSynchro>
 8000a4e:	b108      	cbz	r0, 8000a54 <main+0x454>
 8000a50:	b672      	cpsid	i
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <main+0x452>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000a54:	2270      	movs	r2, #112	; 0x70
 8000a56:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a58:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a5a:	a906      	add	r1, sp, #24
 8000a5c:	486e      	ldr	r0, [pc, #440]	; (8000c18 <main+0x618>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000a5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a62:	f005 fa45 	bl	8005ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a66:	b108      	cbz	r0, 8000a6c <main+0x46c>
 8000a68:	b672      	cpsid	i
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <main+0x46a>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000a6c:	2402      	movs	r4, #2
 8000a6e:	2501      	movs	r5, #1
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000a70:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a72:	aa0a      	add	r2, sp, #40	; 0x28
 8000a74:	4868      	ldr	r0, [pc, #416]	; (8000c18 <main+0x618>)
 8000a76:	2102      	movs	r1, #2
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000a78:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a7c:	f005 face 	bl	800601c <HAL_TIMEx_ConfigBreakInput>
 8000a80:	b108      	cbz	r0, 8000a86 <main+0x486>
 8000a82:	b672      	cpsid	i
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <main+0x484>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8000a86:	2404      	movs	r4, #4
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a88:	4863      	ldr	r0, [pc, #396]	; (8000c18 <main+0x618>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8000a8a:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a8c:	aa0a      	add	r2, sp, #40	; 0x28
 8000a8e:	2102      	movs	r1, #2
 8000a90:	f005 fac4 	bl	800601c <HAL_TIMEx_ConfigBreakInput>
 8000a94:	b108      	cbz	r0, 8000a9a <main+0x49a>
 8000a96:	b672      	cpsid	i
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <main+0x498>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8000a9a:	2310      	movs	r3, #16
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a9c:	485e      	ldr	r0, [pc, #376]	; (8000c18 <main+0x618>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8000a9e:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000aa0:	aa0a      	add	r2, sp, #40	; 0x28
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	f005 faba 	bl	800601c <HAL_TIMEx_ConfigBreakInput>
 8000aa8:	b108      	cbz	r0, 8000aae <main+0x4ae>
 8000aaa:	b672      	cpsid	i
  while (1)
 8000aac:	e7fe      	b.n	8000aac <main+0x4ac>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aae:	2660      	movs	r6, #96	; 0x60
 8000ab0:	2700      	movs	r7, #0
 8000ab2:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ab6:	4602      	mov	r2, r0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab8:	2600      	movs	r6, #0
 8000aba:	2700      	movs	r7, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000abc:	901a      	str	r0, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000abe:	a914      	add	r1, sp, #80	; 0x50
 8000ac0:	4855      	ldr	r0, [pc, #340]	; (8000c18 <main+0x618>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac2:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
 8000ac6:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aca:	f005 f923 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 8000ace:	b108      	cbz	r0, 8000ad4 <main+0x4d4>
 8000ad0:	b672      	cpsid	i
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <main+0x4d2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ad4:	4850      	ldr	r0, [pc, #320]	; (8000c18 <main+0x618>)
 8000ad6:	4622      	mov	r2, r4
 8000ad8:	a914      	add	r1, sp, #80	; 0x50
 8000ada:	f005 f91b 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 8000ade:	b108      	cbz	r0, 8000ae4 <main+0x4e4>
 8000ae0:	b672      	cpsid	i
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <main+0x4e2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ae4:	484c      	ldr	r0, [pc, #304]	; (8000c18 <main+0x618>)
 8000ae6:	2208      	movs	r2, #8
 8000ae8:	a914      	add	r1, sp, #80	; 0x50
 8000aea:	f005 f913 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 8000aee:	b108      	cbz	r0, 8000af4 <main+0x4f4>
 8000af0:	b672      	cpsid	i
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <main+0x4f2>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000af4:	2370      	movs	r3, #112	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000af6:	4848      	ldr	r0, [pc, #288]	; (8000c18 <main+0x618>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000af8:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000afa:	220c      	movs	r2, #12
 8000afc:	a914      	add	r1, sp, #80	; 0x50
 8000afe:	f005 f909 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 8000b02:	b108      	cbz	r0, 8000b08 <main+0x508>
 8000b04:	b672      	cpsid	i
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <main+0x506>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000b08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b0c:	2344      	movs	r3, #68	; 0x44
 8000b0e:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b18:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8000b1c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000b20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b24:	2200      	movs	r2, #0
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 8000b2c:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b30:	2400      	movs	r4, #0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000b32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b3a:	4837      	ldr	r0, [pc, #220]	; (8000c18 <main+0x618>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b3c:	9428      	str	r4, [sp, #160]	; 0xa0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b3e:	a91c      	add	r1, sp, #112	; 0x70
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000b40:	2603      	movs	r6, #3
 8000b42:	2700      	movs	r7, #0
 8000b44:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 8000b48:	e9cd 6726 	strd	r6, r7, [sp, #152]	; 0x98
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b4c:	f005 fa18 	bl	8005f80 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b50:	4604      	mov	r4, r0
 8000b52:	b108      	cbz	r0, 8000b58 <main+0x558>
 8000b54:	b672      	cpsid	i
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <main+0x556>
  htim4.Instance = TIM4;
 8000b58:	4d31      	ldr	r5, [pc, #196]	; (8000c20 <main+0x620>)
  HAL_TIM_MspPostInit(&htim1);
 8000b5a:	482f      	ldr	r0, [pc, #188]	; (8000c18 <main+0x618>)
 8000b5c:	f001 ff16 	bl	800298c <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 8000b60:	4a30      	ldr	r2, [pc, #192]	; (8000c24 <main+0x624>)
 8000b62:	602a      	str	r2, [r5, #0]
  htim4.Init.Period = M1_PULSE_NBR;
 8000b64:	f643 73ff 	movw	r3, #16383	; 0x3fff
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b68:	2201      	movs	r2, #1
  htim4.Init.Period = M1_PULSE_NBR;
 8000b6a:	60eb      	str	r3, [r5, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8000b72:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 8000b76:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	220c      	movs	r2, #12
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b7e:	a91c      	add	r1, sp, #112	; 0x70
 8000b80:	4628      	mov	r0, r5
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8000b82:	260c      	movs	r6, #12
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b84:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b88:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	e9c5 4401 	strd	r4, r4, [r5, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b90:	9416      	str	r4, [sp, #88]	; 0x58
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b92:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b94:	61ac      	str	r4, [r5, #24]
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8000b96:	9624      	str	r6, [sp, #144]	; 0x90
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b98:	f004 ff26 	bl	80059e8 <HAL_TIM_Encoder_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	b108      	cbz	r0, 8000ba4 <main+0x5a4>
 8000ba0:	b672      	cpsid	i
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <main+0x5a2>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ba4:	a914      	add	r1, sp, #80	; 0x50
 8000ba6:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba8:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000baa:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bac:	f005 f9a0 	bl	8005ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	b108      	cbz	r0, 8000bb8 <main+0x5b8>
 8000bb4:	b672      	cpsid	i
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <main+0x5b6>
  huart2.Instance = USART2;
 8000bb8:	4c1b      	ldr	r4, [pc, #108]	; (8000c28 <main+0x628>)
 8000bba:	491c      	ldr	r1, [pc, #112]	; (8000c2c <main+0x62c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbc:	60a0      	str	r0, [r4, #8]
  huart2.Init.BaudRate = 115200;
 8000bbe:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc2:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 115200;
 8000bc4:	e9c4 1200 	strd	r1, r2, [r4]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc8:	e9c4 3303 	strd	r3, r3, [r4, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bcc:	e9c4 6305 	strd	r6, r3, [r4, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd0:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd4:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd8:	f005 fcc2 	bl	8006560 <HAL_UART_Init>
 8000bdc:	4601      	mov	r1, r0
 8000bde:	b108      	cbz	r0, 8000be4 <main+0x5e4>
 8000be0:	b672      	cpsid	i
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <main+0x5e2>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be4:	4620      	mov	r0, r4
 8000be6:	f005 fd45 	bl	8006674 <HAL_UARTEx_SetTxFifoThreshold>
 8000bea:	4601      	mov	r1, r0
 8000bec:	b108      	cbz	r0, 8000bf2 <main+0x5f2>
 8000bee:	b672      	cpsid	i
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <main+0x5f0>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	f005 fd7c 	bl	80066f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000bf8:	b1d0      	cbz	r0, 8000c30 <main+0x630>
 8000bfa:	b672      	cpsid	i
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <main+0x5fc>
 8000bfe:	bf00      	nop
 8000c00:	200007d8 	.word	0x200007d8
 8000c04:	40010300 	.word	0x40010300
 8000c08:	20000670 	.word	0x20000670
 8000c0c:	40010304 	.word	0x40010304
 8000c10:	20000778 	.word	0x20000778
 8000c14:	40010308 	.word	0x40010308
 8000c18:	200008cc 	.word	0x200008cc
 8000c1c:	40012c00 	.word	0x40012c00
 8000c20:	200006c0 	.word	0x200006c0
 8000c24:	40000800 	.word	0x40000800
 8000c28:	2000093c 	.word	0x2000093c
 8000c2c:	40004400 	.word	0x40004400
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c30:	4620      	mov	r0, r4
 8000c32:	f005 fd01 	bl	8006638 <HAL_UARTEx_DisableFifoMode>
 8000c36:	4604      	mov	r4, r0
 8000c38:	b108      	cbz	r0, 8000c3e <main+0x63e>
 8000c3a:	b672      	cpsid	i
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <main+0x63c>
  MX_MotorControl_Init();
 8000c3e:	f001 fa6f 	bl	8002120 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2104      	movs	r1, #4
 8000c46:	2018      	movs	r0, #24
 8000c48:	f003 fc92 	bl	8004570 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000c4c:	2018      	movs	r0, #24
 8000c4e:	f003 fcc7 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000c52:	4622      	mov	r2, r4
 8000c54:	4621      	mov	r1, r4
 8000c56:	2019      	movs	r0, #25
 8000c58:	f003 fc8a 	bl	8004570 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c5c:	2019      	movs	r0, #25
 8000c5e:	f003 fcbf 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8000c62:	4622      	mov	r2, r4
 8000c64:	2102      	movs	r1, #2
 8000c66:	2012      	movs	r0, #18
 8000c68:	f003 fc82 	bl	8004570 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c6c:	2012      	movs	r0, #18
 8000c6e:	f003 fcb7 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8000c72:	4622      	mov	r2, r4
 8000c74:	2103      	movs	r1, #3
 8000c76:	201e      	movs	r0, #30
 8000c78:	f003 fc7a 	bl	8004570 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c7c:	201e      	movs	r0, #30
 8000c7e:	f003 fcaf 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8000c82:	4622      	mov	r2, r4
 8000c84:	2103      	movs	r1, #3
 8000c86:	2017      	movs	r0, #23
 8000c88:	f003 fc72 	bl	8004570 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c8c:	2017      	movs	r0, #23
 8000c8e:	f003 fca7 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2103      	movs	r1, #3
 8000c96:	2026      	movs	r0, #38	; 0x26
 8000c98:	f003 fc6a 	bl	8004570 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c9c:	2026      	movs	r0, #38	; 0x26
 8000c9e:	f003 fc9f 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000ca2:	2028      	movs	r0, #40	; 0x28
 8000ca4:	4622      	mov	r2, r4
 8000ca6:	2103      	movs	r1, #3
 8000ca8:	f003 fc62 	bl	8004570 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cac:	2028      	movs	r0, #40	; 0x28
 8000cae:	f003 fc97 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <main+0x6b2>

08000cb4 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8000cb4:	4b01      	ldr	r3, [pc, #4]	; (8000cbc <MC_StartMotor1+0x8>)
 8000cb6:	6818      	ldr	r0, [r3, #0]
 8000cb8:	f000 b878 	b.w	8000dac <MCI_StartMotor>
 8000cbc:	20000abc 	.word	0x20000abc

08000cc0 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8000cc0:	4b01      	ldr	r3, [pc, #4]	; (8000cc8 <MC_StopMotor1+0x8>)
 8000cc2:	6818      	ldr	r0, [r3, #0]
 8000cc4:	f000 b87c 	b.w	8000dc0 <MCI_StopMotor>
 8000cc8:	20000abc 	.word	0x20000abc

08000ccc <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8000ccc:	4b01      	ldr	r3, [pc, #4]	; (8000cd4 <MC_GetSTMStateMotor1+0x8>)
 8000cce:	6818      	ldr	r0, [r3, #0]
 8000cd0:	f000 b8be 	b.w	8000e50 <MCI_GetSTMState>
 8000cd4:	20000abc 	.word	0x20000abc

08000cd8 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars, PosCtrl_Handle_t * pPosCtrl )
{
 8000cd8:	b410      	push	{r4}
 8000cda:	9c01      	ldr	r4, [sp, #4]
  pHandle->pSTM = pSTM;
 8000cdc:	6001      	str	r1, [r0, #0]
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;
  pHandle->pPosCtrl = pPosCtrl;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000cde:	2100      	movs	r1, #0
  pHandle->pPosCtrl = pPosCtrl;
 8000ce0:	60c4      	str	r4, [r0, #12]
  pHandle->pFOCVars = pFOCVars;
 8000ce2:	e9c0 2301 	strd	r2, r3, [r0, #4]
  pHandle->hFinalSpeed = 0;
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
  pHandle->CommandState = MCI_BUFFER_EMPTY;
}
 8000ce6:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000cea:	7401      	strb	r1, [r0, #16]
  pHandle->hFinalSpeed = 0;
 8000cec:	8241      	strh	r1, [r0, #18]
  pHandle->hFinalTorque = 0;
 8000cee:	8281      	strh	r1, [r0, #20]
  pHandle->hDurationms = 0;
 8000cf0:	8341      	strh	r1, [r0, #26]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000cf2:	7701      	strb	r1, [r0, #28]
}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 8000cf8:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cfa:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000cfe:	2401      	movs	r4, #1
 8000d00:	7404      	strb	r4, [r0, #16]
  pHandle->hFinalSpeed = hFinalSpeed;
 8000d02:	8241      	strh	r1, [r0, #18]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8000d04:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8000d08:	8342      	strh	r2, [r0, #26]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000d0a:	8383      	strh	r3, [r0, #28]
}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8000d10:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000d12:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000d14:	2402      	movs	r4, #2
 8000d16:	7404      	strb	r4, [r0, #16]
  pHandle->hFinalTorque = hFinalTorque;
 8000d18:	8281      	strh	r1, [r0, #20]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8000d1e:	8342      	strh	r2, [r0, #26]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000d20:	8383      	strh	r3, [r0, #28]
}
 8000d22:	4770      	bx	lr

08000d24 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000d24:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000d26:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000d28:	2301      	movs	r3, #1
  pHandle->Iqdref.q = Iqdref.q;
 8000d2a:	f8c0 1016 	str.w	r1, [r0, #22]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000d2e:	7402      	strb	r2, [r0, #16]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000d30:	8383      	strh	r3, [r0, #28]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000d32:	b002      	add	sp, #8
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <MCI_ExecPositionCommand>:
  * @param  FinalPosition is the desired rotor position asked.
  * @param  Duration the duration of the movement to reach the final position.
  * @retval none.
  */
__weak void MCI_ExecPositionCommand( MCI_Handle_t * pHandle, float FinalPosition, float Duration )
{
 8000d38:	b510      	push	{r4, lr}
  pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000d3a:	6883      	ldr	r3, [r0, #8]
{
 8000d3c:	ed2d 8b02 	vpush	{d8}
  pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
{
 8000d46:	b082      	sub	sp, #8
 8000d48:	4604      	mov	r4, r0
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8000d4a:	6840      	ldr	r0, [r0, #4]
{
 8000d4c:	eeb0 8a60 	vmov.f32	s16, s1
 8000d50:	eef0 8a40 	vmov.f32	s17, s0
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8000d54:	f007 f9da 	bl	800810c <STC_GetSpeedSensor>
 8000d58:	f007 f982 	bl	8008060 <SPD_GetMecAngle>
  if (Duration > 0) {
 8000d5c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8000d64:	9001      	str	r0, [sp, #4]
  if (Duration > 0) {
 8000d66:	dd14      	ble.n	8000d92 <MCI_ExecPositionCommand+0x5a>
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8000d68:	ee07 0a90 	vmov	s15, r0
 8000d6c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8000da8 <MCI_ExecPositionCommand+0x70>
    TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8000d70:	68e0      	ldr	r0, [r4, #12]
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8000d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8000d76:	eeb0 1a48 	vmov.f32	s2, s16
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8000d7a:	ee27 0a80 	vmul.f32	s0, s15, s0
    TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8000d7e:	ee78 0ac0 	vsub.f32	s1, s17, s0
 8000d82:	f007 fb4b 	bl	800841c <TC_MoveCommand>
  } else {
    TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
  }

  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	7763      	strb	r3, [r4, #29]
}
 8000d8a:	b002      	add	sp, #8
 8000d8c:	ecbd 8b02 	vpop	{d8}
 8000d90:	bd10      	pop	{r4, pc}
    TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
 8000d92:	68e0      	ldr	r0, [r4, #12]
 8000d94:	eeb0 0a68 	vmov.f32	s0, s17
 8000d98:	f007 fbb2 	bl	8008500 <TC_FollowCommand>
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	7763      	strb	r3, [r4, #29]
}
 8000da0:	b002      	add	sp, #8
 8000da2:	ecbd 8b02 	vpop	{d8}
 8000da6:	bd10      	pop	{r4, pc}
 8000da8:	38c90fdb 	.word	0x38c90fdb

08000dac <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000dac:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000dae:	2103      	movs	r1, #3
{
 8000db0:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000db2:	6800      	ldr	r0, [r0, #0]
 8000db4:	f007 fa8a 	bl	80082cc <STM_NextState>

  if ( RetVal == true )
 8000db8:	b108      	cbz	r0, 8000dbe <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	7723      	strb	r3, [r4, #28]
  }

  return RetVal;
}
 8000dbe:	bd10      	pop	{r4, pc}

08000dc0 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000dc0:	6800      	ldr	r0, [r0, #0]
 8000dc2:	2107      	movs	r1, #7
 8000dc4:	f007 ba82 	b.w	80082cc <STM_NextState>

08000dc8 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000dc8:	6800      	ldr	r0, [r0, #0]
 8000dca:	f007 baf5 	b.w	80083b8 <STM_FaultAcknowledged>
 8000dce:	bf00      	nop

08000dd0 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000dd0:	6800      	ldr	r0, [r0, #0]
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	f007 ba7a 	b.w	80082cc <STM_NextState>

08000dd8 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8000dd8:	b178      	cbz	r0, 8000dfa <MCI_ExecBufferedCommands+0x22>
{
 8000dda:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000ddc:	7f03      	ldrb	r3, [r0, #28]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	4604      	mov	r4, r0
 8000de2:	d000      	beq.n	8000de6 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000de4:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8000de6:	7c01      	ldrb	r1, [r0, #16]
 8000de8:	2902      	cmp	r1, #2
 8000dea:	d020      	beq.n	8000e2e <MCI_ExecBufferedCommands+0x56>
 8000dec:	2903      	cmp	r1, #3
 8000dee:	d005      	beq.n	8000dfc <MCI_ExecBufferedCommands+0x24>
 8000df0:	2901      	cmp	r1, #1
 8000df2:	d00c      	beq.n	8000e0e <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000df4:	2303      	movs	r3, #3
 8000df6:	7723      	strb	r3, [r4, #28]
}
 8000df8:	bd10      	pop	{r4, pc}
 8000dfa:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000dfc:	6882      	ldr	r2, [r0, #8]
 8000dfe:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000e02:	f8d0 3016 	ldr.w	r3, [r0, #22]
 8000e06:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	7723      	strb	r3, [r4, #28]
}
 8000e0c:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000e0e:	6883      	ldr	r3, [r0, #8]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000e16:	6840      	ldr	r0, [r0, #4]
 8000e18:	f007 f992 	bl	8008140 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000e1c:	8b62      	ldrh	r2, [r4, #26]
 8000e1e:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8000e22:	6860      	ldr	r0, [r4, #4]
 8000e24:	f007 f990 	bl	8008148 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000e28:	2800      	cmp	r0, #0
 8000e2a:	d0e3      	beq.n	8000df4 <MCI_ExecBufferedCommands+0x1c>
 8000e2c:	e7ec      	b.n	8000e08 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000e2e:	6883      	ldr	r3, [r0, #8]
 8000e30:	2100      	movs	r1, #0
 8000e32:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000e36:	6840      	ldr	r0, [r0, #4]
 8000e38:	f007 f982 	bl	8008140 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000e3c:	8b62      	ldrh	r2, [r4, #26]
 8000e3e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8000e42:	6860      	ldr	r0, [r4, #4]
 8000e44:	f007 f980 	bl	8008148 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000e48:	2800      	cmp	r0, #0
 8000e4a:	d0d3      	beq.n	8000df4 <MCI_ExecBufferedCommands+0x1c>
 8000e4c:	e7dc      	b.n	8000e08 <MCI_ExecBufferedCommands+0x30>
 8000e4e:	bf00      	nop

08000e50 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000e50:	6800      	ldr	r0, [r0, #0]
 8000e52:	f007 baaf 	b.w	80083b4 <STM_GetState>
 8000e56:	bf00      	nop

08000e58 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000e58:	7f40      	ldrb	r0, [r0, #29]
 8000e5a:	4770      	bx	lr

08000e5c <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000e5c:	7c03      	ldrb	r3, [r0, #16]
 8000e5e:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000e60:	bf0c      	ite	eq
 8000e62:	f9b0 0012 	ldrsheq.w	r0, [r0, #18]
  int16_t hRetVal = 0;
 8000e66:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000e6c:	6840      	ldr	r0, [r0, #4]
 8000e6e:	f007 b9b3 	b.w	80081d8 <STC_StopRamp>
 8000e72:	bf00      	nop

08000e74 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000e74:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000e76:	6840      	ldr	r0, [r0, #4]
 8000e78:	f007 f948 	bl	800810c <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000e7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000e80:	f007 b8f0 	b.w	8008064 <SPD_GetAvrgMecSpeedUnit>

08000e84 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000e84:	6840      	ldr	r0, [r0, #4]
 8000e86:	f007 b94b 	b.w	8008120 <STC_GetMecSpeedRefUnit>
 8000e8a:	bf00      	nop

08000e8c <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000e8c:	6882      	ldr	r2, [r0, #8]
 8000e8e:	6810      	ldr	r0, [r2, #0]
 8000e90:	2300      	movs	r3, #0
 8000e92:	b282      	uxth	r2, r0
 8000e94:	f362 030f 	bfi	r3, r2, #0, #16
 8000e98:	0c00      	lsrs	r0, r0, #16
 8000e9a:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e9e:	b082      	sub	sp, #8
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	b002      	add	sp, #8
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000ea8:	6882      	ldr	r2, [r0, #8]
 8000eaa:	6850      	ldr	r0, [r2, #4]
 8000eac:	2300      	movs	r3, #0
 8000eae:	b282      	uxth	r2, r0
 8000eb0:	f362 030f 	bfi	r3, r2, #0, #16
 8000eb4:	0c00      	lsrs	r0, r0, #16
 8000eb6:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000eba:	b082      	sub	sp, #8
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	b002      	add	sp, #8
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000ec4:	6882      	ldr	r2, [r0, #8]
 8000ec6:	68d0      	ldr	r0, [r2, #12]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	b282      	uxth	r2, r0
 8000ecc:	f362 030f 	bfi	r3, r2, #0, #16
 8000ed0:	0c00      	lsrs	r0, r0, #16
 8000ed2:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000ed6:	b082      	sub	sp, #8
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	b002      	add	sp, #8
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000ee0:	6882      	ldr	r2, [r0, #8]
 8000ee2:	6910      	ldr	r0, [r2, #16]
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	b282      	uxth	r2, r0
 8000ee8:	f362 030f 	bfi	r3, r2, #0, #16
 8000eec:	0c00      	lsrs	r0, r0, #16
 8000eee:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000ef2:	b082      	sub	sp, #8
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	b002      	add	sp, #8
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000efc:	6882      	ldr	r2, [r0, #8]
 8000efe:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8000f02:	2300      	movs	r3, #0
 8000f04:	b282      	uxth	r2, r0
 8000f06:	f362 030f 	bfi	r3, r2, #0, #16
 8000f0a:	0c00      	lsrs	r0, r0, #16
 8000f0c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000f10:	b082      	sub	sp, #8
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	b002      	add	sp, #8
 8000f16:	4770      	bx	lr

08000f18 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000f18:	6882      	ldr	r2, [r0, #8]
 8000f1a:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	b282      	uxth	r2, r0
 8000f22:	f362 030f 	bfi	r3, r2, #0, #16
 8000f26:	0c00      	lsrs	r0, r0, #16
 8000f28:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000f2c:	b082      	sub	sp, #8
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	b002      	add	sp, #8
 8000f32:	4770      	bx	lr

08000f34 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000f34:	6883      	ldr	r3, [r0, #8]
}
 8000f36:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000f3a:	4770      	bx	lr

08000f3c <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	6882      	ldr	r2, [r0, #8]
 8000f40:	f361 030f 	bfi	r3, r1, #0, #16
 8000f44:	f361 431f 	bfi	r3, r1, #16, #16
 8000f48:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000f50:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000f52:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000f56:	f007 f97f 	bl	8008258 <STC_GetDefaultIqdref>
 8000f5a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000f5e:	8220      	strh	r0, [r4, #16]
 8000f60:	8263      	strh	r3, [r4, #18]
}
 8000f62:	bd10      	pop	{r4, pc}

08000f64 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8000f64:	b203      	sxth	r3, r0
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000f66:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8000f6a:	f3c0 400f 	ubfx	r0, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000f6e:	fb13 f201 	smulbb	r2, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000f72:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000f76:	4250      	negs	r0, r2
 8000f78:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000f7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8000f80:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8000f82:	da05      	bge.n	8000f90 <MCM_Clarke+0x2c>
 8000f84:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000f86:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8000f8a:	da0c      	bge.n	8000fa6 <MCM_Clarke+0x42>
 8000f8c:	4a09      	ldr	r2, [pc, #36]	; (8000fb4 <MCM_Clarke+0x50>)
 8000f8e:	e001      	b.n	8000f94 <MCM_Clarke+0x30>
 8000f90:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	2000      	movs	r0, #0
 8000f98:	b292      	uxth	r2, r2
 8000f9a:	f363 000f 	bfi	r0, r3, #0, #16
 8000f9e:	f362 401f 	bfi	r0, r2, #16, #16
}
 8000fa2:	b004      	add	sp, #16
 8000fa4:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000fa6:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <MCM_Clarke+0x50>)
 8000fa8:	b20a      	sxth	r2, r1
 8000faa:	4282      	cmp	r2, r0
 8000fac:	bfb8      	it	lt
 8000fae:	4602      	movlt	r2, r0
 8000fb0:	e7f0      	b.n	8000f94 <MCM_Clarke+0x30>
 8000fb2:	bf00      	nop
 8000fb4:	ffff8001 	.word	0xffff8001

08000fb8 <MCM_Trig_Functions>:
    uint32_t CordicRdata;
    Trig_Components Components;
  } CosSin;

  /* Configure CORDIC */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MCM_Trig_Functions+0x28>)
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <MCM_Trig_Functions+0x2c>)
 8000fbc:	601a      	str	r2, [r3, #0]
  LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) hAngle);
 8000fbe:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
 8000fc2:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8000fc6:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8000fc8:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	f362 000f 	bfi	r0, r2, #0, #16
 8000fd2:	0c1b      	lsrs	r3, r3, #16
{
 8000fd4:	b082      	sub	sp, #8
  return (CosSin.Components);
 8000fd6:	f363 401f 	bfi	r0, r3, #16, #16

}
 8000fda:	b002      	add	sp, #8
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40020c00 	.word	0x40020c00
 8000fe4:	00600040 	.word	0x00600040

08000fe8 <MCM_Park>:
{
 8000fe8:	b570      	push	{r4, r5, r6, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	4605      	mov	r5, r0
 8000fee:	9001      	str	r0, [sp, #4]
 8000ff0:	4606      	mov	r6, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	f7ff ffe0 	bl	8000fb8 <MCM_Trig_Functions>
 8000ff8:	b22d      	sxth	r5, r5
 8000ffa:	b204      	sxth	r4, r0
 8000ffc:	1436      	asrs	r6, r6, #16
 8000ffe:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8001000:	fb05 f204 	mul.w	r2, r5, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8001004:	fb06 2210 	mls	r2, r6, r0, r2
  if ( wqd_tmp > INT16_MAX )
 8001008:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800100c:	da12      	bge.n	8001034 <MCM_Park+0x4c>
 800100e:	13d3      	asrs	r3, r2, #15
  else if ( wqd_tmp < ( -32768 ) )
 8001010:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001014:	4914      	ldr	r1, [pc, #80]	; (8001068 <MCM_Park+0x80>)
 8001016:	da21      	bge.n	800105c <MCM_Park+0x74>
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8001018:	fb04 f406 	mul.w	r4, r4, r6
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 800101c:	fb05 4000 	mla	r0, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 8001020:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001024:	ea4f 32e0 	mov.w	r2, r0, asr #15
  if ( wqd_tmp > INT16_MAX )
 8001028:	da07      	bge.n	800103a <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 800102a:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 800102e:	da0f      	bge.n	8001050 <MCM_Park+0x68>
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <MCM_Park+0x80>)
 8001032:	e004      	b.n	800103e <MCM_Park+0x56>
 8001034:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001038:	e7ee      	b.n	8001018 <MCM_Park+0x30>
 800103a:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 800103e:	b28a      	uxth	r2, r1
 8001040:	2000      	movs	r0, #0
 8001042:	b29b      	uxth	r3, r3
 8001044:	f362 000f 	bfi	r0, r2, #0, #16
 8001048:	f363 401f 	bfi	r0, r3, #16, #16
}
 800104c:	b004      	add	sp, #16
 800104e:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MCM_Park+0x80>)
 8001052:	b213      	sxth	r3, r2
 8001054:	4283      	cmp	r3, r0
 8001056:	bfb8      	it	lt
 8001058:	4603      	movlt	r3, r0
 800105a:	e7f0      	b.n	800103e <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 800105c:	b21a      	sxth	r2, r3
 800105e:	4291      	cmp	r1, r2
 8001060:	bfb8      	it	lt
 8001062:	4611      	movlt	r1, r2
 8001064:	e7d8      	b.n	8001018 <MCM_Park+0x30>
 8001066:	bf00      	nop
 8001068:	ffff8001 	.word	0xffff8001

0800106c <MCM_Rev_Park>:
{
 800106c:	b530      	push	{r4, r5, lr}
 800106e:	b085      	sub	sp, #20
 8001070:	4604      	mov	r4, r0
 8001072:	9001      	str	r0, [sp, #4]
 8001074:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001076:	4608      	mov	r0, r1
 8001078:	f7ff ff9e 	bl	8000fb8 <MCM_Trig_Functions>
 800107c:	142d      	asrs	r5, r5, #16
 800107e:	1403      	asrs	r3, r0, #16
 8001080:	b224      	sxth	r4, r4
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8001082:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001086:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8001088:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 800108c:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8001090:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 8001094:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8001098:	2000      	movs	r0, #0
 800109a:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 800109e:	f362 000f 	bfi	r0, r2, #0, #16
 80010a2:	f363 401f 	bfi	r0, r3, #16, #16
}
 80010a6:	b005      	add	sp, #20
 80010a8:	bd30      	pop	{r4, r5, pc}
 80010aa:	bf00      	nop

080010ac <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 80010ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ae:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <FOC_Clear+0x74>)
 80010b4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80010b8:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 80010bc:	004a      	lsls	r2, r1, #1
  FOCVars[bMotor].Iab = NULL_ab;
 80010be:	2500      	movs	r5, #0
{
 80010c0:	4604      	mov	r4, r0
  FOCVars[bMotor].Iqd = NULL_qd;
 80010c2:	f102 070c 	add.w	r7, r2, #12
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
 80010c6:	2626      	movs	r6, #38	; 0x26
  FOCVars[bMotor].Vqd = NULL_qd;
 80010c8:	3216      	adds	r2, #22
  FOCVars[bMotor].Iab = NULL_ab;
 80010ca:	f843 5011 	str.w	r5, [r3, r1, lsl #1]
  FOCVars[bMotor].Iqd = NULL_qd;
 80010ce:	eb07 0e03 	add.w	lr, r7, r3
  FOCVars[bMotor].Iab = NULL_ab;
 80010d2:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 80010d6:	fb06 3604 	mla	r6, r6, r4, r3
  FOCVars[bMotor].Vqd = NULL_qd;
 80010da:	eb02 0c03 	add.w	ip, r2, r3
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80010de:	4811      	ldr	r0, [pc, #68]	; (8001124 <FOC_Clear+0x78>)
  FOCVars[bMotor].Iqd = NULL_qd;
 80010e0:	50fd      	str	r5, [r7, r3]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80010e2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 80010e6:	f8ce 5004 	str.w	r5, [lr, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80010ea:	4629      	mov	r1, r5
  FOCVars[bMotor].hTeref = (int16_t)0;
 80010ec:	83f5      	strh	r5, [r6, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 80010ee:	50d5      	str	r5, [r2, r3]
 80010f0:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 80010f4:	8435      	strh	r5, [r6, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80010f6:	f005 fde7 	bl	8006cc8 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <FOC_Clear+0x7c>)
 80010fc:	4629      	mov	r1, r5
 80010fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001102:	f005 fde1 	bl	8006cc8 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <FOC_Clear+0x80>)
 8001108:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800110c:	f007 f800 	bl	8008110 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <FOC_Clear+0x84>)
 8001112:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001116:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800111a:	f006 b807 	b.w	800712c <PWMC_SwitchOffPWM>
 800111e:	bf00      	nop
 8001120:	200009fc 	.word	0x200009fc
 8001124:	200009ec 	.word	0x200009ec
 8001128:	20000ab4 	.word	0x20000ab4
 800112c:	20000ab8 	.word	0x20000ab8
 8001130:	200009e0 	.word	0x200009e0

08001134 <MCboot>:
{
 8001134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001138:	ed2d 8b02 	vpush	{d8}
 800113c:	b089      	sub	sp, #36	; 0x24
 800113e:	4603      	mov	r3, r0
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001140:	4c74      	ldr	r4, [pc, #464]	; (8001314 <MCboot+0x1e0>)
  STM_Init(&STM[M1]);
 8001142:	4875      	ldr	r0, [pc, #468]	; (8001318 <MCboot+0x1e4>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001144:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8001374 <MCboot+0x240>
{
 8001148:	9104      	str	r1, [sp, #16]
 800114a:	461e      	mov	r6, r3
  STM_Init(&STM[M1]);
 800114c:	f007 f89a 	bl	8008284 <STM_Init>
  pCLM[M1] = &CircleLimitationM1;
 8001150:	4b72      	ldr	r3, [pc, #456]	; (800131c <MCboot+0x1e8>)
  bMCBootCompleted = 0;
 8001152:	4973      	ldr	r1, [pc, #460]	; (8001320 <MCboot+0x1ec>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001154:	4873      	ldr	r0, [pc, #460]	; (8001324 <MCboot+0x1f0>)
  pCLM[M1] = &CircleLimitationM1;
 8001156:	4a74      	ldr	r2, [pc, #464]	; (8001328 <MCboot+0x1f4>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001158:	6020      	str	r0, [r4, #0]
  bMCBootCompleted = 0;
 800115a:	2400      	movs	r4, #0
  ENC_Init (&ENCODER_M1);
 800115c:	ed9f 8a73 	vldr	s16, [pc, #460]	; 800132c <MCboot+0x1f8>
  bMCBootCompleted = 0;
 8001160:	700c      	strb	r4, [r1, #0]
  pCLM[M1] = &CircleLimitationM1;
 8001162:	601a      	str	r2, [r3, #0]
  R3_2_Init(&PWM_Handle_M1);
 8001164:	f006 fb54 	bl	8007810 <R3_2_Init>
  startTimers();
 8001168:	f005 fe58 	bl	8006e1c <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 800116c:	4658      	mov	r0, fp
 800116e:	f005 fd97 	bl	8006ca0 <PID_HandleInit>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001172:	4d6f      	ldr	r5, [pc, #444]	; (8001330 <MCboot+0x1fc>)
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8001174:	4f6f      	ldr	r7, [pc, #444]	; (8001334 <MCboot+0x200>)
 8001176:	f8df a200 	ldr.w	sl, [pc, #512]	; 8001378 <MCboot+0x244>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 800117a:	4a6f      	ldr	r2, [pc, #444]	; (8001338 <MCboot+0x204>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 800117c:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 800137c <MCboot+0x248>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001180:	f8c2 b000 	str.w	fp, [r2]
  ENC_Init (&ENCODER_M1);
 8001184:	ee18 0a10 	vmov	r0, s16
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001188:	f8c5 8000 	str.w	r8, [r5]
  ENC_Init (&ENCODER_M1);
 800118c:	f005 fb76 	bl	800687c <ENC_Init>
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8001190:	6829      	ldr	r1, [r5, #0]
  pPIDPosCtrl[M1] = &PID_PosParamsM1;
 8001192:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8001380 <MCboot+0x24c>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8001196:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 8001384 <MCboot+0x250>
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 800119a:	463a      	mov	r2, r7
 800119c:	ee18 3a10 	vmov	r3, s16
 80011a0:	4650      	mov	r0, sl
 80011a2:	f005 fb1b 	bl	80067dc <EAC_Init>
  pEAC[M1] = &EncAlignCtrlM1;
 80011a6:	4b65      	ldr	r3, [pc, #404]	; (800133c <MCboot+0x208>)
  pPIDPosCtrl[M1] = &PID_PosParamsM1;
 80011a8:	4865      	ldr	r0, [pc, #404]	; (8001340 <MCboot+0x20c>)
 80011aa:	f8c9 0000 	str.w	r0, [r9]
  pEAC[M1] = &EncAlignCtrlM1;
 80011ae:	f8c3 a000 	str.w	sl, [r3]
  PID_HandleInit(pPIDPosCtrl[M1]);
 80011b2:	f005 fd75 	bl	8006ca0 <PID_HandleInit>
  pPosCtrl[M1] = &pPosCtrlM1;
 80011b6:	4b63      	ldr	r3, [pc, #396]	; (8001344 <MCboot+0x210>)
 80011b8:	4863      	ldr	r0, [pc, #396]	; (8001348 <MCboot+0x214>)
  TC_Init(pPosCtrl[M1], pPIDPosCtrl[M1], &SpeednTorqCtrlM1, &ENCODER_M1);
 80011ba:	f8d9 1000 	ldr.w	r1, [r9]
  pPosCtrl[M1] = &pPosCtrlM1;
 80011be:	6018      	str	r0, [r3, #0]
  TC_Init(pPosCtrl[M1], pPIDPosCtrl[M1], &SpeednTorqCtrlM1, &ENCODER_M1);
 80011c0:	4642      	mov	r2, r8
 80011c2:	ee18 3a10 	vmov	r3, s16
 80011c6:	f007 f909 	bl	80083dc <TC_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 80011ca:	485b      	ldr	r0, [pc, #364]	; (8001338 <MCboot+0x204>)
  NTC_Init(&TempSensorParamsM1);
 80011cc:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8001388 <MCboot+0x254>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 80011d0:	6801      	ldr	r1, [r0, #0]
 80011d2:	6828      	ldr	r0, [r5, #0]
  pMPM[M1] = &PQD_MotorPowMeasM1;
 80011d4:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 800138c <MCboot+0x258>
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80011d8:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8001390 <MCboot+0x25c>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 80011dc:	ee18 2a10 	vmov	r2, s16
 80011e0:	f006 ff7e 	bl	80080e0 <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 80011e4:	4638      	mov	r0, r7
 80011e6:	f007 fca1 	bl	8008b2c <VSS_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 80011ea:	4858      	ldr	r0, [pc, #352]	; (800134c <MCboot+0x218>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 80011ec:	4f58      	ldr	r7, [pc, #352]	; (8001350 <MCboot+0x21c>)
  PID_HandleInit(&PIDIqHandle_M1);
 80011ee:	f005 fd57 	bl	8006ca0 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 80011f2:	4858      	ldr	r0, [pc, #352]	; (8001354 <MCboot+0x220>)
 80011f4:	f005 fd54 	bl	8006ca0 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 80011f8:	4a54      	ldr	r2, [pc, #336]	; (800134c <MCboot+0x218>)
 80011fa:	603a      	str	r2, [r7, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 80011fc:	4f56      	ldr	r7, [pc, #344]	; (8001358 <MCboot+0x224>)
 80011fe:	4a55      	ldr	r2, [pc, #340]	; (8001354 <MCboot+0x220>)
 8001200:	603a      	str	r2, [r7, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001202:	4f56      	ldr	r7, [pc, #344]	; (800135c <MCboot+0x228>)
 8001204:	4856      	ldr	r0, [pc, #344]	; (8001360 <MCboot+0x22c>)
 8001206:	6038      	str	r0, [r7, #0]
  RVBS_Init(pBusSensorM1);
 8001208:	f006 fea4 	bl	8007f54 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 800120c:	4b55      	ldr	r3, [pc, #340]	; (8001364 <MCboot+0x230>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  NTC_Init(&TempSensorParamsM1);
 8001214:	4640      	mov	r0, r8
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8001216:	f8ca 3000 	str.w	r3, [sl]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 800121a:	f8c3 910c 	str.w	r9, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 800121e:	f005 fcfb 	bl	8006c18 <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001222:	4b51      	ldr	r3, [pc, #324]	; (8001368 <MCboot+0x234>)
 8001224:	4851      	ldr	r0, [pc, #324]	; (800136c <MCboot+0x238>)
 8001226:	6018      	str	r0, [r3, #0]
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8001228:	f8cb 8000 	str.w	r8, [fp]
  FOCVars[M1].bDriveInput = EXTERNAL;
 800122c:	2701      	movs	r7, #1
  REMNG_Init(pREMNG[M1]);
 800122e:	f006 fedf 	bl	8007ff0 <REMNG_Init>
  FOC_Clear(M1);
 8001232:	4620      	mov	r0, r4
 8001234:	f7ff ff3a 	bl	80010ac <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001238:	f889 7024 	strb.w	r7, [r9, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800123c:	6828      	ldr	r0, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 800123e:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8001394 <MCboot+0x260>
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001242:	f007 f809 	bl	8008258 <STC_GetDefaultIqdref>
 8001246:	4603      	mov	r3, r0
 8001248:	f3c0 420f 	ubfx	r2, r0, #16, #16
 800124c:	f8a9 3010 	strh.w	r3, [r9, #16]
 8001250:	f8a9 2012 	strh.w	r2, [r9, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001254:	6828      	ldr	r0, [r5, #0]
 8001256:	f006 ffff 	bl	8008258 <STC_GetDefaultIqdref>
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 800125a:	4a3a      	ldr	r2, [pc, #232]	; (8001344 <MCboot+0x210>)
  oMCInterface[M1] = & Mci[M1];
 800125c:	f8df c138 	ldr.w	ip, [pc, #312]	; 8001398 <MCboot+0x264>
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 8001260:	6813      	ldr	r3, [r2, #0]
 8001262:	9300      	str	r3, [sp, #0]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001264:	f3c0 410f 	ubfx	r1, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 8001268:	464b      	mov	r3, r9
 800126a:	4660      	mov	r0, ip
  oMCInterface[M1] = & Mci[M1];
 800126c:	f8c8 c000 	str.w	ip, [r8]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 8001270:	682a      	ldr	r2, [r5, #0]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001272:	f8a9 1014 	strh.w	r1, [r9, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 8001276:	4928      	ldr	r1, [pc, #160]	; (8001318 <MCboot+0x1e4>)
 8001278:	f7ff fd2e 	bl	8000cd8 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 800127c:	6828      	ldr	r0, [r5, #0]
 800127e:	f8d8 9000 	ldr.w	r9, [r8]
 8001282:	f006 ffdf 	bl	8008244 <STC_GetMecSpeedRefUnitDefault>
 8001286:	4622      	mov	r2, r4
 8001288:	4601      	mov	r1, r0
 800128a:	4648      	mov	r0, r9
 800128c:	f7ff fd34 	bl	8000cf8 <MCI_ExecSpeedRamp>
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001290:	4829      	ldr	r0, [pc, #164]	; (8001338 <MCboot+0x204>)
  pMCIList[M1] = oMCInterface[M1];
 8001292:	f8d8 2000 	ldr.w	r2, [r8]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001296:	f8d0 9000 	ldr.w	r9, [r0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 800129a:	482d      	ldr	r0, [pc, #180]	; (8001350 <MCboot+0x21c>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 800129c:	491d      	ldr	r1, [pc, #116]	; (8001314 <MCboot+0x1e0>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 800129e:	f8d0 8000 	ldr.w	r8, [r0]
  MCT[M1].pPIDId = pPIDId[M1];
 80012a2:	482d      	ldr	r0, [pc, #180]	; (8001358 <MCboot+0x224>)
  pMCIList[M1] = oMCInterface[M1];
 80012a4:	9203      	str	r2, [sp, #12]
  MCT[M1].pPIDId = pPIDId[M1];
 80012a6:	f8d0 e000 	ldr.w	lr, [r0]
  MCT[M1].pPosCtrl = pPosCtrl[M1];
 80012aa:	4a26      	ldr	r2, [pc, #152]	; (8001344 <MCboot+0x210>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80012ac:	482b      	ldr	r0, [pc, #172]	; (800135c <MCboot+0x228>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 80012ae:	4b30      	ldr	r3, [pc, #192]	; (8001370 <MCboot+0x23c>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80012b0:	f8d1 c000 	ldr.w	ip, [r1]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 80012b4:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80012b6:	f8da 1000 	ldr.w	r1, [sl]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80012ba:	6800      	ldr	r0, [r0, #0]
  MCT[M1].pPosCtrl = pPosCtrl[M1];
 80012bc:	6812      	ldr	r2, [r2, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 80012be:	9505      	str	r5, [sp, #20]
  pMCIList[M1] = oMCInterface[M1];
 80012c0:	46b2      	mov	sl, r6
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 80012c2:	f8db 5000 	ldr.w	r5, [fp]
  pMCIList[M1] = oMCInterface[M1];
 80012c6:	9e03      	ldr	r6, [sp, #12]
 80012c8:	f8ca 6000 	str.w	r6, [sl]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 80012cc:	9e05      	ldr	r6, [sp, #20]
  MCT[M1].pPosCtrl = pPosCtrl[M1];
 80012ce:	649a      	str	r2, [r3, #72]	; 0x48
  MCT[M1].pStateMachine = &STM[M1];
 80012d0:	4a11      	ldr	r2, [pc, #68]	; (8001318 <MCboot+0x1e4>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80012d2:	63d9      	str	r1, [r3, #60]	; 0x3c
  MCT[M1].pStateMachine = &STM[M1];
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28
  MCT[M1].pPIDIq = pPIDIq[M1];
 80012d6:	e9c3 9800 	strd	r9, r8, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80012da:	e9c3 500b 	strd	r5, r0, [r3, #44]	; 0x2c
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 80012de:	e9c3 4407 	strd	r4, r4, [r3, #28]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 80012e2:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  bMCBootCompleted = 1;
 80012e6:	490e      	ldr	r1, [pc, #56]	; (8001320 <MCboot+0x1ec>)
  MCT[M1].pPIDId = pPIDId[M1];
 80012e8:	f8c3 e008 	str.w	lr, [r3, #8]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80012ec:	f8c3 c010 	str.w	ip, [r3, #16]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 80012f0:	625e      	str	r6, [r3, #36]	; 0x24
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 80012f2:	60dc      	str	r4, [r3, #12]
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 80012f4:	615c      	str	r4, [r3, #20]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &ENCODER_M1;
 80012f6:	ed83 8a06 	vstr	s16, [r3, #24]
  MCT[M1].pFF = MC_NULL;
 80012fa:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  pMCTList[M1] = &MCT[M1];
 80012fe:	9a04      	ldr	r2, [sp, #16]
  MCT[M1].pOTT = MC_NULL;
 8001300:	e9c3 4413 	strd	r4, r4, [r3, #76]	; 0x4c
  pMCTList[M1] = &MCT[M1];
 8001304:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 8001306:	700f      	strb	r7, [r1, #0]
}
 8001308:	b009      	add	sp, #36	; 0x24
 800130a:	ecbd 8b02 	vpop	{d8}
 800130e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001312:	bf00      	nop
 8001314:	200009e0 	.word	0x200009e0
 8001318:	20000aa4 	.word	0x20000aa4
 800131c:	20000a7c 	.word	0x20000a7c
 8001320:	20000654 	.word	0x20000654
 8001324:	20000310 	.word	0x20000310
 8001328:	20000000 	.word	0x20000000
 800132c:	200000b4 	.word	0x200000b4
 8001330:	20000ab8 	.word	0x20000ab8
 8001334:	20000428 	.word	0x20000428
 8001338:	200009e4 	.word	0x200009e4
 800133c:	200009e8 	.word	0x200009e8
 8001340:	200001d0 	.word	0x200001d0
 8001344:	20000a78 	.word	0x20000a78
 8001348:	20000460 	.word	0x20000460
 800134c:	20000178 	.word	0x20000178
 8001350:	200009ec 	.word	0x200009ec
 8001354:	2000014c 	.word	0x2000014c
 8001358:	20000ab4 	.word	0x20000ab4
 800135c:	20000a80 	.word	0x20000a80
 8001360:	200003a4 	.word	0x200003a4
 8001364:	200001fc 	.word	0x200001fc
 8001368:	20000aac 	.word	0x20000aac
 800136c:	2000038c 	.word	0x2000038c
 8001370:	20000a24 	.word	0x20000a24
 8001374:	200001a4 	.word	0x200001a4
 8001378:	20000130 	.word	0x20000130
 800137c:	200003cc 	.word	0x200003cc
 8001380:	200009f4 	.word	0x200009f4
 8001384:	200009dc 	.word	0x200009dc
 8001388:	20000400 	.word	0x20000400
 800138c:	20000ab0 	.word	0x20000ab0
 8001390:	200009fc 	.word	0x200009fc
 8001394:	200009f0 	.word	0x200009f0
 8001398:	20000a84 	.word	0x20000a84

0800139c <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80013a0:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <FOC_CalcCurrRef+0x24>)
 80013a4:	2426      	movs	r4, #38	; 0x26
 80013a6:	fb04 3400 	mla	r4, r4, r0, r3
 80013aa:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80013ae:	b103      	cbz	r3, 80013b2 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80013b0:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <FOC_CalcCurrRef+0x28>)
 80013b4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80013b8:	f006 ff12 	bl	80081e0 <STC_CalcTorqueReference>
 80013bc:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80013be:	8220      	strh	r0, [r4, #16]
}
 80013c0:	bd10      	pop	{r4, pc}
 80013c2:	bf00      	nop
 80013c4:	200009fc 	.word	0x200009fc
 80013c8:	20000ab8 	.word	0x20000ab8

080013cc <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 80013cc:	4b01      	ldr	r3, [pc, #4]	; (80013d4 <TSK_SetChargeBootCapDelayM1+0x8>)
 80013ce:	8018      	strh	r0, [r3, #0]
}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000656 	.word	0x20000656

080013d8 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 80013da:	8818      	ldrh	r0, [r3, #0]
 80013dc:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80013de:	fab0 f080 	clz	r0, r0
 80013e2:	0940      	lsrs	r0, r0, #5
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000656 	.word	0x20000656

080013ec <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 80013ec:	4b01      	ldr	r3, [pc, #4]	; (80013f4 <TSK_SetStopPermanencyTimeM1+0x8>)
 80013ee:	8018      	strh	r0, [r3, #0]
}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	2000065a 	.word	0x2000065a

080013f8 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 80013fa:	8818      	ldrh	r0, [r3, #0]
 80013fc:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80013fe:	fab0 f080 	clz	r0, r0
 8001402:	0940      	lsrs	r0, r0, #5
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	2000065a 	.word	0x2000065a

0800140c <TSK_MediumFrequencyTaskM1>:
{
 800140c:	b510      	push	{r4, lr}
  PQD_CalcElMotorPower( pMPM[M1] );
 800140e:	4c92      	ldr	r4, [pc, #584]	; (8001658 <TSK_MediumFrequencyTaskM1+0x24c>)
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8001410:	4892      	ldr	r0, [pc, #584]	; (800165c <TSK_MediumFrequencyTaskM1+0x250>)
{
 8001412:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8001414:	2300      	movs	r3, #0
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8001416:	f10d 0106 	add.w	r1, sp, #6
  int16_t wAux = 0;
 800141a:	f8ad 3006 	strh.w	r3, [sp, #6]
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 800141e:	f005 fa9d 	bl	800695c <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8001422:	6820      	ldr	r0, [r4, #0]
 8001424:	f005 fcc6 	bl	8006db4 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8001428:	488d      	ldr	r0, [pc, #564]	; (8001660 <TSK_MediumFrequencyTaskM1+0x254>)
 800142a:	f006 ffc3 	bl	80083b4 <STM_GetState>
  switch ( StateM1 )
 800142e:	2812      	cmp	r0, #18
 8001430:	d818      	bhi.n	8001464 <TSK_MediumFrequencyTaskM1+0x58>
 8001432:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001436:	002a      	.short	0x002a
 8001438:	00440038 	.word	0x00440038
 800143c:	00620053 	.word	0x00620053
 8001440:	007e006b 	.word	0x007e006b
 8001444:	009d008a 	.word	0x009d008a
 8001448:	00170013 	.word	0x00170013
 800144c:	00170017 	.word	0x00170017
 8001450:	00b600a7 	.word	0x00b600a7
 8001454:	00d700c3 	.word	0x00d700c3
 8001458:	001900e6 	.word	0x001900e6
    STM_NextState( &STM[M1], IDLE );
 800145c:	4880      	ldr	r0, [pc, #512]	; (8001660 <TSK_MediumFrequencyTaskM1+0x254>)
 800145e:	2100      	movs	r1, #0
 8001460:	f006 ff34 	bl	80082cc <STM_NextState>
}
 8001464:	b002      	add	sp, #8
 8001466:	bd10      	pop	{r4, pc}
    ENC_Clear( &ENCODER_M1 );
 8001468:	487c      	ldr	r0, [pc, #496]	; (800165c <TSK_MediumFrequencyTaskM1+0x250>)
 800146a:	f005 fa45 	bl	80068f8 <ENC_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 800146e:	487c      	ldr	r0, [pc, #496]	; (8001660 <TSK_MediumFrequencyTaskM1+0x254>)
 8001470:	2104      	movs	r1, #4
 8001472:	f006 ff2b 	bl	80082cc <STM_NextState>
 8001476:	2800      	cmp	r0, #0
 8001478:	d0f4      	beq.n	8001464 <TSK_MediumFrequencyTaskM1+0x58>
      FOC_Clear( M1 );
 800147a:	2000      	movs	r0, #0
 800147c:	f7ff fe16 	bl	80010ac <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 8001480:	4b78      	ldr	r3, [pc, #480]	; (8001664 <TSK_MediumFrequencyTaskM1+0x258>)
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	f006 f858 	bl	8007538 <R3_2_SwitchOnPWM>
 8001488:	e7ec      	b.n	8001464 <TSK_MediumFrequencyTaskM1+0x58>
    if ( EAC_GetRestartState( &EncAlignCtrlM1 ) )
 800148a:	4877      	ldr	r0, [pc, #476]	; (8001668 <TSK_MediumFrequencyTaskM1+0x25c>)
 800148c:	f005 f9f4 	bl	8006878 <EAC_GetRestartState>
 8001490:	2800      	cmp	r0, #0
 8001492:	d0e7      	beq.n	8001464 <TSK_MediumFrequencyTaskM1+0x58>
      EAC_SetRestartState( &EncAlignCtrlM1,false );
 8001494:	4874      	ldr	r0, [pc, #464]	; (8001668 <TSK_MediumFrequencyTaskM1+0x25c>)
 8001496:	2100      	movs	r1, #0
 8001498:	f005 f9ec 	bl	8006874 <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_START );
 800149c:	2103      	movs	r1, #3
 800149e:	4870      	ldr	r0, [pc, #448]	; (8001660 <TSK_MediumFrequencyTaskM1+0x254>)
 80014a0:	f006 ff14 	bl	80082cc <STM_NextState>
 80014a4:	e7de      	b.n	8001464 <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 80014a6:	4b6f      	ldr	r3, [pc, #444]	; (8001664 <TSK_MediumFrequencyTaskM1+0x258>)
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	f006 f81d 	bl	80074e8 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 80014ae:	2014      	movs	r0, #20
 80014b0:	f7ff ff8c 	bl	80013cc <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], ALIGN_CHARGE_BOOT_CAP );
 80014b4:	210d      	movs	r1, #13
 80014b6:	486a      	ldr	r0, [pc, #424]	; (8001660 <TSK_MediumFrequencyTaskM1+0x254>)
 80014b8:	f006 ff08 	bl	80082cc <STM_NextState>
    break;
 80014bc:	e7d2      	b.n	8001464 <TSK_MediumFrequencyTaskM1+0x58>
    if ( !EAC_Exec( &EncAlignCtrlM1 ) )
 80014be:	486a      	ldr	r0, [pc, #424]	; (8001668 <TSK_MediumFrequencyTaskM1+0x25c>)
 80014c0:	f005 f9be 	bl	8006840 <EAC_Exec>
 80014c4:	4604      	mov	r4, r0
 80014c6:	2800      	cmp	r0, #0
 80014c8:	f040 80b4 	bne.w	8001634 <TSK_MediumFrequencyTaskM1+0x228>
      IqdRef.d = STC_CalcTorqueReference( pSTC[M1] );
 80014cc:	4b67      	ldr	r3, [pc, #412]	; (800166c <TSK_MediumFrequencyTaskM1+0x260>)
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	f006 fe86 	bl	80081e0 <STC_CalcTorqueReference>
      FOCVars[M1].Iqdref = IqdRef;
 80014d4:	4b66      	ldr	r3, [pc, #408]	; (8001670 <TSK_MediumFrequencyTaskM1+0x264>)
 80014d6:	8258      	strh	r0, [r3, #18]
 80014d8:	821c      	strh	r4, [r3, #16]
 80014da:	e7c3      	b.n	8001464 <TSK_MediumFrequencyTaskM1+0x58>
    if ( EAC_IsAligned( &EncAlignCtrlM1 ) == false )
 80014dc:	4862      	ldr	r0, [pc, #392]	; (8001668 <TSK_MediumFrequencyTaskM1+0x25c>)
 80014de:	f005 f9c7 	bl	8006870 <EAC_IsAligned>
 80014e2:	2800      	cmp	r0, #0
 80014e4:	f040 809a 	bne.w	800161c <TSK_MediumFrequencyTaskM1+0x210>
      EAC_SetRestartState( &EncAlignCtrlM1, true );
 80014e8:	485f      	ldr	r0, [pc, #380]	; (8001668 <TSK_MediumFrequencyTaskM1+0x25c>)
 80014ea:	2101      	movs	r1, #1
 80014ec:	f005 f9c2 	bl	8006874 <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_ALIGNMENT );
 80014f0:	2101      	movs	r1, #1
 80014f2:	485b      	ldr	r0, [pc, #364]	; (8001660 <TSK_MediumFrequencyTaskM1+0x254>)
 80014f4:	f006 feea 	bl	80082cc <STM_NextState>
      break;
 80014f8:	e7b4      	b.n	8001464 <TSK_MediumFrequencyTaskM1+0x58>
        TC_EncAlignmentCommand(pPosCtrl[M1]);
 80014fa:	4b5e      	ldr	r3, [pc, #376]	; (8001674 <TSK_MediumFrequencyTaskM1+0x268>)
 80014fc:	6818      	ldr	r0, [r3, #0]
 80014fe:	f007 f913 	bl	8008728 <TC_EncAlignmentCommand>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8001502:	2105      	movs	r1, #5
 8001504:	4856      	ldr	r0, [pc, #344]	; (8001660 <TSK_MediumFrequencyTaskM1+0x254>)
 8001506:	f006 fee1 	bl	80082cc <STM_NextState>
    break;
 800150a:	e7ab      	b.n	8001464 <TSK_MediumFrequencyTaskM1+0x58>
	  FOC_InitAdditionalMethods(M1);
 800150c:	2000      	movs	r0, #0
 800150e:	f7ff ff45 	bl	800139c <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001512:	2000      	movs	r0, #0
 8001514:	f7ff ff44 	bl	80013a0 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8001518:	2106      	movs	r1, #6
 800151a:	4851      	ldr	r0, [pc, #324]	; (8001660 <TSK_MediumFrequencyTaskM1+0x254>)
 800151c:	f006 fed6 	bl	80082cc <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001520:	4b52      	ldr	r3, [pc, #328]	; (800166c <TSK_MediumFrequencyTaskM1+0x260>)
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	f006 fea6 	bl	8008274 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001528:	4b53      	ldr	r3, [pc, #332]	; (8001678 <TSK_MediumFrequencyTaskM1+0x26c>)
 800152a:	6818      	ldr	r0, [r3, #0]
 800152c:	f7ff fc54 	bl	8000dd8 <MCI_ExecBufferedCommands>
    break;
 8001530:	e798      	b.n	8001464 <TSK_MediumFrequencyTaskM1+0x58>
    TC_PositionRegulation(pPosCtrl[M1]);
 8001532:	4b50      	ldr	r3, [pc, #320]	; (8001674 <TSK_MediumFrequencyTaskM1+0x268>)
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	f007 f8b5 	bl	80086a4 <TC_PositionRegulation>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 800153a:	4b4f      	ldr	r3, [pc, #316]	; (8001678 <TSK_MediumFrequencyTaskM1+0x26c>)
 800153c:	6818      	ldr	r0, [r3, #0]
 800153e:	f7ff fc4b 	bl	8000dd8 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8001542:	2000      	movs	r0, #0
 8001544:	f7ff ff2c 	bl	80013a0 <FOC_CalcCurrRef>
    break;
 8001548:	e78c      	b.n	8001464 <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 800154a:	4b46      	ldr	r3, [pc, #280]	; (8001664 <TSK_MediumFrequencyTaskM1+0x258>)
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	f006 f83d 	bl	80075cc <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff fdaa 	bl	80010ac <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001558:	6820      	ldr	r0, [r4, #0]
 800155a:	f005 fb19 	bl	8006b90 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 800155e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001562:	f7ff ff43 	bl	80013ec <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8001566:	2108      	movs	r1, #8
 8001568:	483d      	ldr	r0, [pc, #244]	; (8001660 <TSK_MediumFrequencyTaskM1+0x254>)
 800156a:	f006 feaf 	bl	80082cc <STM_NextState>
    break;
 800156e:	e779      	b.n	8001464 <TSK_MediumFrequencyTaskM1+0x58>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001570:	f7ff ff42 	bl	80013f8 <TSK_StopPermanencyTimeHasElapsedM1>
 8001574:	2800      	cmp	r0, #0
 8001576:	f43f af75 	beq.w	8001464 <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], STOP_IDLE );
 800157a:	2109      	movs	r1, #9
 800157c:	4838      	ldr	r0, [pc, #224]	; (8001660 <TSK_MediumFrequencyTaskM1+0x254>)
 800157e:	f006 fea5 	bl	80082cc <STM_NextState>
 8001582:	e76f      	b.n	8001464 <TSK_MediumFrequencyTaskM1+0x58>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8001584:	f7ff ff28 	bl	80013d8 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001588:	2800      	cmp	r0, #0
 800158a:	f43f af6b 	beq.w	8001464 <TSK_MediumFrequencyTaskM1+0x58>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 800158e:	4b35      	ldr	r3, [pc, #212]	; (8001664 <TSK_MediumFrequencyTaskM1+0x258>)
 8001590:	2100      	movs	r1, #0
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	f005 fdcc 	bl	8007130 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],ALIGN_OFFSET_CALIB);
 8001598:	210e      	movs	r1, #14
 800159a:	4831      	ldr	r0, [pc, #196]	; (8001660 <TSK_MediumFrequencyTaskM1+0x254>)
 800159c:	f006 fe96 	bl	80082cc <STM_NextState>
 80015a0:	e760      	b.n	8001464 <TSK_MediumFrequencyTaskM1+0x58>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80015a2:	4b30      	ldr	r3, [pc, #192]	; (8001664 <TSK_MediumFrequencyTaskM1+0x258>)
 80015a4:	2101      	movs	r1, #1
 80015a6:	6818      	ldr	r0, [r3, #0]
 80015a8:	f005 fdc2 	bl	8007130 <PWMC_CurrentReadingCalibr>
 80015ac:	2800      	cmp	r0, #0
 80015ae:	f43f af59 	beq.w	8001464 <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], ALIGN_CLEAR );
 80015b2:	210f      	movs	r1, #15
 80015b4:	482a      	ldr	r0, [pc, #168]	; (8001660 <TSK_MediumFrequencyTaskM1+0x254>)
 80015b6:	f006 fe89 	bl	80082cc <STM_NextState>
 80015ba:	e753      	b.n	8001464 <TSK_MediumFrequencyTaskM1+0x58>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80015bc:	4a2b      	ldr	r2, [pc, #172]	; (800166c <TSK_MediumFrequencyTaskM1+0x260>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 80015be:	4b2c      	ldr	r3, [pc, #176]	; (8001670 <TSK_MediumFrequencyTaskM1+0x264>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80015c0:	6810      	ldr	r0, [r2, #0]
 80015c2:	492e      	ldr	r1, [pc, #184]	; (800167c <TSK_MediumFrequencyTaskM1+0x270>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80015ca:	f006 fd9d 	bl	8008108 <STC_SetSpeedSensor>
    EAC_StartAlignment( &EncAlignCtrlM1 );
 80015ce:	4826      	ldr	r0, [pc, #152]	; (8001668 <TSK_MediumFrequencyTaskM1+0x25c>)
 80015d0:	f005 f90e 	bl	80067f0 <EAC_StartAlignment>
    if ( STM_NextState( &STM[M1], ALIGNMENT ) == true )
 80015d4:	4822      	ldr	r0, [pc, #136]	; (8001660 <TSK_MediumFrequencyTaskM1+0x254>)
 80015d6:	2102      	movs	r1, #2
 80015d8:	f006 fe78 	bl	80082cc <STM_NextState>
 80015dc:	2800      	cmp	r0, #0
 80015de:	f43f af41 	beq.w	8001464 <TSK_MediumFrequencyTaskM1+0x58>
 80015e2:	e74a      	b.n	800147a <TSK_MediumFrequencyTaskM1+0x6e>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80015e4:	f7ff fef8 	bl	80013d8 <TSK_ChargeBootCapDelayHasElapsedM1>
 80015e8:	2800      	cmp	r0, #0
 80015ea:	f43f af3b 	beq.w	8001464 <TSK_MediumFrequencyTaskM1+0x58>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <TSK_MediumFrequencyTaskM1+0x258>)
 80015f0:	2100      	movs	r1, #0
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	f005 fd9c 	bl	8007130 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 80015f8:	2111      	movs	r1, #17
 80015fa:	4819      	ldr	r0, [pc, #100]	; (8001660 <TSK_MediumFrequencyTaskM1+0x254>)
 80015fc:	f006 fe66 	bl	80082cc <STM_NextState>
 8001600:	e730      	b.n	8001464 <TSK_MediumFrequencyTaskM1+0x58>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <TSK_MediumFrequencyTaskM1+0x258>)
 8001604:	2101      	movs	r1, #1
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	f005 fd92 	bl	8007130 <PWMC_CurrentReadingCalibr>
 800160c:	2800      	cmp	r0, #0
 800160e:	f43f af29 	beq.w	8001464 <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], CLEAR );
 8001612:	2112      	movs	r1, #18
 8001614:	4812      	ldr	r0, [pc, #72]	; (8001660 <TSK_MediumFrequencyTaskM1+0x254>)
 8001616:	f006 fe59 	bl	80082cc <STM_NextState>
 800161a:	e723      	b.n	8001464 <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <TSK_MediumFrequencyTaskM1+0x258>)
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	f005 ff62 	bl	80074e8 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001624:	2014      	movs	r0, #20
 8001626:	f7ff fed1 	bl	80013cc <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 800162a:	2110      	movs	r1, #16
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <TSK_MediumFrequencyTaskM1+0x254>)
 800162e:	f006 fe4d 	bl	80082cc <STM_NextState>
    break;
 8001632:	e717      	b.n	8001464 <TSK_MediumFrequencyTaskM1+0x58>
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <TSK_MediumFrequencyTaskM1+0x258>)
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 8001636:	4c0d      	ldr	r4, [pc, #52]	; (800166c <TSK_MediumFrequencyTaskM1+0x260>)
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8001638:	6818      	ldr	r0, [r3, #0]
 800163a:	f005 ffc7 	bl	80075cc <R3_2_SwitchOffPWM>
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 800163e:	6820      	ldr	r0, [r4, #0]
 8001640:	2101      	movs	r1, #1
 8001642:	f006 fd7d 	bl	8008140 <STC_SetControlMode>
      STC_SetSpeedSensor( pSTC[M1], &ENCODER_M1._Super );
 8001646:	6820      	ldr	r0, [r4, #0]
 8001648:	4904      	ldr	r1, [pc, #16]	; (800165c <TSK_MediumFrequencyTaskM1+0x250>)
 800164a:	f006 fd5d 	bl	8008108 <STC_SetSpeedSensor>
      STM_NextState( &STM[M1], ANY_STOP );
 800164e:	2107      	movs	r1, #7
 8001650:	4803      	ldr	r0, [pc, #12]	; (8001660 <TSK_MediumFrequencyTaskM1+0x254>)
 8001652:	f006 fe3b 	bl	80082cc <STM_NextState>
 8001656:	e705      	b.n	8001464 <TSK_MediumFrequencyTaskM1+0x58>
 8001658:	20000ab0 	.word	0x20000ab0
 800165c:	200000b4 	.word	0x200000b4
 8001660:	20000aa4 	.word	0x20000aa4
 8001664:	200009e0 	.word	0x200009e0
 8001668:	20000130 	.word	0x20000130
 800166c:	20000ab8 	.word	0x20000ab8
 8001670:	200009fc 	.word	0x200009fc
 8001674:	20000a78 	.word	0x20000a78
 8001678:	200009f0 	.word	0x200009f0
 800167c:	20000428 	.word	0x20000428

08001680 <MC_Scheduler>:
{
 8001680:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MC_Scheduler+0x48>)
 8001684:	781c      	ldrb	r4, [r3, #0]
 8001686:	2c01      	cmp	r4, #1
 8001688:	d000      	beq.n	800168c <MC_Scheduler+0xc>
}
 800168a:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 800168c:	4d0f      	ldr	r5, [pc, #60]	; (80016cc <MC_Scheduler+0x4c>)
 800168e:	882b      	ldrh	r3, [r5, #0]
 8001690:	b29b      	uxth	r3, r3
 8001692:	b1ab      	cbz	r3, 80016c0 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 8001694:	882b      	ldrh	r3, [r5, #0]
 8001696:	3b01      	subs	r3, #1
 8001698:	b29b      	uxth	r3, r3
 800169a:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 800169c:	4a0c      	ldr	r2, [pc, #48]	; (80016d0 <MC_Scheduler+0x50>)
 800169e:	8813      	ldrh	r3, [r2, #0]
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	b11b      	cbz	r3, 80016ac <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 80016a4:	8813      	ldrh	r3, [r2, #0]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 80016ac:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <MC_Scheduler+0x54>)
 80016ae:	8813      	ldrh	r3, [r2, #0]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0e9      	beq.n	800168a <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 80016b6:	8813      	ldrh	r3, [r2, #0]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	8013      	strh	r3, [r2, #0]
}
 80016be:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 80016c0:	f7ff fea4 	bl	800140c <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 80016c4:	802c      	strh	r4, [r5, #0]
 80016c6:	e7e9      	b.n	800169c <MC_Scheduler+0x1c>
 80016c8:	20000654 	.word	0x20000654
 80016cc:	20000658 	.word	0x20000658
 80016d0:	20000656 	.word	0x20000656
 80016d4:	2000065a 	.word	0x2000065a

080016d8 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80016d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 80016dc:	4832      	ldr	r0, [pc, #200]	; (80017a8 <TSK_HighFrequencyTask+0xd0>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80016de:	4f33      	ldr	r7, [pc, #204]	; (80017ac <TSK_HighFrequencyTask+0xd4>)
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80016e0:	4c33      	ldr	r4, [pc, #204]	; (80017b0 <TSK_HighFrequencyTask+0xd8>)
{
 80016e2:	b086      	sub	sp, #24
  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 80016e4:	f005 f91a 	bl	800691c <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80016e8:	4b32      	ldr	r3, [pc, #200]	; (80017b4 <TSK_HighFrequencyTask+0xdc>)
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	f006 fd0e 	bl	800810c <STC_GetSpeedSensor>
 80016f0:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 80016f2:	f006 fcb1 	bl	8008058 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80016f6:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 80016f8:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80016fa:	6838      	ldr	r0, [r7, #0]
 80016fc:	f005 fbec 	bl	8006ed8 <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 8001700:	f000 ff44 	bl	800258c <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8001704:	f000 fef8 	bl	80024f8 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8001708:	9803      	ldr	r0, [sp, #12]
 800170a:	f7ff fc2b 	bl	8000f64 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800170e:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8001710:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001712:	f7ff fc69 	bl	8000fe8 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001716:	4a28      	ldr	r2, [pc, #160]	; (80017b8 <TSK_HighFrequencyTask+0xe0>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001718:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800171c:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800171e:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001720:	1ac9      	subs	r1, r1, r3
 8001722:	6810      	ldr	r0, [r2, #0]
 8001724:	f005 fadc 	bl	8006ce0 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001728:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  Vqd.d = PI_Controller(pPIDId[M1],
 800172c:	4b23      	ldr	r3, [pc, #140]	; (80017bc <TSK_HighFrequencyTask+0xe4>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 800172e:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001732:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8001734:	1a89      	subs	r1, r1, r2
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	f005 fad2 	bl	8006ce0 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 800173c:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <TSK_HighFrequencyTask+0xe8>)
 800173e:	f8ad 8008 	strh.w	r8, [sp, #8]
 8001742:	f8ad 000a 	strh.w	r0, [sp, #10]
 8001746:	9902      	ldr	r1, [sp, #8]
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	f005 f815 	bl	8006778 <Circle_Limitation>
 800174e:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001750:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001752:	fa0f f883 	sxth.w	r8, r3
 8001756:	141d      	asrs	r5, r3, #16
 8001758:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800175a:	f006 fc87 	bl	800806c <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800175e:	4631      	mov	r1, r6
 8001760:	9802      	ldr	r0, [sp, #8]
 8001762:	f7ff fc83 	bl	800106c <MCM_Rev_Park>
 8001766:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001768:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800176a:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800176c:	f005 fbb6 	bl	8006edc <PWMC_SetPhaseVoltage>
 8001770:	4601      	mov	r1, r0
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001772:	9803      	ldr	r0, [sp, #12]
 8001774:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001776:	9804      	ldr	r0, [sp, #16]
 8001778:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 800177a:	9801      	ldr	r0, [sp, #4]
 800177c:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 800177e:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8001780:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8001782:	f8a4 8016 	strh.w	r8, [r4, #22]
 8001786:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 8001788:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 800178a:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 800178e:	d003      	beq.n	8001798 <TSK_HighFrequencyTask+0xc0>
}
 8001790:	2000      	movs	r0, #0
 8001792:	b006      	add	sp, #24
 8001794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	480a      	ldr	r0, [pc, #40]	; (80017c4 <TSK_HighFrequencyTask+0xec>)
 800179c:	f006 fd78 	bl	8008290 <STM_FaultProcessing>
}
 80017a0:	2000      	movs	r0, #0
 80017a2:	b006      	add	sp, #24
 80017a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017a8:	200000b4 	.word	0x200000b4
 80017ac:	200009e0 	.word	0x200009e0
 80017b0:	200009fc 	.word	0x200009fc
 80017b4:	20000ab8 	.word	0x20000ab8
 80017b8:	200009ec 	.word	0x200009ec
 80017bc:	20000ab4 	.word	0x20000ab4
 80017c0:	20000a7c 	.word	0x20000a7c
 80017c4:	20000aa4 	.word	0x20000aa4

080017c8 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80017c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <TSK_SafetyTask_PWMOFF+0x90>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80017cc:	4e23      	ldr	r6, [pc, #140]	; (800185c <TSK_SafetyTask_PWMOFF+0x94>)
{
 80017ce:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80017d0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80017d4:	f005 fa32 	bl	8006c3c <NTC_CalcAvTemp>
 80017d8:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80017da:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80017de:	f005 fcd1 	bl	8007184 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80017e2:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80017e6:	4328      	orrs	r0, r5
 80017e8:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 80017ea:	b36c      	cbz	r4, 8001848 <TSK_SafetyTask_PWMOFF+0x80>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 80017ec:	4f1c      	ldr	r7, [pc, #112]	; (8001860 <TSK_SafetyTask_PWMOFF+0x98>)
 80017ee:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80017f2:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 80017f6:	43ea      	mvns	r2, r5
 80017f8:	b292      	uxth	r2, r2
 80017fa:	4629      	mov	r1, r5
 80017fc:	4638      	mov	r0, r7
 80017fe:	f006 fd47 	bl	8008290 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8001802:	4638      	mov	r0, r7
 8001804:	f006 fdd6 	bl	80083b4 <STM_GetState>
 8001808:	280a      	cmp	r0, #10
 800180a:	d002      	beq.n	8001812 <TSK_SafetyTask_PWMOFF+0x4a>
 800180c:	280b      	cmp	r0, #11
 800180e:	d015      	beq.n	800183c <TSK_SafetyTask_PWMOFF+0x74>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pEAC[bMotor] != MC_NULL)
 8001812:	4b14      	ldr	r3, [pc, #80]	; (8001864 <TSK_SafetyTask_PWMOFF+0x9c>)
 8001814:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001818:	b110      	cbz	r0, 8001820 <TSK_SafetyTask_PWMOFF+0x58>
      EAC_SetRestartState( pEAC[bMotor], false );
 800181a:	2100      	movs	r1, #0
 800181c:	f005 f82a 	bl	8006874 <EAC_SetRestartState>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001820:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001824:	f005 fc82 	bl	800712c <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff fc3f 	bl	80010ac <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <TSK_SafetyTask_PWMOFF+0xa0>)
 8001830:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8001834:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001838:	f005 b9aa 	b.w	8006b90 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800183c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 8001840:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001844:	f005 bc72 	b.w	800712c <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <TSK_SafetyTask_PWMOFF+0xa4>)
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	f006 fb9a 	bl	8007f84 <RVBS_CalcAvVbus>
 8001850:	f000 000e 	and.w	r0, r0, #14
 8001854:	4305      	orrs	r5, r0
 8001856:	e7c9      	b.n	80017ec <TSK_SafetyTask_PWMOFF+0x24>
 8001858:	200009dc 	.word	0x200009dc
 800185c:	200009e0 	.word	0x200009e0
 8001860:	20000aa4 	.word	0x20000aa4
 8001864:	200009e8 	.word	0x200009e8
 8001868:	20000ab0 	.word	0x20000ab0
 800186c:	20000a80 	.word	0x20000a80

08001870 <TSK_SafetyTask>:
{
 8001870:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <TSK_SafetyTask+0x1c>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d000      	beq.n	800187c <TSK_SafetyTask+0xc>
}
 800187a:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 800187c:	2000      	movs	r0, #0
 800187e:	f7ff ffa3 	bl	80017c8 <TSK_SafetyTask_PWMOFF>
}
 8001882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 8001886:	f000 be07 	b.w	8002498 <RCM_ExecUserConv>
 800188a:	bf00      	nop
 800188c:	20000654 	.word	0x20000654

08001890 <MC_RunMotorControlTasks>:
{
 8001890:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MC_RunMotorControlTasks+0x1c>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	b903      	cbnz	r3, 800189a <MC_RunMotorControlTasks+0xa>
}
 8001898:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 800189a:	f7ff fef1 	bl	8001680 <MC_Scheduler>
    TSK_SafetyTask();
 800189e:	f7ff ffe7 	bl	8001870 <TSK_SafetyTask>
}
 80018a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 80018a6:	f001 ba27 	b.w	8002cf8 <UI_Scheduler>
 80018aa:	bf00      	nop
 80018ac:	20000654 	.word	0x20000654

080018b0 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80018b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <TSK_HardwareFaultTask+0x18>)
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	f005 fe89 	bl	80075cc <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80018ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 80018be:	4803      	ldr	r0, [pc, #12]	; (80018cc <TSK_HardwareFaultTask+0x1c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	2180      	movs	r1, #128	; 0x80
 80018c4:	f006 bce4 	b.w	8008290 <STM_FaultProcessing>
 80018c8:	200009e0 	.word	0x200009e0
 80018cc:	20000aa4 	.word	0x20000aa4

080018d0 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 80018d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018d4:	4a62      	ldr	r2, [pc, #392]	; (8001a60 <mc_lock_pins+0x190>)
 80018d6:	4c63      	ldr	r4, [pc, #396]	; (8001a64 <mc_lock_pins+0x194>)
 80018d8:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018da:	f04f 0c04 	mov.w	ip, #4
 80018de:	b094      	sub	sp, #80	; 0x50
 80018e0:	f8c2 c01c 	str.w	ip, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018e4:	61d4      	str	r4, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 80018e6:	69d3      	ldr	r3, [r2, #28]
 80018e8:	9313      	str	r3, [sp, #76]	; 0x4c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018ea:	4d5f      	ldr	r5, [pc, #380]	; (8001a68 <mc_lock_pins+0x198>)
  (void) temp;
 80018ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018ee:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018f0:	f04f 0e02 	mov.w	lr, #2
 80018f4:	f8c2 e01c 	str.w	lr, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018f8:	61d5      	str	r5, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018fa:	69d3      	ldr	r3, [r2, #28]
 80018fc:	9312      	str	r3, [sp, #72]	; 0x48
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018fe:	495b      	ldr	r1, [pc, #364]	; (8001a6c <mc_lock_pins+0x19c>)
  (void) temp;
 8001900:	9b12      	ldr	r3, [sp, #72]	; 0x48
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001902:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001904:	f44f 7680 	mov.w	r6, #256	; 0x100
 8001908:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800190a:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800190c:	69d3      	ldr	r3, [r2, #28]
 800190e:	9311      	str	r3, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001910:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001914:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
  (void) temp;
 8001918:	9f11      	ldr	r7, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800191a:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800191c:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800191e:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001920:	69d0      	ldr	r0, [r2, #28]
 8001922:	9010      	str	r0, [sp, #64]	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001924:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001928:	f04f 1001 	mov.w	r0, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 800192c:	2701      	movs	r7, #1
  (void) temp;
 800192e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001932:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001934:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001936:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001938:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800193c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  (void) temp;
 8001940:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001944:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001946:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001948:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800194a:	69d0      	ldr	r0, [r2, #28]
 800194c:	900e      	str	r0, [sp, #56]	; 0x38
  (void) temp;
 800194e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001950:	4847      	ldr	r0, [pc, #284]	; (8001a70 <mc_lock_pins+0x1a0>)
 8001952:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001954:	2780      	movs	r7, #128	; 0x80
 8001956:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001958:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800195a:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800195e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  (void) temp;
 8001962:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001966:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001968:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800196c:	61dd      	str	r5, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800196e:	69dd      	ldr	r5, [r3, #28]
 8001970:	950c      	str	r5, [sp, #48]	; 0x30
  (void) temp;
 8001972:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001976:	4d3f      	ldr	r5, [pc, #252]	; (8001a74 <mc_lock_pins+0x1a4>)
 8001978:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800197a:	f04f 0e08 	mov.w	lr, #8
 800197e:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001982:	61dd      	str	r5, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001984:	69dd      	ldr	r5, [r3, #28]
 8001986:	950b      	str	r5, [sp, #44]	; 0x2c
  (void) temp;
 8001988:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800198a:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800198c:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001990:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001992:	69dc      	ldr	r4, [r3, #28]
 8001994:	940a      	str	r4, [sp, #40]	; 0x28
  (void) temp;
 8001996:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001998:	4c37      	ldr	r4, [pc, #220]	; (8001a78 <mc_lock_pins+0x1a8>)
 800199a:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800199c:	2540      	movs	r5, #64	; 0x40
 800199e:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019a0:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80019a2:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80019a6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  (void) temp;
 80019aa:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019ae:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 8001a80 <mc_lock_pins+0x1b0>
 80019b2:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019b6:	f04f 0e20 	mov.w	lr, #32
 80019ba:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019be:	f8c3 c01c 	str.w	ip, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80019c2:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80019c6:	f8cd c020 	str.w	ip, [sp, #32]
  (void) temp;
 80019ca:	f8dd c020 	ldr.w	ip, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019ce:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019d0:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019d2:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80019d4:	69d4      	ldr	r4, [r2, #28]
 80019d6:	9407      	str	r4, [sp, #28]
  (void) temp;
 80019d8:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019da:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019dc:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019de:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80019e0:	69d0      	ldr	r0, [r2, #28]
 80019e2:	9006      	str	r0, [sp, #24]
  (void) temp;
 80019e4:	9806      	ldr	r0, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019e6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019e8:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019ea:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80019ec:	69d9      	ldr	r1, [r3, #28]
 80019ee:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019f0:	f44f 7000 	mov.w	r0, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019f4:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  (void) temp;
 80019f8:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019fa:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019fc:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019fe:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a00:	69d9      	ldr	r1, [r3, #28]
 8001a02:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a04:	f44f 6080 	mov.w	r0, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a08:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  (void) temp;
 8001a0c:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a0e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a10:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a12:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a14:	69d9      	ldr	r1, [r3, #28]
 8001a16:	9103      	str	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a18:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a1c:	f44f 3188 	mov.w	r1, #69632	; 0x11000
  (void) temp;
 8001a20:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a22:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a24:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a26:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	9302      	str	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a30:	f44f 33c0 	mov.w	r3, #98304	; 0x18000
  (void) temp;
 8001a34:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a36:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a38:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a3a:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a3c:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <mc_lock_pins+0x1ac>)
  temp = READ_REG(GPIOx->LCKR);
 8001a40:	9201      	str	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a46:	f44f 3290 	mov.w	r2, #73728	; 0x12000
  (void) temp;
 8001a4a:	9801      	ldr	r0, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a4c:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a4e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a50:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	9300      	str	r3, [sp, #0]
  (void) temp;
 8001a56:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8001a58:	b014      	add	sp, #80	; 0x50
 8001a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a5e:	bf00      	nop
 8001a60:	48000400 	.word	0x48000400
 8001a64:	00010004 	.word	0x00010004
 8001a68:	00010002 	.word	0x00010002
 8001a6c:	00010100 	.word	0x00010100
 8001a70:	00010080 	.word	0x00010080
 8001a74:	00010008 	.word	0x00010008
 8001a78:	00010040 	.word	0x00010040
 8001a7c:	48000800 	.word	0x48000800
 8001a80:	00010020 	.word	0x00010020

08001a84 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a86:	460c      	mov	r4, r1
 8001a88:	b08d      	sub	sp, #52	; 0x34
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8001a8a:	2100      	movs	r1, #0
{
 8001a8c:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8001a8e:	0962      	lsrs	r2, r4, #5
{
 8001a90:	461f      	mov	r7, r3
 8001a92:	4605      	mov	r5, r0
  bool bNoError = false; // Default is error
 8001a94:	f88d 1009 	strb.w	r1, [sp, #9]
  if (bMotorSelection != 0)
 8001a98:	d122      	bne.n	8001ae0 <MCP_ReceivedFrame+0x5c>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8001a9a:	2c12      	cmp	r4, #18
 8001a9c:	d814      	bhi.n	8001ac8 <MCP_ReceivedFrame+0x44>
 8001a9e:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001aa2:	0016      	.short	0x0016
 8001aa4:	00d1003f 	.word	0x00d1003f
 8001aa8:	00130163 	.word	0x00130163
 8001aac:	01700013 	.word	0x01700013
 8001ab0:	01b5019d 	.word	0x01b5019d
 8001ab4:	01fe01d9 	.word	0x01fe01d9
 8001ab8:	022d0216 	.word	0x022d0216
 8001abc:	00130247 	.word	0x00130247
 8001ac0:	00130013 	.word	0x00130013
 8001ac4:	025a0013 	.word	0x025a0013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8001ace:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f10d 020e 	add.w	r2, sp, #14
 8001ad8:	21ff      	movs	r1, #255	; 0xff
 8001ada:	47a0      	blx	r4
    }
  }
}
 8001adc:	b00d      	add	sp, #52	; 0x34
 8001ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8001ae0:	3a01      	subs	r2, #1
 8001ae2:	f001 f957 	bl	8002d94 <UI_SetReg>
 8001ae6:	2800      	cmp	r0, #0
 8001ae8:	f000 8256 	beq.w	8001f98 <MCP_ReceivedFrame+0x514>
  switch (Code)
 8001aec:	f004 041f 	and.w	r4, r4, #31
 8001af0:	2c12      	cmp	r4, #18
 8001af2:	f200 825a 	bhi.w	8001faa <MCP_ReceivedFrame+0x526>
 8001af6:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001afa:	0276      	.short	0x0276
 8001afc:	00a50013 	.word	0x00a50013
 8001b00:	02580137 	.word	0x02580137
 8001b04:	01440258 	.word	0x01440258
 8001b08:	01890171 	.word	0x01890171
 8001b0c:	01d201ad 	.word	0x01d201ad
 8001b10:	020101ea 	.word	0x020101ea
 8001b14:	0258021b 	.word	0x0258021b
 8001b18:	02580258 	.word	0x02580258
 8001b1c:	022e0258 	.word	0x022e0258
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001b20:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8001b22:	2305      	movs	r3, #5
 8001b24:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001b28:	2988      	cmp	r1, #136	; 0x88
 8001b2a:	f200 8259 	bhi.w	8001fe0 <MCP_ReceivedFrame+0x55c>
 8001b2e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001b32:	02ae      	.short	0x02ae
 8001b34:	02570257 	.word	0x02570257
 8001b38:	025702a4 	.word	0x025702a4
 8001b3c:	02600260 	.word	0x02600260
 8001b40:	02600260 	.word	0x02600260
 8001b44:	02600260 	.word	0x02600260
 8001b48:	02600260 	.word	0x02600260
 8001b4c:	02600260 	.word	0x02600260
 8001b50:	027f0260 	.word	0x027f0260
 8001b54:	0257027f 	.word	0x0257027f
 8001b58:	02600257 	.word	0x02600257
 8001b5c:	02600260 	.word	0x02600260
 8001b60:	02600260 	.word	0x02600260
 8001b64:	02570257 	.word	0x02570257
 8001b68:	01510257 	.word	0x01510257
 8001b6c:	02570151 	.word	0x02570151
 8001b70:	02570257 	.word	0x02570257
 8001b74:	02570257 	.word	0x02570257
 8001b78:	02570257 	.word	0x02570257
 8001b7c:	02570257 	.word	0x02570257
 8001b80:	02570257 	.word	0x02570257
 8001b84:	02570257 	.word	0x02570257
 8001b88:	02570257 	.word	0x02570257
 8001b8c:	02570257 	.word	0x02570257
 8001b90:	02570257 	.word	0x02570257
 8001b94:	02570257 	.word	0x02570257
 8001b98:	02570257 	.word	0x02570257
 8001b9c:	02570257 	.word	0x02570257
 8001ba0:	02570257 	.word	0x02570257
 8001ba4:	02570257 	.word	0x02570257
 8001ba8:	02570257 	.word	0x02570257
 8001bac:	02570257 	.word	0x02570257
 8001bb0:	02570257 	.word	0x02570257
 8001bb4:	02570260 	.word	0x02570260
 8001bb8:	02570257 	.word	0x02570257
 8001bbc:	027f0257 	.word	0x027f0257
 8001bc0:	027f027f 	.word	0x027f027f
 8001bc4:	02570257 	.word	0x02570257
 8001bc8:	02570257 	.word	0x02570257
 8001bcc:	02570257 	.word	0x02570257
 8001bd0:	02570260 	.word	0x02570260
 8001bd4:	02570257 	.word	0x02570257
 8001bd8:	02600260 	.word	0x02600260
 8001bdc:	02600260 	.word	0x02600260
 8001be0:	02600260 	.word	0x02600260
 8001be4:	02570260 	.word	0x02570260
 8001be8:	0257027f 	.word	0x0257027f
 8001bec:	02570257 	.word	0x02570257
 8001bf0:	02570257 	.word	0x02570257
 8001bf4:	02570260 	.word	0x02570260
 8001bf8:	02600257 	.word	0x02600257
 8001bfc:	02570260 	.word	0x02570260
 8001c00:	02570257 	.word	0x02570257
 8001c04:	02570257 	.word	0x02570257
 8001c08:	02570257 	.word	0x02570257
 8001c0c:	02570257 	.word	0x02570257
 8001c10:	02570257 	.word	0x02570257
 8001c14:	02570257 	.word	0x02570257
 8001c18:	02a40257 	.word	0x02a40257
 8001c1c:	027f027f 	.word	0x027f027f
 8001c20:	027f027f 	.word	0x027f027f
 8001c24:	0257027f 	.word	0x0257027f
 8001c28:	02570257 	.word	0x02570257
 8001c2c:	027f027f 	.word	0x027f027f
 8001c30:	02570257 	.word	0x02570257
 8001c34:	02570257 	.word	0x02570257
 8001c38:	02570257 	.word	0x02570257
 8001c3c:	02600257 	.word	0x02600257
 8001c40:	02600260 	.word	0x02600260
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001c44:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8001c46:	2303      	movs	r3, #3
 8001c48:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001c4c:	2988      	cmp	r1, #136	; 0x88
 8001c4e:	f200 81ca 	bhi.w	8001fe6 <MCP_ReceivedFrame+0x562>
 8001c52:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001c56:	0200      	.short	0x0200
 8001c58:	020001db 	.word	0x020001db
 8001c5c:	01db0200 	.word	0x01db0200
 8001c60:	01b301b3 	.word	0x01b301b3
 8001c64:	01b301b3 	.word	0x01b301b3
 8001c68:	01b301b3 	.word	0x01b301b3
 8001c6c:	01b301b3 	.word	0x01b301b3
 8001c70:	01b301b3 	.word	0x01b301b3
 8001c74:	01b301b3 	.word	0x01b301b3
 8001c78:	01b301b3 	.word	0x01b301b3
 8001c7c:	01b301b3 	.word	0x01b301b3
 8001c80:	01b301b3 	.word	0x01b301b3
 8001c84:	01b301b3 	.word	0x01b301b3
 8001c88:	01b301b3 	.word	0x01b301b3
 8001c8c:	01c801b3 	.word	0x01c801b3
 8001c90:	01db01c8 	.word	0x01db01c8
 8001c94:	01b301b3 	.word	0x01b301b3
 8001c98:	020001b3 	.word	0x020001b3
 8001c9c:	01c801c8 	.word	0x01c801c8
 8001ca0:	01c801c8 	.word	0x01c801c8
 8001ca4:	01c801c8 	.word	0x01c801c8
 8001ca8:	01c801c8 	.word	0x01c801c8
 8001cac:	01c801c8 	.word	0x01c801c8
 8001cb0:	01c801c8 	.word	0x01c801c8
 8001cb4:	01c801c8 	.word	0x01c801c8
 8001cb8:	01c801c8 	.word	0x01c801c8
 8001cbc:	01c801c8 	.word	0x01c801c8
 8001cc0:	01c801c8 	.word	0x01c801c8
 8001cc4:	01c801c8 	.word	0x01c801c8
 8001cc8:	01c801c8 	.word	0x01c801c8
 8001ccc:	01c801c8 	.word	0x01c801c8
 8001cd0:	01c801c8 	.word	0x01c801c8
 8001cd4:	01c801c8 	.word	0x01c801c8
 8001cd8:	01c801b3 	.word	0x01c801b3
 8001cdc:	01c801c8 	.word	0x01c801c8
 8001ce0:	01db01c8 	.word	0x01db01c8
 8001ce4:	01db01db 	.word	0x01db01db
 8001ce8:	01b301b3 	.word	0x01b301b3
 8001cec:	01b301b3 	.word	0x01b301b3
 8001cf0:	01db0200 	.word	0x01db0200
 8001cf4:	01b301b3 	.word	0x01b301b3
 8001cf8:	01b301b3 	.word	0x01b301b3
 8001cfc:	01b301b3 	.word	0x01b301b3
 8001d00:	01b301b3 	.word	0x01b301b3
 8001d04:	01b301b3 	.word	0x01b301b3
 8001d08:	020001b3 	.word	0x020001b3
 8001d0c:	01c801db 	.word	0x01c801db
 8001d10:	01b301b3 	.word	0x01b301b3
 8001d14:	01b301b3 	.word	0x01b301b3
 8001d18:	01c801b3 	.word	0x01c801b3
 8001d1c:	01b301c8 	.word	0x01b301c8
 8001d20:	020001b3 	.word	0x020001b3
 8001d24:	01db0200 	.word	0x01db0200
 8001d28:	01db01db 	.word	0x01db01db
 8001d2c:	01db01db 	.word	0x01db01db
 8001d30:	01b30200 	.word	0x01b30200
 8001d34:	01db01b3 	.word	0x01db01b3
 8001d38:	01b301c8 	.word	0x01b301c8
 8001d3c:	020001b3 	.word	0x020001b3
 8001d40:	01db01db 	.word	0x01db01db
 8001d44:	01db01db 	.word	0x01db01db
 8001d48:	01db01db 	.word	0x01db01db
 8001d4c:	01db01db 	.word	0x01db01db
 8001d50:	01db01db 	.word	0x01db01db
 8001d54:	020001db 	.word	0x020001db
 8001d58:	020001c8 	.word	0x020001c8
 8001d5c:	01db01db 	.word	0x01db01db
 8001d60:	01b301db 	.word	0x01b301db
 8001d64:	01b301b3 	.word	0x01b301b3
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001d68:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001d6a:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001d6c:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001d70:	4628      	mov	r0, r5
 8001d72:	f001 fb43 	bl	80033fc <UI_ExecCmd>
 8001d76:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001d7a:	2800      	cmp	r0, #0
 8001d7c:	f43f aea7 	beq.w	8001ace <MCP_ReceivedFrame+0x4a>
 8001d80:	e09d      	b.n	8001ebe <MCP_ReceivedFrame+0x43a>
 8001d82:	ac04      	add	r4, sp, #16
 8001d84:	2100      	movs	r1, #0
 8001d86:	4620      	mov	r0, r4
 8001d88:	2220      	movs	r2, #32
 8001d8a:	f006 ff3d 	bl	8008c08 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001d8e:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 8001d92:	f10d 0012 	add.w	r0, sp, #18
 8001d96:	1e71      	subs	r1, r6, #1
 8001d98:	2300      	movs	r3, #0
 8001d9a:	e005      	b.n	8001da8 <MCP_ReceivedFrame+0x324>
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001da0:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001da4:	f000 817e 	beq.w	80020a4 <MCP_ReceivedFrame+0x620>
 8001da8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001dac:	2a09      	cmp	r2, #9
 8001dae:	d1f5      	bne.n	8001d9c <MCP_ReceivedFrame+0x318>
 8001db0:	1d5a      	adds	r2, r3, #5
 8001db2:	1dd9      	adds	r1, r3, #7
 8001db4:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001db6:	5cb2      	ldrb	r2, [r6, r2]
 8001db8:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001dbc:	5c72      	ldrb	r2, [r6, r1]
 8001dbe:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001dc2:	5cf3      	ldrb	r3, [r6, r3]
 8001dc4:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001dc8:	4622      	mov	r2, r4
 8001dca:	2320      	movs	r3, #32
 8001dcc:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001dd0:	21f0      	movs	r1, #240	; 0xf0
 8001dd2:	47a0      	blx	r4
      bNoError = true;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001dda:	e070      	b.n	8001ebe <MCP_ReceivedFrame+0x43a>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001ddc:	7877      	ldrb	r7, [r6, #1]
 8001dde:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001de0:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001de2:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001de4:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001de6:	78f1      	ldrb	r1, [r6, #3]
 8001de8:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8001dec:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001df0:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001df4:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8001df8:	b292      	uxth	r2, r2
 8001dfa:	4628      	mov	r0, r5
 8001dfc:	f001 fb3a 	bl	8003474 <UI_ExecSpeedRamp>
 8001e00:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001e04:	2800      	cmp	r0, #0
 8001e06:	f43f ae62 	beq.w	8001ace <MCP_ReceivedFrame+0x4a>
 8001e0a:	e058      	b.n	8001ebe <MCP_ReceivedFrame+0x43a>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8001e0c:	f10d 030e 	add.w	r3, sp, #14
 8001e10:	7831      	ldrb	r1, [r6, #0]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	f10d 020a 	add.w	r2, sp, #10
 8001e18:	ab03      	add	r3, sp, #12
 8001e1a:	4628      	mov	r0, r5
 8001e1c:	f001 fb50 	bl	80034c0 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001e20:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001e24:	f8bd 100e 	ldrh.w	r1, [sp, #14]
      outBuff[6] = (uint8_t)(Durationms);
 8001e28:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001e2c:	f8ad 1014 	strh.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001e30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001e34:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8001e36:	9304      	str	r3, [sp, #16]
      outBuff[6] = (uint8_t)(Durationms);
 8001e38:	f8ad 2016 	strh.w	r2, [sp, #22]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001e3c:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001e40:	2308      	movs	r3, #8
 8001e42:	aa04      	add	r2, sp, #16
 8001e44:	21f0      	movs	r1, #240	; 0xf0
 8001e46:	47a0      	blx	r4
  if (RequireAck)
 8001e48:	f89d 0009 	ldrb.w	r0, [sp, #9]
    if (bNoError)
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	f43f ae3e 	beq.w	8001ace <MCP_ReceivedFrame+0x4a>
 8001e52:	e034      	b.n	8001ebe <MCP_ReceivedFrame+0x43a>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001e54:	78b1      	ldrb	r1, [r6, #2]
 8001e56:	7873      	ldrb	r3, [r6, #1]
 8001e58:	78f2      	ldrb	r2, [r6, #3]
 8001e5a:	7934      	ldrb	r4, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001e5c:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001e5e:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001e60:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8001e64:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001e68:	4a90      	ldr	r2, [pc, #576]	; (80020ac <MCP_ReceivedFrame+0x628>)
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001e6a:	79b1      	ldrb	r1, [r6, #6]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001e6c:	eb03 6304 	add.w	r3, r3, r4, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001e70:	fb82 4203 	smull	r4, r2, r2, r3
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001e74:	79f4      	ldrb	r4, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001e76:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001e7a:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001e7e:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001e80:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001e84:	7831      	ldrb	r1, [r6, #0]
 8001e86:	9000      	str	r0, [sp, #0]
 8001e88:	b21b      	sxth	r3, r3
 8001e8a:	b292      	uxth	r2, r2
 8001e8c:	4628      	mov	r0, r5
 8001e8e:	f001 fb35 	bl	80034fc <UI_SetRevupData>
 8001e92:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001e96:	2800      	cmp	r0, #0
 8001e98:	f43f ae19 	beq.w	8001ace <MCP_ReceivedFrame+0x4a>
 8001e9c:	e00f      	b.n	8001ebe <MCP_ReceivedFrame+0x43a>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001e9e:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001ea0:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001ea2:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001ea4:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001ea6:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001eaa:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001eae:	b212      	sxth	r2, r2
 8001eb0:	b209      	sxth	r1, r1
 8001eb2:	4628      	mov	r0, r5
 8001eb4:	f001 fb3e 	bl	8003534 <UI_SetCurrentReferences>
      bNoError = true;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f88d 3009 	strb.w	r3, [sp, #9]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	21f0      	movs	r1, #240	; 0xf0
 8001ec8:	47a0      	blx	r4
}
 8001eca:	b00d      	add	sp, #52	; 0x34
 8001ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001ece:	4c78      	ldr	r4, [pc, #480]	; (80020b0 <MCP_ReceivedFrame+0x62c>)
      stepList.data = buffer;
 8001ed0:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001ed2:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8001ed8:	f88d 7014 	strb.w	r7, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001edc:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001ee0:	f001 fb38 	bl	8003554 <UI_GetMPInfo>
 8001ee4:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 8001ee8:	2800      	cmp	r0, #0
 8001eea:	f43f adf0 	beq.w	8001ace <MCP_ReceivedFrame+0x4a>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001eee:	e9d5 0606 	ldrd	r0, r6, [r5, #24]
 8001ef2:	7923      	ldrb	r3, [r4, #4]
 8001ef4:	6822      	ldr	r2, [r4, #0]
 8001ef6:	21f0      	movs	r1, #240	; 0xf0
 8001ef8:	47b0      	blx	r6
  if (RequireAck)
 8001efa:	e5ef      	b.n	8001adc <MCP_ReceivedFrame+0x58>
 8001efc:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8001f00:	ac04      	add	r4, sp, #16
 8001f02:	3b01      	subs	r3, #1
 8001f04:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001f06:	2000      	movs	r0, #0
 8001f08:	e005      	b.n	8001f16 <MCP_ReceivedFrame+0x492>
 8001f0a:	3001      	adds	r0, #1
 8001f0c:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8001f0e:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001f12:	f43f af59 	beq.w	8001dc8 <MCP_ReceivedFrame+0x344>
 8001f16:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001f1a:	b2c6      	uxtb	r6, r0
 8001f1c:	2900      	cmp	r1, #0
 8001f1e:	d1f4      	bne.n	8001f0a <MCP_ReceivedFrame+0x486>
        outBuff[i] = 0;
 8001f20:	f1c6 021f 	rsb	r2, r6, #31
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	3201      	adds	r2, #1
 8001f28:	4420      	add	r0, r4
 8001f2a:	f006 fe6d 	bl	8008c08 <memset>
 8001f2e:	e74b      	b.n	8001dc8 <MCP_ReceivedFrame+0x344>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001f30:	7970      	ldrb	r0, [r6, #5]
 8001f32:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001f34:	7873      	ldrb	r3, [r6, #1]
 8001f36:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001f38:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001f3c:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001f40:	b292      	uxth	r2, r2
 8001f42:	b209      	sxth	r1, r1
 8001f44:	4628      	mov	r0, r5
 8001f46:	f001 faa7 	bl	8003498 <UI_ExecTorqueRamp>
 8001f4a:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001f4e:	2800      	cmp	r0, #0
 8001f50:	f43f adbd 	beq.w	8001ace <MCP_ReceivedFrame+0x4a>
 8001f54:	e7b3      	b.n	8001ebe <MCP_ReceivedFrame+0x43a>
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 8001f56:	7970      	ldrb	r0, [r6, #5]
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001f58:	7871      	ldrb	r1, [r6, #1]
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 8001f5a:	7932      	ldrb	r2, [r6, #4]
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001f5c:	7833      	ldrb	r3, [r6, #0]
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 8001f5e:	79b7      	ldrb	r7, [r6, #6]
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001f60:	78b4      	ldrb	r4, [r6, #2]
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 8001f62:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001f66:	eb03 2301 	add.w	r3, r3, r1, lsl #8
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 8001f6a:	79f0      	ldrb	r0, [r6, #7]
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001f6c:	78f1      	ldrb	r1, [r6, #3]
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 8001f6e:	eb02 4207 	add.w	r2, r2, r7, lsl #16
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001f72:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      bNoError = UI_ExecPositionCmd(&pHandle->_Super, Position.Float_Val, Duration.Float_Val);
 8001f76:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 8001f7a:	eb03 6301 	add.w	r3, r3, r1, lsl #24
 8001f7e:	ee00 2a90 	vmov	s1, r2
 8001f82:	ee00 3a10 	vmov	s0, r3
 8001f86:	4628      	mov	r0, r5
 8001f88:	f001 fa90 	bl	80034ac <UI_ExecPositionCmd>
 8001f8c:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001f90:	2800      	cmp	r0, #0
 8001f92:	f43f ad9c 	beq.w	8001ace <MCP_ReceivedFrame+0x4a>
 8001f96:	e792      	b.n	8001ebe <MCP_ReceivedFrame+0x43a>
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8001f98:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001f9c:	230b      	movs	r3, #11
 8001f9e:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001fa2:	2800      	cmp	r0, #0
 8001fa4:	f43f ad93 	beq.w	8001ace <MCP_ReceivedFrame+0x4a>
 8001fa8:	e789      	b.n	8001ebe <MCP_ReceivedFrame+0x43a>
 8001faa:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	f43f ad8a 	beq.w	8001ace <MCP_ReceivedFrame+0x4a>
 8001fba:	e780      	b.n	8001ebe <MCP_ReceivedFrame+0x43a>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001fbc:	f10d 0209 	add.w	r2, sp, #9
 8001fc0:	4628      	mov	r0, r5
 8001fc2:	f000 ffd3 	bl	8002f6c <UI_GetReg>
          if ( bNoError == true )
 8001fc6:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001fca:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f43f ad7e 	beq.w	8001ace <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001fd2:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	aa04      	add	r2, sp, #16
 8001fda:	21f0      	movs	r1, #240	; 0xf0
 8001fdc:	47a0      	blx	r4
  if (RequireAck)
 8001fde:	e57d      	b.n	8001adc <MCP_ReceivedFrame+0x58>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8001fe6:	f89d 0009 	ldrb.w	r0, [sp, #9]
    if (bNoError)
 8001fea:	2800      	cmp	r0, #0
 8001fec:	f43f ad6f 	beq.w	8001ace <MCP_ReceivedFrame+0x4a>
 8001ff0:	e765      	b.n	8001ebe <MCP_ReceivedFrame+0x43a>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001ff2:	78b2      	ldrb	r2, [r6, #2]
 8001ff4:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001ff6:	4628      	mov	r0, r5
 8001ff8:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8001ffc:	f000 feca 	bl	8002d94 <UI_SetReg>
 8002000:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8002004:	2800      	cmp	r0, #0
 8002006:	f43f ad62 	beq.w	8001ace <MCP_ReceivedFrame+0x4a>
 800200a:	e758      	b.n	8001ebe <MCP_ReceivedFrame+0x43a>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 800200c:	f10d 0209 	add.w	r2, sp, #9
 8002010:	4628      	mov	r0, r5
 8002012:	f000 ffab 	bl	8002f6c <UI_GetReg>
          if ( bNoError == true )
 8002016:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 800201a:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 800201c:	2b00      	cmp	r3, #0
 800201e:	f43f ad56 	beq.w	8001ace <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8002022:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8002026:	2304      	movs	r3, #4
 8002028:	aa04      	add	r2, sp, #16
 800202a:	21f0      	movs	r1, #240	; 0xf0
 800202c:	47a0      	blx	r4
  if (RequireAck)
 800202e:	e555      	b.n	8001adc <MCP_ReceivedFrame+0x58>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002030:	78b4      	ldrb	r4, [r6, #2]
 8002032:	7873      	ldrb	r3, [r6, #1]
 8002034:	78f0      	ldrb	r0, [r6, #3]
 8002036:	7932      	ldrb	r2, [r6, #4]
 8002038:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 800203c:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002040:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8002044:	4628      	mov	r0, r5
 8002046:	f000 fea5 	bl	8002d94 <UI_SetReg>
 800204a:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 800204e:	2800      	cmp	r0, #0
 8002050:	f43f ad3d 	beq.w	8001ace <MCP_ReceivedFrame+0x4a>
 8002054:	e733      	b.n	8001ebe <MCP_ReceivedFrame+0x43a>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002056:	f10d 0209 	add.w	r2, sp, #9
 800205a:	4628      	mov	r0, r5
 800205c:	f000 ff86 	bl	8002f6c <UI_GetReg>
           if ( bNoError == true )
 8002060:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002064:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8002066:	2b00      	cmp	r3, #0
 8002068:	f43f ad31 	beq.w	8001ace <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 800206c:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8002070:	2301      	movs	r3, #1
 8002072:	aa04      	add	r2, sp, #16
 8002074:	21f0      	movs	r1, #240	; 0xf0
 8002076:	47a0      	blx	r4
  if (RequireAck)
 8002078:	e530      	b.n	8001adc <MCP_ReceivedFrame+0x58>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 800207a:	7872      	ldrb	r2, [r6, #1]
 800207c:	4628      	mov	r0, r5
 800207e:	f000 fe89 	bl	8002d94 <UI_SetReg>
 8002082:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8002086:	2800      	cmp	r0, #0
 8002088:	f43f ad21 	beq.w	8001ace <MCP_ReceivedFrame+0x4a>
 800208c:	e717      	b.n	8001ebe <MCP_ReceivedFrame+0x43a>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800208e:	7872      	ldrb	r2, [r6, #1]
 8002090:	2100      	movs	r1, #0
 8002092:	4628      	mov	r0, r5
 8002094:	f000 fe7e 	bl	8002d94 <UI_SetReg>
 8002098:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 800209c:	2800      	cmp	r0, #0
 800209e:	f43f ad16 	beq.w	8001ace <MCP_ReceivedFrame+0x4a>
 80020a2:	e70c      	b.n	8001ebe <MCP_ReceivedFrame+0x43a>
 80020a4:	2326      	movs	r3, #38	; 0x26
 80020a6:	2124      	movs	r1, #36	; 0x24
 80020a8:	2222      	movs	r2, #34	; 0x22
 80020aa:	e684      	b.n	8001db6 <MCP_ReceivedFrame+0x332>
 80020ac:	2aaaaaab 	.word	0x2aaaaaab
 80020b0:	2000065c 	.word	0x2000065c

080020b4 <MCP_WaitNextFrame>:
{
 80020b4:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 80020b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80020b8:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 80020ba:	6980      	ldr	r0, [r0, #24]
 80020bc:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 80020c4:	69a0      	ldr	r0, [r4, #24]
 80020c6:	6a23      	ldr	r3, [r4, #32]
}
 80020c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 80020cc:	4718      	bx	r3
 80020ce:	bf00      	nop

080020d0 <MCP_Init>:
{
 80020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d2:	b083      	sub	sp, #12
 80020d4:	4604      	mov	r4, r0
  FCP_SetClient( pFCP, pHandle,
 80020d6:	4f0b      	ldr	r7, [pc, #44]	; (8002104 <MCP_Init+0x34>)
{
 80020d8:	4608      	mov	r0, r1
 80020da:	9909      	ldr	r1, [sp, #36]	; 0x24
  pHandle->pFCP = pFCP;
 80020dc:	61a0      	str	r0, [r4, #24]
  pHandle->s_fwVer = s_fwVer;
 80020de:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
{
 80020e2:	4616      	mov	r6, r2
 80020e4:	461d      	mov	r5, r3
  FCP_SetClient( pFCP, pHandle,
 80020e6:	4a08      	ldr	r2, [pc, #32]	; (8002108 <MCP_Init+0x38>)
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <MCP_Init+0x3c>)
 80020ea:	9700      	str	r7, [sp, #0]
 80020ec:	4621      	mov	r1, r4
{
 80020ee:	9f08      	ldr	r7, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 80020f0:	f004 fd30 	bl	8006b54 <FCP_SetClient>
  pHandle->fFcpReceive = fFcpReceive;
 80020f4:	e9c4 6507 	strd	r6, r5, [r4, #28]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 80020f8:	6267      	str	r7, [r4, #36]	; 0x24
  MCP_WaitNextFrame(pHandle);
 80020fa:	4620      	mov	r0, r4
 80020fc:	f7ff ffda 	bl	80020b4 <MCP_WaitNextFrame>
}
 8002100:	b003      	add	sp, #12
 8002102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002104:	08002111 	.word	0x08002111
 8002108:	08002119 	.word	0x08002119
 800210c:	08001a85 	.word	0x08001a85

08002110 <MCP_OnTimeOut>:
{
 8002110:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8002112:	f7ff ffcf 	bl	80020b4 <MCP_WaitNextFrame>
}
 8002116:	bd08      	pop	{r3, pc}

08002118 <MCP_SentFrame>:
{
 8002118:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 800211a:	f7ff ffcb 	bl	80020b4 <MCP_WaitNextFrame>
}
 800211e:	bd08      	pop	{r3, pc}

08002120 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002120:	b530      	push	{r4, r5, lr}
 8002122:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8002124:	f003 f922 	bl	800536c <HAL_RCC_GetHCLKFreq>
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 800212a:	4d0c      	ldr	r5, [pc, #48]	; (800215c <MX_MotorControl_Init+0x3c>)
 800212c:	4c0c      	ldr	r4, [pc, #48]	; (8002160 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 800212e:	fba3 3000 	umull	r3, r0, r3, r0
 8002132:	09c0      	lsrs	r0, r0, #7
 8002134:	f002 fa62 	bl	80045fc <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8002138:	4629      	mov	r1, r5
 800213a:	4620      	mov	r0, r4
 800213c:	f7fe fffa 	bl	8001134 <MCboot>
  mc_lock_pins();
 8002140:	f7ff fbc6 	bl	80018d0 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8002144:	4b07      	ldr	r3, [pc, #28]	; (8002164 <MX_MotorControl_Init+0x44>)
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	4807      	ldr	r0, [pc, #28]	; (8002168 <MX_MotorControl_Init+0x48>)
 800214a:	462b      	mov	r3, r5
 800214c:	4622      	mov	r2, r4
 800214e:	2101      	movs	r1, #1
 8002150:	f000 fd92 	bl	8002c78 <UI_TaskInit>
}
 8002154:	b003      	add	sp, #12
 8002156:	bd30      	pop	{r4, r5, pc}
 8002158:	10624dd3 	.word	0x10624dd3
 800215c:	20000ac0 	.word	0x20000ac0
 8002160:	20000abc 	.word	0x20000abc
 8002164:	08008d60 	.word	0x08008d60
 8002168:	2000060c 	.word	0x2000060c

0800216c <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800216c:	4a65      	ldr	r2, [pc, #404]	; (8002304 <RCM_RegisterRegConv+0x198>)
 800216e:	6813      	ldr	r3, [r2, #0]
{
 8002170:	b470      	push	{r4, r5, r6}
 8002172:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002174:	2b00      	cmp	r3, #0
 8002176:	d07e      	beq.n	8002276 <RCM_RegisterRegConv+0x10a>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002178:	7904      	ldrb	r4, [r0, #4]
 800217a:	7918      	ldrb	r0, [r3, #4]
 800217c:	4284      	cmp	r4, r0
 800217e:	d01e      	beq.n	80021be <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002180:	6855      	ldr	r5, [r2, #4]
 8002182:	2d00      	cmp	r5, #0
 8002184:	f000 808b 	beq.w	800229e <RCM_RegisterRegConv+0x132>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002188:	792b      	ldrb	r3, [r5, #4]
 800218a:	42a3      	cmp	r3, r4
  uint8_t handle=255;
 800218c:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002190:	d079      	beq.n	8002286 <RCM_RegisterRegConv+0x11a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002192:	6893      	ldr	r3, [r2, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80a2 	beq.w	80022de <RCM_RegisterRegConv+0x172>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800219a:	791d      	ldrb	r5, [r3, #4]
 800219c:	42a5      	cmp	r5, r4
 800219e:	d078      	beq.n	8002292 <RCM_RegisterRegConv+0x126>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80021a0:	68d3      	ldr	r3, [r2, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 80a0 	beq.w	80022e8 <RCM_RegisterRegConv+0x17c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80021a8:	791d      	ldrb	r5, [r3, #4]
 80021aa:	42a5      	cmp	r5, r4
 80021ac:	f000 8082 	beq.w	80022b4 <RCM_RegisterRegConv+0x148>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 80021b0:	2803      	cmp	r0, #3
 80021b2:	bf88      	it	hi
 80021b4:	20ff      	movhi	r0, #255	; 0xff
 80021b6:	f240 80a0 	bls.w	80022fa <RCM_RegisterRegConv+0x18e>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 80021ba:	bc70      	pop	{r4, r5, r6}
 80021bc:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	680b      	ldr	r3, [r1, #0]
 80021c2:	4283      	cmp	r3, r0
 80021c4:	d1dc      	bne.n	8002180 <RCM_RegisterRegConv+0x14>
  uint8_t i=0;
 80021c6:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021c8:	689c      	ldr	r4, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80021ca:	4d4f      	ldr	r5, [pc, #316]	; (8002308 <RCM_RegisterRegConv+0x19c>)
      RCM_handle_array [handle] = regConv;
 80021cc:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80021d0:	2200      	movs	r2, #0
 80021d2:	f845 2030 	str.w	r2, [r5, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 80021d6:	07e5      	lsls	r5, r4, #31
 80021d8:	d422      	bmi.n	8002220 <RCM_RegisterRegConv+0xb4>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80021da:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80021dc:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80021de:	f022 0204 	bic.w	r2, r2, #4
 80021e2:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80021e4:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80021e6:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80021e8:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80021ea:	f022 0220 	bic.w	r2, r2, #32
 80021ee:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80021f0:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80021f8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80021fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002200:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	2a00      	cmp	r2, #0
 8002206:	dbfc      	blt.n	8002202 <RCM_RegisterRegConv+0x96>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002208:	681a      	ldr	r2, [r3, #0]
        while (  LL_ADC_IsActiveFlag_ADRDY( regConv->regADC ) == 0)
 800220a:	07d4      	lsls	r4, r2, #31
 800220c:	d408      	bmi.n	8002220 <RCM_RegisterRegConv+0xb4>
  MODIFY_REG(ADCx->CR,
 800220e:	4c3f      	ldr	r4, [pc, #252]	; (800230c <RCM_RegisterRegConv+0x1a0>)
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	4022      	ands	r2, r4
 8002214:	f042 0201 	orr.w	r2, r2, #1
 8002218:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	07d2      	lsls	r2, r2, #31
 800221e:	d5f7      	bpl.n	8002210 <RCM_RegisterRegConv+0xa4>
      RCM_NoInj_array [handle].enable = false;
 8002220:	4d3b      	ldr	r5, [pc, #236]	; (8002310 <RCM_RegisterRegConv+0x1a4>)
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002222:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8002224:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8002228:	0056      	lsls	r6, r2, #1
 800222a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 800222e:	f024 040f 	bic.w	r4, r4, #15
      RCM_NoInj_array [handle].next = handle;
 8002232:	7150      	strb	r0, [r2, #5]
      RCM_NoInj_array [handle].prev = handle;
 8002234:	7110      	strb	r0, [r2, #4]
      RCM_NoInj_array [handle].enable = false;
 8002236:	2200      	movs	r2, #0
 8002238:	55aa      	strb	r2, [r5, r6]
 800223a:	631c      	str	r4, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 800223c:	790c      	ldrb	r4, [r1, #4]
 800223e:	2c09      	cmp	r4, #9
 8002240:	d83f      	bhi.n	80022c2 <RCM_RegisterRegConv+0x156>
 8002242:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8002246:	06a2      	lsls	r2, r4, #26
 8002248:	2501      	movs	r5, #1
 800224a:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 800224e:	fa05 f404 	lsl.w	r4, r5, r4
 8002252:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002254:	0dd4      	lsrs	r4, r2, #23
 8002256:	f004 0404 	and.w	r4, r4, #4
 800225a:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 800225c:	688d      	ldr	r5, [r1, #8]
 800225e:	58e1      	ldr	r1, [r4, r3]
 8002260:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8002264:	2607      	movs	r6, #7
 8002266:	4096      	lsls	r6, r2
 8002268:	4095      	lsls	r5, r2
 800226a:	ea21 0206 	bic.w	r2, r1, r6
 800226e:	432a      	orrs	r2, r5
 8002270:	50e2      	str	r2, [r4, r3]
}
 8002272:	bc70      	pop	{r4, r5, r6}
 8002274:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002276:	6855      	ldr	r5, [r2, #4]
 8002278:	2d00      	cmp	r5, #0
 800227a:	d039      	beq.n	80022f0 <RCM_RegisterRegConv+0x184>
 800227c:	7904      	ldrb	r4, [r0, #4]
  uint8_t i=0;
 800227e:	4618      	mov	r0, r3
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002280:	792b      	ldrb	r3, [r5, #4]
 8002282:	42a3      	cmp	r3, r4
 8002284:	d185      	bne.n	8002192 <RCM_RegisterRegConv+0x26>
 8002286:	682d      	ldr	r5, [r5, #0]
 8002288:	680b      	ldr	r3, [r1, #0]
 800228a:	429d      	cmp	r5, r3
 800228c:	d181      	bne.n	8002192 <RCM_RegisterRegConv+0x26>
 800228e:	2001      	movs	r0, #1
 8002290:	e79a      	b.n	80021c8 <RCM_RegisterRegConv+0x5c>
 8002292:	681d      	ldr	r5, [r3, #0]
 8002294:	680b      	ldr	r3, [r1, #0]
 8002296:	429d      	cmp	r5, r3
 8002298:	d182      	bne.n	80021a0 <RCM_RegisterRegConv+0x34>
      i++;
 800229a:	2002      	movs	r0, #2
 800229c:	e794      	b.n	80021c8 <RCM_RegisterRegConv+0x5c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800229e:	6893      	ldr	r3, [r2, #8]
 80022a0:	2001      	movs	r0, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f47f af79 	bne.w	800219a <RCM_RegisterRegConv+0x2e>
 80022a8:	68d3      	ldr	r3, [r2, #12]
 80022aa:	b333      	cbz	r3, 80022fa <RCM_RegisterRegConv+0x18e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80022ac:	791d      	ldrb	r5, [r3, #4]
 80022ae:	790c      	ldrb	r4, [r1, #4]
 80022b0:	42a5      	cmp	r5, r4
 80022b2:	d122      	bne.n	80022fa <RCM_RegisterRegConv+0x18e>
 80022b4:	681c      	ldr	r4, [r3, #0]
 80022b6:	680b      	ldr	r3, [r1, #0]
 80022b8:	429c      	cmp	r4, r3
 80022ba:	f47f af79 	bne.w	80021b0 <RCM_RegisterRegConv+0x44>
      i++;
 80022be:	2003      	movs	r0, #3
 80022c0:	e782      	b.n	80021c8 <RCM_RegisterRegConv+0x5c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80022c2:	2503      	movs	r5, #3
 80022c4:	f06f 061d 	mvn.w	r6, #29
 80022c8:	2201      	movs	r2, #1
 80022ca:	fb15 6504 	smlabb	r5, r5, r4, r6
 80022ce:	40a2      	lsls	r2, r4
 80022d0:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 80022d4:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 80022d8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80022dc:	e7ba      	b.n	8002254 <RCM_RegisterRegConv+0xe8>
      i++;
 80022de:	2805      	cmp	r0, #5
 80022e0:	bf34      	ite	cc
 80022e2:	2000      	movcc	r0, #0
 80022e4:	2002      	movcs	r0, #2
 80022e6:	e7df      	b.n	80022a8 <RCM_RegisterRegConv+0x13c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80022e8:	2804      	cmp	r0, #4
 80022ea:	680b      	ldr	r3, [r1, #0]
 80022ec:	d8e7      	bhi.n	80022be <RCM_RegisterRegConv+0x152>
 80022ee:	e76b      	b.n	80021c8 <RCM_RegisterRegConv+0x5c>
 80022f0:	6893      	ldr	r3, [r2, #8]
 80022f2:	b123      	cbz	r3, 80022fe <RCM_RegisterRegConv+0x192>
 80022f4:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 80022f6:	4628      	mov	r0, r5
 80022f8:	e74f      	b.n	800219a <RCM_RegisterRegConv+0x2e>
 80022fa:	680b      	ldr	r3, [r1, #0]
 80022fc:	e764      	b.n	80021c8 <RCM_RegisterRegConv+0x5c>
 80022fe:	4618      	mov	r0, r3
 8002300:	e7d2      	b.n	80022a8 <RCM_RegisterRegConv+0x13c>
 8002302:	bf00      	nop
 8002304:	20000b04 	.word	0x20000b04
 8002308:	20000ae0 	.word	0x20000ae0
 800230c:	7fffffc0 	.word	0x7fffffc0
 8002310:	20000ac8 	.word	0x20000ac8

08002314 <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 8002314:	4b5c      	ldr	r3, [pc, #368]	; (8002488 <RCM_ExecRegularConv+0x174>)
 8002316:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 800231a:	b4f0      	push	{r4, r5, r6, r7}
  if (RCM_NoInj_array [handle].enable == false)
 800231c:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8002320:	0044      	lsls	r4, r0, #1
 8002322:	2a00      	cmp	r2, #0
 8002324:	d136      	bne.n	8002394 <RCM_ExecRegularConv+0x80>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 8002326:	7819      	ldrb	r1, [r3, #0]
 8002328:	2900      	cmp	r1, #0
 800232a:	d179      	bne.n	8002420 <RCM_ExecRegularConv+0x10c>
 800232c:	7999      	ldrb	r1, [r3, #6]
  uint8_t LastEnable = RCM_MAX_CONV;
 800232e:	2204      	movs	r2, #4
      if (RCM_NoInj_array [i].enable == true)
 8002330:	2900      	cmp	r1, #0
 8002332:	d07b      	beq.n	800242c <RCM_ExecRegularConv+0x118>
      {
        if (RCM_NoInj_array [i].next > handle)
 8002334:	7ade      	ldrb	r6, [r3, #11]
 8002336:	42b0      	cmp	r0, r6
 8002338:	f0c0 8098 	bcc.w	800246c <RCM_ExecRegularConv+0x158>
      if (RCM_NoInj_array [i].enable == true)
 800233c:	7b1a      	ldrb	r2, [r3, #12]
 800233e:	2a00      	cmp	r2, #0
 8002340:	f000 8097 	beq.w	8002472 <RCM_ExecRegularConv+0x15e>
        if (RCM_NoInj_array [i].next > handle)
 8002344:	7c5e      	ldrb	r6, [r3, #17]
 8002346:	42b0      	cmp	r0, r6
 8002348:	d305      	bcc.n	8002356 <RCM_ExecRegularConv+0x42>
      if (RCM_NoInj_array [i].enable == true)
 800234a:	7c9a      	ldrb	r2, [r3, #18]
 800234c:	2a00      	cmp	r2, #0
 800234e:	f040 8094 	bne.w	800247a <RCM_ExecRegularConv+0x166>
        }
      }
      else
      { /* nothing to do */
      }
      i++;
 8002352:	2202      	movs	r2, #2
 8002354:	e071      	b.n	800243a <RCM_ExecRegularConv+0x126>
 8002356:	2202      	movs	r2, #2
      if (RCM_NoInj_array [i].enable == true)
 8002358:	4611      	mov	r1, r2
          RCM_NoInj_array [i].next = handle;
 800235a:	eb01 0541 	add.w	r5, r1, r1, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 800235e:	1821      	adds	r1, r4, r0
 8002360:	eb03 0141 	add.w	r1, r3, r1, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 8002364:	eb06 0746 	add.w	r7, r6, r6, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 8002368:	714e      	strb	r6, [r1, #5]
          RCM_NoInj_array [handle].prev = i;
 800236a:	4e48      	ldr	r6, [pc, #288]	; (800248c <RCM_ExecRegularConv+0x178>)
 800236c:	710a      	strb	r2, [r1, #4]
          RCM_NoInj_array [i].next = handle;
 800236e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 8002372:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8002376:	7832      	ldrb	r2, [r6, #0]
          RCM_NoInj_array [i].next = handle;
 8002378:	7168      	strb	r0, [r5, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 800237a:	7138      	strb	r0, [r7, #4]
      {
       /* Nothing to do we are parsing the array, nothing inserted yet*/
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
 800237c:	1821      	adds	r1, r4, r0
 800237e:	2501      	movs	r5, #1
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8002380:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array [handle].enable = true;
 8002384:	f823 5011 	strh.w	r5, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8002388:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800238c:	7852      	ldrb	r2, [r2, #1]
 800238e:	42aa      	cmp	r2, r5
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 8002390:	bf18      	it	ne
 8002392:	7030      	strbne	r0, [r6, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 8002394:	4a3e      	ldr	r2, [pc, #248]	; (8002490 <RCM_ExecRegularConv+0x17c>)
 8002396:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800239a:	bb8a      	cbnz	r2, 8002400 <RCM_ExecRegularConv+0xec>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800239c:	4a3d      	ldr	r2, [pc, #244]	; (8002494 <RCM_ExecRegularConv+0x180>)
 800239e:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80023a2:	7915      	ldrb	r5, [r2, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80023a4:	6811      	ldr	r1, [r2, #0]
 80023a6:	2d09      	cmp	r5, #9
 80023a8:	d930      	bls.n	800240c <RCM_ExecRegularConv+0xf8>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80023aa:	2603      	movs	r6, #3
 80023ac:	f06f 071d 	mvn.w	r7, #29
 80023b0:	2201      	movs	r2, #1
 80023b2:	fb16 7605 	smlabb	r6, r6, r5, r7
 80023b6:	40aa      	lsls	r2, r5
 80023b8:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 80023bc:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80023c0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 80023c4:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80023c6:	0d12      	lsrs	r2, r2, #20
 80023c8:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 80023cc:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 80023d0:	432a      	orrs	r2, r5
 80023d2:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80023d4:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80023d6:	688a      	ldr	r2, [r1, #8]
 80023d8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023dc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80023e0:	f042 0204 	orr.w	r2, r2, #4
 80023e4:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80023e6:	680a      	ldr	r2, [r1, #0]
 80023e8:	0752      	lsls	r2, r2, #29
 80023ea:	d5fc      	bpl.n	80023e6 <RCM_ExecRegularConv+0xd2>
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 80023ec:	1822      	adds	r2, r4, r0
 80023ee:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80023f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023f4:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 80023f6:	4d25      	ldr	r5, [pc, #148]	; (800248c <RCM_ExecRegularConv+0x178>)
    RCM_NoInj_array [handle].status = valid;
 80023f8:	2102      	movs	r1, #2
 80023fa:	7051      	strb	r1, [r2, #1]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 80023fc:	7952      	ldrb	r2, [r2, #5]
 80023fe:	702a      	strb	r2, [r5, #0]
  }
  retVal = RCM_NoInj_array [handle].value;
 8002400:	4420      	add	r0, r4
 8002402:	eb03 0340 	add.w	r3, r3, r0, lsl #1
return retVal;
}
 8002406:	bcf0      	pop	{r4, r5, r6, r7}
 8002408:	8858      	ldrh	r0, [r3, #2]
 800240a:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800240c:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8002410:	06aa      	lsls	r2, r5, #26
 8002412:	2601      	movs	r6, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002414:	ea42 5207 	orr.w	r2, r2, r7, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002418:	fa06 f505 	lsl.w	r5, r6, r5
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800241c:	432a      	orrs	r2, r5
 800241e:	e7d1      	b.n	80023c4 <RCM_ExecRegularConv+0xb0>
        if (RCM_NoInj_array [i].next > handle)
 8002420:	795e      	ldrb	r6, [r3, #5]
 8002422:	4286      	cmp	r6, r0
 8002424:	d898      	bhi.n	8002358 <RCM_ExecRegularConv+0x44>
      if (RCM_NoInj_array [i].enable == true)
 8002426:	7999      	ldrb	r1, [r3, #6]
 8002428:	2900      	cmp	r1, #0
 800242a:	d183      	bne.n	8002334 <RCM_ExecRegularConv+0x20>
 800242c:	7b19      	ldrb	r1, [r3, #12]
 800242e:	2900      	cmp	r1, #0
 8002430:	d188      	bne.n	8002344 <RCM_ExecRegularConv+0x30>
 8002432:	7c99      	ldrb	r1, [r3, #18]
 8002434:	bb09      	cbnz	r1, 800247a <RCM_ExecRegularConv+0x166>
       if (LastEnable != RCM_MAX_CONV )
 8002436:	2a04      	cmp	r2, #4
 8002438:	d014      	beq.n	8002464 <RCM_ExecRegularConv+0x150>
         formerNext = RCM_NoInj_array [LastEnable].next;
 800243a:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800243e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 8002442:	1821      	adds	r1, r4, r0
         formerNext = RCM_NoInj_array [LastEnable].next;
 8002444:	f895 c005 	ldrb.w	ip, [r5, #5]
         RCM_NoInj_array [handle].next = formerNext;
 8002448:	4e10      	ldr	r6, [pc, #64]	; (800248c <RCM_ExecRegularConv+0x178>)
         RCM_NoInj_array [formerNext].prev = handle;
 800244a:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 800244e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array [formerNext].prev = handle;
 8002452:	eb03 0747 	add.w	r7, r3, r7, lsl #1
         RCM_NoInj_array [handle].prev = LastEnable;
 8002456:	710a      	strb	r2, [r1, #4]
         RCM_NoInj_array [handle].next = formerNext;
 8002458:	f881 c005 	strb.w	ip, [r1, #5]
         RCM_NoInj_array [LastEnable].next = handle;
 800245c:	7832      	ldrb	r2, [r6, #0]
 800245e:	7168      	strb	r0, [r5, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 8002460:	7138      	strb	r0, [r7, #4]
    while (i < RCM_MAX_CONV)
 8002462:	e78b      	b.n	800237c <RCM_ExecRegularConv+0x68>
         RCM_currentHandle = handle;
 8002464:	4e09      	ldr	r6, [pc, #36]	; (800248c <RCM_ExecRegularConv+0x178>)
 8002466:	4602      	mov	r2, r0
 8002468:	7030      	strb	r0, [r6, #0]
    while (i < RCM_MAX_CONV)
 800246a:	e787      	b.n	800237c <RCM_ExecRegularConv+0x68>
      i++;
 800246c:	2201      	movs	r2, #1
      if (RCM_NoInj_array [i].enable == true)
 800246e:	4611      	mov	r1, r2
 8002470:	e773      	b.n	800235a <RCM_ExecRegularConv+0x46>
 8002472:	7c9a      	ldrb	r2, [r3, #18]
 8002474:	b90a      	cbnz	r2, 800247a <RCM_ExecRegularConv+0x166>
      i++;
 8002476:	2201      	movs	r2, #1
 8002478:	e7df      	b.n	800243a <RCM_ExecRegularConv+0x126>
        if (RCM_NoInj_array [i].next > handle)
 800247a:	7dde      	ldrb	r6, [r3, #23]
 800247c:	4286      	cmp	r6, r0
      i++;
 800247e:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array [i].next > handle)
 8002482:	d9da      	bls.n	800243a <RCM_ExecRegularConv+0x126>
 8002484:	e768      	b.n	8002358 <RCM_ExecRegularConv+0x44>
 8002486:	bf00      	nop
 8002488:	20000ac8 	.word	0x20000ac8
 800248c:	20000ac4 	.word	0x20000ac4
 8002490:	20000310 	.word	0x20000310
 8002494:	20000b04 	.word	0x20000b04

08002498 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8002498:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 800249a:	4c12      	ldr	r4, [pc, #72]	; (80024e4 <RCM_ExecUserConv+0x4c>)
 800249c:	7823      	ldrb	r3, [r4, #0]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d000      	beq.n	80024a4 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 80024a2:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80024a4:	4d10      	ldr	r5, [pc, #64]	; (80024e8 <RCM_ExecUserConv+0x50>)
 80024a6:	7828      	ldrb	r0, [r5, #0]
 80024a8:	f7ff ff34 	bl	8002314 <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 80024ac:	782b      	ldrb	r3, [r5, #0]
 80024ae:	4a0f      	ldr	r2, [pc, #60]	; (80024ec <RCM_ExecUserConv+0x54>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80024b0:	490f      	ldr	r1, [pc, #60]	; (80024f0 <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 80024b2:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 80024b6:	eb02 0245 	add.w	r2, r2, r5, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80024ba:	8008      	strh	r0, [r1, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 80024bc:	7852      	ldrb	r2, [r2, #1]
 80024be:	b10a      	cbz	r2, 80024c4 <RCM_ExecUserConv+0x2c>
      RCM_UserConvState = RCM_USERCONV_EOC;
 80024c0:	2202      	movs	r2, #2
 80024c2:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80024c4:	4a0b      	ldr	r2, [pc, #44]	; (80024f4 <RCM_ExecUserConv+0x5c>)
 80024c6:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80024ca:	2d00      	cmp	r5, #0
 80024cc:	d0e9      	beq.n	80024a2 <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80024ce:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 80024d2:	2100      	movs	r1, #0
 80024d4:	7021      	strb	r1, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80024d6:	6852      	ldr	r2, [r2, #4]
 80024d8:	4601      	mov	r1, r0
 80024da:	4618      	mov	r0, r3
 80024dc:	462b      	mov	r3, r5
}
 80024de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80024e2:	4718      	bx	r3
 80024e4:	20000b00 	.word	0x20000b00
 80024e8:	20000ac5 	.word	0x20000ac5
 80024ec:	20000ac8 	.word	0x20000ac8
 80024f0:	20000b14 	.word	0x20000b14
 80024f4:	20000ae0 	.word	0x20000ae0

080024f8 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 80024f8:	4b21      	ldr	r3, [pc, #132]	; (8002580 <RCM_ExecNextConv+0x88>)
 80024fa:	4822      	ldr	r0, [pc, #136]	; (8002584 <RCM_ExecNextConv+0x8c>)
 80024fc:	781a      	ldrb	r2, [r3, #0]
 80024fe:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002502:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8002506:	b383      	cbz	r3, 800256a <RCM_ExecNextConv+0x72>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 8002508:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <RCM_ExecNextConv+0x90>)
{
 800250a:	b4f0      	push	{r4, r5, r6, r7}
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 800250c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002510:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002512:	2504      	movs	r5, #4
 8002514:	600d      	str	r5, [r1, #0]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8002516:	791d      	ldrb	r5, [r3, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8002518:	2d09      	cmp	r5, #9
 800251a:	ea4f 0442 	mov.w	r4, r2, lsl #1
 800251e:	d925      	bls.n	800256c <RCM_ExecNextConv+0x74>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8002520:	2603      	movs	r6, #3
 8002522:	f06f 071d 	mvn.w	r7, #29
 8002526:	2301      	movs	r3, #1
 8002528:	fb16 7605 	smlabb	r6, r6, r5, r7
 800252c:	40ab      	lsls	r3, r5
 800252e:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
 8002532:	ea43 6385 	orr.w	r3, r3, r5, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8002536:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 800253a:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800253c:	0d1b      	lsrs	r3, r3, #20
 800253e:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 8002542:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002546:	432b      	orrs	r3, r5
 8002548:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800254a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 800254c:	688b      	ldr	r3, [r1, #8]

    LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 800254e:	4422      	add	r2, r4
 8002550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002554:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8002558:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800255c:	f043 0304 	orr.w	r3, r3, #4
 8002560:	2201      	movs	r2, #1
 8002562:	608b      	str	r3, [r1, #8]
 8002564:	7042      	strb	r2, [r0, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 8002566:	bcf0      	pop	{r4, r5, r6, r7}
 8002568:	4770      	bx	lr
 800256a:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 800256c:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8002570:	06ab      	lsls	r3, r5, #26
 8002572:	2601      	movs	r6, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8002574:	ea43 5307 	orr.w	r3, r3, r7, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8002578:	fa06 f505 	lsl.w	r5, r6, r5
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 800257c:	432b      	orrs	r3, r5
 800257e:	e7dc      	b.n	800253a <RCM_ExecNextConv+0x42>
 8002580:	20000ac4 	.word	0x20000ac4
 8002584:	20000ac8 	.word	0x20000ac8
 8002588:	20000b04 	.word	0x20000b04

0800258c <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 800258c:	b470      	push	{r4, r5, r6}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 800258e:	4c0f      	ldr	r4, [pc, #60]	; (80025cc <RCM_ReadOngoingConv+0x40>)
 8002590:	4a0f      	ldr	r2, [pc, #60]	; (80025d0 <RCM_ReadOngoingConv+0x44>)
 8002592:	7823      	ldrb	r3, [r4, #0]
 8002594:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002598:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800259c:	0058      	lsls	r0, r3, #1
 800259e:	784d      	ldrb	r5, [r1, #1]
 80025a0:	2d01      	cmp	r5, #1
 80025a2:	d006      	beq.n	80025b2 <RCM_ReadOngoingConv+0x26>
    RCM_NoInj_array [RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 80025a4:	4403      	add	r3, r0
 80025a6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80025aa:	7953      	ldrb	r3, [r2, #5]
 80025ac:	7023      	strb	r3, [r4, #0]
}
 80025ae:	bc70      	pop	{r4, r5, r6}
 80025b0:	4770      	bx	lr
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 80025b2:	4d08      	ldr	r5, [pc, #32]	; (80025d4 <RCM_ReadOngoingConv+0x48>)
 80025b4:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 80025b8:	682d      	ldr	r5, [r5, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80025ba:	682e      	ldr	r6, [r5, #0]
 80025bc:	0776      	lsls	r6, r6, #29
 80025be:	d5f1      	bpl.n	80025a4 <RCM_ReadOngoingConv+0x18>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80025c0:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 80025c2:	804d      	strh	r5, [r1, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 80025c4:	2502      	movs	r5, #2
 80025c6:	704d      	strb	r5, [r1, #1]
 80025c8:	e7ec      	b.n	80025a4 <RCM_ReadOngoingConv+0x18>
 80025ca:	bf00      	nop
 80025cc:	20000ac4 	.word	0x20000ac4
 80025d0:	20000ac8 	.word	0x20000ac8
 80025d4:	20000b04 	.word	0x20000b04

080025d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <HAL_MspInit+0x3c>)
{
 80025da:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	661a      	str	r2, [r3, #96]	; 0x60
 80025e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80025e6:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e8:	f002 0201 	and.w	r2, r2, #1
 80025ec:	9200      	str	r2, [sp, #0]
 80025ee:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025f6:	659a      	str	r2, [r3, #88]	; 0x58
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002600:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002604:	f001 ffa0 	bl	8004548 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002608:	b003      	add	sp, #12
 800260a:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 800260e:	f002 bb0f 	b.w	8004c30 <HAL_PWREx_DisableUCPDDeadBattery>
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000

08002618 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002618:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800261a:	6802      	ldr	r2, [r0, #0]
{
 800261c:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261e:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8002620:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002628:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800262c:	930a      	str	r3, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 800262e:	d021      	beq.n	8002674 <HAL_ADC_MspInit+0x5c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002630:	4b33      	ldr	r3, [pc, #204]	; (8002700 <HAL_ADC_MspInit+0xe8>)
 8002632:	429a      	cmp	r2, r3
 8002634:	d001      	beq.n	800263a <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002636:	b00d      	add	sp, #52	; 0x34
 8002638:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 800263a:	4a32      	ldr	r2, [pc, #200]	; (8002704 <HAL_ADC_MspInit+0xec>)
 800263c:	6813      	ldr	r3, [r2, #0]
 800263e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002640:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002642:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002644:	d051      	beq.n	80026ea <HAL_ADC_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002646:	4b30      	ldr	r3, [pc, #192]	; (8002708 <HAL_ADC_MspInit+0xf0>)
 8002648:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8002658:	2240      	movs	r2, #64	; 0x40
 800265a:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 800265c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2400      	movs	r4, #0
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8002660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8002664:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002668:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 800266c:	f002 f8de 	bl	800482c <HAL_GPIO_Init>
}
 8002670:	b00d      	add	sp, #52	; 0x34
 8002672:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002674:	4a23      	ldr	r2, [pc, #140]	; (8002704 <HAL_ADC_MspInit+0xec>)
 8002676:	6813      	ldr	r3, [r2, #0]
 8002678:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800267a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800267c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800267e:	d029      	beq.n	80026d4 <HAL_ADC_MspInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002680:	4b21      	ldr	r3, [pc, #132]	; (8002708 <HAL_ADC_MspInit+0xf0>)
 8002682:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002684:	f042 0201 	orr.w	r2, r2, #1
 8002688:	64da      	str	r2, [r3, #76]	; 0x4c
 800268a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800268c:	f002 0201 	and.w	r2, r2, #1
 8002690:	9202      	str	r2, [sp, #8]
 8002692:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002694:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002696:	f042 0202 	orr.w	r2, r2, #2
 800269a:	64da      	str	r2, [r3, #76]	; 0x4c
 800269c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 80026a4:	2205      	movs	r2, #5
 80026a6:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026aa:	a906      	add	r1, sp, #24
 80026ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 80026b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b4:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b8:	f002 f8b8 	bl	800482c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 80026bc:	f244 0202 	movw	r2, #16386	; 0x4002
 80026c0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c2:	4812      	ldr	r0, [pc, #72]	; (800270c <HAL_ADC_MspInit+0xf4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c6:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 80026c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026cc:	f002 f8ae 	bl	800482c <HAL_GPIO_Init>
}
 80026d0:	b00d      	add	sp, #52	; 0x34
 80026d2:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <HAL_ADC_MspInit+0xf0>)
 80026d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80026de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	9b01      	ldr	r3, [sp, #4]
 80026e8:	e7ca      	b.n	8002680 <HAL_ADC_MspInit+0x68>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <HAL_ADC_MspInit+0xf0>)
 80026ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80026f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026fa:	9304      	str	r3, [sp, #16]
 80026fc:	9b04      	ldr	r3, [sp, #16]
 80026fe:	e7a2      	b.n	8002646 <HAL_ADC_MspInit+0x2e>
 8002700:	50000100 	.word	0x50000100
 8002704:	20000664 	.word	0x20000664
 8002708:	40021000 	.word	0x40021000
 800270c:	48000400 	.word	0x48000400

08002710 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002710:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 8002712:	6802      	ldr	r2, [r0, #0]
 8002714:	4929      	ldr	r1, [pc, #164]	; (80027bc <HAL_COMP_MspInit+0xac>)
{
 8002716:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 800271a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002720:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002724:	9308      	str	r3, [sp, #32]
  if(hcomp->Instance==COMP1)
 8002726:	d007      	beq.n	8002738 <HAL_COMP_MspInit+0x28>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 8002728:	4925      	ldr	r1, [pc, #148]	; (80027c0 <HAL_COMP_MspInit+0xb0>)
 800272a:	428a      	cmp	r2, r1
 800272c:	d01a      	beq.n	8002764 <HAL_COMP_MspInit+0x54>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 800272e:	4925      	ldr	r1, [pc, #148]	; (80027c4 <HAL_COMP_MspInit+0xb4>)
 8002730:	428a      	cmp	r2, r1
 8002732:	d02d      	beq.n	8002790 <HAL_COMP_MspInit+0x80>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 8002734:	b00a      	add	sp, #40	; 0x28
 8002736:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002738:	4a23      	ldr	r2, [pc, #140]	; (80027c8 <HAL_COMP_MspInit+0xb8>)
 800273a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800273c:	f041 0101 	orr.w	r1, r1, #1
 8002740:	64d1      	str	r1, [r2, #76]	; 0x4c
 8002742:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002746:	f002 0201 	and.w	r2, r2, #1
 800274a:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 800274c:	2303      	movs	r3, #3
 800274e:	2202      	movs	r2, #2
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 8002750:	a904      	add	r1, sp, #16
 8002752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8002756:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275a:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800275c:	f002 f866 	bl	800482c <HAL_GPIO_Init>
}
 8002760:	b00a      	add	sp, #40	; 0x28
 8002762:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002764:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <HAL_COMP_MspInit+0xb8>)
 8002766:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002768:	f041 0101 	orr.w	r1, r1, #1
 800276c:	64d1      	str	r1, [r2, #76]	; 0x4c
 800276e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002772:	f002 0201 	and.w	r2, r2, #1
 8002776:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8002778:	2303      	movs	r3, #3
 800277a:	2280      	movs	r2, #128	; 0x80
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 800277c:	a904      	add	r1, sp, #16
 800277e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8002782:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002786:	9c02      	ldr	r4, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8002788:	f002 f850 	bl	800482c <HAL_GPIO_Init>
}
 800278c:	b00a      	add	sp, #40	; 0x28
 800278e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002790:	4a0d      	ldr	r2, [pc, #52]	; (80027c8 <HAL_COMP_MspInit+0xb8>)
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8002792:	480e      	ldr	r0, [pc, #56]	; (80027cc <HAL_COMP_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002794:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002796:	f041 0102 	orr.w	r1, r1, #2
 800279a:	64d1      	str	r1, [r2, #76]	; 0x4c
 800279c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a0:	f002 0202 	and.w	r2, r2, #2
 80027a4:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 80027a6:	2303      	movs	r3, #3
 80027a8:	2201      	movs	r2, #1
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 80027aa:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 80027ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b0:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 80027b2:	f002 f83b 	bl	800482c <HAL_GPIO_Init>
}
 80027b6:	b00a      	add	sp, #40	; 0x28
 80027b8:	bd10      	pop	{r4, pc}
 80027ba:	bf00      	nop
 80027bc:	40010200 	.word	0x40010200
 80027c0:	40010204 	.word	0x40010204
 80027c4:	4001020c 	.word	0x4001020c
 80027c8:	40021000 	.word	0x40021000
 80027cc:	48000400 	.word	0x48000400

080027d0 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 80027d0:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <HAL_CORDIC_MspInit+0x2c>)
 80027d2:	6802      	ldr	r2, [r0, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d000      	beq.n	80027da <HAL_CORDIC_MspInit+0xa>
 80027d8:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80027da:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 80027de:	f042 0208 	orr.w	r2, r2, #8
 80027e2:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 80027e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 80027ea:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80027ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 80027f6:	b002      	add	sp, #8
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40020c00 	.word	0x40020c00

08002800 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC3)
 8002800:	4b0a      	ldr	r3, [pc, #40]	; (800282c <HAL_DAC_MspInit+0x2c>)
 8002802:	6802      	ldr	r2, [r0, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d000      	beq.n	800280a <HAL_DAC_MspInit+0xa>
 8002808:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 800280a:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800280e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
{
 8002812:	b082      	sub	sp, #8
    __HAL_RCC_DAC3_CLK_ENABLE();
 8002814:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002816:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800281a:	64da      	str	r2, [r3, #76]	; 0x4c
 800281c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8002826:	b002      	add	sp, #8
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	50001000 	.word	0x50001000

08002830 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002830:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 8002832:	6802      	ldr	r2, [r0, #0]
 8002834:	4929      	ldr	r1, [pc, #164]	; (80028dc <HAL_OPAMP_MspInit+0xac>)
{
 8002836:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 800283a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002840:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002844:	9308      	str	r3, [sp, #32]
  if(hopamp->Instance==OPAMP1)
 8002846:	d007      	beq.n	8002858 <HAL_OPAMP_MspInit+0x28>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 8002848:	4925      	ldr	r1, [pc, #148]	; (80028e0 <HAL_OPAMP_MspInit+0xb0>)
 800284a:	428a      	cmp	r2, r1
 800284c:	d01a      	beq.n	8002884 <HAL_OPAMP_MspInit+0x54>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 800284e:	4925      	ldr	r1, [pc, #148]	; (80028e4 <HAL_OPAMP_MspInit+0xb4>)
 8002850:	428a      	cmp	r2, r1
 8002852:	d02d      	beq.n	80028b0 <HAL_OPAMP_MspInit+0x80>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8002854:	b00a      	add	sp, #40	; 0x28
 8002856:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002858:	4a23      	ldr	r2, [pc, #140]	; (80028e8 <HAL_OPAMP_MspInit+0xb8>)
 800285a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800285c:	f041 0101 	orr.w	r1, r1, #1
 8002860:	64d1      	str	r1, [r2, #76]	; 0x4c
 8002862:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002866:	f002 0201 	and.w	r2, r2, #1
 800286a:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 800286c:	2303      	movs	r3, #3
 800286e:	220e      	movs	r2, #14
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002870:	a904      	add	r1, sp, #16
 8002872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8002876:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287a:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287c:	f001 ffd6 	bl	800482c <HAL_GPIO_Init>
}
 8002880:	b00a      	add	sp, #40	; 0x28
 8002882:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002884:	4a18      	ldr	r2, [pc, #96]	; (80028e8 <HAL_OPAMP_MspInit+0xb8>)
 8002886:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002888:	f041 0101 	orr.w	r1, r1, #1
 800288c:	64d1      	str	r1, [r2, #76]	; 0x4c
 800288e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	f002 0201 	and.w	r2, r2, #1
 8002896:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8002898:	2303      	movs	r3, #3
 800289a:	22e0      	movs	r2, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289c:	a904      	add	r1, sp, #16
 800289e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 80028a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a6:	9c02      	ldr	r4, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a8:	f001 ffc0 	bl	800482c <HAL_GPIO_Init>
}
 80028ac:	b00a      	add	sp, #40	; 0x28
 80028ae:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b0:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <HAL_OPAMP_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b2:	480e      	ldr	r0, [pc, #56]	; (80028ec <HAL_OPAMP_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b4:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80028b6:	f041 0102 	orr.w	r1, r1, #2
 80028ba:	64d1      	str	r1, [r2, #76]	; 0x4c
 80028bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c0:	f002 0202 	and.w	r2, r2, #2
 80028c4:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 80028c6:	2303      	movs	r3, #3
 80028c8:	2207      	movs	r2, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ca:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 80028cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d0:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d2:	f001 ffab 	bl	800482c <HAL_GPIO_Init>
}
 80028d6:	b00a      	add	sp, #40	; 0x28
 80028d8:	bd10      	pop	{r4, pc}
 80028da:	bf00      	nop
 80028dc:	40010300 	.word	0x40010300
 80028e0:	40010304 	.word	0x40010304
 80028e4:	40010308 	.word	0x40010308
 80028e8:	40021000 	.word	0x40021000
 80028ec:	48000400 	.word	0x48000400

080028f0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80028f0:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_TIM_Base_MspInit+0x28>)
 80028f2:	6802      	ldr	r2, [r0, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d000      	beq.n	80028fa <HAL_TIM_Base_MspInit+0xa>
 80028f8:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028fa:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
{
 80028fe:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002900:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002906:	661a      	str	r2, [r3, #96]	; 0x60
 8002908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800290a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002912:	b002      	add	sp, #8
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40012c00 	.word	0x40012c00

0800291c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800291c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 800291e:	6801      	ldr	r1, [r0, #0]
 8002920:	4a18      	ldr	r2, [pc, #96]	; (8002984 <HAL_TIM_Encoder_MspInit+0x68>)
{
 8002922:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 8002926:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002928:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800292c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002930:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 8002932:	d001      	beq.n	8002938 <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002934:	b009      	add	sp, #36	; 0x24
 8002936:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002938:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800293c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002940:	4811      	ldr	r0, [pc, #68]	; (8002988 <HAL_TIM_Encoder_MspInit+0x6c>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002942:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002944:	f042 0204 	orr.w	r2, r2, #4
 8002948:	659a      	str	r2, [r3, #88]	; 0x58
 800294a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800294c:	f002 0204 	and.w	r2, r2, #4
 8002950:	9200      	str	r2, [sp, #0]
 8002952:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002954:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002956:	f042 0202 	orr.w	r2, r2, #2
 800295a:	64da      	str	r2, [r3, #76]	; 0x4c
 800295c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002964:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002966:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002968:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 800296a:	2200      	movs	r2, #0
 800296c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8002970:	24c0      	movs	r4, #192	; 0xc0
 8002972:	2502      	movs	r5, #2
 8002974:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002978:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297c:	f001 ff56 	bl	800482c <HAL_GPIO_Init>
}
 8002980:	b009      	add	sp, #36	; 0x24
 8002982:	bd30      	pop	{r4, r5, pc}
 8002984:	40000800 	.word	0x40000800
 8002988:	48000400 	.word	0x48000400

0800298c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800298c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800298e:	6801      	ldr	r1, [r0, #0]
 8002990:	4a2a      	ldr	r2, [pc, #168]	; (8002a3c <HAL_TIM_MspPostInit+0xb0>)
{
 8002992:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002994:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8002996:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800299c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80029a0:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 80029a2:	d001      	beq.n	80029a8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80029a4:	b00b      	add	sp, #44	; 0x2c
 80029a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029ac:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80029b0:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80029b4:	4822      	ldr	r0, [pc, #136]	; (8002a40 <HAL_TIM_MspPostInit+0xb4>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b6:	f042 0204 	orr.w	r2, r2, #4
 80029ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80029bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029be:	f002 0204 	and.w	r2, r2, #4
 80029c2:	9201      	str	r2, [sp, #4]
 80029c4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029c8:	f042 0202 	orr.w	r2, r2, #2
 80029cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80029ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029d0:	f002 0202 	and.w	r2, r2, #2
 80029d4:	9202      	str	r2, [sp, #8]
 80029d6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	64da      	str	r2, [r3, #76]	; 0x4c
 80029e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80029e8:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ea:	9903      	ldr	r1, [sp, #12]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80029ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029f0:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80029f2:	2604      	movs	r6, #4
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80029f4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80029f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80029fa:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80029fc:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8002a00:	f001 ff14 	bl	800482c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8002a04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a08:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8002a0a:	a904      	add	r1, sp, #16
 8002a0c:	480d      	ldr	r0, [pc, #52]	; (8002a44 <HAL_TIM_MspPostInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002a0e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8002a10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002a14:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8002a18:	f44f 56b8 	mov.w	r6, #5888	; 0x1700
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8002a1c:	f001 ff06 	bl	800482c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8002a20:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002a22:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a24:	a904      	add	r1, sp, #16
 8002a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8002a2a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002a2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002a32:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a34:	f001 fefa 	bl	800482c <HAL_GPIO_Init>
}
 8002a38:	b00b      	add	sp, #44	; 0x2c
 8002a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a3c:	40012c00 	.word	0x40012c00
 8002a40:	48000800 	.word	0x48000800
 8002a44:	48000400 	.word	0x48000400

08002a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a48:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8002a4a:	6801      	ldr	r1, [r0, #0]
 8002a4c:	4a18      	ldr	r2, [pc, #96]	; (8002ab0 <HAL_UART_MspInit+0x68>)
{
 8002a4e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a50:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8002a52:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002a58:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002a5c:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 8002a5e:	d001      	beq.n	8002a64 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a60:	b009      	add	sp, #36	; 0x24
 8002a62:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a68:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6c:	4811      	ldr	r0, [pc, #68]	; (8002ab4 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a70:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002a74:	659a      	str	r2, [r3, #88]	; 0x58
 8002a76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a78:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002a7c:	9200      	str	r2, [sp, #0]
 8002a7e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a82:	f042 0202 	orr.w	r2, r2, #2
 8002a86:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a90:	2307      	movs	r3, #7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a92:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a94:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002a96:	2200      	movs	r2, #0
 8002a98:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a9a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002a9c:	2418      	movs	r4, #24
 8002a9e:	2502      	movs	r5, #2
 8002aa0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002aa4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa8:	f001 fec0 	bl	800482c <HAL_GPIO_Init>
}
 8002aac:	b009      	add	sp, #36	; 0x24
 8002aae:	bd30      	pop	{r4, r5, pc}
 8002ab0:	40004400 	.word	0x40004400
 8002ab4:	48000400 	.word	0x48000400

08002ab8 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8002ab8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002abc:	2240      	movs	r2, #64	; 0x40
 8002abe:	601a      	str	r2, [r3, #0]

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  // Highfrequency task
  TSK_HighFrequencyTask();
 8002ac0:	f7fe be0a 	b.w	80016d8 <TSK_HighFrequencyTask>

08002ac4 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002ac4:	4b03      	ldr	r3, [pc, #12]	; (8002ad4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8002ac6:	4804      	ldr	r0, [pc, #16]	; (8002ad8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002ac8:	f06f 0201 	mvn.w	r2, #1
 8002acc:	611a      	str	r2, [r3, #16]
 8002ace:	f005 b885 	b.w	8007bdc <R3_2_TIMx_UP_IRQHandler>
 8002ad2:	bf00      	nop
 8002ad4:	40012c00 	.word	0x40012c00
 8002ad8:	20000310 	.word	0x20000310

08002adc <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8002adc:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002ade:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8002ae0:	691a      	ldr	r2, [r3, #16]
 8002ae2:	0611      	lsls	r1, r2, #24
 8002ae4:	d505      	bpl.n	8002af2 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002ae6:	f06f 0280 	mvn.w	r2, #128	; 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 8002aea:	480a      	ldr	r0, [pc, #40]	; (8002b14 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002aec:	611a      	str	r2, [r3, #16]
 8002aee:	f005 f8d7 	bl	8007ca0 <R3_2_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	05d2      	lsls	r2, r2, #23
 8002af8:	d505      	bpl.n	8002b06 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8002afa:	f46f 7280 	mvn.w	r2, #256	; 0x100
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 8002afe:	4805      	ldr	r0, [pc, #20]	; (8002b14 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002b00:	611a      	str	r2, [r3, #16]
 8002b02:	f005 f8ad 	bl	8007c60 <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8002b06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8002b0a:	f7fe bdb9 	b.w	8001680 <MC_Scheduler>
 8002b0e:	bf00      	nop
 8002b10:	40012c00 	.word	0x40012c00
 8002b14:	20000310 	.word	0x20000310

08002b18 <TIM4_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 8002b18:	4806      	ldr	r0, [pc, #24]	; (8002b34 <TIM4_IRQHandler+0x1c>)
 8002b1a:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	07d1      	lsls	r1, r2, #31
 8002b20:	d502      	bpl.n	8002b28 <TIM4_IRQHandler+0x10>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	07d2      	lsls	r2, r2, #31
 8002b26:	d400      	bmi.n	8002b2a <TIM4_IRQHandler+0x12>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8002b28:	4770      	bx	lr
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002b2a:	f06f 0201 	mvn.w	r2, #1
 8002b2e:	611a      	str	r2, [r3, #16]
    ENC_IRQHandler(&ENCODER_M1);
 8002b30:	f003 bffa 	b.w	8006b28 <ENC_IRQHandler>
 8002b34:	200000b4 	.word	0x200000b4

08002b38 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8002b38:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002b3a:	4c18      	ldr	r4, [pc, #96]	; (8002b9c <USART2_IRQHandler+0x64>)
 8002b3c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002b40:	69da      	ldr	r2, [r3, #28]
 8002b42:	0691      	lsls	r1, r2, #26
 8002b44:	d50b      	bpl.n	8002b5e <USART2_IRQHandler+0x26>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002b46:	6a59      	ldr	r1, [r3, #36]	; 0x24
  {
    uint16_t retVal;
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8002b48:	4620      	mov	r0, r4
 8002b4a:	b2c9      	uxtb	r1, r1
 8002b4c:	f005 ff68 	bl	8008a20 <UFCP_RX_IRQ_Handler>
 8002b50:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d01a      	beq.n	8002b8c <USART2_IRQHandler+0x54>
    {
      UI_SerialCommunicationTimeOutStart();
    }
    if (retVal == 2)
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d01d      	beq.n	8002b96 <USART2_IRQHandler+0x5e>
 8002b5a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002b5e:	69da      	ldr	r2, [r3, #28]
 8002b60:	0612      	lsls	r2, r2, #24
 8002b62:	d504      	bpl.n	8002b6e <USART2_IRQHandler+0x36>
  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 8002b64:	480d      	ldr	r0, [pc, #52]	; (8002b9c <USART2_IRQHandler+0x64>)
 8002b66:	f005 febb 	bl	80088e0 <UFCP_TX_IRQ_Handler>
 8002b6a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	071b      	lsls	r3, r3, #28
 8002b72:	d50a      	bpl.n	8002b8a <USART2_IRQHandler+0x52>
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8002b74:	4809      	ldr	r0, [pc, #36]	; (8002b9c <USART2_IRQHandler+0x64>)
 8002b76:	f005 ffb9 	bl	8008aec <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002b7a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002b7e:	2208      	movs	r2, #8
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8002b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b84:	621a      	str	r2, [r3, #32]
    UI_SerialCommunicationTimeOutStop();
 8002b86:	f000 b8d9 	b.w	8002d3c <UI_SerialCommunicationTimeOutStop>
}
 8002b8a:	bd10      	pop	{r4, pc}
      UI_SerialCommunicationTimeOutStart();
 8002b8c:	f000 f8dc 	bl	8002d48 <UI_SerialCommunicationTimeOutStart>
    if (retVal == 2)
 8002b90:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002b94:	e7e3      	b.n	8002b5e <USART2_IRQHandler+0x26>
      UI_SerialCommunicationTimeOutStop();
 8002b96:	f000 f8d1 	bl	8002d3c <UI_SerialCommunicationTimeOutStop>
 8002b9a:	e7de      	b.n	8002b5a <USART2_IRQHandler+0x22>
 8002b9c:	200004d0 	.word	0x200004d0

08002ba0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002ba0:	b570      	push	{r4, r5, r6, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8002ba2:	f7fe fe85 	bl	80018b0 <TSK_HardwareFaultTask>
 8002ba6:	4d18      	ldr	r5, [pc, #96]	; (8002c08 <HardFault_Handler+0x68>)
 8002ba8:	2608      	movs	r6, #8
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 8002baa:	462c      	mov	r4, r5
 8002bac:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	0711      	lsls	r1, r2, #28
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	d508      	bpl.n	8002bca <HardFault_Handler+0x2a>
 8002bb8:	f005 ff98 	bl	8008aec <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002bbc:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002bc0:	621e      	str	r6, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 8002bc2:	f000 f8bb 	bl	8002d3c <UI_SerialCommunicationTimeOutStop>
 8002bc6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002bca:	69da      	ldr	r2, [r3, #28]
 8002bcc:	0612      	lsls	r2, r2, #24
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 8002bce:	4620      	mov	r0, r4
 8002bd0:	d513      	bpl.n	8002bfa <HardFault_Handler+0x5a>
 8002bd2:	f005 fe85 	bl	80088e0 <UFCP_TX_IRQ_Handler>
 8002bd6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002bda:	69da      	ldr	r2, [r3, #28]
 8002bdc:	0691      	lsls	r1, r2, #26
 8002bde:	d5e7      	bpl.n	8002bb0 <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002be0:	6a59      	ldr	r1, [r3, #36]	; 0x24
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8002be2:	4620      	mov	r0, r4
 8002be4:	b2c9      	uxtb	r1, r1
 8002be6:	f005 ff1b 	bl	8008a20 <UFCP_RX_IRQ_Handler>
 8002bea:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d008      	beq.n	8002c02 <HardFault_Handler+0x62>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d1db      	bne.n	8002bac <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 8002bf4:	f000 f8a2 	bl	8002d3c <UI_SerialCommunicationTimeOutStop>
 8002bf8:	e7d8      	b.n	8002bac <HardFault_Handler+0xc>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002bfa:	69da      	ldr	r2, [r3, #28]
 8002bfc:	0692      	lsls	r2, r2, #26
 8002bfe:	d5d7      	bpl.n	8002bb0 <HardFault_Handler+0x10>
 8002c00:	e7ee      	b.n	8002be0 <HardFault_Handler+0x40>
          UI_SerialCommunicationTimeOutStart();
 8002c02:	f000 f8a1 	bl	8002d48 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8002c06:	e7d1      	b.n	8002bac <HardFault_Handler+0xc>
 8002c08:	200004d0 	.word	0x200004d0

08002c0c <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8002c0c:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002c0e:	4c0a      	ldr	r4, [pc, #40]	; (8002c38 <SysTick_Handler+0x2c>)
 8002c10:	7823      	ldrb	r3, [r4, #0]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d009      	beq.n	8002c2a <SysTick_Handler+0x1e>
 8002c16:	3301      	adds	r3, #1
 8002c18:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8002c1a:	7023      	strb	r3, [r4, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 8002c1c:	f7fe fe38 	bl	8001890 <MC_RunMotorControlTasks>
    TC_IncTick(&pPosCtrlM1);

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8002c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TC_IncTick(&pPosCtrlM1);
 8002c24:	4805      	ldr	r0, [pc, #20]	; (8002c3c <SysTick_Handler+0x30>)
 8002c26:	f005 be55 	b.w	80088d4 <TC_IncTick>
    HAL_IncTick();
 8002c2a:	f000 fcd5 	bl	80035d8 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002c2e:	f001 fd01 	bl	8004634 <HAL_SYSTICK_IRQHandler>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e7f1      	b.n	8002c1a <SysTick_Handler+0xe>
 8002c36:	bf00      	nop
 8002c38:	20000610 	.word	0x20000610
 8002c3c:	20000460 	.word	0x20000460

08002c40 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8002c40:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <EXTI15_10_IRQHandler+0x14>)
 8002c42:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC10.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10) )
 8002c44:	0552      	lsls	r2, r2, #21
 8002c46:	d400      	bmi.n	8002c4a <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_10);
    UI_HandleStartStopButton_cb ();
  }

}
 8002c48:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002c4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c4e:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8002c50:	f000 b880 	b.w	8002d54 <UI_HandleStartStopButton_cb>
 8002c54:	40010400 	.word	0x40010400

08002c58 <EXTI9_5_IRQHandler>:
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <EXTI9_5_IRQHandler+0x18>)
 8002c5a:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles M1 Encoder Index IRQ on PIN PB8.
  */
void EXTI9_5_IRQHandler (void)
{
	/* USER CODE BEGIN ENCODER Z INDEX M1 */
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_8))
 8002c5c:	05d2      	lsls	r2, r2, #23
 8002c5e:	d400      	bmi.n	8002c62 <EXTI9_5_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_8);
    TC_EncoderReset(&pPosCtrlM1);
  }

}
 8002c60:	4770      	bx	lr
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002c62:	f44f 7280 	mov.w	r2, #256	; 0x100
    TC_EncoderReset(&pPosCtrlM1);
 8002c66:	4803      	ldr	r0, [pc, #12]	; (8002c74 <EXTI9_5_IRQHandler+0x1c>)
 8002c68:	615a      	str	r2, [r3, #20]
 8002c6a:	f005 bdfb 	b.w	8008864 <TC_EncoderReset>
 8002c6e:	bf00      	nop
 8002c70:	40010400 	.word	0x40010400
 8002c74:	20000460 	.word	0x20000460

08002c78 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8002c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;
 8002c7c:	4d17      	ldr	r5, [pc, #92]	; (8002cdc <UI_TaskInit+0x64>)
    pMCP = &MCP_UI_Params;
 8002c7e:	f8df c070 	ldr.w	ip, [pc, #112]	; 8002cf0 <UI_TaskInit+0x78>

    UFCP_Init( & pUSART );
 8002c82:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8002cf4 <UI_TaskInit+0x7c>
{
 8002c86:	468e      	mov	lr, r1
 8002c88:	4681      	mov	r9, r0
 8002c8a:	4616      	mov	r6, r2
 8002c8c:	461f      	mov	r7, r3
    pMCP->_Super = UI_Params;
 8002c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c90:	4664      	mov	r4, ip
 8002c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c94:	e895 0003 	ldmia.w	r5, {r0, r1}
{
 8002c98:	b082      	sub	sp, #8
    pMCP = &MCP_UI_Params;
 8002c9a:	4d11      	ldr	r5, [pc, #68]	; (8002ce0 <UI_TaskInit+0x68>)
{
 8002c9c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    pMCP = &MCP_UI_Params;
 8002ca0:	f8c5 c000 	str.w	ip, [r5]
    pMCP->_Super = UI_Params;
 8002ca4:	e884 0003 	stmia.w	r4, {r0, r1}
    UFCP_Init( & pUSART );
 8002ca8:	4640      	mov	r0, r8
{
 8002caa:	4674      	mov	r4, lr
    UFCP_Init( & pUSART );
 8002cac:	f005 fe16 	bl	80088dc <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8002cb0:	f8cd a004 	str.w	sl, [sp, #4]
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <UI_TaskInit+0x6c>)
 8002cb6:	6828      	ldr	r0, [r5, #0]
 8002cb8:	4a0b      	ldr	r2, [pc, #44]	; (8002ce8 <UI_TaskInit+0x70>)
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	4641      	mov	r1, r8
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <UI_TaskInit+0x74>)
 8002cc0:	f7ff fa06 	bl	80020d0 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002cc4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8002cc8:	6828      	ldr	r0, [r5, #0]
 8002cca:	463b      	mov	r3, r7
 8002ccc:	4632      	mov	r2, r6
 8002cce:	4621      	mov	r1, r4

}
 8002cd0:	b002      	add	sp, #8
 8002cd2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002cd6:	f000 b849 	b.w	8002d6c <UI_Init>
 8002cda:	bf00      	nop
 8002cdc:	2000063c 	.word	0x2000063c
 8002ce0:	2000066c 	.word	0x2000066c
 8002ce4:	08008b09 	.word	0x08008b09
 8002ce8:	08008969 	.word	0x08008969
 8002cec:	08008941 	.word	0x08008941
 8002cf0:	20000b18 	.word	0x20000b18
 8002cf4:	200004d0 	.word	0x200004d0

08002cf8 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8002cf8:	4a0d      	ldr	r2, [pc, #52]	; (8002d30 <UI_Scheduler+0x38>)
 8002cfa:	8813      	ldrh	r3, [r2, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	b11b      	cbz	r3, 8002d08 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8002d00:	8813      	ldrh	r3, [r2, #0]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8002d08:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <UI_Scheduler+0x3c>)
 8002d0a:	8813      	ldrh	r3, [r2, #0]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d903      	bls.n	8002d1a <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 8002d12:	8813      	ldrh	r3, [r2, #0]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8002d1a:	4a07      	ldr	r2, [pc, #28]	; (8002d38 <UI_Scheduler+0x40>)
 8002d1c:	8813      	ldrh	r3, [r2, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d903      	bls.n	8002d2c <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8002d24:	8813      	ldrh	r3, [r2, #0]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	8013      	strh	r3, [r2, #0]
  }
}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	2000066a 	.word	0x2000066a
 8002d34:	20000668 	.word	0x20000668
 8002d38:	20000612 	.word	0x20000612

08002d3c <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002d3c:	4b01      	ldr	r3, [pc, #4]	; (8002d44 <UI_SerialCommunicationTimeOutStop+0x8>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	801a      	strh	r2, [r3, #0]
}
 8002d42:	4770      	bx	lr
 8002d44:	20000668 	.word	0x20000668

08002d48 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8002d48:	4b01      	ldr	r3, [pc, #4]	; (8002d50 <UI_SerialCommunicationTimeOutStart+0x8>)
 8002d4a:	224f      	movs	r2, #79	; 0x4f
 8002d4c:	801a      	strh	r2, [r3, #0]
}
 8002d4e:	4770      	bx	lr
 8002d50:	20000668 	.word	0x20000668

08002d54 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002d54:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 8002d56:	f7fd ffb9 	bl	8000ccc <MC_GetSTMStateMotor1>
 8002d5a:	b918      	cbnz	r0, 8002d64 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002d5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 8002d60:	f7fd bfa8 	b.w	8000cb4 <MC_StartMotor1>
}
 8002d64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 8002d68:	f7fd bfaa 	b.w	8000cc0 <MC_StopMotor1>

08002d6c <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8002d6c:	b430      	push	{r4, r5}
 8002d6e:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8002d70:	6104      	str	r4, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 8002d72:	2500      	movs	r5, #0
 8002d74:	7505      	strb	r5, [r0, #20]
  pHandle->pMCT = pMCT;
 8002d76:	e9c0 2302 	strd	r2, r3, [r0, #8]
}
 8002d7a:	bc30      	pop	{r4, r5}
  pHandle->bDriveNum = bMCNum;
 8002d7c:	7101      	strb	r1, [r0, #4]
}
 8002d7e:	4770      	bx	lr

08002d80 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8002d80:	7903      	ldrb	r3, [r0, #4]
 8002d82:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8002d84:	bf86      	itte	hi
 8002d86:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 8002d88:	2001      	movhi	r0, #1
    retVal = false;
 8002d8a:	2000      	movls	r0, #0
  }
  return retVal;
}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop

08002d90 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8002d90:	7d00      	ldrb	r0, [r0, #20]
 8002d92:	4770      	bx	lr

08002d94 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002d94:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002d96:	e9d0 5402 	ldrd	r5, r4, [r0, #8]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002d9a:	7d03      	ldrb	r3, [r0, #20]
{
 8002d9c:	b083      	sub	sp, #12
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002d9e:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002da2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
{
 8002da6:	4614      	mov	r4, r2
 8002da8:	2988      	cmp	r1, #136	; 0x88
 8002daa:	d846      	bhi.n	8002e3a <UI_SetReg+0xa6>
 8002dac:	e8df f001 	tbb	[pc, r1]
 8002db0:	5345454f 	.word	0x5345454f
 8002db4:	66605a45 	.word	0x66605a45
 8002db8:	847e786c 	.word	0x847e786c
 8002dbc:	a29c968a 	.word	0xa29c968a
 8002dc0:	45454545 	.word	0x45454545
 8002dc4:	45454545 	.word	0x45454545
 8002dc8:	45454545 	.word	0x45454545
 8002dcc:	45454545 	.word	0x45454545
 8002dd0:	45454545 	.word	0x45454545
 8002dd4:	45454545 	.word	0x45454545
 8002dd8:	45454545 	.word	0x45454545
 8002ddc:	45454545 	.word	0x45454545
 8002de0:	45454545 	.word	0x45454545
 8002de4:	45454545 	.word	0x45454545
 8002de8:	45454545 	.word	0x45454545
 8002dec:	45454545 	.word	0x45454545
 8002df0:	4545a845 	.word	0x4545a845
 8002df4:	45454545 	.word	0x45454545
 8002df8:	45454545 	.word	0x45454545
 8002dfc:	45454545 	.word	0x45454545
 8002e00:	45454545 	.word	0x45454545
 8002e04:	45454545 	.word	0x45454545
 8002e08:	ae454545 	.word	0xae454545
 8002e0c:	45454545 	.word	0x45454545
 8002e10:	45454545 	.word	0x45454545
 8002e14:	45454545 	.word	0x45454545
 8002e18:	45454545 	.word	0x45454545
 8002e1c:	45454545 	.word	0x45454545
 8002e20:	45454545 	.word	0x45454545
 8002e24:	45454545 	.word	0x45454545
 8002e28:	45454545 	.word	0x45454545
 8002e2c:	45454545 	.word	0x45454545
 8002e30:	45454545 	.word	0x45454545
 8002e34:	c1ba4545 	.word	0xc1ba4545
 8002e38:	48          	.byte	0x48
 8002e39:	00          	.byte	0x00
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002e3a:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8002e3c:	b003      	add	sp, #12
 8002e3e:	bd30      	pop	{r4, r5, pc}
      PID_SetKD(pMCT->pPosCtrl->PIDPosRegulator,(int16_t)wValue);
 8002e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e42:	b221      	sxth	r1, r4
 8002e44:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002e46:	f003 ff45 	bl	8006cd4 <PID_SetKD>
  bool retVal = true;
 8002e4a:	2001      	movs	r0, #1
    break;
 8002e4c:	e7f6      	b.n	8002e3c <UI_SetReg+0xa8>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8002e4e:	b2e1      	uxtb	r1, r4
 8002e50:	f7ff ff96 	bl	8002d80 <UI_SelectMC>
    break;
 8002e54:	e7f2      	b.n	8002e3c <UI_SetReg+0xa8>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8002e56:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002e5a:	d071      	beq.n	8002f40 <UI_SetReg+0x1ac>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002e5c:	2c01      	cmp	r4, #1
 8002e5e:	d079      	beq.n	8002f54 <UI_SetReg+0x1c0>
  bool retVal = true;
 8002e60:	2001      	movs	r0, #1
 8002e62:	e7eb      	b.n	8002e3c <UI_SetReg+0xa8>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	b221      	sxth	r1, r4
 8002e68:	f003 ff22 	bl	8006cb0 <PID_SetKP>
  bool retVal = true;
 8002e6c:	2001      	movs	r0, #1
    break;
 8002e6e:	e7e5      	b.n	8002e3c <UI_SetReg+0xa8>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	b221      	sxth	r1, r4
 8002e74:	f003 ff1e 	bl	8006cb4 <PID_SetKI>
  bool retVal = true;
 8002e78:	2001      	movs	r0, #1
    break;
 8002e7a:	e7df      	b.n	8002e3c <UI_SetReg+0xa8>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	b221      	sxth	r1, r4
 8002e80:	f003 ff28 	bl	8006cd4 <PID_SetKD>
  bool retVal = true;
 8002e84:	2001      	movs	r0, #1
    break;
 8002e86:	e7d9      	b.n	8002e3c <UI_SetReg+0xa8>
      currComp = MCI_GetIqdref(pMCI);
 8002e88:	4628      	mov	r0, r5
 8002e8a:	f7fe f829 	bl	8000ee0 <MCI_GetIqdref>
 8002e8e:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8002e90:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002e94:	4628      	mov	r0, r5
 8002e96:	9901      	ldr	r1, [sp, #4]
 8002e98:	f7fd ff44 	bl	8000d24 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002e9c:	2001      	movs	r0, #1
    break;
 8002e9e:	e7cd      	b.n	8002e3c <UI_SetReg+0xa8>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8002ea0:	6858      	ldr	r0, [r3, #4]
 8002ea2:	b221      	sxth	r1, r4
 8002ea4:	f003 ff04 	bl	8006cb0 <PID_SetKP>
  bool retVal = true;
 8002ea8:	2001      	movs	r0, #1
    break;
 8002eaa:	e7c7      	b.n	8002e3c <UI_SetReg+0xa8>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8002eac:	6858      	ldr	r0, [r3, #4]
 8002eae:	b221      	sxth	r1, r4
 8002eb0:	f003 ff00 	bl	8006cb4 <PID_SetKI>
  bool retVal = true;
 8002eb4:	2001      	movs	r0, #1
    break;
 8002eb6:	e7c1      	b.n	8002e3c <UI_SetReg+0xa8>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8002eb8:	6858      	ldr	r0, [r3, #4]
 8002eba:	b221      	sxth	r1, r4
 8002ebc:	f003 ff0a 	bl	8006cd4 <PID_SetKD>
  bool retVal = true;
 8002ec0:	2001      	movs	r0, #1
    break;
 8002ec2:	e7bb      	b.n	8002e3c <UI_SetReg+0xa8>
      currComp = MCI_GetIqdref(pMCI);
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	f7fe f80b 	bl	8000ee0 <MCI_GetIqdref>
 8002eca:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8002ecc:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002ed0:	4628      	mov	r0, r5
 8002ed2:	9901      	ldr	r1, [sp, #4]
 8002ed4:	f7fd ff26 	bl	8000d24 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002ed8:	2001      	movs	r0, #1
    break;
 8002eda:	e7af      	b.n	8002e3c <UI_SetReg+0xa8>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8002edc:	6898      	ldr	r0, [r3, #8]
 8002ede:	b221      	sxth	r1, r4
 8002ee0:	f003 fee6 	bl	8006cb0 <PID_SetKP>
  bool retVal = true;
 8002ee4:	2001      	movs	r0, #1
    break;
 8002ee6:	e7a9      	b.n	8002e3c <UI_SetReg+0xa8>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8002ee8:	6898      	ldr	r0, [r3, #8]
 8002eea:	b221      	sxth	r1, r4
 8002eec:	f003 fee2 	bl	8006cb4 <PID_SetKI>
  bool retVal = true;
 8002ef0:	2001      	movs	r0, #1
    break;
 8002ef2:	e7a3      	b.n	8002e3c <UI_SetReg+0xa8>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8002ef4:	6898      	ldr	r0, [r3, #8]
 8002ef6:	b221      	sxth	r1, r4
 8002ef8:	f003 feec 	bl	8006cd4 <PID_SetKD>
  bool retVal = true;
 8002efc:	2001      	movs	r0, #1
    break;
 8002efe:	e79d      	b.n	8002e3c <UI_SetReg+0xa8>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8002f00:	4628      	mov	r0, r5
 8002f02:	b221      	sxth	r1, r4
 8002f04:	f7fe f81a 	bl	8000f3c <MCI_SetIdref>
  bool retVal = true;
 8002f08:	2001      	movs	r0, #1
    break;
 8002f0a:	e797      	b.n	8002e3c <UI_SetReg+0xa8>
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8002f0c:	4916      	ldr	r1, [pc, #88]	; (8002f68 <UI_SetReg+0x1d4>)
 8002f0e:	fb81 3104 	smull	r3, r1, r1, r4
 8002f12:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8002f16:	4628      	mov	r0, r5
 8002f18:	b209      	sxth	r1, r1
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f7fd feec 	bl	8000cf8 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002f20:	2001      	movs	r0, #1
    break;
 8002f22:	e78b      	b.n	8002e3c <UI_SetReg+0xa8>
      PID_SetKP(pMCT->pPosCtrl->PIDPosRegulator,(int16_t)wValue);
 8002f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f26:	b221      	sxth	r1, r4
 8002f28:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002f2a:	f003 fec1 	bl	8006cb0 <PID_SetKP>
  bool retVal = true;
 8002f2e:	2001      	movs	r0, #1
    break;
 8002f30:	e784      	b.n	8002e3c <UI_SetReg+0xa8>
      PID_SetKI(pMCT->pPosCtrl->PIDPosRegulator,(int16_t)wValue);
 8002f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f34:	b221      	sxth	r1, r4
 8002f36:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002f38:	f003 febc 	bl	8006cb4 <PID_SetKI>
  bool retVal = true;
 8002f3c:	2001      	movs	r0, #1
    break;
 8002f3e:	e77d      	b.n	8002e3c <UI_SetReg+0xa8>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002f40:	4628      	mov	r0, r5
 8002f42:	f7fd fff7 	bl	8000f34 <MCI_GetTeref>
 8002f46:	4622      	mov	r2, r4
 8002f48:	4601      	mov	r1, r0
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	f7fd fee0 	bl	8000d10 <MCI_ExecTorqueRamp>
  bool retVal = true;
 8002f50:	2001      	movs	r0, #1
 8002f52:	e773      	b.n	8002e3c <UI_SetReg+0xa8>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8002f54:	4628      	mov	r0, r5
 8002f56:	f7fd ff95 	bl	8000e84 <MCI_GetMecSpeedRefUnit>
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	4601      	mov	r1, r0
 8002f5e:	4628      	mov	r0, r5
 8002f60:	f7fd feca 	bl	8000cf8 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002f64:	4620      	mov	r0, r4
 8002f66:	e769      	b.n	8002e3c <UI_SetReg+0xa8>
 8002f68:	2aaaaaab 	.word	0x2aaaaaab

08002f6c <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8002f6c:	b570      	push	{r4, r5, r6, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002f6e:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002f72:	7d03      	ldrb	r3, [r0, #20]
{
 8002f74:	b08e      	sub	sp, #56	; 0x38
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002f76:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002f7a:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 8002f7e:	2a00      	cmp	r2, #0
 8002f80:	f000 8090 	beq.w	80030a4 <UI_GetReg+0x138>
  {
    *success = true;
 8002f84:	2401      	movs	r4, #1
 8002f86:	7014      	strb	r4, [r2, #0]
  }

  switch (bRegID)
 8002f88:	2988      	cmp	r1, #136	; 0x88
 8002f8a:	f200 8222 	bhi.w	80033d2 <UI_GetReg+0x466>
 8002f8e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002f92:	0188      	.short	0x0188
 8002f94:	018b018f 	.word	0x018b018f
 8002f98:	019d01a4 	.word	0x019d01a4
 8002f9c:	01950199 	.word	0x01950199
 8002fa0:	011f01cc 	.word	0x011f01cc
 8002fa4:	01bf01c3 	.word	0x01bf01c3
 8002fa8:	011701bb 	.word	0x011701bb
 8002fac:	01fb01ff 	.word	0x01fb01ff
 8002fb0:	022001f7 	.word	0x022001f7
 8002fb4:	02200220 	.word	0x02200220
 8002fb8:	02200220 	.word	0x02200220
 8002fbc:	02200220 	.word	0x02200220
 8002fc0:	02200220 	.word	0x02200220
 8002fc4:	01ef01f3 	.word	0x01ef01f3
 8002fc8:	022001eb 	.word	0x022001eb
 8002fcc:	01e40220 	.word	0x01e40220
 8002fd0:	0216021b 	.word	0x0216021b
 8002fd4:	020f0220 	.word	0x020f0220
 8002fd8:	01b6020a 	.word	0x01b6020a
 8002fdc:	0129012e 	.word	0x0129012e
 8002fe0:	0216021b 	.word	0x0216021b
 8002fe4:	0117011f 	.word	0x0117011f
 8002fe8:	01d501da 	.word	0x01d501da
 8002fec:	018301d0 	.word	0x018301d0
 8002ff0:	015b016f 	.word	0x015b016f
 8002ff4:	02200220 	.word	0x02200220
 8002ff8:	02200220 	.word	0x02200220
 8002ffc:	02200220 	.word	0x02200220
 8003000:	02200220 	.word	0x02200220
 8003004:	02200220 	.word	0x02200220
 8003008:	02200220 	.word	0x02200220
 800300c:	02200220 	.word	0x02200220
 8003010:	014d0154 	.word	0x014d0154
 8003014:	02200117 	.word	0x02200117
 8003018:	02200220 	.word	0x02200220
 800301c:	02200220 	.word	0x02200220
 8003020:	02200220 	.word	0x02200220
 8003024:	02200220 	.word	0x02200220
 8003028:	02200220 	.word	0x02200220
 800302c:	02200220 	.word	0x02200220
 8003030:	02200220 	.word	0x02200220
 8003034:	02200220 	.word	0x02200220
 8003038:	02200220 	.word	0x02200220
 800303c:	02200220 	.word	0x02200220
 8003040:	02200220 	.word	0x02200220
 8003044:	02200220 	.word	0x02200220
 8003048:	0220013b 	.word	0x0220013b
 800304c:	02200220 	.word	0x02200220
 8003050:	02200220 	.word	0x02200220
 8003054:	02200220 	.word	0x02200220
 8003058:	02200220 	.word	0x02200220
 800305c:	02200220 	.word	0x02200220
 8003060:	02200220 	.word	0x02200220
 8003064:	02200220 	.word	0x02200220
 8003068:	02200220 	.word	0x02200220
 800306c:	01370220 	.word	0x01370220
 8003070:	01270133 	.word	0x01270133
 8003074:	01240220 	.word	0x01240220
 8003078:	02200124 	.word	0x02200124
 800307c:	02200220 	.word	0x02200220
 8003080:	02200220 	.word	0x02200220
 8003084:	02200220 	.word	0x02200220
 8003088:	02200220 	.word	0x02200220
 800308c:	02200220 	.word	0x02200220
 8003090:	02200220 	.word	0x02200220
 8003094:	0220011d 	.word	0x0220011d
 8003098:	01af0203 	.word	0x01af0203
 800309c:	014801a8 	.word	0x014801a8
 80030a0:	01c701df 	.word	0x01c701df
 80030a4:	2988      	cmp	r1, #136	; 0x88
 80030a6:	f200 8091 	bhi.w	80031cc <UI_GetReg+0x260>
 80030aa:	e8df f011 	tbh	[pc, r1, lsl #1]
 80030ae:	00fa      	.short	0x00fa
 80030b0:	00fd0101 	.word	0x00fd0101
 80030b4:	010f0116 	.word	0x010f0116
 80030b8:	0107010b 	.word	0x0107010b
 80030bc:	0091013e 	.word	0x0091013e
 80030c0:	01310135 	.word	0x01310135
 80030c4:	0089012d 	.word	0x0089012d
 80030c8:	016d0171 	.word	0x016d0171
 80030cc:	008f0169 	.word	0x008f0169
 80030d0:	008f008f 	.word	0x008f008f
 80030d4:	008f008f 	.word	0x008f008f
 80030d8:	008f008f 	.word	0x008f008f
 80030dc:	008f008f 	.word	0x008f008f
 80030e0:	01610165 	.word	0x01610165
 80030e4:	008f015d 	.word	0x008f015d
 80030e8:	0156008f 	.word	0x0156008f
 80030ec:	0188018d 	.word	0x0188018d
 80030f0:	0181008f 	.word	0x0181008f
 80030f4:	0128017c 	.word	0x0128017c
 80030f8:	009b00a0 	.word	0x009b00a0
 80030fc:	0188018d 	.word	0x0188018d
 8003100:	00890091 	.word	0x00890091
 8003104:	0147014c 	.word	0x0147014c
 8003108:	00f50142 	.word	0x00f50142
 800310c:	00cd00e1 	.word	0x00cd00e1
 8003110:	008f008f 	.word	0x008f008f
 8003114:	008f008f 	.word	0x008f008f
 8003118:	008f008f 	.word	0x008f008f
 800311c:	008f008f 	.word	0x008f008f
 8003120:	008f008f 	.word	0x008f008f
 8003124:	008f008f 	.word	0x008f008f
 8003128:	008f008f 	.word	0x008f008f
 800312c:	00bf00c6 	.word	0x00bf00c6
 8003130:	008f0089 	.word	0x008f0089
 8003134:	008f008f 	.word	0x008f008f
 8003138:	008f008f 	.word	0x008f008f
 800313c:	008f008f 	.word	0x008f008f
 8003140:	008f008f 	.word	0x008f008f
 8003144:	008f008f 	.word	0x008f008f
 8003148:	008f008f 	.word	0x008f008f
 800314c:	008f008f 	.word	0x008f008f
 8003150:	008f008f 	.word	0x008f008f
 8003154:	008f008f 	.word	0x008f008f
 8003158:	008f008f 	.word	0x008f008f
 800315c:	008f008f 	.word	0x008f008f
 8003160:	008f008f 	.word	0x008f008f
 8003164:	008f00ad 	.word	0x008f00ad
 8003168:	008f008f 	.word	0x008f008f
 800316c:	008f008f 	.word	0x008f008f
 8003170:	008f008f 	.word	0x008f008f
 8003174:	008f008f 	.word	0x008f008f
 8003178:	008f008f 	.word	0x008f008f
 800317c:	008f008f 	.word	0x008f008f
 8003180:	008f008f 	.word	0x008f008f
 8003184:	008f008f 	.word	0x008f008f
 8003188:	00a9008f 	.word	0x00a9008f
 800318c:	009900a5 	.word	0x009900a5
 8003190:	0096008f 	.word	0x0096008f
 8003194:	008f0096 	.word	0x008f0096
 8003198:	008f008f 	.word	0x008f008f
 800319c:	008f008f 	.word	0x008f008f
 80031a0:	008f008f 	.word	0x008f008f
 80031a4:	008f008f 	.word	0x008f008f
 80031a8:	008f008f 	.word	0x008f008f
 80031ac:	008f008f 	.word	0x008f008f
 80031b0:	008f008f 	.word	0x008f008f
 80031b4:	01210175 	.word	0x01210175
 80031b8:	00ba011a 	.word	0x00ba011a
 80031bc:	01390151 	.word	0x01390151
    }
    break;

    case MC_PROTOCOL_REG_I_D_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).d;
 80031c0:	4630      	mov	r0, r6
 80031c2:	f7fd fe8d 	bl	8000ee0 <MCI_GetIqdref>
 80031c6:	1400      	asrs	r0, r0, #16
      }
	}
    break;
  }
  return bRetVal;
}
 80031c8:	b00e      	add	sp, #56	; 0x38
 80031ca:	bd70      	pop	{r4, r5, r6, pc}
  int32_t bRetVal = 0;
 80031cc:	2000      	movs	r0, #0
 80031ce:	e7fb      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIqdref(pMCI).q;
 80031d0:	4630      	mov	r0, r6
 80031d2:	f7fd fe85 	bl	8000ee0 <MCI_GetIqdref>
 80031d6:	b200      	sxth	r0, r0
    break;
 80031d8:	e7f6      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = CTRBDID;
 80031da:	f242 701f 	movw	r0, #10015	; 0x271f
 80031de:	e7f3      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t)(MC_UID);
 80031e0:	4885      	ldr	r0, [pc, #532]	; (80033f8 <UI_GetReg+0x48c>)
 80031e2:	e7f1      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 80031e4:	4630      	mov	r0, r6
 80031e6:	f7fd fe5f 	bl	8000ea8 <MCI_GetIalphabeta>
 80031ea:	1400      	asrs	r0, r0, #16
    break;
 80031ec:	e7ec      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 80031ee:	4630      	mov	r0, r6
 80031f0:	f7fd fe5a 	bl	8000ea8 <MCI_GetIalphabeta>
 80031f4:	b200      	sxth	r0, r0
    break;
 80031f6:	e7e7      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 80031f8:	6828      	ldr	r0, [r5, #0]
 80031fa:	f003 fd69 	bl	8006cd0 <PID_GetKIDivisor>
    break;
 80031fe:	e7e3      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8003200:	6828      	ldr	r0, [r5, #0]
 8003202:	f003 fd63 	bl	8006ccc <PID_GetKPDivisor>
    break;
 8003206:	e7df      	b.n	80031c8 <UI_GetReg+0x25c>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8003208:	4630      	mov	r0, r6
 800320a:	f7fd fe25 	bl	8000e58 <MCI_GetControlMode>
 800320e:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8003210:	4630      	mov	r0, r6
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8003212:	f000 80eb 	beq.w	80033ec <UI_GetReg+0x480>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8003216:	f7fd fe35 	bl	8000e84 <MCI_GetMecSpeedRefUnit>
 800321a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800321e:	0040      	lsls	r0, r0, #1
 8003220:	e7d2      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t) PID_GetKP( pMCT->pPosCtrl->PIDPosRegulator );
 8003222:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003224:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003226:	f003 fd47 	bl	8006cb8 <PID_GetKP>
      break;
 800322a:	e7cd      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 800322c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800322e:	f005 f80f 	bl	8008250 <STC_GetMinAppNegativeMecSpeedUnit>
 8003232:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003236:	0040      	lsls	r0, r0, #1
    break;
 8003238:	e7c6      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 800323a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800323c:	f005 f806 	bl	800824c <STC_GetMaxAppPositiveMecSpeedUnit>
 8003240:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003244:	0040      	lsls	r0, r0, #1
    break;
 8003246:	e7bf      	b.n	80031c8 <UI_GetReg+0x25c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003248:	6902      	ldr	r2, [r0, #16]
 800324a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800324e:	0f1a      	lsrs	r2, r3, #28
 8003250:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003252:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003256:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003258:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800325c:	f240 80c1 	bls.w	80033e2 <UI_GetReg+0x476>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003260:	2b01      	cmp	r3, #1
 8003262:	d8b3      	bhi.n	80031cc <UI_GetReg+0x260>
        pSPD = pMCT->pSpeedSensorAux;
 8003264:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003266:	2800      	cmp	r0, #0
 8003268:	d0b0      	beq.n	80031cc <UI_GetReg+0x260>
        bRetVal = SPD_GetS16Speed(pSPD);
 800326a:	f004 ff2f 	bl	80080cc <SPD_GetS16Speed>
 800326e:	e7ab      	b.n	80031c8 <UI_GetReg+0x25c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003270:	6902      	ldr	r2, [r0, #16]
 8003272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003276:	0f1a      	lsrs	r2, r3, #28
 8003278:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800327a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800327e:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003280:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003284:	f240 80a8 	bls.w	80033d8 <UI_GetReg+0x46c>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003288:	2b01      	cmp	r3, #1
 800328a:	d89f      	bhi.n	80031cc <UI_GetReg+0x260>
        pSPD = pMCT->pSpeedSensorAux;
 800328c:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800328e:	2800      	cmp	r0, #0
 8003290:	d09c      	beq.n	80031cc <UI_GetReg+0x260>
        bRetVal = SPD_GetElAngle(pSPD);
 8003292:	f004 fee1 	bl	8008058 <SPD_GetElAngle>
 8003296:	e797      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8003298:	4630      	mov	r0, r6
 800329a:	f7fd fe3d 	bl	8000f18 <MCI_GetValphabeta>
 800329e:	1400      	asrs	r0, r0, #16
    break;
 80032a0:	e792      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 80032a2:	f7ff fd75 	bl	8002d90 <UI_GetSelectedMC>
    break;
 80032a6:	e78f      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 80032a8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80032aa:	f005 f883 	bl	80083b4 <STM_GetState>
	break;
 80032ae:	e78b      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 80032b0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
 80032b2:	b00e      	add	sp, #56	; 0x38
 80032b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 80032b8:	f005 b88a 	b.w	80083d0 <STM_GetFaultState>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 80032bc:	6828      	ldr	r0, [r5, #0]
 80032be:	f003 fcff 	bl	8006cc0 <PID_GetKI>
    break;
 80032c2:	e781      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 80032c4:	6828      	ldr	r0, [r5, #0]
 80032c6:	f003 fcf7 	bl	8006cb8 <PID_GetKP>
    break;
 80032ca:	e77d      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 80032cc:	4630      	mov	r0, r6
 80032ce:	f7fd fdd9 	bl	8000e84 <MCI_GetMecSpeedRefUnit>
 80032d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80032d6:	0040      	lsls	r0, r0, #1
    break;
 80032d8:	e776      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 80032da:	4630      	mov	r0, r6
 80032dc:	f7fd fdbc 	bl	8000e58 <MCI_GetControlMode>
    break;
 80032e0:	e772      	b.n	80031c8 <UI_GetReg+0x25c>
        ReadVal.Float_Val = TC_GetMoveDuration(pMCT->pPosCtrl);
 80032e2:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 80032e4:	f005 faf2 	bl	80088cc <TC_GetMoveDuration>
 80032e8:	ed8d 0a01 	vstr	s0, [sp, #4]
        bRetVal = ReadVal.U32_Val;
 80032ec:	9801      	ldr	r0, [sp, #4]
      break;
 80032ee:	e76b      	b.n	80031c8 <UI_GetReg+0x25c>
        ReadVal.Float_Val = TC_GetTargetPosition(pMCT->pPosCtrl);
 80032f0:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 80032f2:	f005 fae7 	bl	80088c4 <TC_GetTargetPosition>
 80032f6:	ed8d 0a01 	vstr	s0, [sp, #4]
        bRetVal = ReadVal.U32_Val;
 80032fa:	9801      	ldr	r0, [sp, #4]
      break;
 80032fc:	e764      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIab(pMCI).b;
 80032fe:	4630      	mov	r0, r6
 8003300:	f7fd fdc4 	bl	8000e8c <MCI_GetIab>
 8003304:	1400      	asrs	r0, r0, #16
    break;
 8003306:	e75f      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8003308:	6868      	ldr	r0, [r5, #4]
 800330a:	f003 fce5 	bl	8006cd8 <PID_GetKD>
    break;
 800330e:	e75b      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8003310:	6868      	ldr	r0, [r5, #4]
 8003312:	f003 fcd5 	bl	8006cc0 <PID_GetKI>
    break;
 8003316:	e757      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8003318:	6868      	ldr	r0, [r5, #4]
 800331a:	f003 fccd 	bl	8006cb8 <PID_GetKP>
    break;
 800331e:	e753      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t) PID_GetKD( pMCT->pPosCtrl->PIDPosRegulator );
 8003320:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003322:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003324:	f003 fcd8 	bl	8006cd8 <PID_GetKD>
      break;
 8003328:	e74e      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 800332a:	6828      	ldr	r0, [r5, #0]
 800332c:	f003 fcd4 	bl	8006cd8 <PID_GetKD>
    break;
 8003330:	e74a      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8003332:	4630      	mov	r0, r6
 8003334:	f7fd fdf0 	bl	8000f18 <MCI_GetValphabeta>
 8003338:	b200      	sxth	r0, r0
    break;
 800333a:	e745      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = MCI_GetVqd(pMCI).d;
 800333c:	4630      	mov	r0, r6
 800333e:	f7fd fddd 	bl	8000efc <MCI_GetVqd>
 8003342:	1400      	asrs	r0, r0, #16
    break;
 8003344:	e740      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = MCI_GetVqd(pMCI).q;
 8003346:	4630      	mov	r0, r6
 8003348:	f7fd fdd8 	bl	8000efc <MCI_GetVqd>
 800334c:	b200      	sxth	r0, r0
    break;
 800334e:	e73b      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t) PID_GetKI( pMCT->pPosCtrl->PIDPosRegulator );
 8003350:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003352:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003354:	f003 fcb4 	bl	8006cc0 <PID_GetKI>
      break;
 8003358:	e736      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 800335a:	4630      	mov	r0, r6
 800335c:	f7fd fd8a 	bl	8000e74 <MCI_GetAvrgMecSpeedUnit>
 8003360:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003364:	0040      	lsls	r0, r0, #1
    break;
 8003366:	e72f      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8003368:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800336a:	f003 fc3f 	bl	8006bec <MPM_GetAvrgElMotorPowerW>
    break;
 800336e:	e72b      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8003370:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003372:	f003 fc7f 	bl	8006c74 <NTC_GetAvTemp_C>
    break;
 8003376:	e727      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8003378:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800337a:	f003 f9f7 	bl	800676c <VBS_GetAvBusVoltage_V>
    break;
 800337e:	e723      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8003380:	68a8      	ldr	r0, [r5, #8]
 8003382:	f003 fca9 	bl	8006cd8 <PID_GetKD>
    break;
 8003386:	e71f      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8003388:	68a8      	ldr	r0, [r5, #8]
 800338a:	f003 fc99 	bl	8006cc0 <PID_GetKI>
    break;
 800338e:	e71b      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8003390:	68a8      	ldr	r0, [r5, #8]
 8003392:	f003 fc91 	bl	8006cb8 <PID_GetKP>
    break;
 8003396:	e717      	b.n	80031c8 <UI_GetReg+0x25c>
        ReadVal.Float_Val = TC_GetCurrentPosition(pMCT->pPosCtrl);
 8003398:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800339a:	f005 fa81 	bl	80088a0 <TC_GetCurrentPosition>
 800339e:	ed8d 0a01 	vstr	s0, [sp, #4]
        bRetVal = ReadVal.U32_Val;
 80033a2:	9801      	ldr	r0, [sp, #4]
      break;
 80033a4:	e710      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIab(pMCI).a;
 80033a6:	4630      	mov	r0, r6
 80033a8:	f7fd fd70 	bl	8000e8c <MCI_GetIab>
 80033ac:	b200      	sxth	r0, r0
    break;
 80033ae:	e70b      	b.n	80031c8 <UI_GetReg+0x25c>
      if (pMCT->pRevupCtrl)
 80033b0:	6968      	ldr	r0, [r5, #20]
 80033b2:	2800      	cmp	r0, #0
 80033b4:	f43f af0a 	beq.w	80031cc <UI_GetReg+0x260>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 80033b8:	f004 fe4a 	bl	8008050 <RUC_GetNumberOfPhases>
 80033bc:	e704      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIqd(pMCI).d;
 80033be:	4630      	mov	r0, r6
 80033c0:	f7fd fd80 	bl	8000ec4 <MCI_GetIqd>
 80033c4:	1400      	asrs	r0, r0, #16
    break;
 80033c6:	e6ff      	b.n	80031c8 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIqd(pMCI).q;
 80033c8:	4630      	mov	r0, r6
 80033ca:	f7fd fd7b 	bl	8000ec4 <MCI_GetIqd>
 80033ce:	b200      	sxth	r0, r0
    break;
 80033d0:	e6fa      	b.n	80031c8 <UI_GetReg+0x25c>
        *success = false;
 80033d2:	2000      	movs	r0, #0
 80033d4:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 80033d6:	e6f7      	b.n	80031c8 <UI_GetReg+0x25c>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80033d8:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 80033da:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80033dc:	f63f af57 	bhi.w	800328e <UI_GetReg+0x322>
 80033e0:	e754      	b.n	800328c <UI_GetReg+0x320>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80033e2:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 80033e4:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80033e6:	f63f af3e 	bhi.w	8003266 <UI_GetReg+0x2fa>
 80033ea:	e73b      	b.n	8003264 <UI_GetReg+0x2f8>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80033ec:	f7fd fd36 	bl	8000e5c <MCI_GetLastRampFinalSpeed>
 80033f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80033f4:	0040      	lsls	r0, r0, #1
 80033f6:	e6e7      	b.n	80031c8 <UI_GetReg+0x25c>
 80033f8:	34a6847a 	.word	0x34a6847a

080033fc <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 80033fc:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80033fe:	6883      	ldr	r3, [r0, #8]
 8003400:	7d02      	ldrb	r2, [r0, #20]
 8003402:	3901      	subs	r1, #1
 8003404:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]

  switch (bCmdID)
 8003408:	290d      	cmp	r1, #13
 800340a:	d808      	bhi.n	800341e <UI_ExecCmd+0x22>
 800340c:	e8df f001 	tbb	[pc, r1]
 8003410:	0e091419 	.word	0x0e091419
 8003414:	231e100e 	.word	0x231e100e
 8003418:	07070728 	.word	0x07070728
 800341c:	1407      	.short	0x1407
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800341e:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8003420:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 8003422:	4620      	mov	r0, r4
 8003424:	f7fd fd14 	bl	8000e50 <MCI_GetSTMState>
 8003428:	2806      	cmp	r0, #6
 800342a:	d01e      	beq.n	800346a <UI_ExecCmd+0x6e>
  bool retVal = true;
 800342c:	2001      	movs	r0, #1
}
 800342e:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8003430:	4620      	mov	r0, r4
 8003432:	f7fd fd0d 	bl	8000e50 <MCI_GetSTMState>
 8003436:	b120      	cbz	r0, 8003442 <UI_ExecCmd+0x46>
        MCI_StopMotor(pMCI);
 8003438:	4620      	mov	r0, r4
 800343a:	f7fd fcc1 	bl	8000dc0 <MCI_StopMotor>
  bool retVal = true;
 800343e:	2001      	movs	r0, #1
}
 8003440:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8003442:	4620      	mov	r0, r4
 8003444:	f7fd fcb2 	bl	8000dac <MCI_StartMotor>
  bool retVal = true;
 8003448:	2001      	movs	r0, #1
}
 800344a:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 800344c:	4620      	mov	r0, r4
 800344e:	f7fd fcbb 	bl	8000dc8 <MCI_FaultAcknowledged>
  bool retVal = true;
 8003452:	2001      	movs	r0, #1
}
 8003454:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8003456:	4620      	mov	r0, r4
 8003458:	f7fd fcba 	bl	8000dd0 <MCI_EncoderAlign>
  bool retVal = true;
 800345c:	2001      	movs	r0, #1
}
 800345e:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8003460:	4620      	mov	r0, r4
 8003462:	f7fd fd75 	bl	8000f50 <MCI_Clear_Iqdref>
  bool retVal = true;
 8003466:	2001      	movs	r0, #1
}
 8003468:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 800346a:	4620      	mov	r0, r4
 800346c:	f7fd fcfe 	bl	8000e6c <MCI_StopRamp>
  bool retVal = true;
 8003470:	2001      	movs	r0, #1
}
 8003472:	bd10      	pop	{r4, pc}

08003474 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8003474:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8003476:	4b07      	ldr	r3, [pc, #28]	; (8003494 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003478:	7d04      	ldrb	r4, [r0, #20]
 800347a:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800347c:	fb83 c301 	smull	ip, r3, r3, r1
 8003480:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8003484:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8003488:	b209      	sxth	r1, r1
 800348a:	f7fd fc35 	bl	8000cf8 <MCI_ExecSpeedRamp>
  return true;
}
 800348e:	2001      	movs	r0, #1
 8003490:	bd10      	pop	{r4, pc}
 8003492:	bf00      	nop
 8003494:	2aaaaaab 	.word	0x2aaaaaab

08003498 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8003498:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800349a:	6883      	ldr	r3, [r0, #8]
 800349c:	7d04      	ldrb	r4, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 800349e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80034a2:	f7fd fc35 	bl	8000d10 <MCI_ExecTorqueRamp>
  return true;
}
 80034a6:	2001      	movs	r0, #1
 80034a8:	bd10      	pop	{r4, pc}
 80034aa:	bf00      	nop

080034ac <UI_ExecPositionCmd>:
  * @param  fTargetPosition: final position value.
  * @param  fDuration: duration alllowed to complete the positioning (expressed in seconds).
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_ExecPositionCmd(UI_Handle_t *pHandle, float fTargetPosition, float fDuration)
{
 80034ac:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80034ae:	6883      	ldr	r3, [r0, #8]
 80034b0:	7d02      	ldrb	r2, [r0, #20]

  /* Call MCI Position Command */
  MCI_ExecPositionCommand(pMCI,fTargetPosition,fDuration);
 80034b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80034b6:	f7fd fc3f 	bl	8000d38 <MCI_ExecPositionCommand>
  return true;
}
 80034ba:	2001      	movs	r0, #1
 80034bc:	bd08      	pop	{r3, pc}
 80034be:	bf00      	nop

080034c0 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 80034c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80034c2:	7d04      	ldrb	r4, [r0, #20]
 80034c4:	68c0      	ldr	r0, [r0, #12]
 80034c6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80034ca:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 80034cc:	b19c      	cbz	r4, 80034f6 <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80034ce:	4620      	mov	r0, r4
 80034d0:	461e      	mov	r6, r3
 80034d2:	4617      	mov	r7, r2
 80034d4:	460d      	mov	r5, r1
 80034d6:	f004 fda5 	bl	8008024 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80034da:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80034dc:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80034de:	4620      	mov	r0, r4
 80034e0:	f004 fda6 	bl	8008030 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80034e4:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80034e6:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80034e8:	4620      	mov	r0, r4
 80034ea:	f004 fda9 	bl	8008040 <RUC_GetPhaseFinalTorque>
 80034ee:	9b06      	ldr	r3, [sp, #24]
 80034f0:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 80034f2:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 80034f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 80034f6:	4620      	mov	r0, r4
}
 80034f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034fa:	bf00      	nop

080034fc <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 80034fc:	b570      	push	{r4, r5, r6, lr}
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80034fe:	7d04      	ldrb	r4, [r0, #20]
 8003500:	68c0      	ldr	r0, [r0, #12]
{
 8003502:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003504:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
{
 8003508:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800350c:	6940      	ldr	r0, [r0, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 800350e:	9001      	str	r0, [sp, #4]
{
 8003510:	461d      	mov	r5, r3
 8003512:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8003514:	f004 fd74 	bl	8008000 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8003518:	9801      	ldr	r0, [sp, #4]
 800351a:	462a      	mov	r2, r5
 800351c:	4621      	mov	r1, r4
 800351e:	f004 fd75 	bl	800800c <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8003522:	9801      	ldr	r0, [sp, #4]
 8003524:	4632      	mov	r2, r6
 8003526:	4621      	mov	r1, r4
 8003528:	f004 fd76 	bl	8008018 <RUC_SetPhaseFinalTorque>
  return true;
}
 800352c:	2001      	movs	r0, #1
 800352e:	b002      	add	sp, #8
 8003530:	bd70      	pop	{r4, r5, r6, pc}
 8003532:	bf00      	nop

08003534 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8003534:	b410      	push	{r4}
 8003536:	b083      	sub	sp, #12

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003538:	7d04      	ldrb	r4, [r0, #20]
 800353a:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 800353c:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 8003540:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 8003544:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003548:	9901      	ldr	r1, [sp, #4]
}
 800354a:	b003      	add	sp, #12
 800354c:	f85d 4b04 	ldr.w	r4, [sp], #4
  MCI_SetCurrentReferences(pMCI,currComp);
 8003550:	f7fd bbe8 	b.w	8000d24 <MCI_SetCurrentReferences>

08003554 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8003554:	2000      	movs	r0, #0
 8003556:	4770      	bx	lr

08003558 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003558:	4a03      	ldr	r2, [pc, #12]	; (8003568 <SystemInit+0x10>)
 800355a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800355e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003562:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003566:	4770      	bx	lr
 8003568:	e000ed00 	.word	0xe000ed00

0800356c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800356c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800356e:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <HAL_InitTick+0x40>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	b90b      	cbnz	r3, 8003578 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003574:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003576:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003578:	490d      	ldr	r1, [pc, #52]	; (80035b0 <HAL_InitTick+0x44>)
 800357a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800357e:	4605      	mov	r5, r0
 8003580:	fbb2 f3f3 	udiv	r3, r2, r3
 8003584:	6808      	ldr	r0, [r1, #0]
 8003586:	fbb0 f0f3 	udiv	r0, r0, r3
 800358a:	f001 f837 	bl	80045fc <HAL_SYSTICK_Config>
 800358e:	4604      	mov	r4, r0
 8003590:	2800      	cmp	r0, #0
 8003592:	d1ef      	bne.n	8003574 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003594:	2d0f      	cmp	r5, #15
 8003596:	d8ed      	bhi.n	8003574 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003598:	4602      	mov	r2, r0
 800359a:	4629      	mov	r1, r5
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	f000 ffe6 	bl	8004570 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035a4:	4b03      	ldr	r3, [pc, #12]	; (80035b4 <HAL_InitTick+0x48>)
 80035a6:	4620      	mov	r0, r4
 80035a8:	601d      	str	r5, [r3, #0]
}
 80035aa:	bd38      	pop	{r3, r4, r5, pc}
 80035ac:	20000618 	.word	0x20000618
 80035b0:	20000614 	.word	0x20000614
 80035b4:	2000061c 	.word	0x2000061c

080035b8 <HAL_Init>:
{
 80035b8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035ba:	2003      	movs	r0, #3
 80035bc:	f000 ffc4 	bl	8004548 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035c0:	2004      	movs	r0, #4
 80035c2:	f7ff ffd3 	bl	800356c <HAL_InitTick>
 80035c6:	b110      	cbz	r0, 80035ce <HAL_Init+0x16>
    status = HAL_ERROR;
 80035c8:	2401      	movs	r4, #1
}
 80035ca:	4620      	mov	r0, r4
 80035cc:	bd10      	pop	{r4, pc}
 80035ce:	4604      	mov	r4, r0
    HAL_MspInit();
 80035d0:	f7ff f802 	bl	80025d8 <HAL_MspInit>
}
 80035d4:	4620      	mov	r0, r4
 80035d6:	bd10      	pop	{r4, pc}

080035d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80035d8:	4a03      	ldr	r2, [pc, #12]	; (80035e8 <HAL_IncTick+0x10>)
 80035da:	4904      	ldr	r1, [pc, #16]	; (80035ec <HAL_IncTick+0x14>)
 80035dc:	6813      	ldr	r3, [r2, #0]
 80035de:	6809      	ldr	r1, [r1, #0]
 80035e0:	440b      	add	r3, r1
 80035e2:	6013      	str	r3, [r2, #0]
}
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	20000bc8 	.word	0x20000bc8
 80035ec:	20000618 	.word	0x20000618

080035f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80035f0:	4b01      	ldr	r3, [pc, #4]	; (80035f8 <HAL_GetTick+0x8>)
 80035f2:	6818      	ldr	r0, [r3, #0]
}
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	20000bc8 	.word	0x20000bc8

080035fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035fc:	b538      	push	{r3, r4, r5, lr}
 80035fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003600:	f7ff fff6 	bl	80035f0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003604:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003606:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003608:	d002      	beq.n	8003610 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800360a:	4b04      	ldr	r3, [pc, #16]	; (800361c <HAL_Delay+0x20>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003610:	f7ff ffee 	bl	80035f0 <HAL_GetTick>
 8003614:	1b43      	subs	r3, r0, r5
 8003616:	42a3      	cmp	r3, r4
 8003618:	d3fa      	bcc.n	8003610 <HAL_Delay+0x14>
  {
  }
}
 800361a:	bd38      	pop	{r3, r4, r5, pc}
 800361c:	20000618 	.word	0x20000618

08003620 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003620:	b570      	push	{r4, r5, r6, lr}
 8003622:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003624:	2300      	movs	r3, #0
 8003626:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003628:	2800      	cmp	r0, #0
 800362a:	f000 80cb 	beq.w	80037c4 <HAL_ADC_Init+0x1a4>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800362e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8003630:	4604      	mov	r4, r0
 8003632:	2d00      	cmp	r5, #0
 8003634:	f000 8094 	beq.w	8003760 <HAL_ADC_Init+0x140>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003638:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800363a:	6893      	ldr	r3, [r2, #8]
 800363c:	009d      	lsls	r5, r3, #2
 800363e:	d505      	bpl.n	800364c <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003640:	6893      	ldr	r3, [r2, #8]
 8003642:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003646:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800364a:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800364c:	6893      	ldr	r3, [r2, #8]
 800364e:	00d8      	lsls	r0, r3, #3
 8003650:	d419      	bmi.n	8003686 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003652:	4b71      	ldr	r3, [pc, #452]	; (8003818 <HAL_ADC_Init+0x1f8>)
 8003654:	4871      	ldr	r0, [pc, #452]	; (800381c <HAL_ADC_Init+0x1fc>)
 8003656:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003658:	6891      	ldr	r1, [r2, #8]
 800365a:	099b      	lsrs	r3, r3, #6
 800365c:	fba0 0303 	umull	r0, r3, r0, r3
 8003660:	099b      	lsrs	r3, r3, #6
 8003662:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8003666:	3301      	adds	r3, #1
 8003668:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003672:	6091      	str	r1, [r2, #8]
 8003674:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003676:	9b01      	ldr	r3, [sp, #4]
 8003678:	b12b      	cbz	r3, 8003686 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 800367a:	9b01      	ldr	r3, [sp, #4]
 800367c:	3b01      	subs	r3, #1
 800367e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003680:	9b01      	ldr	r3, [sp, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f9      	bne.n	800367a <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003686:	6893      	ldr	r3, [r2, #8]
 8003688:	00d9      	lsls	r1, r3, #3
 800368a:	d45b      	bmi.n	8003744 <HAL_ADC_Init+0x124>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800368e:	f043 0310 	orr.w	r3, r3, #16
 8003692:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003694:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800369c:	6893      	ldr	r3, [r2, #8]
 800369e:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 80036a2:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80036a8:	d153      	bne.n	8003752 <HAL_ADC_Init+0x132>
 80036aa:	06db      	lsls	r3, r3, #27
 80036ac:	d451      	bmi.n	8003752 <HAL_ADC_Init+0x132>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036ae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80036b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80036b4:	f043 0302 	orr.w	r3, r3, #2
 80036b8:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036ba:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036bc:	07de      	lsls	r6, r3, #31
 80036be:	d40e      	bmi.n	80036de <HAL_ADC_Init+0xbe>
 80036c0:	4b57      	ldr	r3, [pc, #348]	; (8003820 <HAL_ADC_Init+0x200>)
 80036c2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80036c6:	6889      	ldr	r1, [r1, #8]
 80036c8:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036ca:	430b      	orrs	r3, r1
 80036cc:	07dd      	lsls	r5, r3, #31
 80036ce:	d406      	bmi.n	80036de <HAL_ADC_Init+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80036d0:	4954      	ldr	r1, [pc, #336]	; (8003824 <HAL_ADC_Init+0x204>)
 80036d2:	6865      	ldr	r5, [r4, #4]
 80036d4:	688b      	ldr	r3, [r1, #8]
 80036d6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80036da:	432b      	orrs	r3, r5
 80036dc:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80036de:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 80036e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80036e4:	432b      	orrs	r3, r5
 80036e6:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036e8:	7f65      	ldrb	r5, [r4, #29]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036ea:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 80036ee:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036f2:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036f8:	d05f      	beq.n	80037ba <HAL_ADC_Init+0x19a>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80036fc:	b121      	cbz	r1, 8003708 <HAL_ADC_Init+0xe8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80036fe:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003700:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003704:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003706:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003708:	68d6      	ldr	r6, [r2, #12]
 800370a:	4947      	ldr	r1, [pc, #284]	; (8003828 <HAL_ADC_Init+0x208>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800370c:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800370e:	4031      	ands	r1, r6
 8003710:	430b      	orrs	r3, r1
 8003712:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003714:	6913      	ldr	r3, [r2, #16]
 8003716:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800371a:	432b      	orrs	r3, r5
 800371c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800371e:	6893      	ldr	r3, [r2, #8]
 8003720:	0759      	lsls	r1, r3, #29
 8003722:	d523      	bpl.n	800376c <HAL_ADC_Init+0x14c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003724:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003726:	6963      	ldr	r3, [r4, #20]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d04e      	beq.n	80037ca <HAL_ADC_Init+0x1aa>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800372c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800372e:	f023 030f 	bic.w	r3, r3, #15
 8003732:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003734:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003736:	f023 0303 	bic.w	r3, r3, #3
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003740:	b002      	add	sp, #8
 8003742:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003744:	6893      	ldr	r3, [r2, #8]
 8003746:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800374a:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800374e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003750:	d0ab      	beq.n	80036aa <HAL_ADC_Init+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003752:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8003754:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003756:	f043 0310 	orr.w	r3, r3, #16
 800375a:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800375c:	b002      	add	sp, #8
 800375e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8003760:	f7fe ff5a 	bl	8002618 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003764:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8003766:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 800376a:	e765      	b.n	8003638 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800376c:	6893      	ldr	r3, [r2, #8]
 800376e:	071b      	lsls	r3, r3, #28
 8003770:	d4d9      	bmi.n	8003726 <HAL_ADC_Init+0x106>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003772:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003774:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003778:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 800377a:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800377c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003780:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003782:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003786:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800378a:	430b      	orrs	r3, r1
 800378c:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800378e:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8003790:	bb1d      	cbnz	r5, 80037da <HAL_ADC_Init+0x1ba>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003796:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003798:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800379c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80037a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037a4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 80037a8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d021      	beq.n	80037f4 <HAL_ADC_Init+0x1d4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037b0:	6913      	ldr	r3, [r2, #16]
 80037b2:	f023 0301 	bic.w	r3, r3, #1
 80037b6:	6113      	str	r3, [r2, #16]
 80037b8:	e7b5      	b.n	8003726 <HAL_ADC_Init+0x106>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80037ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80037bc:	3901      	subs	r1, #1
 80037be:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80037c2:	e79a      	b.n	80036fa <HAL_ADC_Init+0xda>
    return HAL_ERROR;
 80037c4:	2001      	movs	r0, #1
}
 80037c6:	b002      	add	sp, #8
 80037c8:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037ca:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80037cc:	6a23      	ldr	r3, [r4, #32]
 80037ce:	f021 010f 	bic.w	r1, r1, #15
 80037d2:	3b01      	subs	r3, #1
 80037d4:	430b      	orrs	r3, r1
 80037d6:	6313      	str	r3, [r2, #48]	; 0x30
 80037d8:	e7ac      	b.n	8003734 <HAL_ADC_Init+0x114>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80037da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037de:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80037e0:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80037e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80037e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037ec:	432b      	orrs	r3, r5
 80037ee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80037f2:	e7d9      	b.n	80037a8 <HAL_ADC_Init+0x188>
        MODIFY_REG(hadc->Instance->CFGR2,
 80037f4:	e9d4 3611 	ldrd	r3, r6, [r4, #68]	; 0x44
 80037f8:	6911      	ldr	r1, [r2, #16]
 80037fa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80037fc:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8003800:	f021 0104 	bic.w	r1, r1, #4
 8003804:	4333      	orrs	r3, r6
 8003806:	430b      	orrs	r3, r1
 8003808:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800380a:	432b      	orrs	r3, r5
 800380c:	430b      	orrs	r3, r1
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	6113      	str	r3, [r2, #16]
 8003814:	e787      	b.n	8003726 <HAL_ADC_Init+0x106>
 8003816:	bf00      	nop
 8003818:	20000614 	.word	0x20000614
 800381c:	053e2d63 	.word	0x053e2d63
 8003820:	50000100 	.word	0x50000100
 8003824:	50000300 	.word	0x50000300
 8003828:	fff04007 	.word	0xfff04007

0800382c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800382c:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800382e:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8003832:	b083      	sub	sp, #12
 8003834:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003836:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8003838:	f04f 0000 	mov.w	r0, #0
 800383c:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800383e:	f000 8143 	beq.w	8003ac8 <HAL_ADC_ConfigChannel+0x29c>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003842:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8003844:	2001      	movs	r0, #1
 8003846:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800384a:	6894      	ldr	r4, [r2, #8]
 800384c:	0766      	lsls	r6, r4, #29
 800384e:	d43c      	bmi.n	80038ca <HAL_ADC_ConfigChannel+0x9e>
  MODIFY_REG(*preg,
 8003850:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003854:	09a6      	lsrs	r6, r4, #6
 8003856:	f102 0530 	add.w	r5, r2, #48	; 0x30
 800385a:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 800385e:	f004 041f 	and.w	r4, r4, #31
 8003862:	5977      	ldr	r7, [r6, r5]
 8003864:	f04f 0c1f 	mov.w	ip, #31
 8003868:	fa0c fc04 	lsl.w	ip, ip, r4
 800386c:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8003870:	ea27 070c 	bic.w	r7, r7, ip
 8003874:	40a0      	lsls	r0, r4
 8003876:	4338      	orrs	r0, r7
 8003878:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800387a:	6890      	ldr	r0, [r2, #8]
 800387c:	0745      	lsls	r5, r0, #29
 800387e:	d544      	bpl.n	800390a <HAL_ADC_ConfigChannel+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003880:	6890      	ldr	r0, [r2, #8]
 8003882:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003884:	6894      	ldr	r4, [r2, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003886:	07e4      	lsls	r4, r4, #31
 8003888:	d530      	bpl.n	80038ec <HAL_ADC_ConfigChannel+0xc0>
 800388a:	4604      	mov	r4, r0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800388c:	49c2      	ldr	r1, [pc, #776]	; (8003b98 <HAL_ADC_ConfigChannel+0x36c>)
 800388e:	420c      	tst	r4, r1
 8003890:	d02a      	beq.n	80038e8 <HAL_ADC_ConfigChannel+0xbc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003892:	49c2      	ldr	r1, [pc, #776]	; (8003b9c <HAL_ADC_ConfigChannel+0x370>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003894:	4dc2      	ldr	r5, [pc, #776]	; (8003ba0 <HAL_ADC_ConfigChannel+0x374>)
 8003896:	6888      	ldr	r0, [r1, #8]
 8003898:	42ac      	cmp	r4, r5
 800389a:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 800389e:	d01d      	beq.n	80038dc <HAL_ADC_ConfigChannel+0xb0>
 80038a0:	4dc0      	ldr	r5, [pc, #768]	; (8003ba4 <HAL_ADC_ConfigChannel+0x378>)
 80038a2:	42ac      	cmp	r4, r5
 80038a4:	d01a      	beq.n	80038dc <HAL_ADC_ConfigChannel+0xb0>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038a6:	4dc0      	ldr	r5, [pc, #768]	; (8003ba8 <HAL_ADC_ConfigChannel+0x37c>)
 80038a8:	42ac      	cmp	r4, r5
 80038aa:	f040 813f 	bne.w	8003b2c <HAL_ADC_ConfigChannel+0x300>
 80038ae:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80038b2:	d119      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0xbc>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038b4:	4cbd      	ldr	r4, [pc, #756]	; (8003bac <HAL_ADC_ConfigChannel+0x380>)
 80038b6:	42a2      	cmp	r2, r4
 80038b8:	d016      	beq.n	80038e8 <HAL_ADC_ConfigChannel+0xbc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80038ba:	688a      	ldr	r2, [r1, #8]
 80038bc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80038c0:	4316      	orrs	r6, r2
 80038c2:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 80038c6:	608e      	str	r6, [r1, #8]
}
 80038c8:	e003      	b.n	80038d2 <HAL_ADC_ConfigChannel+0xa6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038cc:	f042 0220 	orr.w	r2, r2, #32
 80038d0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80038d8:	b003      	add	sp, #12
 80038da:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038dc:	0201      	lsls	r1, r0, #8
 80038de:	d403      	bmi.n	80038e8 <HAL_ADC_ConfigChannel+0xbc>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038e0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80038e4:	f000 8103 	beq.w	8003aee <HAL_ADC_ConfigChannel+0x2c2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038e8:	2000      	movs	r0, #0
 80038ea:	e7f2      	b.n	80038d2 <HAL_ADC_ConfigChannel+0xa6>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80038ec:	4db0      	ldr	r5, [pc, #704]	; (8003bb0 <HAL_ADC_ConfigChannel+0x384>)
 80038ee:	68ce      	ldr	r6, [r1, #12]
 80038f0:	42ae      	cmp	r6, r5
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80038f2:	4604      	mov	r4, r0
 80038f4:	f000 8092 	beq.w	8003a1c <HAL_ADC_ConfigChannel+0x1f0>
    CLEAR_BIT(ADCx->DIFSEL,
 80038f8:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 80038fc:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8003900:	ea21 0100 	bic.w	r1, r1, r0
 8003904:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003908:	e7c0      	b.n	800388c <HAL_ADC_ConfigChannel+0x60>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800390a:	6890      	ldr	r0, [r2, #8]
 800390c:	f010 0008 	ands.w	r0, r0, #8
 8003910:	f040 8082 	bne.w	8003a18 <HAL_ADC_ConfigChannel+0x1ec>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003914:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003916:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003918:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800391c:	f000 811a 	beq.w	8003b54 <HAL_ADC_ConfigChannel+0x328>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003920:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 8003924:	f00c 0c04 	and.w	ip, ip, #4
 8003928:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 800392c:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8003930:	f85c 5007 	ldr.w	r5, [ip, r7]
 8003934:	f04f 0e07 	mov.w	lr, #7
 8003938:	fa0e fe06 	lsl.w	lr, lr, r6
 800393c:	40b4      	lsls	r4, r6
 800393e:	ea25 050e 	bic.w	r5, r5, lr
 8003942:	432c      	orrs	r4, r5
 8003944:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003948:	6954      	ldr	r4, [r2, #20]
 800394a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800394e:	6154      	str	r4, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003950:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003954:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003956:	f1bc 0f04 	cmp.w	ip, #4
 800395a:	d02e      	beq.n	80039ba <HAL_ADC_ConfigChannel+0x18e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800395c:	f102 0460 	add.w	r4, r2, #96	; 0x60
  MODIFY_REG(*preg,
 8003960:	f8df e25c 	ldr.w	lr, [pc, #604]	; 8003bc0 <HAL_ADC_ConfigChannel+0x394>
 8003964:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 8003968:	680f      	ldr	r7, [r1, #0]
 800396a:	ea05 0e0e 	and.w	lr, r5, lr
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800396e:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8003972:	694d      	ldr	r5, [r1, #20]
 8003974:	0076      	lsls	r6, r6, #1
 8003976:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 800397a:	40b5      	lsls	r5, r6
 800397c:	ea47 070e 	orr.w	r7, r7, lr
 8003980:	433d      	orrs	r5, r7
 8003982:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8003986:	f844 502c 	str.w	r5, [r4, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800398a:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 800398c:	698e      	ldr	r6, [r1, #24]
 800398e:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 8003992:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8003996:	4335      	orrs	r5, r6
 8003998:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800399c:	690e      	ldr	r6, [r1, #16]
 800399e:	7f0f      	ldrb	r7, [r1, #28]
  MODIFY_REG(*preg,
 80039a0:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 80039a4:	2f01      	cmp	r7, #1
 80039a6:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 80039aa:	bf08      	it	eq
 80039ac:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 80039b0:	4328      	orrs	r0, r5
 80039b2:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 80039b6:	6808      	ldr	r0, [r1, #0]
}
 80039b8:	e764      	b.n	8003884 <HAL_ADC_ConfigChannel+0x58>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039ba:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80039bc:	6e14      	ldr	r4, [r2, #96]	; 0x60
 80039be:	6e14      	ldr	r4, [r2, #96]	; 0x60
 80039c0:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039c4:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039c8:	2d00      	cmp	r5, #0
 80039ca:	f040 80fb 	bne.w	8003bc4 <HAL_ADC_ConfigChannel+0x398>
 80039ce:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039d2:	42ac      	cmp	r4, r5
 80039d4:	f000 816d 	beq.w	8003cb2 <HAL_ADC_ConfigChannel+0x486>
 80039d8:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80039da:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039dc:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039e0:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80039e4:	f102 0764 	add.w	r7, r2, #100	; 0x64
 80039e8:	42ae      	cmp	r6, r5
 80039ea:	f000 8150 	beq.w	8003c8e <HAL_ADC_ConfigChannel+0x462>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80039ee:	68a6      	ldr	r6, [r4, #8]
 80039f0:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039f2:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039f6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80039fa:	42ae      	cmp	r6, r5
 80039fc:	f000 8136 	beq.w	8003c6c <HAL_ADC_ConfigChannel+0x440>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a00:	68e6      	ldr	r6, [r4, #12]
 8003a02:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a04:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a06:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003a0a:	42b5      	cmp	r5, r6
 8003a0c:	f47f af3a 	bne.w	8003884 <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(*preg,
 8003a10:	6820      	ldr	r0, [r4, #0]
 8003a12:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003a16:	6020      	str	r0, [r4, #0]
 8003a18:	6808      	ldr	r0, [r1, #0]
}
 8003a1a:	e733      	b.n	8003884 <HAL_ADC_ConfigChannel+0x58>
    SET_BIT(ADCx->DIFSEL,
 8003a1c:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8003a20:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8003a24:	432c      	orrs	r4, r5
 8003a26:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a2a:	2d00      	cmp	r5, #0
 8003a2c:	d04f      	beq.n	8003ace <HAL_ADC_ConfigChannel+0x2a2>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a32:	2c00      	cmp	r4, #0
 8003a34:	f000 80f6 	beq.w	8003c24 <HAL_ADC_ConfigChannel+0x3f8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003a38:	fab4 f484 	clz	r4, r4
 8003a3c:	3401      	adds	r4, #1
 8003a3e:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a42:	2c09      	cmp	r4, #9
 8003a44:	f240 80ee 	bls.w	8003c24 <HAL_ADC_ConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a48:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003a4c:	2d00      	cmp	r5, #0
 8003a4e:	f000 814c 	beq.w	8003cea <HAL_ADC_ConfigChannel+0x4be>
  return __builtin_clz(value);
 8003a52:	fab5 f585 	clz	r5, r5
 8003a56:	3501      	adds	r5, #1
 8003a58:	06ad      	lsls	r5, r5, #26
 8003a5a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8003a62:	2c00      	cmp	r4, #0
 8003a64:	f000 8146 	beq.w	8003cf4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003a68:	fab4 f484 	clz	r4, r4
 8003a6c:	3401      	adds	r4, #1
 8003a6e:	f004 041f 	and.w	r4, r4, #31
 8003a72:	2601      	movs	r6, #1
 8003a74:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a78:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7a:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	f000 8136 	beq.w	8003cf0 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 8003a84:	fab0 f480 	clz	r4, r0
 8003a88:	3401      	adds	r4, #1
 8003a8a:	f004 041f 	and.w	r4, r4, #31
 8003a8e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003a92:	f1a4 001e 	sub.w	r0, r4, #30
 8003a96:	0500      	lsls	r0, r0, #20
 8003a98:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a9c:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a9e:	0dc7      	lsrs	r7, r0, #23
 8003aa0:	f007 0704 	and.w	r7, r7, #4
 8003aa4:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8003aa8:	688e      	ldr	r6, [r1, #8]
 8003aaa:	597c      	ldr	r4, [r7, r5]
 8003aac:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8003ab0:	f04f 0c07 	mov.w	ip, #7
 8003ab4:	fa0c fc00 	lsl.w	ip, ip, r0
 8003ab8:	ea24 040c 	bic.w	r4, r4, ip
 8003abc:	fa06 f000 	lsl.w	r0, r6, r0
 8003ac0:	4320      	orrs	r0, r4
 8003ac2:	5178      	str	r0, [r7, r5]
 8003ac4:	680c      	ldr	r4, [r1, #0]
}
 8003ac6:	e6e1      	b.n	800388c <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8003ac8:	2002      	movs	r0, #2
}
 8003aca:	b003      	add	sp, #12
 8003acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ace:	0e80      	lsrs	r0, r0, #26
 8003ad0:	1c44      	adds	r4, r0, #1
 8003ad2:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ad6:	2e09      	cmp	r6, #9
 8003ad8:	d850      	bhi.n	8003b7c <HAL_ADC_ConfigChannel+0x350>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ada:	06a5      	lsls	r5, r4, #26
 8003adc:	2401      	movs	r4, #1
 8003ade:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003ae2:	40b4      	lsls	r4, r6
 8003ae4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8003ae8:	4325      	orrs	r5, r4
 8003aea:	0500      	lsls	r0, r0, #20
 8003aec:	e7d6      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x270>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003aee:	482b      	ldr	r0, [pc, #172]	; (8003b9c <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003af0:	4a30      	ldr	r2, [pc, #192]	; (8003bb4 <HAL_ADC_ConfigChannel+0x388>)
 8003af2:	6881      	ldr	r1, [r0, #8]
 8003af4:	4c30      	ldr	r4, [pc, #192]	; (8003bb8 <HAL_ADC_ConfigChannel+0x38c>)
 8003af6:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003afa:	430e      	orrs	r6, r1
 8003afc:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 8003b00:	6086      	str	r6, [r0, #8]
 8003b02:	6812      	ldr	r2, [r2, #0]
 8003b04:	0992      	lsrs	r2, r2, #6
 8003b06:	fba4 1202 	umull	r1, r2, r4, r2
 8003b0a:	0992      	lsrs	r2, r2, #6
 8003b0c:	3201      	adds	r2, #1
 8003b0e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003b12:	0092      	lsls	r2, r2, #2
 8003b14:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003b16:	9a01      	ldr	r2, [sp, #4]
 8003b18:	2a00      	cmp	r2, #0
 8003b1a:	f43f aee5 	beq.w	80038e8 <HAL_ADC_ConfigChannel+0xbc>
            wait_loop_index--;
 8003b1e:	9a01      	ldr	r2, [sp, #4]
 8003b20:	3a01      	subs	r2, #1
 8003b22:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003b24:	9a01      	ldr	r2, [sp, #4]
 8003b26:	2a00      	cmp	r2, #0
 8003b28:	d1f9      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0x2f2>
 8003b2a:	e6dd      	b.n	80038e8 <HAL_ADC_ConfigChannel+0xbc>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b2c:	4d23      	ldr	r5, [pc, #140]	; (8003bbc <HAL_ADC_ConfigChannel+0x390>)
 8003b2e:	42ac      	cmp	r4, r5
 8003b30:	f47f aeda 	bne.w	80038e8 <HAL_ADC_ConfigChannel+0xbc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b34:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8003b38:	f47f aed6 	bne.w	80038e8 <HAL_ADC_ConfigChannel+0xbc>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b3c:	4c1b      	ldr	r4, [pc, #108]	; (8003bac <HAL_ADC_ConfigChannel+0x380>)
 8003b3e:	42a2      	cmp	r2, r4
 8003b40:	f43f aed2 	beq.w	80038e8 <HAL_ADC_ConfigChannel+0xbc>
 8003b44:	688a      	ldr	r2, [r1, #8]
 8003b46:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003b4a:	4332      	orrs	r2, r6
 8003b4c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003b50:	608a      	str	r2, [r1, #8]
}
 8003b52:	e6be      	b.n	80038d2 <HAL_ADC_ConfigChannel+0xa6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b54:	0df5      	lsrs	r5, r6, #23
 8003b56:	f102 0414 	add.w	r4, r2, #20
 8003b5a:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8003b5e:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8003b62:	592f      	ldr	r7, [r5, r4]
 8003b64:	f04f 0c07 	mov.w	ip, #7
 8003b68:	fa0c f606 	lsl.w	r6, ip, r6
 8003b6c:	ea27 0606 	bic.w	r6, r7, r6
 8003b70:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b72:	6954      	ldr	r4, [r2, #20]
 8003b74:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8003b78:	6154      	str	r4, [r2, #20]
}
 8003b7a:	e6e9      	b.n	8003950 <HAL_ADC_ConfigChannel+0x124>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b7c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8003b80:	06a5      	lsls	r5, r4, #26
 8003b82:	381e      	subs	r0, #30
 8003b84:	2401      	movs	r4, #1
 8003b86:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003b8a:	fa04 f606 	lsl.w	r6, r4, r6
 8003b8e:	0500      	lsls	r0, r0, #20
 8003b90:	4335      	orrs	r5, r6
 8003b92:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8003b96:	e781      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x270>
 8003b98:	80080000 	.word	0x80080000
 8003b9c:	50000300 	.word	0x50000300
 8003ba0:	c3210000 	.word	0xc3210000
 8003ba4:	90c00010 	.word	0x90c00010
 8003ba8:	c7520000 	.word	0xc7520000
 8003bac:	50000100 	.word	0x50000100
 8003bb0:	407f0000 	.word	0x407f0000
 8003bb4:	20000614 	.word	0x20000614
 8003bb8:	053e2d63 	.word	0x053e2d63
 8003bbc:	cb840000 	.word	0xcb840000
 8003bc0:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003bc8:	b11d      	cbz	r5, 8003bd2 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8003bca:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bce:	42ac      	cmp	r4, r5
 8003bd0:	d06f      	beq.n	8003cb2 <HAL_ADC_ConfigChannel+0x486>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003bd2:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8003bd4:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bd6:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bda:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003bde:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003be6:	b11d      	cbz	r5, 8003bf0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003be8:	fab5 f585 	clz	r5, r5
 8003bec:	42ae      	cmp	r6, r5
 8003bee:	d04e      	beq.n	8003c8e <HAL_ADC_ConfigChannel+0x462>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003bf0:	68a5      	ldr	r5, [r4, #8]
 8003bf2:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bf4:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003bf8:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003c00:	b11d      	cbz	r5, 8003c0a <HAL_ADC_ConfigChannel+0x3de>
  return __builtin_clz(value);
 8003c02:	fab5 f585 	clz	r5, r5
 8003c06:	42ae      	cmp	r6, r5
 8003c08:	d030      	beq.n	8003c6c <HAL_ADC_ConfigChannel+0x440>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c0a:	68e5      	ldr	r5, [r4, #12]
 8003c0c:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c0e:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c10:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003c18:	2d00      	cmp	r5, #0
 8003c1a:	f43f ae33 	beq.w	8003884 <HAL_ADC_ConfigChannel+0x58>
  return __builtin_clz(value);
 8003c1e:	fab5 f585 	clz	r5, r5
 8003c22:	e6f2      	b.n	8003a0a <HAL_ADC_ConfigChannel+0x1de>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c24:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003c28:	2d00      	cmp	r5, #0
 8003c2a:	d058      	beq.n	8003cde <HAL_ADC_ConfigChannel+0x4b2>
  return __builtin_clz(value);
 8003c2c:	fab5 f585 	clz	r5, r5
 8003c30:	3501      	adds	r5, #1
 8003c32:	06ad      	lsls	r5, r5, #26
 8003c34:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c38:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8003c3c:	2c00      	cmp	r4, #0
 8003c3e:	d04c      	beq.n	8003cda <HAL_ADC_ConfigChannel+0x4ae>
  return __builtin_clz(value);
 8003c40:	fab4 f484 	clz	r4, r4
 8003c44:	3401      	adds	r4, #1
 8003c46:	f004 041f 	and.w	r4, r4, #31
 8003c4a:	2601      	movs	r6, #1
 8003c4c:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c50:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c52:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003c56:	2800      	cmp	r0, #0
 8003c58:	d044      	beq.n	8003ce4 <HAL_ADC_ConfigChannel+0x4b8>
  return __builtin_clz(value);
 8003c5a:	fab0 f480 	clz	r4, r0
 8003c5e:	3401      	adds	r4, #1
 8003c60:	f004 041f 	and.w	r4, r4, #31
 8003c64:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003c68:	0520      	lsls	r0, r4, #20
 8003c6a:	e717      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x270>
  MODIFY_REG(*preg,
 8003c6c:	6838      	ldr	r0, [r7, #0]
 8003c6e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003c72:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c74:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c76:	68e5      	ldr	r5, [r4, #12]
 8003c78:	68e6      	ldr	r6, [r4, #12]
 8003c7a:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c7e:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c82:	340c      	adds	r4, #12
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c84:	2d00      	cmp	r5, #0
 8003c86:	d1c5      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x3e8>
 8003c88:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8003c8c:	e6bd      	b.n	8003a0a <HAL_ADC_ConfigChannel+0x1de>
  MODIFY_REG(*preg,
 8003c8e:	6838      	ldr	r0, [r7, #0]
 8003c90:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003c94:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c96:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c98:	68a5      	ldr	r5, [r4, #8]
 8003c9a:	68a6      	ldr	r6, [r4, #8]
 8003c9c:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ca0:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ca4:	f104 0708 	add.w	r7, r4, #8
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ca8:	2d00      	cmp	r5, #0
 8003caa:	d1a7      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x3d0>
 8003cac:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8003cb0:	e6a3      	b.n	80039fa <HAL_ADC_ConfigChannel+0x1ce>
  MODIFY_REG(*preg,
 8003cb2:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8003cb4:	4614      	mov	r4, r2
 8003cb6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003cba:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cbe:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003cc0:	6e55      	ldr	r5, [r2, #100]	; 0x64
 8003cc2:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8003cc4:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cc8:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ccc:	f102 0764 	add.w	r7, r2, #100	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cd0:	2d00      	cmp	r5, #0
 8003cd2:	d186      	bne.n	8003be2 <HAL_ADC_ConfigChannel+0x3b6>
 8003cd4:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8003cd8:	e686      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x1bc>
 8003cda:	2402      	movs	r4, #2
 8003cdc:	e7b8      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x424>
 8003cde:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8003ce2:	e7a9      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x40c>
 8003ce4:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8003ce8:	e6d8      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x270>
 8003cea:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8003cee:	e6b6      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x232>
 8003cf0:	4801      	ldr	r0, [pc, #4]	; (8003cf8 <HAL_ADC_ConfigChannel+0x4cc>)
 8003cf2:	e6d3      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x270>
 8003cf4:	2402      	movs	r4, #2
 8003cf6:	e6bf      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x24c>
 8003cf8:	fe500000 	.word	0xfe500000

08003cfc <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d00:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d04:	6944      	ldr	r4, [r0, #20]
{
 8003d06:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8003d08:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003d0a:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8003d0c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003d0e:	f000 8185 	beq.w	800401c <HAL_ADCEx_InjectedConfigChannel+0x320>
 8003d12:	2301      	movs	r3, #1
 8003d14:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003d18:	b1e4      	cbz	r4, 8003d54 <HAL_ADCEx_InjectedConfigChannel+0x58>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003d1a:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d019      	beq.n	8003d54 <HAL_ADCEx_InjectedConfigChannel+0x58>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003d20:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8003d22:	2c00      	cmp	r4, #0
 8003d24:	f040 811e 	bne.w	8003f64 <HAL_ADCEx_InjectedConfigChannel+0x268>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003d28:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003d2a:	2a00      	cmp	r2, #0
 8003d2c:	f000 8244 	beq.w	80041b8 <HAL_ADCEx_InjectedConfigChannel+0x4bc>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003d30:	1e5c      	subs	r4, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003d32:	f002 027c 	and.w	r2, r2, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003d36:	6acb      	ldr	r3, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003d38:	4322      	orrs	r2, r4
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003d3a:	4313      	orrs	r3, r2
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003d3c:	e9d1 2500 	ldrd	r2, r5, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003d40:	6684      	str	r4, [r0, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003d42:	f005 051f 	and.w	r5, r5, #31
 8003d46:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8003d4a:	40ac      	lsls	r4, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003d4c:	4323      	orrs	r3, r4
 8003d4e:	6643      	str	r3, [r0, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003d50:	6803      	ldr	r3, [r0, #0]
 8003d52:	e005      	b.n	8003d60 <HAL_ADCEx_InjectedConfigChannel+0x64>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003d54:	684b      	ldr	r3, [r1, #4]
 8003d56:	2b09      	cmp	r3, #9
 8003d58:	f000 80f0 	beq.w	8003f3c <HAL_ADCEx_InjectedConfigChannel+0x240>
 8003d5c:	680a      	ldr	r2, [r1, #0]
 8003d5e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d60:	689c      	ldr	r4, [r3, #8]
 8003d62:	0724      	lsls	r4, r4, #28
 8003d64:	d410      	bmi.n	8003d88 <HAL_ADCEx_InjectedConfigChannel+0x8c>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003d66:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8003d6a:	2c00      	cmp	r4, #0
 8003d6c:	f040 80dd 	bne.w	8003f2a <HAL_ADCEx_InjectedConfigChannel+0x22e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003d70:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8003d74:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8003d78:	68dd      	ldr	r5, [r3, #12]
 8003d7a:	0524      	lsls	r4, r4, #20
 8003d7c:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8003d80:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8003d84:	432c      	orrs	r4, r5
 8003d86:	60dc      	str	r4, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d88:	689c      	ldr	r4, [r3, #8]
 8003d8a:	f014 0404 	ands.w	r4, r4, #4
 8003d8e:	d058      	beq.n	8003e42 <HAL_ADCEx_InjectedConfigChannel+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d90:	689c      	ldr	r4, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d92:	2400      	movs	r4, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d94:	689d      	ldr	r5, [r3, #8]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d96:	07ef      	lsls	r7, r5, #31
 8003d98:	d40c      	bmi.n	8003db4 <HAL_ADCEx_InjectedConfigChannel+0xb8>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003d9a:	4dbe      	ldr	r5, [pc, #760]	; (8004094 <HAL_ADCEx_InjectedConfigChannel+0x398>)
 8003d9c:	68ce      	ldr	r6, [r1, #12]
 8003d9e:	42ae      	cmp	r6, r5
 8003da0:	f000 8105 	beq.w	8003fae <HAL_ADCEx_InjectedConfigChannel+0x2b2>
    CLEAR_BIT(ADCx->DIFSEL,
 8003da4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003da8:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003dac:	ea21 0105 	bic.w	r1, r1, r5
 8003db0:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8003db4:	49b8      	ldr	r1, [pc, #736]	; (8004098 <HAL_ADCEx_InjectedConfigChannel+0x39c>)
 8003db6:	420a      	tst	r2, r1
 8003db8:	d019      	beq.n	8003dee <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003dba:	4db8      	ldr	r5, [pc, #736]	; (800409c <HAL_ADCEx_InjectedConfigChannel+0x3a0>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003dbc:	4eb8      	ldr	r6, [pc, #736]	; (80040a0 <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
 8003dbe:	68a9      	ldr	r1, [r5, #8]
 8003dc0:	42b2      	cmp	r2, r6
 8003dc2:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 8003dc6:	d019      	beq.n	8003dfc <HAL_ADCEx_InjectedConfigChannel+0x100>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003dc8:	4eb6      	ldr	r6, [pc, #728]	; (80040a4 <HAL_ADCEx_InjectedConfigChannel+0x3a8>)
 8003dca:	42b2      	cmp	r2, r6
 8003dcc:	d016      	beq.n	8003dfc <HAL_ADCEx_InjectedConfigChannel+0x100>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003dce:	4eb6      	ldr	r6, [pc, #728]	; (80040a8 <HAL_ADCEx_InjectedConfigChannel+0x3ac>)
 8003dd0:	42b2      	cmp	r2, r6
 8003dd2:	f040 812c 	bne.w	800402e <HAL_ADCEx_InjectedConfigChannel+0x332>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003dd6:	01ce      	lsls	r6, r1, #7
 8003dd8:	d409      	bmi.n	8003dee <HAL_ADCEx_InjectedConfigChannel+0xf2>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003dda:	4ab4      	ldr	r2, [pc, #720]	; (80040ac <HAL_ADCEx_InjectedConfigChannel+0x3b0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d006      	beq.n	8003dee <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003de0:	68ab      	ldr	r3, [r5, #8]
 8003de2:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8003de6:	431f      	orrs	r7, r3
 8003de8:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8003dec:	60af      	str	r7, [r5, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dee:	2300      	movs	r3, #0
 8003df0:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003df4:	4620      	mov	r0, r4
 8003df6:	b002      	add	sp, #8
 8003df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003dfc:	020a      	lsls	r2, r1, #8
 8003dfe:	d4f6      	bmi.n	8003dee <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e04:	d1f3      	bne.n	8003dee <HAL_ADCEx_InjectedConfigChannel+0xf2>
 8003e06:	4aa5      	ldr	r2, [pc, #660]	; (800409c <HAL_ADCEx_InjectedConfigChannel+0x3a0>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8003e08:	49a9      	ldr	r1, [pc, #676]	; (80040b0 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 8003e0a:	6893      	ldr	r3, [r2, #8]
 8003e0c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8003e10:	431f      	orrs	r7, r3
 8003e12:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
 8003e16:	6097      	str	r7, [r2, #8]
 8003e18:	680b      	ldr	r3, [r1, #0]
 8003e1a:	4aa6      	ldr	r2, [pc, #664]	; (80040b4 <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 8003e1c:	099b      	lsrs	r3, r3, #6
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	099b      	lsrs	r3, r3, #6
 8003e24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	3318      	adds	r3, #24
 8003e2c:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8003e2e:	9b01      	ldr	r3, [sp, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0dc      	beq.n	8003dee <HAL_ADCEx_InjectedConfigChannel+0xf2>
          wait_loop_index--;
 8003e34:	9b01      	ldr	r3, [sp, #4]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8003e3a:	9b01      	ldr	r3, [sp, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1f9      	bne.n	8003e34 <HAL_ADCEx_InjectedConfigChannel+0x138>
 8003e40:	e7d5      	b.n	8003dee <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e42:	689d      	ldr	r5, [r3, #8]
 8003e44:	f015 0508 	ands.w	r5, r5, #8
 8003e48:	d1a4      	bne.n	8003d94 <HAL_ADCEx_InjectedConfigChannel+0x98>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003e4a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003e4c:	2c00      	cmp	r4, #0
 8003e4e:	f040 809f 	bne.w	8003f90 <HAL_ADCEx_InjectedConfigChannel+0x294>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003e52:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8003e56:	2c01      	cmp	r4, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003e58:	68dc      	ldr	r4, [r3, #12]
 8003e5a:	bf0c      	ite	eq
 8003e5c:	f044 7400 	orreq.w	r4, r4, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003e60:	f024 7400 	bicne.w	r4, r4, #33554432	; 0x2000000
 8003e64:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e66:	2400      	movs	r4, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8003e68:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 8003e6c:	2e01      	cmp	r6, #1
 8003e6e:	f000 8105 	beq.w	800407c <HAL_ADCEx_InjectedConfigChannel+0x380>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003e72:	691e      	ldr	r6, [r3, #16]
 8003e74:	f026 0602 	bic.w	r6, r6, #2
 8003e78:	611e      	str	r6, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003e7a:	688e      	ldr	r6, [r1, #8]
 8003e7c:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8003e80:	f000 80e8 	beq.w	8004054 <HAL_ADCEx_InjectedConfigChannel+0x358>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003e84:	ea4f 5ed2 	mov.w	lr, r2, lsr #23
 8003e88:	f00e 0e04 	and.w	lr, lr, #4
 8003e8c:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8003e90:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003e94:	f85e 700c 	ldr.w	r7, [lr, ip]
 8003e98:	f04f 0807 	mov.w	r8, #7
 8003e9c:	fa08 f802 	lsl.w	r8, r8, r2
 8003ea0:	4096      	lsls	r6, r2
 8003ea2:	ea27 0208 	bic.w	r2, r7, r8
 8003ea6:	4316      	orrs	r6, r2
 8003ea8:	f84e 600c 	str.w	r6, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003eac:	695a      	ldr	r2, [r3, #20]
 8003eae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003eb2:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003eb4:	f8d1 e010 	ldr.w	lr, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003eb8:	68df      	ldr	r7, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003eba:	f1be 0f04 	cmp.w	lr, #4
 8003ebe:	f000 8101 	beq.w	80040c4 <HAL_ADCEx_InjectedConfigChannel+0x3c8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ec2:	f103 0260 	add.w	r2, r3, #96	; 0x60
  MODIFY_REG(*preg,
 8003ec6:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 80040c0 <HAL_ADCEx_InjectedConfigChannel+0x3c4>
 8003eca:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
 8003ece:	ea06 0808 	and.w	r8, r6, r8
 8003ed2:	680e      	ldr	r6, [r1, #0]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003ed4:	f3c7 0cc1 	ubfx	ip, r7, #3, #2
 8003ed8:	f006 47f8 	and.w	r7, r6, #2080374784	; 0x7c000000
 8003edc:	694e      	ldr	r6, [r1, #20]
 8003ede:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003ee2:	fa06 f60c 	lsl.w	r6, r6, ip
 8003ee6:	ea47 0708 	orr.w	r7, r7, r8
 8003eea:	433e      	orrs	r6, r7
 8003eec:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8003ef0:	f842 602e 	str.w	r6, [r2, lr, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ef4:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 8003ef8:	698f      	ldr	r7, [r1, #24]
 8003efa:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 8003efe:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 8003f02:	433e      	orrs	r6, r7
 8003f04:	f842 602c 	str.w	r6, [r2, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003f08:	690f      	ldr	r7, [r1, #16]
 8003f0a:	f891 c01c 	ldrb.w	ip, [r1, #28]
  MODIFY_REG(*preg,
 8003f0e:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 8003f12:	f1bc 0f01 	cmp.w	ip, #1
 8003f16:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
 8003f1a:	bf08      	it	eq
 8003f1c:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8003f20:	4335      	orrs	r5, r6
 8003f22:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
 8003f26:	680a      	ldr	r2, [r1, #0]
}
 8003f28:	e734      	b.n	8003d94 <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR,
 8003f2a:	68dc      	ldr	r4, [r3, #12]
 8003f2c:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 8003f30:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8003f34:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8003f38:	60dc      	str	r4, [r3, #12]
 8003f3a:	e725      	b.n	8003d88 <HAL_ADCEx_InjectedConfigChannel+0x8c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003f3c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003f3e:	680a      	ldr	r2, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d070      	beq.n	8004026 <HAL_ADCEx_InjectedConfigChannel+0x32a>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003f44:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003f46:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003f4a:	0c55      	lsrs	r5, r2, #17
 8003f4c:	4323      	orrs	r3, r4
 8003f4e:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8003f52:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003f54:	6803      	ldr	r3, [r0, #0]
 8003f56:	4e58      	ldr	r6, [pc, #352]	; (80040b8 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 8003f58:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8003f5a:	4034      	ands	r4, r6
 8003f5c:	432c      	orrs	r4, r5
 8003f5e:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003f60:	6645      	str	r5, [r0, #100]	; 0x64
 8003f62:	e6fd      	b.n	8003d60 <HAL_ADCEx_InjectedConfigChannel+0x64>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003f64:	e9d1 2600 	ldrd	r2, r6, [r1]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003f68:	6e43      	ldr	r3, [r0, #100]	; 0x64
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003f6a:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8003f6e:	f006 061f 	and.w	r6, r6, #31
 8003f72:	40b5      	lsls	r5, r6
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003f74:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 8003f76:	3c01      	subs	r4, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003f78:	e9c0 5419 	strd	r5, r4, [r0, #100]	; 0x64
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003f7c:	6803      	ldr	r3, [r0, #0]
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003f7e:	2c00      	cmp	r4, #0
 8003f80:	f47f aeee 	bne.w	8003d60 <HAL_ADCEx_InjectedConfigChannel+0x64>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003f84:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8003f86:	4e4c      	ldr	r6, [pc, #304]	; (80040b8 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 8003f88:	4034      	ands	r4, r6
 8003f8a:	4325      	orrs	r5, r4
 8003f8c:	64dd      	str	r5, [r3, #76]	; 0x4c
 8003f8e:	e6e7      	b.n	8003d60 <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003f90:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8003f92:	2c00      	cmp	r4, #0
 8003f94:	f43f af5d 	beq.w	8003e52 <HAL_ADCEx_InjectedConfigChannel+0x156>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003f98:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8003f9c:	2c01      	cmp	r4, #1
 8003f9e:	f000 8158 	beq.w	8004252 <HAL_ADCEx_InjectedConfigChannel+0x556>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003fa2:	68dc      	ldr	r4, [r3, #12]
 8003fa4:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8003fa8:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003faa:	462c      	mov	r4, r5
 8003fac:	e75c      	b.n	8003e68 <HAL_ADCEx_InjectedConfigChannel+0x16c>
    SET_BIT(ADCx->DIFSEL,
 8003fae:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8003fb2:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8003fb6:	4335      	orrs	r5, r6
 8003fb8:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003fbc:	2e00      	cmp	r6, #0
 8003fbe:	f040 80c5 	bne.w	800414c <HAL_ADCEx_InjectedConfigChannel+0x450>
 8003fc2:	0e92      	lsrs	r2, r2, #26
 8003fc4:	1c55      	adds	r5, r2, #1
 8003fc6:	f005 071f 	and.w	r7, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fca:	2f09      	cmp	r7, #9
 8003fcc:	f240 80f7 	bls.w	80041be <HAL_ADCEx_InjectedConfigChannel+0x4c2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003fd0:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8003fd4:	06ae      	lsls	r6, r5, #26
 8003fd6:	3a1e      	subs	r2, #30
 8003fd8:	2501      	movs	r5, #1
 8003fda:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8003fde:	fa05 f707 	lsl.w	r7, r5, r7
 8003fe2:	0512      	lsls	r2, r2, #20
 8003fe4:	433e      	orrs	r6, r7
 8003fe6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fea:	4332      	orrs	r2, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003fec:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 8003ff0:	f00c 0c04 	and.w	ip, ip, #4
 8003ff4:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8003ff8:	688e      	ldr	r6, [r1, #8]
 8003ffa:	f85c 5007 	ldr.w	r5, [ip, r7]
 8003ffe:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004002:	f04f 0e07 	mov.w	lr, #7
 8004006:	fa0e fe02 	lsl.w	lr, lr, r2
 800400a:	ea25 050e 	bic.w	r5, r5, lr
 800400e:	fa06 f202 	lsl.w	r2, r6, r2
 8004012:	432a      	orrs	r2, r5
 8004014:	f84c 2007 	str.w	r2, [ip, r7]
 8004018:	680a      	ldr	r2, [r1, #0]
}
 800401a:	e6cb      	b.n	8003db4 <HAL_ADCEx_InjectedConfigChannel+0xb8>
  __HAL_LOCK(hadc);
 800401c:	2402      	movs	r4, #2
}
 800401e:	4620      	mov	r0, r4
 8004020:	b002      	add	sp, #8
 8004022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004026:	0c55      	lsrs	r5, r2, #17
 8004028:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 800402c:	e792      	b.n	8003f54 <HAL_ADCEx_InjectedConfigChannel+0x258>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800402e:	4e23      	ldr	r6, [pc, #140]	; (80040bc <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8004030:	42b2      	cmp	r2, r6
 8004032:	f47f aedc 	bne.w	8003dee <HAL_ADCEx_InjectedConfigChannel+0xf2>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004036:	0249      	lsls	r1, r1, #9
 8004038:	f53f aed9 	bmi.w	8003dee <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_VREFINT_INSTANCE(hadc))
 800403c:	4a1b      	ldr	r2, [pc, #108]	; (80040ac <HAL_ADCEx_InjectedConfigChannel+0x3b0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	f43f aed5 	beq.w	8003dee <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004044:	68ab      	ldr	r3, [r5, #8]
 8004046:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800404a:	431f      	orrs	r7, r3
 800404c:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 8004050:	60af      	str	r7, [r5, #8]
}
 8004052:	e6cc      	b.n	8003dee <HAL_ADCEx_InjectedConfigChannel+0xf2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004054:	0dd7      	lsrs	r7, r2, #23
 8004056:	f007 0704 	and.w	r7, r7, #4
 800405a:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 800405e:	f3c2 5e04 	ubfx	lr, r2, #20, #5
 8004062:	f04f 0c07 	mov.w	ip, #7
 8004066:	59ba      	ldr	r2, [r7, r6]
 8004068:	fa0c fc0e 	lsl.w	ip, ip, lr
 800406c:	ea22 020c 	bic.w	r2, r2, ip
 8004070:	51ba      	str	r2, [r7, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004072:	695a      	ldr	r2, [r3, #20]
 8004074:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004078:	615a      	str	r2, [r3, #20]
}
 800407a:	e71b      	b.n	8003eb4 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
      MODIFY_REG(hadc->Instance->CFGR2,
 800407c:	691f      	ldr	r7, [r3, #16]
 800407e:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8004080:	f427 7cff 	bic.w	ip, r7, #510	; 0x1fe
 8004084:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 8004086:	433e      	orrs	r6, r7
 8004088:	ea46 060c 	orr.w	r6, r6, ip
 800408c:	f046 0602 	orr.w	r6, r6, #2
 8004090:	611e      	str	r6, [r3, #16]
 8004092:	e6f2      	b.n	8003e7a <HAL_ADCEx_InjectedConfigChannel+0x17e>
 8004094:	407f0000 	.word	0x407f0000
 8004098:	80080000 	.word	0x80080000
 800409c:	50000300 	.word	0x50000300
 80040a0:	c3210000 	.word	0xc3210000
 80040a4:	90c00010 	.word	0x90c00010
 80040a8:	c7520000 	.word	0xc7520000
 80040ac:	50000100 	.word	0x50000100
 80040b0:	20000614 	.word	0x20000614
 80040b4:	053e2d63 	.word	0x053e2d63
 80040b8:	04104000 	.word	0x04104000
 80040bc:	cb840000 	.word	0xcb840000
 80040c0:	03fff000 	.word	0x03fff000
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80040c4:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80040c6:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80040c8:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80040ca:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040ce:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80040d2:	2e00      	cmp	r6, #0
 80040d4:	d07d      	beq.n	80041d2 <HAL_ADCEx_InjectedConfigChannel+0x4d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d6:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80040da:	b126      	cbz	r6, 80040e6 <HAL_ADCEx_InjectedConfigChannel+0x3ea>
  return __builtin_clz(value);
 80040dc:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040e0:	42b5      	cmp	r5, r6
 80040e2:	f000 80bb 	beq.w	800425c <HAL_ADCEx_InjectedConfigChannel+0x560>
 80040e6:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80040e8:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040ea:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040ee:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80040f2:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f6:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80040fa:	b126      	cbz	r6, 8004106 <HAL_ADCEx_InjectedConfigChannel+0x40a>
  return __builtin_clz(value);
 80040fc:	fab6 f686 	clz	r6, r6
 8004100:	42b7      	cmp	r7, r6
 8004102:	f000 80c0 	beq.w	8004286 <HAL_ADCEx_InjectedConfigChannel+0x58a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004106:	68ae      	ldr	r6, [r5, #8]
 8004108:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800410a:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800410e:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004116:	b126      	cbz	r6, 8004122 <HAL_ADCEx_InjectedConfigChannel+0x426>
  return __builtin_clz(value);
 8004118:	fab6 f686 	clz	r6, r6
 800411c:	42b7      	cmp	r7, r6
 800411e:	f000 80c7 	beq.w	80042b0 <HAL_ADCEx_InjectedConfigChannel+0x5b4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004122:	68ee      	ldr	r6, [r5, #12]
 8004124:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004126:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004128:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412c:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004130:	2e00      	cmp	r6, #0
 8004132:	f43f ae2f 	beq.w	8003d94 <HAL_ADCEx_InjectedConfigChannel+0x98>
  return __builtin_clz(value);
 8004136:	fab6 f686 	clz	r6, r6
 800413a:	42be      	cmp	r6, r7
 800413c:	f47f ae2a 	bne.w	8003d94 <HAL_ADCEx_InjectedConfigChannel+0x98>
  MODIFY_REG(*preg,
 8004140:	682a      	ldr	r2, [r5, #0]
 8004142:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004146:	602a      	str	r2, [r5, #0]
 8004148:	680a      	ldr	r2, [r1, #0]
}
 800414a:	e623      	b.n	8003d94 <HAL_ADCEx_InjectedConfigChannel+0x98>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414c:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004150:	2d00      	cmp	r5, #0
 8004152:	d05a      	beq.n	800420a <HAL_ADCEx_InjectedConfigChannel+0x50e>
  return __builtin_clz(value);
 8004154:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004158:	3501      	adds	r5, #1
 800415a:	f005 051f 	and.w	r5, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800415e:	2d09      	cmp	r5, #9
 8004160:	d953      	bls.n	800420a <HAL_ADCEx_InjectedConfigChannel+0x50e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004162:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004166:	2e00      	cmp	r6, #0
 8004168:	f000 80c2 	beq.w	80042f0 <HAL_ADCEx_InjectedConfigChannel+0x5f4>
  return __builtin_clz(value);
 800416c:	fab6 f686 	clz	r6, r6
 8004170:	3601      	adds	r6, #1
 8004172:	06b6      	lsls	r6, r6, #26
 8004174:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004178:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800417c:	2d00      	cmp	r5, #0
 800417e:	f000 80b5 	beq.w	80042ec <HAL_ADCEx_InjectedConfigChannel+0x5f0>
  return __builtin_clz(value);
 8004182:	fab5 f585 	clz	r5, r5
 8004186:	3501      	adds	r5, #1
 8004188:	f005 051f 	and.w	r5, r5, #31
 800418c:	2701      	movs	r7, #1
 800418e:	fa07 f505 	lsl.w	r5, r7, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004192:	432e      	orrs	r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004194:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004198:	2a00      	cmp	r2, #0
 800419a:	f000 80a5 	beq.w	80042e8 <HAL_ADCEx_InjectedConfigChannel+0x5ec>
  return __builtin_clz(value);
 800419e:	fab2 f582 	clz	r5, r2
 80041a2:	3501      	adds	r5, #1
 80041a4:	f005 051f 	and.w	r5, r5, #31
 80041a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041ac:	f1a5 021e 	sub.w	r2, r5, #30
 80041b0:	0512      	lsls	r2, r2, #20
 80041b2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80041b6:	e718      	b.n	8003fea <HAL_ADCEx_InjectedConfigChannel+0x2ee>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 80041b8:	3b01      	subs	r3, #1
 80041ba:	461c      	mov	r4, r3
 80041bc:	e5be      	b.n	8003d3c <HAL_ADCEx_InjectedConfigChannel+0x40>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80041be:	06ae      	lsls	r6, r5, #26
 80041c0:	2501      	movs	r5, #1
 80041c2:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80041c6:	40bd      	lsls	r5, r7
 80041c8:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 80041cc:	432e      	orrs	r6, r5
 80041ce:	0512      	lsls	r2, r2, #20
 80041d0:	e70b      	b.n	8003fea <HAL_ADCEx_InjectedConfigChannel+0x2ee>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80041d2:	f3c2 6684 	ubfx	r6, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041d6:	42b5      	cmp	r5, r6
 80041d8:	d040      	beq.n	800425c <HAL_ADCEx_InjectedConfigChannel+0x560>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041da:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80041dc:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041de:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041e2:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80041e6:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 80041ea:	42b7      	cmp	r7, r6
 80041ec:	d04b      	beq.n	8004286 <HAL_ADCEx_InjectedConfigChannel+0x58a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041ee:	68af      	ldr	r7, [r5, #8]
 80041f0:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041f2:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041f6:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80041fa:	42b7      	cmp	r7, r6
 80041fc:	d058      	beq.n	80042b0 <HAL_ADCEx_InjectedConfigChannel+0x5b4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041fe:	68ef      	ldr	r7, [r5, #12]
 8004200:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004202:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004204:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004208:	e797      	b.n	800413a <HAL_ADCEx_InjectedConfigChannel+0x43e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420a:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800420e:	2e00      	cmp	r6, #0
 8004210:	d064      	beq.n	80042dc <HAL_ADCEx_InjectedConfigChannel+0x5e0>
  return __builtin_clz(value);
 8004212:	fab6 f686 	clz	r6, r6
 8004216:	3601      	adds	r6, #1
 8004218:	06b6      	lsls	r6, r6, #26
 800421a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421e:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004222:	2d00      	cmp	r5, #0
 8004224:	d058      	beq.n	80042d8 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
  return __builtin_clz(value);
 8004226:	fab5 f585 	clz	r5, r5
 800422a:	3501      	adds	r5, #1
 800422c:	f005 051f 	and.w	r5, r5, #31
 8004230:	2701      	movs	r7, #1
 8004232:	fa07 f505 	lsl.w	r5, r7, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004236:	432e      	orrs	r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004238:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800423c:	2a00      	cmp	r2, #0
 800423e:	d050      	beq.n	80042e2 <HAL_ADCEx_InjectedConfigChannel+0x5e6>
  return __builtin_clz(value);
 8004240:	fab2 f582 	clz	r5, r2
 8004244:	3501      	adds	r5, #1
 8004246:	f005 051f 	and.w	r5, r5, #31
 800424a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800424e:	052a      	lsls	r2, r5, #20
 8004250:	e6cb      	b.n	8003fea <HAL_ADCEx_InjectedConfigChannel+0x2ee>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004252:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 8004254:	f046 0620 	orr.w	r6, r6, #32
 8004258:	65c6      	str	r6, [r0, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 800425a:	e605      	b.n	8003e68 <HAL_ADCEx_InjectedConfigChannel+0x16c>
  MODIFY_REG(*preg,
 800425c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800425e:	461d      	mov	r5, r3
 8004260:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004264:	f845 2f60 	str.w	r2, [r5, #96]!
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004268:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800426a:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 800426c:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 800426e:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004272:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004276:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800427a:	2e00      	cmp	r6, #0
 800427c:	f47f af3b 	bne.w	80040f6 <HAL_ADCEx_InjectedConfigChannel+0x3fa>
 8004280:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8004284:	e7b1      	b.n	80041ea <HAL_ADCEx_InjectedConfigChannel+0x4ee>
  MODIFY_REG(*preg,
 8004286:	f8dc 2000 	ldr.w	r2, [ip]
 800428a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800428e:	f8cc 2000 	str.w	r2, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004292:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004294:	68ae      	ldr	r6, [r5, #8]
 8004296:	68af      	ldr	r7, [r5, #8]
 8004298:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800429c:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042a0:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80042a4:	2e00      	cmp	r6, #0
 80042a6:	f47f af34 	bne.w	8004112 <HAL_ADCEx_InjectedConfigChannel+0x416>
 80042aa:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80042ae:	e7a4      	b.n	80041fa <HAL_ADCEx_InjectedConfigChannel+0x4fe>
  MODIFY_REG(*preg,
 80042b0:	f8dc 2000 	ldr.w	r2, [ip]
 80042b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80042b8:	f8cc 2000 	str.w	r2, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80042bc:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042be:	68ee      	ldr	r6, [r5, #12]
 80042c0:	68ef      	ldr	r7, [r5, #12]
 80042c2:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80042c6:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042ca:	350c      	adds	r5, #12
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80042cc:	2e00      	cmp	r6, #0
 80042ce:	f47f af2d 	bne.w	800412c <HAL_ADCEx_InjectedConfigChannel+0x430>
 80042d2:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80042d6:	e730      	b.n	800413a <HAL_ADCEx_InjectedConfigChannel+0x43e>
 80042d8:	2502      	movs	r5, #2
 80042da:	e7ac      	b.n	8004236 <HAL_ADCEx_InjectedConfigChannel+0x53a>
 80042dc:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 80042e0:	e79d      	b.n	800421e <HAL_ADCEx_InjectedConfigChannel+0x522>
 80042e2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80042e6:	e680      	b.n	8003fea <HAL_ADCEx_InjectedConfigChannel+0x2ee>
 80042e8:	4a03      	ldr	r2, [pc, #12]	; (80042f8 <HAL_ADCEx_InjectedConfigChannel+0x5fc>)
 80042ea:	e67e      	b.n	8003fea <HAL_ADCEx_InjectedConfigChannel+0x2ee>
 80042ec:	2502      	movs	r5, #2
 80042ee:	e750      	b.n	8004192 <HAL_ADCEx_InjectedConfigChannel+0x496>
 80042f0:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 80042f4:	e740      	b.n	8004178 <HAL_ADCEx_InjectedConfigChannel+0x47c>
 80042f6:	bf00      	nop
 80042f8:	fe500000 	.word	0xfe500000

080042fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80042fc:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042fe:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004302:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8004304:	2a01      	cmp	r2, #1
{
 8004306:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8004308:	d04f      	beq.n	80043aa <HAL_ADCEx_MultiModeConfigChannel+0xae>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800430a:	6804      	ldr	r4, [r0, #0]
 800430c:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800430e:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004310:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004312:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004316:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8004318:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800431c:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800431e:	d008      	beq.n	8004332 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004320:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004322:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004326:	f041 0120 	orr.w	r1, r1, #32
 800432a:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800432c:	b01c      	add	sp, #112	; 0x70
 800432e:	bcf0      	pop	{r4, r5, r6, r7}
 8004330:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004332:	4a23      	ldr	r2, [pc, #140]	; (80043c0 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8004334:	6890      	ldr	r0, [r2, #8]
 8004336:	0740      	lsls	r0, r0, #29
 8004338:	d50b      	bpl.n	8004352 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800433a:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800433c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800433e:	f042 0220 	orr.w	r2, r2, #32
 8004342:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004344:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 800434c:	b01c      	add	sp, #112	; 0x70
 800434e:	bcf0      	pop	{r4, r5, r6, r7}
 8004350:	4770      	bx	lr
 8004352:	68a0      	ldr	r0, [r4, #8]
 8004354:	0746      	lsls	r6, r0, #29
 8004356:	d4f1      	bmi.n	800433c <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004358:	b1d5      	cbz	r5, 8004390 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800435a:	4e1a      	ldr	r6, [pc, #104]	; (80043c4 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 800435c:	684f      	ldr	r7, [r1, #4]
 800435e:	68b0      	ldr	r0, [r6, #8]
 8004360:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8004364:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8004368:	4338      	orrs	r0, r7
 800436a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 800436e:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004370:	68a4      	ldr	r4, [r4, #8]
 8004372:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004374:	4320      	orrs	r0, r4
 8004376:	f010 0001 	ands.w	r0, r0, #1
 800437a:	d114      	bne.n	80043a6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        MODIFY_REG(tmpADC_Common->CCR,
 800437c:	68b4      	ldr	r4, [r6, #8]
 800437e:	688a      	ldr	r2, [r1, #8]
 8004380:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 8004384:	4315      	orrs	r5, r2
 8004386:	f021 010f 	bic.w	r1, r1, #15
 800438a:	430d      	orrs	r5, r1
 800438c:	60b5      	str	r5, [r6, #8]
 800438e:	e7da      	b.n	8004346 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004390:	4d0c      	ldr	r5, [pc, #48]	; (80043c4 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8004392:	68a9      	ldr	r1, [r5, #8]
 8004394:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8004398:	60a9      	str	r1, [r5, #8]
 800439a:	68a1      	ldr	r1, [r4, #8]
 800439c:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800439e:	4308      	orrs	r0, r1
 80043a0:	f010 0001 	ands.w	r0, r0, #1
 80043a4:	d005      	beq.n	80043b2 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043a6:	2000      	movs	r0, #0
 80043a8:	e7cd      	b.n	8004346 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80043aa:	2002      	movs	r0, #2
}
 80043ac:	b01c      	add	sp, #112	; 0x70
 80043ae:	bcf0      	pop	{r4, r5, r6, r7}
 80043b0:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80043b2:	68aa      	ldr	r2, [r5, #8]
 80043b4:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80043b8:	f022 020f 	bic.w	r2, r2, #15
 80043bc:	60aa      	str	r2, [r5, #8]
 80043be:	e7c2      	b.n	8004346 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80043c0:	50000100 	.word	0x50000100
 80043c4:	50000300 	.word	0x50000300

080043c8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80043c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ca:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80043cc:	2300      	movs	r3, #0
 80043ce:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d054      	beq.n	800447e <HAL_COMP_Init+0xb6>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80043d4:	6802      	ldr	r2, [r0, #0]
 80043d6:	6813      	ldr	r3, [r2, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	4604      	mov	r4, r0
 80043dc:	db4f      	blt.n	800447e <HAL_COMP_Init+0xb6>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80043de:	7f43      	ldrb	r3, [r0, #29]
 80043e0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d078      	beq.n	80044da <HAL_COMP_Init+0x112>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 80043e8:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
    tmp_csr = (  hcomp->Init.InputMinus
 80043ec:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
               | hcomp->Init.BlankingSrce
 80043f0:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80043f2:	6817      	ldr	r7, [r2, #0]
               | hcomp->Init.InputPlus
 80043f4:	4333      	orrs	r3, r6
               | hcomp->Init.BlankingSrce
 80043f6:	430b      	orrs	r3, r1
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80043f8:	6816      	ldr	r6, [r2, #0]
 80043fa:	4940      	ldr	r1, [pc, #256]	; (80044fc <HAL_COMP_Init+0x134>)
               | hcomp->Init.Hysteresis
 80043fc:	432b      	orrs	r3, r5
    tmp_csr = (  hcomp->Init.InputMinus
 80043fe:	4303      	orrs	r3, r0
    MODIFY_REG(hcomp->Instance->CSR,
 8004400:	4031      	ands	r1, r6
 8004402:	430b      	orrs	r3, r1
 8004404:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8004406:	6813      	ldr	r3, [r2, #0]
 8004408:	0218      	lsls	r0, r3, #8
 800440a:	d501      	bpl.n	8004410 <HAL_COMP_Init+0x48>
 800440c:	023b      	lsls	r3, r7, #8
 800440e:	d54e      	bpl.n	80044ae <HAL_COMP_Init+0xe6>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004410:	4b3b      	ldr	r3, [pc, #236]	; (8004500 <HAL_COMP_Init+0x138>)
 8004412:	429a      	cmp	r2, r3
 8004414:	d067      	beq.n	80044e6 <HAL_COMP_Init+0x11e>
 8004416:	4b3b      	ldr	r3, [pc, #236]	; (8004504 <HAL_COMP_Init+0x13c>)
 8004418:	429a      	cmp	r2, r3
 800441a:	d069      	beq.n	80044f0 <HAL_COMP_Init+0x128>
 800441c:	3304      	adds	r3, #4
 800441e:	429a      	cmp	r2, r3
 8004420:	bf0b      	itete	eq
 8004422:	f06f 5200 	mvneq.w	r2, #536870912	; 0x20000000
 8004426:	f06f 4280 	mvnne.w	r2, #1073741824	; 0x40000000
 800442a:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 800442e:	f04f 4180 	movne.w	r1, #1073741824	; 0x40000000

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004432:	69a3      	ldr	r3, [r4, #24]
 8004434:	079f      	lsls	r7, r3, #30
 8004436:	d025      	beq.n	8004484 <HAL_COMP_Init+0xbc>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004438:	4d33      	ldr	r5, [pc, #204]	; (8004508 <HAL_COMP_Init+0x140>)
 800443a:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800443c:	06de      	lsls	r6, r3, #27
 800443e:	bf4c      	ite	mi
 8004440:	4308      	orrmi	r0, r1
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004442:	4010      	andpl	r0, r2
 8004444:	60a8      	str	r0, [r5, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004446:	4d30      	ldr	r5, [pc, #192]	; (8004508 <HAL_COMP_Init+0x140>)
 8004448:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800444a:	069f      	lsls	r7, r3, #26
 800444c:	bf4c      	ite	mi
 800444e:	4308      	orrmi	r0, r1
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004450:	4010      	andpl	r0, r2
 8004452:	60e8      	str	r0, [r5, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004454:	482c      	ldr	r0, [pc, #176]	; (8004508 <HAL_COMP_Init+0x140>)
 8004456:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004458:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800445a:	079e      	lsls	r6, r3, #30
 800445c:	bf4c      	ite	mi
 800445e:	430d      	orrmi	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004460:	4015      	andpl	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004462:	07db      	lsls	r3, r3, #31
 8004464:	6045      	str	r5, [r0, #4]
 8004466:	d51d      	bpl.n	80044a4 <HAL_COMP_Init+0xdc>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004468:	4b27      	ldr	r3, [pc, #156]	; (8004508 <HAL_COMP_Init+0x140>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	4311      	orrs	r1, r2
 800446e:	6019      	str	r1, [r3, #0]
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004470:	7f63      	ldrb	r3, [r4, #29]
 8004472:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004476:	b18b      	cbz	r3, 800449c <HAL_COMP_Init+0xd4>
  HAL_StatusTypeDef status = HAL_OK;
 8004478:	2000      	movs	r0, #0
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 800447a:	b003      	add	sp, #12
 800447c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 800447e:	2001      	movs	r0, #1
}
 8004480:	b003      	add	sp, #12
 8004482:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004484:	4b20      	ldr	r3, [pc, #128]	; (8004508 <HAL_COMP_Init+0x140>)
 8004486:	6859      	ldr	r1, [r3, #4]
 8004488:	4011      	ands	r1, r2
 800448a:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800448c:	6819      	ldr	r1, [r3, #0]
 800448e:	400a      	ands	r2, r1
 8004490:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004492:	7f63      	ldrb	r3, [r4, #29]
 8004494:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1ed      	bne.n	8004478 <HAL_COMP_Init+0xb0>
      hcomp->State = HAL_COMP_STATE_READY;
 800449c:	2301      	movs	r3, #1
 800449e:	7763      	strb	r3, [r4, #29]
}
 80044a0:	b003      	add	sp, #12
 80044a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044a4:	4918      	ldr	r1, [pc, #96]	; (8004508 <HAL_COMP_Init+0x140>)
 80044a6:	680b      	ldr	r3, [r1, #0]
 80044a8:	401a      	ands	r2, r3
 80044aa:	600a      	str	r2, [r1, #0]
}
 80044ac:	e7f1      	b.n	8004492 <HAL_COMP_Init+0xca>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044ae:	4b17      	ldr	r3, [pc, #92]	; (800450c <HAL_COMP_Init+0x144>)
 80044b0:	4917      	ldr	r1, [pc, #92]	; (8004510 <HAL_COMP_Init+0x148>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	099b      	lsrs	r3, r3, #6
 80044b6:	fba1 1303 	umull	r1, r3, r1, r3
 80044ba:	099b      	lsrs	r3, r3, #6
 80044bc:	3301      	adds	r3, #1
 80044be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80044c6:	9b01      	ldr	r3, [sp, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0a1      	beq.n	8004410 <HAL_COMP_Init+0x48>
        wait_loop_index--;
 80044cc:	9b01      	ldr	r3, [sp, #4]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80044d2:	9b01      	ldr	r3, [sp, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1f9      	bne.n	80044cc <HAL_COMP_Init+0x104>
 80044d8:	e79a      	b.n	8004410 <HAL_COMP_Init+0x48>
      hcomp->Lock = HAL_UNLOCKED;
 80044da:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 80044dc:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 80044de:	f7fe f917 	bl	8002710 <HAL_COMP_MspInit>
 80044e2:	6822      	ldr	r2, [r4, #0]
 80044e4:	e780      	b.n	80043e8 <HAL_COMP_Init+0x20>
 80044e6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80044ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044ee:	e7a0      	b.n	8004432 <HAL_COMP_Init+0x6a>
 80044f0:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80044f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044f8:	e79b      	b.n	8004432 <HAL_COMP_Init+0x6a>
 80044fa:	bf00      	nop
 80044fc:	ff007e0f 	.word	0xff007e0f
 8004500:	40010200 	.word	0x40010200
 8004504:	40010204 	.word	0x40010204
 8004508:	40010400 	.word	0x40010400
 800450c:	20000614 	.word	0x20000614
 8004510:	053e2d63 	.word	0x053e2d63

08004514 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004514:	b1b0      	cbz	r0, 8004544 <HAL_CORDIC_Init+0x30>
{
 8004516:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004518:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800451c:	4604      	mov	r4, r0
 800451e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004522:	b153      	cbz	r3, 800453a <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004524:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004526:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004528:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 800452a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 800452e:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8004532:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004536:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8004538:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 800453a:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 800453e:	f7fe f947 	bl	80027d0 <HAL_CORDIC_MspInit>
 8004542:	e7ef      	b.n	8004524 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8004544:	2001      	movs	r0, #1
}
 8004546:	4770      	bx	lr

08004548 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004548:	4908      	ldr	r1, [pc, #32]	; (800456c <HAL_NVIC_SetPriorityGrouping+0x24>)
 800454a:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800454c:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800454e:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004550:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8004554:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004556:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800455a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800455c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004564:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8004568:	60cb      	str	r3, [r1, #12]
 800456a:	4770      	bx	lr
 800456c:	e000ed00 	.word	0xe000ed00

08004570 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004570:	4b19      	ldr	r3, [pc, #100]	; (80045d8 <HAL_NVIC_SetPriority+0x68>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004578:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800457a:	f1c3 0507 	rsb	r5, r3, #7
 800457e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004580:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004584:	bf28      	it	cs
 8004586:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004588:	2c06      	cmp	r4, #6
 800458a:	d919      	bls.n	80045c0 <HAL_NVIC_SetPriority+0x50>
 800458c:	3b03      	subs	r3, #3
 800458e:	f04f 34ff 	mov.w	r4, #4294967295
 8004592:	409c      	lsls	r4, r3
 8004594:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004598:	f04f 34ff 	mov.w	r4, #4294967295
 800459c:	40ac      	lsls	r4, r5
 800459e:	ea21 0104 	bic.w	r1, r1, r4
 80045a2:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80045a4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045a6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80045aa:	db0c      	blt.n	80045c6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ac:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80045b0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80045b4:	0109      	lsls	r1, r1, #4
 80045b6:	b2c9      	uxtb	r1, r1
 80045b8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80045bc:	bc30      	pop	{r4, r5}
 80045be:	4770      	bx	lr
 80045c0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045c2:	4613      	mov	r3, r2
 80045c4:	e7e8      	b.n	8004598 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c6:	4b05      	ldr	r3, [pc, #20]	; (80045dc <HAL_NVIC_SetPriority+0x6c>)
 80045c8:	f000 000f 	and.w	r0, r0, #15
 80045cc:	0109      	lsls	r1, r1, #4
 80045ce:	4403      	add	r3, r0
 80045d0:	b2c9      	uxtb	r1, r1
 80045d2:	7619      	strb	r1, [r3, #24]
 80045d4:	bc30      	pop	{r4, r5}
 80045d6:	4770      	bx	lr
 80045d8:	e000ed00 	.word	0xe000ed00
 80045dc:	e000ecfc 	.word	0xe000ecfc

080045e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80045e0:	2800      	cmp	r0, #0
 80045e2:	db07      	blt.n	80045f4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045e4:	4a04      	ldr	r2, [pc, #16]	; (80045f8 <HAL_NVIC_EnableIRQ+0x18>)
 80045e6:	f000 011f 	and.w	r1, r0, #31
 80045ea:	2301      	movs	r3, #1
 80045ec:	0940      	lsrs	r0, r0, #5
 80045ee:	408b      	lsls	r3, r1
 80045f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	e000e100 	.word	0xe000e100

080045fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045fc:	3801      	subs	r0, #1
 80045fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004602:	d20e      	bcs.n	8004622 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004604:	4b08      	ldr	r3, [pc, #32]	; (8004628 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004606:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004608:	4c08      	ldr	r4, [pc, #32]	; (800462c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800460a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800460c:	20f0      	movs	r0, #240	; 0xf0
 800460e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004612:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004614:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004616:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004618:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 800461a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800461e:	6019      	str	r1, [r3, #0]
 8004620:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004622:	2001      	movs	r0, #1
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	e000e010 	.word	0xe000e010
 800462c:	e000ed00 	.word	0xe000ed00

08004630 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop

08004634 <HAL_SYSTICK_IRQHandler>:
{
 8004634:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004636:	f7ff fffb 	bl	8004630 <HAL_SYSTICK_Callback>
}
 800463a:	bd08      	pop	{r3, pc}

0800463c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 800463c:	b188      	cbz	r0, 8004662 <HAL_DAC_Init+0x26>
{
 800463e:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004640:	7903      	ldrb	r3, [r0, #4]
 8004642:	4604      	mov	r4, r0
 8004644:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004648:	b13b      	cbz	r3, 800465a <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800464a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 800464c:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800464e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8004650:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004652:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8004654:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8004656:	4618      	mov	r0, r3
}
 8004658:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800465a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800465c:	f7fe f8d0 	bl	8002800 <HAL_DAC_MspInit>
 8004660:	e7f3      	b.n	800464a <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8004662:	2001      	movs	r0, #1
}
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop

08004668 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800466c:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800466e:	688f      	ldr	r7, [r1, #8]
  __HAL_LOCK(hdac);
 8004670:	2b01      	cmp	r3, #1
 8004672:	f000 80c5 	beq.w	8004800 <HAL_DAC_ConfigChannel+0x198>
 8004676:	4614      	mov	r4, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004678:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 800467a:	2201      	movs	r2, #1

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800467c:	2f04      	cmp	r7, #4
 800467e:	4606      	mov	r6, r0
 8004680:	460d      	mov	r5, r1
  __HAL_LOCK(hdac);
 8004682:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8004684:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004686:	d077      	beq.n	8004778 <HAL_DAC_ConfigChannel+0x110>
 8004688:	6803      	ldr	r3, [r0, #0]
 800468a:	f004 0410 	and.w	r4, r4, #16
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800468e:	69ea      	ldr	r2, [r5, #28]
 8004690:	2a01      	cmp	r2, #1
 8004692:	d108      	bne.n	80046a6 <HAL_DAC_ConfigChannel+0x3e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004694:	6b99      	ldr	r1, [r3, #56]	; 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004696:	6a2a      	ldr	r2, [r5, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004698:	201f      	movs	r0, #31
 800469a:	40a0      	lsls	r0, r4
 800469c:	ea21 0100 	bic.w	r1, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046a0:	40a2      	lsls	r2, r4
 80046a2:	430a      	orrs	r2, r1
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80046a4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80046a6:	69a9      	ldr	r1, [r5, #24]
  tmpreg1 = hdac->Instance->MCR;
 80046a8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80046aa:	2207      	movs	r2, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80046ac:	2901      	cmp	r1, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80046ae:	fa02 fc04 	lsl.w	ip, r2, r4
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80046b2:	696a      	ldr	r2, [r5, #20]
 80046b4:	d05e      	beq.n	8004774 <HAL_DAC_ConfigChannel+0x10c>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80046b6:	2902      	cmp	r1, #2
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80046b8:	bf16      	itet	ne
 80046ba:	fab2 f182 	clzne	r1, r2
    connectOnChip = DAC_MCR_MODE1_0;
 80046be:	2101      	moveq	r1, #1
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80046c0:	0949      	lsrne	r1, r1, #5
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80046c2:	4311      	orrs	r1, r2
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80046c4:	792a      	ldrb	r2, [r5, #4]
 80046c6:	2a01      	cmp	r2, #1
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80046c8:	f44f 7200 	mov.w	r2, #512	; 0x200
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80046cc:	f44f 7880 	mov.w	r8, #256	; 0x100
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80046d0:	fa02 f204 	lsl.w	r2, r2, r4
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80046d4:	fa08 f804 	lsl.w	r8, r8, r4
 80046d8:	ea42 020c 	orr.w	r2, r2, ip
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80046dc:	ea47 0701 	orr.w	r7, r7, r1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80046e0:	ea20 0202 	bic.w	r2, r0, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80046e4:	7969      	ldrb	r1, [r5, #5]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80046e6:	ea6f 0808 	mvn.w	r8, r8
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80046ea:	ea08 0802 	and.w	r8, r8, r2
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80046ee:	682a      	ldr	r2, [r5, #0]
 80046f0:	bf08      	it	eq
 80046f2:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80046f6:	2901      	cmp	r1, #1
 80046f8:	bf08      	it	eq
 80046fa:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80046fe:	2a02      	cmp	r2, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004700:	f428 4840 	bic.w	r8, r8, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004704:	d073      	beq.n	80047ee <HAL_DAC_ConfigChannel+0x186>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004706:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800470a:	40a7      	lsls	r7, r4
 800470c:	ea47 0708 	orr.w	r7, r7, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004710:	63df      	str	r7, [r3, #60]	; 0x3c
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004712:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 800471c:	40a5      	lsls	r5, r4
 800471e:	ea20 0005 	bic.w	r0, r0, r5
 8004722:	6018      	str	r0, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 8004724:	6818      	ldr	r0, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004726:	f640 75fe 	movw	r5, #4094	; 0xffe
 800472a:	40a5      	lsls	r5, r4
 800472c:	ea20 0505 	bic.w	r5, r0, r5
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004730:	fa01 f004 	lsl.w	r0, r1, r4
 8004734:	4328      	orrs	r0, r5
  hdac->Instance->CR = tmpreg1;
 8004736:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	25c0      	movs	r5, #192	; 0xc0
 800473c:	40a5      	lsls	r5, r4
 800473e:	ea20 0005 	bic.w	r0, r0, r5
 8004742:	6018      	str	r0, [r3, #0]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004744:	0192      	lsls	r2, r2, #6
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004746:	6e18      	ldr	r0, [r3, #96]	; 0x60
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004748:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800474c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004750:	f640 750f 	movw	r5, #3855	; 0xf0f
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004754:	430a      	orrs	r2, r1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004756:	fa05 f104 	lsl.w	r1, r5, r4
 800475a:	fa02 f404 	lsl.w	r4, r2, r4
 800475e:	ea20 0201 	bic.w	r2, r0, r1
 8004762:	4314      	orrs	r4, r2
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004764:	2101      	movs	r1, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004766:	2200      	movs	r2, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004768:	661c      	str	r4, [r3, #96]	; 0x60

  /* Return function status */
  return HAL_OK;
 800476a:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 800476c:	7131      	strb	r1, [r6, #4]
  __HAL_UNLOCK(hdac);
 800476e:	7172      	strb	r2, [r6, #5]
}
 8004770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 8004774:	2100      	movs	r1, #0
 8004776:	e7a4      	b.n	80046c2 <HAL_DAC_ConfigChannel+0x5a>
    tickstart = HAL_GetTick();
 8004778:	f7fe ff3a 	bl	80035f0 <HAL_GetTick>
 800477c:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 800477e:	b12c      	cbz	r4, 800478c <HAL_DAC_ConfigChannel+0x124>
 8004780:	e014      	b.n	80047ac <HAL_DAC_ConfigChannel+0x144>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004782:	f7fe ff35 	bl	80035f0 <HAL_GetTick>
 8004786:	1bc3      	subs	r3, r0, r7
 8004788:	2b01      	cmp	r3, #1
 800478a:	d83c      	bhi.n	8004806 <HAL_DAC_ConfigChannel+0x19e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800478c:	6833      	ldr	r3, [r6, #0]
 800478e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004790:	041b      	lsls	r3, r3, #16
 8004792:	d4f6      	bmi.n	8004782 <HAL_DAC_ConfigChannel+0x11a>
      HAL_Delay(1);
 8004794:	2001      	movs	r0, #1
 8004796:	f7fe ff31 	bl	80035fc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800479a:	6833      	ldr	r3, [r6, #0]
 800479c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800479e:	641a      	str	r2, [r3, #64]	; 0x40
 80047a0:	e00e      	b.n	80047c0 <HAL_DAC_ConfigChannel+0x158>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80047a2:	f7fe ff25 	bl	80035f0 <HAL_GetTick>
 80047a6:	1bc3      	subs	r3, r0, r7
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d82c      	bhi.n	8004806 <HAL_DAC_ConfigChannel+0x19e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80047ac:	6833      	ldr	r3, [r6, #0]
 80047ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	dbf6      	blt.n	80047a2 <HAL_DAC_ConfigChannel+0x13a>
      HAL_Delay(1U);
 80047b4:	2001      	movs	r0, #1
 80047b6:	f7fe ff21 	bl	80035fc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80047ba:	6833      	ldr	r3, [r6, #0]
 80047bc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80047be:	645a      	str	r2, [r3, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80047c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047c2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80047c4:	68af      	ldr	r7, [r5, #8]
 80047c6:	f004 0410 	and.w	r4, r4, #16
 80047ca:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80047ce:	40a0      	lsls	r0, r4
 80047d0:	ea22 0200 	bic.w	r2, r2, r0
 80047d4:	40a1      	lsls	r1, r4
 80047d6:	430a      	orrs	r2, r1
 80047d8:	649a      	str	r2, [r3, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80047da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047dc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80047de:	20ff      	movs	r0, #255	; 0xff
 80047e0:	40a0      	lsls	r0, r4
 80047e2:	ea22 0200 	bic.w	r2, r2, r0
 80047e6:	40a1      	lsls	r1, r4
 80047e8:	430a      	orrs	r2, r1
 80047ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80047ec:	e74f      	b.n	800468e <HAL_DAC_ConfigChannel+0x26>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80047ee:	f000 fdbd 	bl	800536c <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80047f2:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <HAL_DAC_ConfigChannel+0x1bc>)
 80047f4:	4298      	cmp	r0, r3
 80047f6:	d90e      	bls.n	8004816 <HAL_DAC_ConfigChannel+0x1ae>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80047f8:	6833      	ldr	r3, [r6, #0]
 80047fa:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 80047fe:	e784      	b.n	800470a <HAL_DAC_ConfigChannel+0xa2>
  __HAL_LOCK(hdac);
 8004800:	2002      	movs	r0, #2
}
 8004802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004806:	6933      	ldr	r3, [r6, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004808:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800480a:	f043 0308 	orr.w	r3, r3, #8
 800480e:	6133      	str	r3, [r6, #16]
          return HAL_TIMEOUT;
 8004810:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004812:	7132      	strb	r2, [r6, #4]
          return HAL_TIMEOUT;
 8004814:	e7ac      	b.n	8004770 <HAL_DAC_ConfigChannel+0x108>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004816:	4b04      	ldr	r3, [pc, #16]	; (8004828 <HAL_DAC_ConfigChannel+0x1c0>)
 8004818:	4298      	cmp	r0, r3
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800481a:	bf88      	it	hi
 800481c:	f448 4880 	orrhi.w	r8, r8, #16384	; 0x4000
 8004820:	6833      	ldr	r3, [r6, #0]
 8004822:	e772      	b.n	800470a <HAL_DAC_ConfigChannel+0xa2>
 8004824:	09896800 	.word	0x09896800
 8004828:	04c4b400 	.word	0x04c4b400

0800482c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800482c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004830:	680c      	ldr	r4, [r1, #0]
{
 8004832:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004834:	2c00      	cmp	r4, #0
 8004836:	f000 8084 	beq.w	8004942 <HAL_GPIO_Init+0x116>
  uint32_t position = 0x00U;
 800483a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800483c:	f04f 0b01 	mov.w	fp, #1
 8004840:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8004844:	ea1e 0a04 	ands.w	sl, lr, r4
 8004848:	d076      	beq.n	8004938 <HAL_GPIO_Init+0x10c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800484a:	684e      	ldr	r6, [r1, #4]
 800484c:	f006 0203 	and.w	r2, r6, #3
 8004850:	1e55      	subs	r5, r2, #1
 8004852:	2d01      	cmp	r5, #1
 8004854:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004858:	d976      	bls.n	8004948 <HAL_GPIO_Init+0x11c>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800485a:	2a03      	cmp	r2, #3
 800485c:	f040 80ba 	bne.w	80049d4 <HAL_GPIO_Init+0x1a8>
 8004860:	fa02 f20c 	lsl.w	r2, r2, ip
 8004864:	43d5      	mvns	r5, r2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004866:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800486a:	ea0c 0505 	and.w	r5, ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800486e:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004870:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8004874:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004876:	d05f      	beq.n	8004938 <HAL_GPIO_Init+0x10c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004878:	4d64      	ldr	r5, [pc, #400]	; (8004a0c <HAL_GPIO_Init+0x1e0>)
 800487a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800487c:	f042 0201 	orr.w	r2, r2, #1
 8004880:	662a      	str	r2, [r5, #96]	; 0x60
 8004882:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8004884:	f023 0c03 	bic.w	ip, r3, #3
 8004888:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 800488c:	f002 0201 	and.w	r2, r2, #1
 8004890:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
 8004894:	9203      	str	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004896:	f003 0203 	and.w	r2, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800489a:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800489c:	f8dc 5008 	ldr.w	r5, [ip, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048a0:	0092      	lsls	r2, r2, #2
 80048a2:	270f      	movs	r7, #15
 80048a4:	fa07 fe02 	lsl.w	lr, r7, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048a8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048ac:	ea25 050e 	bic.w	r5, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048b0:	d019      	beq.n	80048e6 <HAL_GPIO_Init+0xba>
 80048b2:	4f57      	ldr	r7, [pc, #348]	; (8004a10 <HAL_GPIO_Init+0x1e4>)
 80048b4:	42b8      	cmp	r0, r7
 80048b6:	f000 8098 	beq.w	80049ea <HAL_GPIO_Init+0x1be>
 80048ba:	4f56      	ldr	r7, [pc, #344]	; (8004a14 <HAL_GPIO_Init+0x1e8>)
 80048bc:	42b8      	cmp	r0, r7
 80048be:	f000 8098 	beq.w	80049f2 <HAL_GPIO_Init+0x1c6>
 80048c2:	4f55      	ldr	r7, [pc, #340]	; (8004a18 <HAL_GPIO_Init+0x1ec>)
 80048c4:	42b8      	cmp	r0, r7
 80048c6:	f000 808a 	beq.w	80049de <HAL_GPIO_Init+0x1b2>
 80048ca:	4f54      	ldr	r7, [pc, #336]	; (8004a1c <HAL_GPIO_Init+0x1f0>)
 80048cc:	42b8      	cmp	r0, r7
 80048ce:	f000 8096 	beq.w	80049fe <HAL_GPIO_Init+0x1d2>
 80048d2:	4f53      	ldr	r7, [pc, #332]	; (8004a20 <HAL_GPIO_Init+0x1f4>)
 80048d4:	42b8      	cmp	r0, r7
 80048d6:	bf0c      	ite	eq
 80048d8:	f04f 0e05 	moveq.w	lr, #5
 80048dc:	f04f 0e06 	movne.w	lr, #6
 80048e0:	fa0e f202 	lsl.w	r2, lr, r2
 80048e4:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048e6:	4a4f      	ldr	r2, [pc, #316]	; (8004a24 <HAL_GPIO_Init+0x1f8>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048e8:	f8cc 5008 	str.w	r5, [ip, #8]
        temp = EXTI->RTSR1;
 80048ec:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 80048ee:	ea6f 0c0a 	mvn.w	ip, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048f2:	02f5      	lsls	r5, r6, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80048f4:	4d4b      	ldr	r5, [pc, #300]	; (8004a24 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 80048f6:	bf54      	ite	pl
 80048f8:	ea0c 0202 	andpl.w	r2, ip, r2
          temp |= iocurrent;
 80048fc:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8004900:	60aa      	str	r2, [r5, #8]

        temp = EXTI->FTSR1;
 8004902:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004904:	02b2      	lsls	r2, r6, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8004906:	4a47      	ldr	r2, [pc, #284]	; (8004a24 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 8004908:	bf54      	ite	pl
 800490a:	ea0c 0505 	andpl.w	r5, ip, r5
          temp |= iocurrent;
 800490e:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->FTSR1 = temp;
 8004912:	60d5      	str	r5, [r2, #12]

        temp = EXTI->EMR1;
 8004914:	6855      	ldr	r5, [r2, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8004916:	4a43      	ldr	r2, [pc, #268]	; (8004a24 <HAL_GPIO_Init+0x1f8>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004918:	03b7      	lsls	r7, r6, #14
        temp &= ~(iocurrent);
 800491a:	bf54      	ite	pl
 800491c:	ea0c 0505 	andpl.w	r5, ip, r5
          temp |= iocurrent;
 8004920:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR1 = temp;
 8004924:	6055      	str	r5, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004926:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004928:	03f5      	lsls	r5, r6, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 800492a:	4d3e      	ldr	r5, [pc, #248]	; (8004a24 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 800492c:	bf54      	ite	pl
 800492e:	ea0c 0202 	andpl.w	r2, ip, r2
          temp |= iocurrent;
 8004932:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 8004936:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 8004938:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800493a:	fa34 f203 	lsrs.w	r2, r4, r3
 800493e:	f47f af7f 	bne.w	8004840 <HAL_GPIO_Init+0x14>
  }
}
 8004942:	b005      	add	sp, #20
 8004944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8004948:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800494c:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800494e:	2503      	movs	r5, #3
 8004950:	fa05 f50c 	lsl.w	r5, r5, ip
 8004954:	ea28 0805 	bic.w	r8, r8, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004958:	fa07 f90c 	lsl.w	r9, r7, ip
 800495c:	ea49 0808 	orr.w	r8, r9, r8
        GPIOx->OSPEEDR = temp;
 8004960:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8004964:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004968:	f3c6 1900 	ubfx	r9, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800496c:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004970:	fa09 fe03 	lsl.w	lr, r9, r3
 8004974:	ea4e 0e08 	orr.w	lr, lr, r8
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004978:	43ed      	mvns	r5, r5
        GPIOx->OTYPER = temp;
 800497a:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 800497e:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004982:	688f      	ldr	r7, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004984:	ea08 0805 	and.w	r8, r8, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004988:	fa07 fe0c 	lsl.w	lr, r7, ip
 800498c:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004990:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8004992:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004996:	d002      	beq.n	800499e <HAL_GPIO_Init+0x172>
 8004998:	fa02 f20c 	lsl.w	r2, r2, ip
 800499c:	e763      	b.n	8004866 <HAL_GPIO_Init+0x3a>
        temp = GPIOx->AFR[position >> 3U];
 800499e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 80049a2:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049a6:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80049aa:	f8d8 7020 	ldr.w	r7, [r8, #32]
 80049ae:	9701      	str	r7, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049b0:	690f      	ldr	r7, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049b2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049b6:	fa07 f90e 	lsl.w	r9, r7, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049ba:	270f      	movs	r7, #15
 80049bc:	fa07 fe0e 	lsl.w	lr, r7, lr
 80049c0:	9f01      	ldr	r7, [sp, #4]
 80049c2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049c6:	ea49 0e0e 	orr.w	lr, r9, lr
        GPIOx->AFR[position >> 3U] = temp;
 80049ca:	fa02 f20c 	lsl.w	r2, r2, ip
 80049ce:	f8c8 e020 	str.w	lr, [r8, #32]
 80049d2:	e748      	b.n	8004866 <HAL_GPIO_Init+0x3a>
 80049d4:	2503      	movs	r5, #3
 80049d6:	fa05 f50c 	lsl.w	r5, r5, ip
 80049da:	43ed      	mvns	r5, r5
 80049dc:	e7cf      	b.n	800497e <HAL_GPIO_Init+0x152>
 80049de:	f04f 0e03 	mov.w	lr, #3
 80049e2:	fa0e f202 	lsl.w	r2, lr, r2
 80049e6:	4315      	orrs	r5, r2
 80049e8:	e77d      	b.n	80048e6 <HAL_GPIO_Init+0xba>
 80049ea:	fa0b f202 	lsl.w	r2, fp, r2
 80049ee:	4315      	orrs	r5, r2
 80049f0:	e779      	b.n	80048e6 <HAL_GPIO_Init+0xba>
 80049f2:	f04f 0e02 	mov.w	lr, #2
 80049f6:	fa0e f202 	lsl.w	r2, lr, r2
 80049fa:	4315      	orrs	r5, r2
 80049fc:	e773      	b.n	80048e6 <HAL_GPIO_Init+0xba>
 80049fe:	f04f 0e04 	mov.w	lr, #4
 8004a02:	fa0e f202 	lsl.w	r2, lr, r2
 8004a06:	4315      	orrs	r5, r2
 8004a08:	e76d      	b.n	80048e6 <HAL_GPIO_Init+0xba>
 8004a0a:	bf00      	nop
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	48000400 	.word	0x48000400
 8004a14:	48000800 	.word	0x48000800
 8004a18:	48000c00 	.word	0x48000c00
 8004a1c:	48001000 	.word	0x48001000
 8004a20:	48001400 	.word	0x48001400
 8004a24:	40010400 	.word	0x40010400

08004a28 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d07d      	beq.n	8004b28 <HAL_OPAMP_Init+0x100>
{
 8004a2c:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004a2e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004a32:	2b05      	cmp	r3, #5
{
 8004a34:	b082      	sub	sp, #8
 8004a36:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004a38:	d057      	beq.n	8004aea <HAL_OPAMP_Init+0xc2>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004a3a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d053      	beq.n	8004aea <HAL_OPAMP_Init+0xc2>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a42:	4b3a      	ldr	r3, [pc, #232]	; (8004b2c <HAL_OPAMP_Init+0x104>)
 8004a44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	661a      	str	r2, [r3, #96]	; 0x60
 8004a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	9301      	str	r3, [sp, #4]
 8004a54:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004a56:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004a5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a5e:	b90b      	cbnz	r3, 8004a64 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004a60:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004a64:	4620      	mov	r0, r4
 8004a66:	f7fd fee3 	bl	8002830 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004a6a:	68a3      	ldr	r3, [r4, #8]
 8004a6c:	f023 0220 	bic.w	r2, r3, #32
 8004a70:	2a40      	cmp	r2, #64	; 0x40
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004a72:	6822      	ldr	r2, [r4, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004a74:	d03c      	beq.n	8004af0 <HAL_OPAMP_Init+0xc8>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004a76:	6860      	ldr	r0, [r4, #4]
 8004a78:	68e6      	ldr	r6, [r4, #12]
 8004a7a:	6811      	ldr	r1, [r2, #0]
 8004a7c:	6925      	ldr	r5, [r4, #16]
 8004a7e:	4303      	orrs	r3, r0
 8004a80:	4333      	orrs	r3, r6
 8004a82:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004a84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004a86:	432b      	orrs	r3, r5
      MODIFY_REG(hopamp->Instance->CSR,
 8004a88:	f021 0110 	bic.w	r1, r1, #16
      MODIFY_REG(hopamp->Instance->CSR,
 8004a8c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 8004a8e:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8004a90:	4333      	orrs	r3, r6
 8004a92:	e9d4 600c 	ldrd	r6, r0, [r4, #48]	; 0x30
      MODIFY_REG(hopamp->Instance->CSR,
 8004a96:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8004a98:	432b      	orrs	r3, r5
 8004a9a:	4925      	ldr	r1, [pc, #148]	; (8004b30 <HAL_OPAMP_Init+0x108>)
 8004a9c:	6815      	ldr	r5, [r2, #0]
 8004a9e:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8004aa2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004aa6:	7d20      	ldrb	r0, [r4, #20]
 8004aa8:	4029      	ands	r1, r5
 8004aaa:	2801      	cmp	r0, #1
 8004aac:	ea43 0301 	orr.w	r3, r3, r1
 8004ab0:	bf0c      	ite	eq
 8004ab2:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8004ab6:	2100      	movne	r1, #0
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004abc:	6993      	ldr	r3, [r2, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	db09      	blt.n	8004ad6 <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004ac2:	e9d4 3506 	ldrd	r3, r5, [r4, #24]
 8004ac6:	6a20      	ldr	r0, [r4, #32]
 8004ac8:	6991      	ldr	r1, [r2, #24]
 8004aca:	432b      	orrs	r3, r5
 8004acc:	4303      	orrs	r3, r0
 8004ace:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004ad2:	430b      	orrs	r3, r1
 8004ad4:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004ad6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8004ada:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004ade:	bb03      	cbnz	r3, 8004b22 <HAL_OPAMP_Init+0xfa>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
  }
}
 8004ae6:	b002      	add	sp, #8
 8004ae8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004aea:	2001      	movs	r0, #1
}
 8004aec:	b002      	add	sp, #8
 8004aee:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8004af0:	6866      	ldr	r6, [r4, #4]
 8004af2:	6811      	ldr	r1, [r2, #0]
 8004af4:	6920      	ldr	r0, [r4, #16]
 8004af6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8004af8:	4333      	orrs	r3, r6
 8004afa:	4303      	orrs	r3, r0
 8004afc:	f021 0110 	bic.w	r1, r1, #16
      MODIFY_REG(hopamp->Instance->CSR,
 8004b00:	6a60      	ldr	r0, [r4, #36]	; 0x24
      MODIFY_REG(hopamp->Instance->CSR,
 8004b02:	4329      	orrs	r1, r5
      MODIFY_REG(hopamp->Instance->CSR,
 8004b04:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 8004b06:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8004b08:	4303      	orrs	r3, r0
 8004b0a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004b0c:	6816      	ldr	r6, [r2, #0]
 8004b0e:	4908      	ldr	r1, [pc, #32]	; (8004b30 <HAL_OPAMP_Init+0x108>)
 8004b10:	432b      	orrs	r3, r5
 8004b12:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004b14:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 8004b18:	4031      	ands	r1, r6
 8004b1a:	7d20      	ldrb	r0, [r4, #20]
 8004b1c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8004b20:	e7c3      	b.n	8004aaa <HAL_OPAMP_Init+0x82>
    return status;
 8004b22:	2000      	movs	r0, #0
}
 8004b24:	b002      	add	sp, #8
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004b28:	2001      	movs	r0, #1
}
 8004b2a:	4770      	bx	lr
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	e0003e11 	.word	0xe0003e11

08004b34 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b34:	4a3b      	ldr	r2, [pc, #236]	; (8004c24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8004b36:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b38:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b3a:	b968      	cbnz	r0, 8004b58 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b44:	d014      	beq.n	8004b70 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b46:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004b4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b4e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8004b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b56:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b58:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004b5c:	d02f      	beq.n	8004bbe <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b66:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004b68:	2000      	movs	r0, #0
}
 8004b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b6e:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b70:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b74:	4b2c      	ldr	r3, [pc, #176]	; (8004c28 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004b76:	482d      	ldr	r0, [pc, #180]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b78:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004b7c:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b80:	6811      	ldr	r1, [r2, #0]
 8004b82:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8004b86:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004b8a:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b8c:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b8e:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b90:	2332      	movs	r3, #50	; 0x32
 8004b92:	fb03 f304 	mul.w	r3, r3, r4
 8004b96:	fba0 0303 	umull	r0, r3, r0, r3
 8004b9a:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b9c:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b9e:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ba2:	d506      	bpl.n	8004bb2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004ba4:	e000      	b.n	8004ba8 <HAL_PWREx_ControlVoltageScaling+0x74>
 8004ba6:	b123      	cbz	r3, 8004bb2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004ba8:	6951      	ldr	r1, [r2, #20]
 8004baa:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004bac:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bb0:	d4f9      	bmi.n	8004ba6 <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bb2:	4b1c      	ldr	r3, [pc, #112]	; (8004c24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	055c      	lsls	r4, r3, #21
 8004bb8:	d5d6      	bpl.n	8004b68 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8004bba:	2003      	movs	r0, #3
 8004bbc:	e7c9      	b.n	8004b52 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc6:	d009      	beq.n	8004bdc <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bc8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8004bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8004bd4:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bd6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8004bda:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bdc:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004be0:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004be2:	4812      	ldr	r0, [pc, #72]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004be4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004be8:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bec:	6811      	ldr	r1, [r2, #0]
 8004bee:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8004bf2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004bf6:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bf8:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bfa:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bfc:	2332      	movs	r3, #50	; 0x32
 8004bfe:	fb03 f304 	mul.w	r3, r3, r4
 8004c02:	fba0 0303 	umull	r0, r3, r0, r3
 8004c06:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c08:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c0a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c0e:	d5d0      	bpl.n	8004bb2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004c10:	e001      	b.n	8004c16 <HAL_PWREx_ControlVoltageScaling+0xe2>
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0cd      	beq.n	8004bb2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004c16:	6951      	ldr	r1, [r2, #20]
 8004c18:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004c1a:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c1e:	d5c8      	bpl.n	8004bb2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004c20:	e7f7      	b.n	8004c12 <HAL_PWREx_ControlVoltageScaling+0xde>
 8004c22:	bf00      	nop
 8004c24:	40007000 	.word	0x40007000
 8004c28:	20000614 	.word	0x20000614
 8004c2c:	431bde83 	.word	0x431bde83

08004c30 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c30:	4a02      	ldr	r2, [pc, #8]	; (8004c3c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8004c32:	6893      	ldr	r3, [r2, #8]
 8004c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c38:	6093      	str	r3, [r2, #8]
}
 8004c3a:	4770      	bx	lr
 8004c3c:	40007000 	.word	0x40007000

08004c40 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c40:	2800      	cmp	r0, #0
 8004c42:	f000 81c3 	beq.w	8004fcc <HAL_RCC_OscConfig+0x38c>
{
 8004c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c4a:	6803      	ldr	r3, [r0, #0]
 8004c4c:	07d9      	lsls	r1, r3, #31
{
 8004c4e:	b082      	sub	sp, #8
 8004c50:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c52:	d52d      	bpl.n	8004cb0 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c54:	49b5      	ldr	r1, [pc, #724]	; (8004f2c <HAL_RCC_OscConfig+0x2ec>)
 8004c56:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c58:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c5a:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004c5e:	2a0c      	cmp	r2, #12
 8004c60:	f000 810a 	beq.w	8004e78 <HAL_RCC_OscConfig+0x238>
 8004c64:	2a08      	cmp	r2, #8
 8004c66:	f000 810c 	beq.w	8004e82 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c6a:	6863      	ldr	r3, [r4, #4]
 8004c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c70:	f000 8133 	beq.w	8004eda <HAL_RCC_OscConfig+0x29a>
 8004c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c78:	f000 819b 	beq.w	8004fb2 <HAL_RCC_OscConfig+0x372>
 8004c7c:	4dab      	ldr	r5, [pc, #684]	; (8004f2c <HAL_RCC_OscConfig+0x2ec>)
 8004c7e:	682a      	ldr	r2, [r5, #0]
 8004c80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004c84:	602a      	str	r2, [r5, #0]
 8004c86:	682a      	ldr	r2, [r5, #0]
 8004c88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c8c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f040 8128 	bne.w	8004ee4 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c94:	f7fe fcac 	bl	80035f0 <HAL_GetTick>
 8004c98:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c9a:	e005      	b.n	8004ca8 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c9c:	f7fe fca8 	bl	80035f0 <HAL_GetTick>
 8004ca0:	1b80      	subs	r0, r0, r6
 8004ca2:	2864      	cmp	r0, #100	; 0x64
 8004ca4:	f200 813b 	bhi.w	8004f1e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ca8:	682b      	ldr	r3, [r5, #0]
 8004caa:	039f      	lsls	r7, r3, #14
 8004cac:	d4f6      	bmi.n	8004c9c <HAL_RCC_OscConfig+0x5c>
 8004cae:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cb0:	079e      	lsls	r6, r3, #30
 8004cb2:	d528      	bpl.n	8004d06 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb4:	4a9d      	ldr	r2, [pc, #628]	; (8004f2c <HAL_RCC_OscConfig+0x2ec>)
 8004cb6:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cb8:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cba:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004cbe:	2b0c      	cmp	r3, #12
 8004cc0:	f000 80ec 	beq.w	8004e9c <HAL_RCC_OscConfig+0x25c>
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	f000 80ee 	beq.w	8004ea6 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cca:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ccc:	4d97      	ldr	r5, [pc, #604]	; (8004f2c <HAL_RCC_OscConfig+0x2ec>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 8116 	beq.w	8004f00 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cda:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cdc:	f7fe fc88 	bl	80035f0 <HAL_GetTick>
 8004ce0:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ce2:	e005      	b.n	8004cf0 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce4:	f7fe fc84 	bl	80035f0 <HAL_GetTick>
 8004ce8:	1b80      	subs	r0, r0, r6
 8004cea:	2802      	cmp	r0, #2
 8004cec:	f200 8117 	bhi.w	8004f1e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	0558      	lsls	r0, r3, #21
 8004cf4:	d5f6      	bpl.n	8004ce4 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf6:	686b      	ldr	r3, [r5, #4]
 8004cf8:	6922      	ldr	r2, [r4, #16]
 8004cfa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004cfe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004d02:	606b      	str	r3, [r5, #4]
 8004d04:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d06:	071a      	lsls	r2, r3, #28
 8004d08:	d519      	bpl.n	8004d3e <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d0a:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d0c:	4d87      	ldr	r5, [pc, #540]	; (8004f2c <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 809e 	beq.w	8004e50 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8004d14:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d20:	f7fe fc66 	bl	80035f0 <HAL_GetTick>
 8004d24:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d26:	e005      	b.n	8004d34 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d28:	f7fe fc62 	bl	80035f0 <HAL_GetTick>
 8004d2c:	1b80      	subs	r0, r0, r6
 8004d2e:	2802      	cmp	r0, #2
 8004d30:	f200 80f5 	bhi.w	8004f1e <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d34:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004d38:	079f      	lsls	r7, r3, #30
 8004d3a:	d5f5      	bpl.n	8004d28 <HAL_RCC_OscConfig+0xe8>
 8004d3c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d3e:	0759      	lsls	r1, r3, #29
 8004d40:	d541      	bpl.n	8004dc6 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d42:	4b7a      	ldr	r3, [pc, #488]	; (8004f2c <HAL_RCC_OscConfig+0x2ec>)
 8004d44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d46:	00d2      	lsls	r2, r2, #3
 8004d48:	f100 80ed 	bmi.w	8004f26 <HAL_RCC_OscConfig+0x2e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d52:	659a      	str	r2, [r3, #88]	; 0x58
 8004d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	9301      	str	r3, [sp, #4]
 8004d5c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004d5e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d60:	4e73      	ldr	r6, [pc, #460]	; (8004f30 <HAL_RCC_OscConfig+0x2f0>)
 8004d62:	6833      	ldr	r3, [r6, #0]
 8004d64:	05df      	lsls	r7, r3, #23
 8004d66:	f140 8113 	bpl.w	8004f90 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d6a:	68a3      	ldr	r3, [r4, #8]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	f000 80e3 	beq.w	8004f38 <HAL_RCC_OscConfig+0x2f8>
 8004d72:	2b05      	cmp	r3, #5
 8004d74:	f000 8169 	beq.w	800504a <HAL_RCC_OscConfig+0x40a>
 8004d78:	4e6c      	ldr	r6, [pc, #432]	; (8004f2c <HAL_RCC_OscConfig+0x2ec>)
 8004d7a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8004d7e:	f022 0201 	bic.w	r2, r2, #1
 8004d82:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8004d86:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8004d8a:	f022 0204 	bic.w	r2, r2, #4
 8004d8e:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f040 80d7 	bne.w	8004f46 <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d98:	f7fe fc2a 	bl	80035f0 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004da0:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004da2:	e005      	b.n	8004db0 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da4:	f7fe fc24 	bl	80035f0 <HAL_GetTick>
 8004da8:	1bc0      	subs	r0, r0, r7
 8004daa:	4540      	cmp	r0, r8
 8004dac:	f200 80b7 	bhi.w	8004f1e <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004db0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8004db4:	079a      	lsls	r2, r3, #30
 8004db6:	d4f5      	bmi.n	8004da4 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004db8:	b125      	cbz	r5, 8004dc4 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dba:	4a5c      	ldr	r2, [pc, #368]	; (8004f2c <HAL_RCC_OscConfig+0x2ec>)
 8004dbc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004dbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc2:	6593      	str	r3, [r2, #88]	; 0x58
 8004dc4:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dc6:	069b      	lsls	r3, r3, #26
 8004dc8:	d518      	bpl.n	8004dfc <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004dca:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dcc:	4d57      	ldr	r5, [pc, #348]	; (8004f2c <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 80ca 	beq.w	8004f68 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8004dd4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de0:	f7fe fc06 	bl	80035f0 <HAL_GetTick>
 8004de4:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004de6:	e005      	b.n	8004df4 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004de8:	f7fe fc02 	bl	80035f0 <HAL_GetTick>
 8004dec:	1b80      	subs	r0, r0, r6
 8004dee:	2802      	cmp	r0, #2
 8004df0:	f200 8095 	bhi.w	8004f1e <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004df4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004df8:	079f      	lsls	r7, r3, #30
 8004dfa:	d5f5      	bpl.n	8004de8 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004dfc:	69e0      	ldr	r0, [r4, #28]
 8004dfe:	b318      	cbz	r0, 8004e48 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e00:	4d4a      	ldr	r5, [pc, #296]	; (8004f2c <HAL_RCC_OscConfig+0x2ec>)
 8004e02:	68ab      	ldr	r3, [r5, #8]
 8004e04:	f003 030c 	and.w	r3, r3, #12
 8004e08:	2b0c      	cmp	r3, #12
 8004e0a:	f000 812c 	beq.w	8005066 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e0e:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e10:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004e12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e16:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e18:	f000 80da 	beq.w	8004fd0 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004e1c:	68eb      	ldr	r3, [r5, #12]
 8004e1e:	f023 0303 	bic.w	r3, r3, #3
 8004e22:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004e24:	68eb      	ldr	r3, [r5, #12]
 8004e26:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e2e:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fe fbde 	bl	80035f0 <HAL_GetTick>
 8004e34:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e36:	e004      	b.n	8004e42 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e38:	f7fe fbda 	bl	80035f0 <HAL_GetTick>
 8004e3c:	1b00      	subs	r0, r0, r4
 8004e3e:	2802      	cmp	r0, #2
 8004e40:	d86d      	bhi.n	8004f1e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e42:	682b      	ldr	r3, [r5, #0]
 8004e44:	019b      	lsls	r3, r3, #6
 8004e46:	d4f7      	bmi.n	8004e38 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8004e48:	2000      	movs	r0, #0
}
 8004e4a:	b002      	add	sp, #8
 8004e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004e50:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004e5c:	f7fe fbc8 	bl	80035f0 <HAL_GetTick>
 8004e60:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e62:	e004      	b.n	8004e6e <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e64:	f7fe fbc4 	bl	80035f0 <HAL_GetTick>
 8004e68:	1b80      	subs	r0, r0, r6
 8004e6a:	2802      	cmp	r0, #2
 8004e6c:	d857      	bhi.n	8004f1e <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e6e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004e72:	0798      	lsls	r0, r3, #30
 8004e74:	d4f6      	bmi.n	8004e64 <HAL_RCC_OscConfig+0x224>
 8004e76:	e761      	b.n	8004d3c <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e78:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e7c:	2903      	cmp	r1, #3
 8004e7e:	f47f aef4 	bne.w	8004c6a <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e82:	4a2a      	ldr	r2, [pc, #168]	; (8004f2c <HAL_RCC_OscConfig+0x2ec>)
 8004e84:	6812      	ldr	r2, [r2, #0]
 8004e86:	0392      	lsls	r2, r2, #14
 8004e88:	f57f af12 	bpl.w	8004cb0 <HAL_RCC_OscConfig+0x70>
 8004e8c:	6862      	ldr	r2, [r4, #4]
 8004e8e:	2a00      	cmp	r2, #0
 8004e90:	f47f af0e 	bne.w	8004cb0 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8004e94:	2001      	movs	r0, #1
}
 8004e96:	b002      	add	sp, #8
 8004e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e9c:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ea0:	2a02      	cmp	r2, #2
 8004ea2:	f47f af12 	bne.w	8004cca <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ea6:	4b21      	ldr	r3, [pc, #132]	; (8004f2c <HAL_RCC_OscConfig+0x2ec>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	055d      	lsls	r5, r3, #21
 8004eac:	d502      	bpl.n	8004eb4 <HAL_RCC_OscConfig+0x274>
 8004eae:	68e3      	ldr	r3, [r4, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0ef      	beq.n	8004e94 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb4:	4a1d      	ldr	r2, [pc, #116]	; (8004f2c <HAL_RCC_OscConfig+0x2ec>)
 8004eb6:	6920      	ldr	r0, [r4, #16]
 8004eb8:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004eba:	491e      	ldr	r1, [pc, #120]	; (8004f34 <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ebc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004ec0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004ec4:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ec6:	6808      	ldr	r0, [r1, #0]
 8004ec8:	f7fe fb50 	bl	800356c <HAL_InitTick>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d1e1      	bne.n	8004e94 <HAL_RCC_OscConfig+0x254>
 8004ed0:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ed2:	071a      	lsls	r2, r3, #28
 8004ed4:	f57f af33 	bpl.w	8004d3e <HAL_RCC_OscConfig+0xfe>
 8004ed8:	e717      	b.n	8004d0a <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eda:	4a14      	ldr	r2, [pc, #80]	; (8004f2c <HAL_RCC_OscConfig+0x2ec>)
 8004edc:	6813      	ldr	r3, [r2, #0]
 8004ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004ee4:	f7fe fb84 	bl	80035f0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ee8:	4e10      	ldr	r6, [pc, #64]	; (8004f2c <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 8004eea:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eec:	e004      	b.n	8004ef8 <HAL_RCC_OscConfig+0x2b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eee:	f7fe fb7f 	bl	80035f0 <HAL_GetTick>
 8004ef2:	1b40      	subs	r0, r0, r5
 8004ef4:	2864      	cmp	r0, #100	; 0x64
 8004ef6:	d812      	bhi.n	8004f1e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ef8:	6833      	ldr	r3, [r6, #0]
 8004efa:	039b      	lsls	r3, r3, #14
 8004efc:	d5f7      	bpl.n	8004eee <HAL_RCC_OscConfig+0x2ae>
 8004efe:	e6d6      	b.n	8004cae <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f06:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004f08:	f7fe fb72 	bl	80035f0 <HAL_GetTick>
 8004f0c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f0e:	682b      	ldr	r3, [r5, #0]
 8004f10:	0559      	lsls	r1, r3, #21
 8004f12:	d5dd      	bpl.n	8004ed0 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f14:	f7fe fb6c 	bl	80035f0 <HAL_GetTick>
 8004f18:	1b80      	subs	r0, r0, r6
 8004f1a:	2802      	cmp	r0, #2
 8004f1c:	d9f7      	bls.n	8004f0e <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8004f1e:	2003      	movs	r0, #3
}
 8004f20:	b002      	add	sp, #8
 8004f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8004f26:	2500      	movs	r5, #0
 8004f28:	e71a      	b.n	8004d60 <HAL_RCC_OscConfig+0x120>
 8004f2a:	bf00      	nop
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	40007000 	.word	0x40007000
 8004f34:	2000061c 	.word	0x2000061c
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f38:	4a65      	ldr	r2, [pc, #404]	; (80050d0 <HAL_RCC_OscConfig+0x490>)
 8004f3a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004f3e:	f043 0301 	orr.w	r3, r3, #1
 8004f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004f46:	f7fe fb53 	bl	80035f0 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f4a:	4f61      	ldr	r7, [pc, #388]	; (80050d0 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8004f4c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f4e:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f52:	e004      	b.n	8004f5e <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f54:	f7fe fb4c 	bl	80035f0 <HAL_GetTick>
 8004f58:	1b80      	subs	r0, r0, r6
 8004f5a:	4540      	cmp	r0, r8
 8004f5c:	d8df      	bhi.n	8004f1e <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f62:	0799      	lsls	r1, r3, #30
 8004f64:	d5f6      	bpl.n	8004f54 <HAL_RCC_OscConfig+0x314>
 8004f66:	e727      	b.n	8004db8 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8004f68:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004f6c:	f023 0301 	bic.w	r3, r3, #1
 8004f70:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004f74:	f7fe fb3c 	bl	80035f0 <HAL_GetTick>
 8004f78:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f7a:	e004      	b.n	8004f86 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f7c:	f7fe fb38 	bl	80035f0 <HAL_GetTick>
 8004f80:	1b80      	subs	r0, r0, r6
 8004f82:	2802      	cmp	r0, #2
 8004f84:	d8cb      	bhi.n	8004f1e <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f86:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004f8a:	0798      	lsls	r0, r3, #30
 8004f8c:	d4f6      	bmi.n	8004f7c <HAL_RCC_OscConfig+0x33c>
 8004f8e:	e735      	b.n	8004dfc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f90:	6833      	ldr	r3, [r6, #0]
 8004f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f96:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004f98:	f7fe fb2a 	bl	80035f0 <HAL_GetTick>
 8004f9c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f9e:	6833      	ldr	r3, [r6, #0]
 8004fa0:	05d8      	lsls	r0, r3, #23
 8004fa2:	f53f aee2 	bmi.w	8004d6a <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fa6:	f7fe fb23 	bl	80035f0 <HAL_GetTick>
 8004faa:	1bc0      	subs	r0, r0, r7
 8004fac:	2802      	cmp	r0, #2
 8004fae:	d9f6      	bls.n	8004f9e <HAL_RCC_OscConfig+0x35e>
 8004fb0:	e7b5      	b.n	8004f1e <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fb6:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004fc8:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fca:	e78b      	b.n	8004ee4 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8004fcc:	2001      	movs	r0, #1
}
 8004fce:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8004fd0:	f7fe fb0e 	bl	80035f0 <HAL_GetTick>
 8004fd4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fd6:	e004      	b.n	8004fe2 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd8:	f7fe fb0a 	bl	80035f0 <HAL_GetTick>
 8004fdc:	1b80      	subs	r0, r0, r6
 8004fde:	2802      	cmp	r0, #2
 8004fe0:	d89d      	bhi.n	8004f1e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fe2:	682b      	ldr	r3, [r5, #0]
 8004fe4:	0199      	lsls	r1, r3, #6
 8004fe6:	d4f7      	bmi.n	8004fd8 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fe8:	68e9      	ldr	r1, [r5, #12]
 8004fea:	4b3a      	ldr	r3, [pc, #232]	; (80050d4 <HAL_RCC_OscConfig+0x494>)
 8004fec:	6a22      	ldr	r2, [r4, #32]
 8004fee:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004ff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ff2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004ff4:	400b      	ands	r3, r1
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8004ffc:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8005000:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8005004:	3801      	subs	r0, #1
 8005006:	0849      	lsrs	r1, r1, #1
 8005008:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800500c:	3901      	subs	r1, #1
 800500e:	0852      	lsrs	r2, r2, #1
 8005010:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8005014:	3a01      	subs	r2, #1
 8005016:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800501a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800501c:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800501e:	4e2c      	ldr	r6, [pc, #176]	; (80050d0 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_ENABLE();
 8005020:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005024:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005026:	68eb      	ldr	r3, [r5, #12]
 8005028:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800502c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800502e:	f7fe fadf 	bl	80035f0 <HAL_GetTick>
 8005032:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005034:	e005      	b.n	8005042 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005036:	f7fe fadb 	bl	80035f0 <HAL_GetTick>
 800503a:	1b00      	subs	r0, r0, r4
 800503c:	2802      	cmp	r0, #2
 800503e:	f63f af6e 	bhi.w	8004f1e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005042:	6833      	ldr	r3, [r6, #0]
 8005044:	019a      	lsls	r2, r3, #6
 8005046:	d5f6      	bpl.n	8005036 <HAL_RCC_OscConfig+0x3f6>
 8005048:	e6fe      	b.n	8004e48 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800504a:	4b21      	ldr	r3, [pc, #132]	; (80050d0 <HAL_RCC_OscConfig+0x490>)
 800504c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005050:	f042 0204 	orr.w	r2, r2, #4
 8005054:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005058:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800505c:	f042 0201 	orr.w	r2, r2, #1
 8005060:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005064:	e76f      	b.n	8004f46 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005066:	2801      	cmp	r0, #1
 8005068:	f43f aeef 	beq.w	8004e4a <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 800506c:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800506e:	6a22      	ldr	r2, [r4, #32]
 8005070:	f003 0103 	and.w	r1, r3, #3
 8005074:	4291      	cmp	r1, r2
 8005076:	f47f af0d 	bne.w	8004e94 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800507a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800507c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005080:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005082:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005086:	f47f af05 	bne.w	8004e94 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800508a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800508c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005090:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005094:	f47f aefe 	bne.w	8004e94 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005098:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800509a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800509e:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80050a2:	f47f aef7 	bne.w	8004e94 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80050a8:	0852      	lsrs	r2, r2, #1
 80050aa:	3a01      	subs	r2, #1
 80050ac:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050b0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80050b4:	f47f aeee 	bne.w	8004e94 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050b8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80050ba:	0852      	lsrs	r2, r2, #1
 80050bc:	3a01      	subs	r2, #1
 80050be:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050c2:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 80050c6:	bf14      	ite	ne
 80050c8:	2001      	movne	r0, #1
 80050ca:	2000      	moveq	r0, #0
 80050cc:	e6bd      	b.n	8004e4a <HAL_RCC_OscConfig+0x20a>
 80050ce:	bf00      	nop
 80050d0:	40021000 	.word	0x40021000
 80050d4:	019f800c 	.word	0x019f800c

080050d8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80050d8:	4b18      	ldr	r3, [pc, #96]	; (800513c <HAL_RCC_GetSysClockFreq+0x64>)
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	f002 020c 	and.w	r2, r2, #12
 80050e0:	2a04      	cmp	r2, #4
 80050e2:	d027      	beq.n	8005134 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	f002 020c 	and.w	r2, r2, #12
 80050ea:	2a08      	cmp	r2, #8
 80050ec:	d024      	beq.n	8005138 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	f002 020c 	and.w	r2, r2, #12
 80050f4:	2a0c      	cmp	r2, #12
 80050f6:	d001      	beq.n	80050fc <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80050f8:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 80050fa:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050fc:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050fe:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005100:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005102:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005106:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 800510a:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800510c:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005110:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005114:	bf0c      	ite	eq
 8005116:	480a      	ldreq	r0, [pc, #40]	; (8005140 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005118:	480a      	ldrne	r0, [pc, #40]	; (8005144 <HAL_RCC_GetSysClockFreq+0x6c>)
 800511a:	fbb0 f0f2 	udiv	r0, r0, r2
 800511e:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005122:	4b06      	ldr	r3, [pc, #24]	; (800513c <HAL_RCC_GetSysClockFreq+0x64>)
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800512a:	3301      	adds	r3, #1
 800512c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800512e:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8005132:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8005134:	4803      	ldr	r0, [pc, #12]	; (8005144 <HAL_RCC_GetSysClockFreq+0x6c>)
 8005136:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8005138:	4801      	ldr	r0, [pc, #4]	; (8005140 <HAL_RCC_GetSysClockFreq+0x68>)
 800513a:	4770      	bx	lr
 800513c:	40021000 	.word	0x40021000
 8005140:	007a1200 	.word	0x007a1200
 8005144:	00f42400 	.word	0x00f42400

08005148 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005148:	2800      	cmp	r0, #0
 800514a:	f000 80ef 	beq.w	800532c <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800514e:	4a7f      	ldr	r2, [pc, #508]	; (800534c <HAL_RCC_ClockConfig+0x204>)
{
 8005150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005154:	6813      	ldr	r3, [r2, #0]
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	428b      	cmp	r3, r1
 800515c:	460d      	mov	r5, r1
 800515e:	4604      	mov	r4, r0
 8005160:	d20c      	bcs.n	800517c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005162:	6813      	ldr	r3, [r2, #0]
 8005164:	f023 030f 	bic.w	r3, r3, #15
 8005168:	430b      	orrs	r3, r1
 800516a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800516c:	6813      	ldr	r3, [r2, #0]
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	428b      	cmp	r3, r1
 8005174:	d002      	beq.n	800517c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8005176:	2001      	movs	r0, #1
}
 8005178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	07de      	lsls	r6, r3, #31
 8005180:	d563      	bpl.n	800524a <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005182:	6862      	ldr	r2, [r4, #4]
 8005184:	2a03      	cmp	r2, #3
 8005186:	f000 809a 	beq.w	80052be <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800518a:	4b71      	ldr	r3, [pc, #452]	; (8005350 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800518c:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800518e:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005190:	f000 8091 	beq.w	80052b6 <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005194:	055b      	lsls	r3, r3, #21
 8005196:	d5ee      	bpl.n	8005176 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005198:	f7ff ff9e 	bl	80050d8 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800519c:	4b6d      	ldr	r3, [pc, #436]	; (8005354 <HAL_RCC_ClockConfig+0x20c>)
 800519e:	4298      	cmp	r0, r3
 80051a0:	f200 80c6 	bhi.w	8005330 <HAL_RCC_ClockConfig+0x1e8>
 80051a4:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80051a6:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051aa:	4e69      	ldr	r6, [pc, #420]	; (8005350 <HAL_RCC_ClockConfig+0x208>)
 80051ac:	68b3      	ldr	r3, [r6, #8]
 80051ae:	f023 0303 	bic.w	r3, r3, #3
 80051b2:	431a      	orrs	r2, r3
 80051b4:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 80051b6:	f7fe fa1b 	bl	80035f0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ba:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80051be:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051c0:	e004      	b.n	80051cc <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051c2:	f7fe fa15 	bl	80035f0 <HAL_GetTick>
 80051c6:	1bc0      	subs	r0, r0, r7
 80051c8:	4540      	cmp	r0, r8
 80051ca:	d871      	bhi.n	80052b0 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051cc:	68b3      	ldr	r3, [r6, #8]
 80051ce:	6862      	ldr	r2, [r4, #4]
 80051d0:	f003 030c 	and.w	r3, r3, #12
 80051d4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80051d8:	d1f3      	bne.n	80051c2 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	079f      	lsls	r7, r3, #30
 80051de:	d436      	bmi.n	800524e <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 80051e0:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 80051e4:	d103      	bne.n	80051ee <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80051e6:	68b3      	ldr	r3, [r6, #8]
 80051e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ec:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051ee:	4e57      	ldr	r6, [pc, #348]	; (800534c <HAL_RCC_ClockConfig+0x204>)
 80051f0:	6833      	ldr	r3, [r6, #0]
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	42ab      	cmp	r3, r5
 80051f8:	d846      	bhi.n	8005288 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	075a      	lsls	r2, r3, #29
 80051fe:	d506      	bpl.n	800520e <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005200:	4953      	ldr	r1, [pc, #332]	; (8005350 <HAL_RCC_ClockConfig+0x208>)
 8005202:	68e0      	ldr	r0, [r4, #12]
 8005204:	688a      	ldr	r2, [r1, #8]
 8005206:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800520a:	4302      	orrs	r2, r0
 800520c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800520e:	071b      	lsls	r3, r3, #28
 8005210:	d507      	bpl.n	8005222 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005212:	4a4f      	ldr	r2, [pc, #316]	; (8005350 <HAL_RCC_ClockConfig+0x208>)
 8005214:	6921      	ldr	r1, [r4, #16]
 8005216:	6893      	ldr	r3, [r2, #8]
 8005218:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800521c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005220:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005222:	f7ff ff59 	bl	80050d8 <HAL_RCC_GetSysClockFreq>
 8005226:	4a4a      	ldr	r2, [pc, #296]	; (8005350 <HAL_RCC_ClockConfig+0x208>)
 8005228:	4c4b      	ldr	r4, [pc, #300]	; (8005358 <HAL_RCC_ClockConfig+0x210>)
 800522a:	6892      	ldr	r2, [r2, #8]
 800522c:	494b      	ldr	r1, [pc, #300]	; (800535c <HAL_RCC_ClockConfig+0x214>)
 800522e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005232:	4603      	mov	r3, r0
 8005234:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8005236:	484a      	ldr	r0, [pc, #296]	; (8005360 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005238:	f002 021f 	and.w	r2, r2, #31
 800523c:	40d3      	lsrs	r3, r2
 800523e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8005240:	6800      	ldr	r0, [r0, #0]
}
 8005242:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8005246:	f7fe b991 	b.w	800356c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800524a:	0798      	lsls	r0, r3, #30
 800524c:	d5cf      	bpl.n	80051ee <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800524e:	0758      	lsls	r0, r3, #29
 8005250:	d504      	bpl.n	800525c <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005252:	493f      	ldr	r1, [pc, #252]	; (8005350 <HAL_RCC_ClockConfig+0x208>)
 8005254:	688a      	ldr	r2, [r1, #8]
 8005256:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800525a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525c:	0719      	lsls	r1, r3, #28
 800525e:	d506      	bpl.n	800526e <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005260:	4a3b      	ldr	r2, [pc, #236]	; (8005350 <HAL_RCC_ClockConfig+0x208>)
 8005262:	6893      	ldr	r3, [r2, #8]
 8005264:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005268:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800526c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800526e:	4a38      	ldr	r2, [pc, #224]	; (8005350 <HAL_RCC_ClockConfig+0x208>)
 8005270:	68a1      	ldr	r1, [r4, #8]
 8005272:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005274:	4e35      	ldr	r6, [pc, #212]	; (800534c <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005276:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800527a:	430b      	orrs	r3, r1
 800527c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800527e:	6833      	ldr	r3, [r6, #0]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	42ab      	cmp	r3, r5
 8005286:	d9b8      	bls.n	80051fa <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005288:	6833      	ldr	r3, [r6, #0]
 800528a:	f023 030f 	bic.w	r3, r3, #15
 800528e:	432b      	orrs	r3, r5
 8005290:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005292:	f7fe f9ad 	bl	80035f0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005296:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800529a:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800529c:	6833      	ldr	r3, [r6, #0]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	42ab      	cmp	r3, r5
 80052a4:	d0a9      	beq.n	80051fa <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052a6:	f7fe f9a3 	bl	80035f0 <HAL_GetTick>
 80052aa:	1bc0      	subs	r0, r0, r7
 80052ac:	4540      	cmp	r0, r8
 80052ae:	d9f5      	bls.n	800529c <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 80052b0:	2003      	movs	r0, #3
}
 80052b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052b6:	039a      	lsls	r2, r3, #14
 80052b8:	f53f af6e 	bmi.w	8005198 <HAL_RCC_ClockConfig+0x50>
 80052bc:	e75b      	b.n	8005176 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052be:	4824      	ldr	r0, [pc, #144]	; (8005350 <HAL_RCC_ClockConfig+0x208>)
 80052c0:	6801      	ldr	r1, [r0, #0]
 80052c2:	0189      	lsls	r1, r1, #6
 80052c4:	f57f af57 	bpl.w	8005176 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052c8:	68c7      	ldr	r7, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052ca:	68c1      	ldr	r1, [r0, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052cc:	68c0      	ldr	r0, [r0, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052ce:	f007 0703 	and.w	r7, r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052d2:	f3c1 1103 	ubfx	r1, r1, #4, #4
  switch (pllsource)
 80052d6:	2f03      	cmp	r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052d8:	f101 0601 	add.w	r6, r1, #1
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052dc:	bf0c      	ite	eq
 80052de:	4921      	ldreq	r1, [pc, #132]	; (8005364 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052e0:	4921      	ldrne	r1, [pc, #132]	; (8005368 <HAL_RCC_ClockConfig+0x220>)
 80052e2:	fbb1 f1f6 	udiv	r1, r1, r6
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052e6:	4e1a      	ldr	r6, [pc, #104]	; (8005350 <HAL_RCC_ClockConfig+0x208>)
      if(pllfreq > 80000000U)
 80052e8:	4f1a      	ldr	r7, [pc, #104]	; (8005354 <HAL_RCC_ClockConfig+0x20c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052ea:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80052ee:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052f2:	68f0      	ldr	r0, [r6, #12]
 80052f4:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80052f8:	3001      	adds	r0, #1
 80052fa:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 80052fc:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8005300:	42b9      	cmp	r1, r7
 8005302:	d920      	bls.n	8005346 <HAL_RCC_ClockConfig+0x1fe>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005304:	68b1      	ldr	r1, [r6, #8]
 8005306:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 800530a:	d005      	beq.n	8005318 <HAL_RCC_ClockConfig+0x1d0>
 800530c:	f013 0902 	ands.w	r9, r3, #2
 8005310:	f43f af4b 	beq.w	80051aa <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005314:	68a3      	ldr	r3, [r4, #8]
 8005316:	b9b3      	cbnz	r3, 8005346 <HAL_RCC_ClockConfig+0x1fe>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005318:	490d      	ldr	r1, [pc, #52]	; (8005350 <HAL_RCC_ClockConfig+0x208>)
 800531a:	688b      	ldr	r3, [r1, #8]
 800531c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005324:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005326:	f04f 0980 	mov.w	r9, #128	; 0x80
 800532a:	e73e      	b.n	80051aa <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 800532c:	2001      	movs	r0, #1
}
 800532e:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005330:	4a07      	ldr	r2, [pc, #28]	; (8005350 <HAL_RCC_ClockConfig+0x208>)
 8005332:	6893      	ldr	r3, [r2, #8]
 8005334:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800533c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800533e:	6862      	ldr	r2, [r4, #4]
 8005340:	f04f 0980 	mov.w	r9, #128	; 0x80
 8005344:	e731      	b.n	80051aa <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005346:	f04f 0900 	mov.w	r9, #0
 800534a:	e72e      	b.n	80051aa <HAL_RCC_ClockConfig+0x62>
 800534c:	40022000 	.word	0x40022000
 8005350:	40021000 	.word	0x40021000
 8005354:	04c4b400 	.word	0x04c4b400
 8005358:	08008d80 	.word	0x08008d80
 800535c:	20000614 	.word	0x20000614
 8005360:	2000061c 	.word	0x2000061c
 8005364:	007a1200 	.word	0x007a1200
 8005368:	00f42400 	.word	0x00f42400

0800536c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 800536c:	4b01      	ldr	r3, [pc, #4]	; (8005374 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800536e:	6818      	ldr	r0, [r3, #0]
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	20000614 	.word	0x20000614

08005378 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005378:	4b05      	ldr	r3, [pc, #20]	; (8005390 <HAL_RCC_GetPCLK1Freq+0x18>)
 800537a:	4a06      	ldr	r2, [pc, #24]	; (8005394 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800537c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800537e:	4906      	ldr	r1, [pc, #24]	; (8005398 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005380:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005384:	6808      	ldr	r0, [r1, #0]
 8005386:	5cd3      	ldrb	r3, [r2, r3]
 8005388:	f003 031f 	and.w	r3, r3, #31
}
 800538c:	40d8      	lsrs	r0, r3
 800538e:	4770      	bx	lr
 8005390:	40021000 	.word	0x40021000
 8005394:	08008d90 	.word	0x08008d90
 8005398:	20000614 	.word	0x20000614

0800539c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800539c:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 800539e:	4a06      	ldr	r2, [pc, #24]	; (80053b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80053a0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80053a2:	4906      	ldr	r1, [pc, #24]	; (80053bc <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053a4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80053a8:	6808      	ldr	r0, [r1, #0]
 80053aa:	5cd3      	ldrb	r3, [r2, r3]
 80053ac:	f003 031f 	and.w	r3, r3, #31
}
 80053b0:	40d8      	lsrs	r0, r3
 80053b2:	4770      	bx	lr
 80053b4:	40021000 	.word	0x40021000
 80053b8:	08008d90 	.word	0x08008d90
 80053bc:	20000614 	.word	0x20000614

080053c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053c4:	6803      	ldr	r3, [r0, #0]
{
 80053c6:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053c8:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 80053cc:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053ce:	d056      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053d0:	4b9f      	ldr	r3, [pc, #636]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80053d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053d4:	00d5      	lsls	r5, r2, #3
 80053d6:	f140 810c 	bpl.w	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 80053da:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053dc:	4d9d      	ldr	r5, [pc, #628]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80053de:	682b      	ldr	r3, [r5, #0]
 80053e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053e4:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053e6:	f7fe f903 	bl	80035f0 <HAL_GetTick>
 80053ea:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053ec:	e005      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ee:	f7fe f8ff 	bl	80035f0 <HAL_GetTick>
 80053f2:	1b83      	subs	r3, r0, r6
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	f200 8107 	bhi.w	8005608 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053fa:	682b      	ldr	r3, [r5, #0]
 80053fc:	05d8      	lsls	r0, r3, #23
 80053fe:	d5f6      	bpl.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005400:	4d93      	ldr	r5, [pc, #588]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005402:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005406:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800540a:	d027      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800540c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800540e:	429a      	cmp	r2, r3
 8005410:	d025      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005412:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005416:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800541a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800541e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005422:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005426:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800542a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800542e:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005430:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8005434:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005438:	f140 8108 	bpl.w	800564c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543c:	f7fe f8d8 	bl	80035f0 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005440:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005444:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005446:	e005      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005448:	f7fe f8d2 	bl	80035f0 <HAL_GetTick>
 800544c:	1b80      	subs	r0, r0, r6
 800544e:	4540      	cmp	r0, r8
 8005450:	f200 80da 	bhi.w	8005608 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005454:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005458:	079b      	lsls	r3, r3, #30
 800545a:	d5f5      	bpl.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800545c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800545e:	497c      	ldr	r1, [pc, #496]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005460:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005464:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800546e:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005470:	b127      	cbz	r7, 800547c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005472:	4a77      	ldr	r2, [pc, #476]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005474:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800547a:	6593      	str	r3, [r2, #88]	; 0x58
 800547c:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800547e:	07de      	lsls	r6, r3, #31
 8005480:	d508      	bpl.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005482:	4973      	ldr	r1, [pc, #460]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005484:	6865      	ldr	r5, [r4, #4]
 8005486:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800548a:	f022 0203 	bic.w	r2, r2, #3
 800548e:	432a      	orrs	r2, r5
 8005490:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005494:	079d      	lsls	r5, r3, #30
 8005496:	d508      	bpl.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005498:	496d      	ldr	r1, [pc, #436]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800549a:	68a5      	ldr	r5, [r4, #8]
 800549c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054a0:	f022 020c 	bic.w	r2, r2, #12
 80054a4:	432a      	orrs	r2, r5
 80054a6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054aa:	0759      	lsls	r1, r3, #29
 80054ac:	d508      	bpl.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054ae:	4968      	ldr	r1, [pc, #416]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80054b0:	68e5      	ldr	r5, [r4, #12]
 80054b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054b6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80054ba:	432a      	orrs	r2, r5
 80054bc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054c0:	071a      	lsls	r2, r3, #28
 80054c2:	d508      	bpl.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054c4:	4962      	ldr	r1, [pc, #392]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80054c6:	6925      	ldr	r5, [r4, #16]
 80054c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054cc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80054d0:	432a      	orrs	r2, r5
 80054d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054d6:	069f      	lsls	r7, r3, #26
 80054d8:	d508      	bpl.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054da:	495d      	ldr	r1, [pc, #372]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80054dc:	6965      	ldr	r5, [r4, #20]
 80054de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054e2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054e6:	432a      	orrs	r2, r5
 80054e8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054ec:	065e      	lsls	r6, r3, #25
 80054ee:	d508      	bpl.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054f0:	4957      	ldr	r1, [pc, #348]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80054f2:	69a5      	ldr	r5, [r4, #24]
 80054f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054f8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80054fc:	432a      	orrs	r2, r5
 80054fe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005502:	061d      	lsls	r5, r3, #24
 8005504:	d508      	bpl.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005506:	4952      	ldr	r1, [pc, #328]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005508:	69e5      	ldr	r5, [r4, #28]
 800550a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800550e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005512:	432a      	orrs	r2, r5
 8005514:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005518:	05d9      	lsls	r1, r3, #23
 800551a:	d508      	bpl.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800551c:	494c      	ldr	r1, [pc, #304]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800551e:	6a25      	ldr	r5, [r4, #32]
 8005520:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005524:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005528:	432a      	orrs	r2, r5
 800552a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800552e:	059a      	lsls	r2, r3, #22
 8005530:	d508      	bpl.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005532:	4947      	ldr	r1, [pc, #284]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005534:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005536:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800553a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800553e:	432a      	orrs	r2, r5
 8005540:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005544:	055f      	lsls	r7, r3, #21
 8005546:	d50b      	bpl.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005548:	4941      	ldr	r1, [pc, #260]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800554a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800554c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005550:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005554:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005556:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800555a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800555e:	d055      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005560:	051e      	lsls	r6, r3, #20
 8005562:	d50b      	bpl.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005564:	493a      	ldr	r1, [pc, #232]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005566:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005568:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800556c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005570:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005572:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005576:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800557a:	d04c      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800557c:	04dd      	lsls	r5, r3, #19
 800557e:	d50b      	bpl.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005580:	4933      	ldr	r1, [pc, #204]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005582:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005584:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005588:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800558c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800558e:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005592:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005596:	d043      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005598:	0499      	lsls	r1, r3, #18
 800559a:	d50b      	bpl.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800559c:	492c      	ldr	r1, [pc, #176]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800559e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80055a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80055a4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80055a8:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055aa:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055b2:	d03a      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055b4:	045a      	lsls	r2, r3, #17
 80055b6:	d50b      	bpl.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055b8:	4925      	ldr	r1, [pc, #148]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80055ba:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80055bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80055c0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80055c4:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055c6:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055ce:	d031      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80055d0:	041b      	lsls	r3, r3, #16
 80055d2:	d50b      	bpl.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80055d4:	4a1e      	ldr	r2, [pc, #120]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80055d6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80055d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80055dc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80055e0:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80055e2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80055e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80055ea:	d028      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 80055ec:	b002      	add	sp, #8
 80055ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80055f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80055f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80055f8:	659a      	str	r2, [r3, #88]	; 0x58
 80055fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005600:	9301      	str	r3, [sp, #4]
 8005602:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005604:	2701      	movs	r7, #1
 8005606:	e6e9      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8005608:	2003      	movs	r0, #3
 800560a:	e731      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800560c:	68ca      	ldr	r2, [r1, #12]
 800560e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005612:	60ca      	str	r2, [r1, #12]
 8005614:	e7a4      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005616:	68ca      	ldr	r2, [r1, #12]
 8005618:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800561c:	60ca      	str	r2, [r1, #12]
 800561e:	e7ad      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005620:	68ca      	ldr	r2, [r1, #12]
 8005622:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005626:	60ca      	str	r2, [r1, #12]
 8005628:	e7b6      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800562a:	68ca      	ldr	r2, [r1, #12]
 800562c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005630:	60ca      	str	r2, [r1, #12]
 8005632:	e7bf      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005634:	68ca      	ldr	r2, [r1, #12]
 8005636:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800563a:	60ca      	str	r2, [r1, #12]
 800563c:	e7c8      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800563e:	68d3      	ldr	r3, [r2, #12]
 8005640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005644:	60d3      	str	r3, [r2, #12]
}
 8005646:	b002      	add	sp, #8
 8005648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800564c:	4613      	mov	r3, r2
 800564e:	e706      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8005650:	40021000 	.word	0x40021000
 8005654:	40007000 	.word	0x40007000

08005658 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005658:	6a03      	ldr	r3, [r0, #32]
 800565a:	f023 0301 	bic.w	r3, r3, #1
 800565e:	6203      	str	r3, [r0, #32]
{
 8005660:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005662:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005664:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005666:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005668:	4f18      	ldr	r7, [pc, #96]	; (80056cc <TIM_OC1_SetConfig+0x74>)
  tmpccer |= OC_Config->OCPolarity;
 800566a:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 800566c:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800566e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 8005672:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005676:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800567a:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 800567c:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 8005680:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005684:	d00e      	beq.n	80056a4 <TIM_OC1_SetConfig+0x4c>
 8005686:	4c12      	ldr	r4, [pc, #72]	; (80056d0 <TIM_OC1_SetConfig+0x78>)
 8005688:	42a0      	cmp	r0, r4
 800568a:	d00b      	beq.n	80056a4 <TIM_OC1_SetConfig+0x4c>
 800568c:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8005690:	42a0      	cmp	r0, r4
 8005692:	d007      	beq.n	80056a4 <TIM_OC1_SetConfig+0x4c>
 8005694:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005698:	42a0      	cmp	r0, r4
 800569a:	d003      	beq.n	80056a4 <TIM_OC1_SetConfig+0x4c>
 800569c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056a0:	42a0      	cmp	r0, r4
 80056a2:	d10b      	bne.n	80056bc <TIM_OC1_SetConfig+0x64>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056a4:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80056a6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80056aa:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056ac:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056b0:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80056b4:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80056b6:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80056ba:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056bc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80056be:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80056c0:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80056c2:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 80056c4:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80056c6:	6203      	str	r3, [r0, #32]
}
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40012c00 	.word	0x40012c00
 80056d0:	40013400 	.word	0x40013400

080056d4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056d4:	6a03      	ldr	r3, [r0, #32]
 80056d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056da:	6203      	str	r3, [r0, #32]
{
 80056dc:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056de:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e0:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056e2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056e4:	4f19      	ldr	r7, [pc, #100]	; (800574c <TIM_OC3_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056e6:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80056e8:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 80056ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056f2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056f6:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056f8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80056fc:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005700:	d00f      	beq.n	8005722 <TIM_OC3_SetConfig+0x4e>
 8005702:	4c13      	ldr	r4, [pc, #76]	; (8005750 <TIM_OC3_SetConfig+0x7c>)
 8005704:	42a0      	cmp	r0, r4
 8005706:	d00c      	beq.n	8005722 <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005708:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800570c:	42a0      	cmp	r0, r4
 800570e:	d00f      	beq.n	8005730 <TIM_OC3_SetConfig+0x5c>
 8005710:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005714:	42a0      	cmp	r0, r4
 8005716:	d00b      	beq.n	8005730 <TIM_OC3_SetConfig+0x5c>
 8005718:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800571c:	42a0      	cmp	r0, r4
 800571e:	d10e      	bne.n	800573e <TIM_OC3_SetConfig+0x6a>
 8005720:	e006      	b.n	8005730 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005722:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005724:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005728:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800572c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005730:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005734:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005738:	432c      	orrs	r4, r5
 800573a:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800573e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005740:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005742:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005744:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8005746:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005748:	6203      	str	r3, [r0, #32]
}
 800574a:	4770      	bx	lr
 800574c:	40012c00 	.word	0x40012c00
 8005750:	40013400 	.word	0x40013400

08005754 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005754:	6a03      	ldr	r3, [r0, #32]
 8005756:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800575a:	6203      	str	r3, [r0, #32]
{
 800575c:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005760:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005762:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005764:	4f19      	ldr	r7, [pc, #100]	; (80057cc <TIM_OC4_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005766:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005768:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800576a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 800576e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005772:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005776:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005778:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800577c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005780:	d00f      	beq.n	80057a2 <TIM_OC4_SetConfig+0x4e>
 8005782:	4c13      	ldr	r4, [pc, #76]	; (80057d0 <TIM_OC4_SetConfig+0x7c>)
 8005784:	42a0      	cmp	r0, r4
 8005786:	d00c      	beq.n	80057a2 <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005788:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800578c:	42a0      	cmp	r0, r4
 800578e:	d00f      	beq.n	80057b0 <TIM_OC4_SetConfig+0x5c>
 8005790:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005794:	42a0      	cmp	r0, r4
 8005796:	d00b      	beq.n	80057b0 <TIM_OC4_SetConfig+0x5c>
 8005798:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800579c:	42a0      	cmp	r0, r4
 800579e:	d10e      	bne.n	80057be <TIM_OC4_SetConfig+0x6a>
 80057a0:	e006      	b.n	80057b0 <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80057a2:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80057a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80057a8:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 80057ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80057b0:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80057b4:	f426 4640 	bic.w	r6, r6, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80057b8:	432c      	orrs	r4, r5
 80057ba:	ea46 1684 	orr.w	r6, r6, r4, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057be:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80057c0:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80057c2:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80057c4:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 80057c6:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80057c8:	6203      	str	r3, [r0, #32]
}
 80057ca:	4770      	bx	lr
 80057cc:	40012c00 	.word	0x40012c00
 80057d0:	40013400 	.word	0x40013400

080057d4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d07d      	beq.n	80058d4 <HAL_TIM_Base_Init+0x100>
{
 80057d8:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80057da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80057de:	4604      	mov	r4, r0
 80057e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d06d      	beq.n	80058c4 <HAL_TIM_Base_Init+0xf0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e8:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057ea:	4a3b      	ldr	r2, [pc, #236]	; (80058d8 <HAL_TIM_Base_Init+0x104>)
  htim->State = HAL_TIM_STATE_BUSY;
 80057ec:	2302      	movs	r3, #2
 80057ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057f2:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 80057f4:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057f6:	d051      	beq.n	800589c <HAL_TIM_Base_Init+0xc8>
 80057f8:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80057fc:	d021      	beq.n	8005842 <HAL_TIM_Base_Init+0x6e>
 80057fe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005802:	4291      	cmp	r1, r2
 8005804:	d01d      	beq.n	8005842 <HAL_TIM_Base_Init+0x6e>
 8005806:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800580a:	4291      	cmp	r1, r2
 800580c:	d019      	beq.n	8005842 <HAL_TIM_Base_Init+0x6e>
 800580e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8005812:	4291      	cmp	r1, r2
 8005814:	d042      	beq.n	800589c <HAL_TIM_Base_Init+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005816:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800581a:	4291      	cmp	r1, r2
 800581c:	d057      	beq.n	80058ce <HAL_TIM_Base_Init+0xfa>
 800581e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005822:	4291      	cmp	r1, r2
 8005824:	d053      	beq.n	80058ce <HAL_TIM_Base_Init+0xfa>
 8005826:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800582a:	4291      	cmp	r1, r2
 800582c:	d04f      	beq.n	80058ce <HAL_TIM_Base_Init+0xfa>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800582e:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005830:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005832:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005838:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800583a:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800583c:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800583e:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005840:	e010      	b.n	8005864 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8005842:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005844:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005846:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800584c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800584e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005852:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005854:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800585a:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800585c:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800585e:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005860:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005862:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005864:	2301      	movs	r3, #1
 8005866:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005868:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800586c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005870:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005874:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005878:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800587c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005884:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005888:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800588c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005890:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005894:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005898:	2000      	movs	r0, #0
}
 800589a:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800589c:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800589e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058a0:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80058a6:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80058a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ac:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058b2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80058b4:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058b6:	68e3      	ldr	r3, [r4, #12]
 80058b8:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80058ba:	6863      	ldr	r3, [r4, #4]
 80058bc:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80058be:	6963      	ldr	r3, [r4, #20]
 80058c0:	630b      	str	r3, [r1, #48]	; 0x30
 80058c2:	e7cf      	b.n	8005864 <HAL_TIM_Base_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 80058c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80058c8:	f7fd f812 	bl	80028f0 <HAL_TIM_Base_MspInit>
 80058cc:	e78c      	b.n	80057e8 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ce:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058d0:	69a2      	ldr	r2, [r4, #24]
 80058d2:	e7e9      	b.n	80058a8 <HAL_TIM_Base_Init+0xd4>
    return HAL_ERROR;
 80058d4:	2001      	movs	r0, #1
}
 80058d6:	4770      	bx	lr
 80058d8:	40012c00 	.word	0x40012c00

080058dc <HAL_TIM_PWM_MspInit>:
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop

080058e0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d07d      	beq.n	80059e0 <HAL_TIM_PWM_Init+0x100>
{
 80058e4:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80058e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80058ea:	4604      	mov	r4, r0
 80058ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d06d      	beq.n	80059d0 <HAL_TIM_PWM_Init+0xf0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f4:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058f6:	4a3b      	ldr	r2, [pc, #236]	; (80059e4 <HAL_TIM_PWM_Init+0x104>)
  htim->State = HAL_TIM_STATE_BUSY;
 80058f8:	2302      	movs	r3, #2
 80058fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058fe:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8005900:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005902:	d051      	beq.n	80059a8 <HAL_TIM_PWM_Init+0xc8>
 8005904:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8005908:	d021      	beq.n	800594e <HAL_TIM_PWM_Init+0x6e>
 800590a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800590e:	4291      	cmp	r1, r2
 8005910:	d01d      	beq.n	800594e <HAL_TIM_PWM_Init+0x6e>
 8005912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005916:	4291      	cmp	r1, r2
 8005918:	d019      	beq.n	800594e <HAL_TIM_PWM_Init+0x6e>
 800591a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800591e:	4291      	cmp	r1, r2
 8005920:	d042      	beq.n	80059a8 <HAL_TIM_PWM_Init+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005922:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005926:	4291      	cmp	r1, r2
 8005928:	d057      	beq.n	80059da <HAL_TIM_PWM_Init+0xfa>
 800592a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800592e:	4291      	cmp	r1, r2
 8005930:	d053      	beq.n	80059da <HAL_TIM_PWM_Init+0xfa>
 8005932:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005936:	4291      	cmp	r1, r2
 8005938:	d04f      	beq.n	80059da <HAL_TIM_PWM_Init+0xfa>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800593a:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800593c:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800593e:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005944:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005946:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005948:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800594a:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800594c:	e010      	b.n	8005970 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 800594e:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005950:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005952:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005958:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800595a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800595e:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005960:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005966:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8005968:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800596a:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800596c:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800596e:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005970:	2301      	movs	r3, #1
 8005972:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005974:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800597c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005980:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005984:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800598c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005990:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005994:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005998:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800599c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80059a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80059a4:	2000      	movs	r0, #0
}
 80059a6:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80059a8:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059aa:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059ac:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80059b2:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80059b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059b8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059be:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80059c0:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059c2:	68e3      	ldr	r3, [r4, #12]
 80059c4:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80059c6:	6863      	ldr	r3, [r4, #4]
 80059c8:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80059ca:	6963      	ldr	r3, [r4, #20]
 80059cc:	630b      	str	r3, [r1, #48]	; 0x30
 80059ce:	e7cf      	b.n	8005970 <HAL_TIM_PWM_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 80059d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80059d4:	f7ff ff82 	bl	80058dc <HAL_TIM_PWM_MspInit>
 80059d8:	e78c      	b.n	80058f4 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059da:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059dc:	69a2      	ldr	r2, [r4, #24]
 80059de:	e7e9      	b.n	80059b4 <HAL_TIM_PWM_Init+0xd4>
    return HAL_ERROR;
 80059e0:	2001      	movs	r0, #1
}
 80059e2:	4770      	bx	lr
 80059e4:	40012c00 	.word	0x40012c00

080059e8 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 80059e8:	2800      	cmp	r0, #0
 80059ea:	f000 80ab 	beq.w	8005b44 <HAL_TIM_Encoder_Init+0x15c>
{
 80059ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80059f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80059f6:	460d      	mov	r5, r1
 80059f8:	4604      	mov	r4, r0
 80059fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 8095 	beq.w	8005b2e <HAL_TIM_Encoder_Init+0x146>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a04:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a06:	4950      	ldr	r1, [pc, #320]	; (8005b48 <HAL_TIM_Encoder_Init+0x160>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	2202      	movs	r2, #2
 8005a0a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	f422 32a0 	bic.w	r2, r2, #81920	; 0x14000
 8005a14:	f022 0207 	bic.w	r2, r2, #7
 8005a18:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a1a:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8005a1c:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a1e:	d072      	beq.n	8005b06 <HAL_TIM_Encoder_Init+0x11e>
 8005a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a24:	d021      	beq.n	8005a6a <HAL_TIM_Encoder_Init+0x82>
 8005a26:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8005a2a:	428b      	cmp	r3, r1
 8005a2c:	d01d      	beq.n	8005a6a <HAL_TIM_Encoder_Init+0x82>
 8005a2e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a32:	428b      	cmp	r3, r1
 8005a34:	d019      	beq.n	8005a6a <HAL_TIM_Encoder_Init+0x82>
 8005a36:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8005a3a:	428b      	cmp	r3, r1
 8005a3c:	d063      	beq.n	8005b06 <HAL_TIM_Encoder_Init+0x11e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a3e:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8005a42:	428b      	cmp	r3, r1
 8005a44:	d078      	beq.n	8005b38 <HAL_TIM_Encoder_Init+0x150>
 8005a46:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a4a:	428b      	cmp	r3, r1
 8005a4c:	d074      	beq.n	8005b38 <HAL_TIM_Encoder_Init+0x150>
 8005a4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a52:	428b      	cmp	r3, r1
 8005a54:	d070      	beq.n	8005b38 <HAL_TIM_Encoder_Init+0x150>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a56:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a58:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a5e:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8005a60:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005a62:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a64:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a66:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a68:	e010      	b.n	8005a8c <HAL_TIM_Encoder_Init+0xa4>
    tmpcr1 |= Structure->CounterMode;
 8005a6a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a6c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005a72:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a78:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a7a:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a80:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a82:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8005a84:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005a86:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a88:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a8a:	6299      	str	r1, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005a8c:	2601      	movs	r6, #1
 8005a8e:	615e      	str	r6, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 8005a90:	f8d3 c008 	ldr.w	ip, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8005a94:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a96:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a98:	69af      	ldr	r7, [r5, #24]
 8005a9a:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8005a9c:	f8d5 e000 	ldr.w	lr, [r5]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005aa0:	f420 7840 	bic.w	r8, r0, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005aa4:	69e8      	ldr	r0, [r5, #28]
 8005aa6:	0112      	lsls	r2, r2, #4
 8005aa8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005aac:	68e8      	ldr	r0, [r5, #12]
 8005aae:	4302      	orrs	r2, r0
 8005ab0:	6a28      	ldr	r0, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ab2:	f028 0803 	bic.w	r8, r8, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ab6:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8005aba:	ea41 0108 	orr.w	r1, r1, r8
  tmpccer = htim->Instance->CCER;
 8005abe:	6a1f      	ldr	r7, [r3, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ac0:	f8d5 8014 	ldr.w	r8, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ac4:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ac8:	6868      	ldr	r0, [r5, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005aca:	f421 417c 	bic.w	r1, r1, #64512	; 0xfc00
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ace:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ad2:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ad6:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ada:	4307      	orrs	r7, r0
  tmpsmcr |= sConfig->EncoderMode;
 8005adc:	ea4c 050e 	orr.w	r5, ip, lr
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ae0:	430a      	orrs	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 8005ae2:	609d      	str	r5, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8005ae4:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 8005ae6:	621f      	str	r7, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae8:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005aec:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005af0:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005af4:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005af8:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005afc:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  return HAL_OK;
 8005b00:	2000      	movs	r0, #0
}
 8005b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpcr1 |= Structure->CounterMode;
 8005b06:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b08:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b0a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005b0e:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b14:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b16:	69a1      	ldr	r1, [r4, #24]
 8005b18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b1c:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8005b1e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b20:	68e2      	ldr	r2, [r4, #12]
 8005b22:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005b24:	6862      	ldr	r2, [r4, #4]
 8005b26:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005b28:	6962      	ldr	r2, [r4, #20]
 8005b2a:	631a      	str	r2, [r3, #48]	; 0x30
 8005b2c:	e7ae      	b.n	8005a8c <HAL_TIM_Encoder_Init+0xa4>
    htim->Lock = HAL_UNLOCKED;
 8005b2e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8005b32:	f7fc fef3 	bl	800291c <HAL_TIM_Encoder_MspInit>
 8005b36:	e765      	b.n	8005a04 <HAL_TIM_Encoder_Init+0x1c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b38:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b3a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b3c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b40:	4302      	orrs	r2, r0
 8005b42:	e7e9      	b.n	8005b18 <HAL_TIM_Encoder_Init+0x130>
    return HAL_ERROR;
 8005b44:	2001      	movs	r0, #1
}
 8005b46:	4770      	bx	lr
 8005b48:	40012c00 	.word	0x40012c00

08005b4c <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8005b4c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d067      	beq.n	8005c24 <HAL_TIM_SlaveConfigSynchro+0xd8>
{
 8005b54:	b4f0      	push	{r4, r5, r6, r7}
 8005b56:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005b58:	2201      	movs	r2, #1
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b5a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 8005b5c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005b60:	2302      	movs	r3, #2
 8005b62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005b66:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005b68:	e9d1 5300 	ldrd	r5, r3, [r1]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b6c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005b70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005b74:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005b76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b7a:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005b7e:	432a      	orrs	r2, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005b80:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8005b82:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8005b84:	d05c      	beq.n	8005c40 <HAL_TIM_SlaveConfigSynchro+0xf4>
 8005b86:	d816      	bhi.n	8005bb6 <HAL_TIM_SlaveConfigSynchro+0x6a>
 8005b88:	2b40      	cmp	r3, #64	; 0x40
 8005b8a:	d06c      	beq.n	8005c66 <HAL_TIM_SlaveConfigSynchro+0x11a>
 8005b8c:	d932      	bls.n	8005bf4 <HAL_TIM_SlaveConfigSynchro+0xa8>
 8005b8e:	2b50      	cmp	r3, #80	; 0x50
 8005b90:	d140      	bne.n	8005c14 <HAL_TIM_SlaveConfigSynchro+0xc8>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b92:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b94:	6a06      	ldr	r6, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b96:	688a      	ldr	r2, [r1, #8]
 8005b98:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b9a:	f026 0601 	bic.w	r6, r6, #1
 8005b9e:	6206      	str	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ba0:	6983      	ldr	r3, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ba2:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8005baa:	430a      	orrs	r2, r1
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bac:	ea43 1307 	orr.w	r3, r3, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bb0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005bb2:	6202      	str	r2, [r0, #32]
 8005bb4:	e00d      	b.n	8005bd2 <HAL_TIM_SlaveConfigSynchro+0x86>
  switch (sSlaveConfig->InputTrigger)
 8005bb6:	2b70      	cmp	r3, #112	; 0x70
 8005bb8:	d036      	beq.n	8005c28 <HAL_TIM_SlaveConfigSynchro+0xdc>
 8005bba:	2b6f      	cmp	r3, #111	; 0x6f
 8005bbc:	d92a      	bls.n	8005c14 <HAL_TIM_SlaveConfigSynchro+0xc8>
 8005bbe:	4a33      	ldr	r2, [pc, #204]	; (8005c8c <HAL_TIM_SlaveConfigSynchro+0x140>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d006      	beq.n	8005bd2 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005bc4:	d91c      	bls.n	8005c00 <HAL_TIM_SlaveConfigSynchro+0xb4>
 8005bc6:	4a32      	ldr	r2, [pc, #200]	; (8005c90 <HAL_TIM_SlaveConfigSynchro+0x144>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d002      	beq.n	8005bd2 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005bcc:	3230      	adds	r2, #48	; 0x30
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d120      	bne.n	8005c14 <HAL_TIM_SlaveConfigSynchro+0xc8>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005bd2:	68c3      	ldr	r3, [r0, #12]
 8005bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bd8:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005bda:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 8005bdc:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8005bde:	2101      	movs	r1, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005be0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005be4:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8005be6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005bea:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  return HAL_OK;
 8005bee:	4610      	mov	r0, r2
}
 8005bf0:	bcf0      	pop	{r4, r5, r6, r7}
 8005bf2:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8005bf4:	2b20      	cmp	r3, #32
 8005bf6:	d0ec      	beq.n	8005bd2 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005bf8:	d909      	bls.n	8005c0e <HAL_TIM_SlaveConfigSynchro+0xc2>
 8005bfa:	2b30      	cmp	r3, #48	; 0x30
 8005bfc:	d10a      	bne.n	8005c14 <HAL_TIM_SlaveConfigSynchro+0xc8>
 8005bfe:	e7e8      	b.n	8005bd2 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005c00:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c04:	d0e5      	beq.n	8005bd2 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005c06:	3a10      	subs	r2, #16
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d0e2      	beq.n	8005bd2 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005c0c:	e002      	b.n	8005c14 <HAL_TIM_SlaveConfigSynchro+0xc8>
 8005c0e:	f033 0310 	bics.w	r3, r3, #16
 8005c12:	d0de      	beq.n	8005bd2 <HAL_TIM_SlaveConfigSynchro+0x86>
    htim->State = HAL_TIM_STATE_READY;
 8005c14:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005c16:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8005c18:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005c1c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005c20:	bcf0      	pop	{r4, r5, r6, r7}
 8005c22:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005c24:	2002      	movs	r0, #2
}
 8005c26:	4770      	bx	lr

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c28:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8005c2c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c2e:	6909      	ldr	r1, [r1, #16]
 8005c30:	432b      	orrs	r3, r5
 8005c32:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c36:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c3a:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c3c:	6083      	str	r3, [r0, #8]
 8005c3e:	e7c8      	b.n	8005bd2 <HAL_TIM_SlaveConfigSynchro+0x86>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c40:	6a05      	ldr	r5, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c42:	688e      	ldr	r6, [r1, #8]
 8005c44:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c46:	f025 0510 	bic.w	r5, r5, #16
 8005c4a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c4c:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005c4e:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c50:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c58:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c5c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8005c60:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005c62:	6203      	str	r3, [r0, #32]
 8005c64:	e7b5      	b.n	8005bd2 <HAL_TIM_SlaveConfigSynchro+0x86>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005c66:	2d05      	cmp	r5, #5
 8005c68:	d0d4      	beq.n	8005c14 <HAL_TIM_SlaveConfigSynchro+0xc8>
 8005c6a:	f1b5 1f01 	cmp.w	r5, #65537	; 0x10001
 8005c6e:	d0d1      	beq.n	8005c14 <HAL_TIM_SlaveConfigSynchro+0xc8>
      tmpccer = htim->Instance->CCER;
 8005c70:	6a05      	ldr	r5, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005c72:	6a02      	ldr	r2, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005c74:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005c76:	f022 0201 	bic.w	r2, r2, #1
 8005c7a:	6202      	str	r2, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005c7c:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005c82:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8005c86:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8005c88:	6205      	str	r5, [r0, #32]
      break;
 8005c8a:	e7a2      	b.n	8005bd2 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005c8c:	00100030 	.word	0x00100030
 8005c90:	00100040 	.word	0x00100040

08005c94 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c94:	6a03      	ldr	r3, [r0, #32]
 8005c96:	f023 0310 	bic.w	r3, r3, #16
 8005c9a:	6203      	str	r3, [r0, #32]
{
 8005c9c:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 8005c9e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005ca0:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005ca2:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ca4:	4f19      	ldr	r7, [pc, #100]	; (8005d0c <TIM_OC2_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ca6:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ca8:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005caa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8005cae:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cb2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cb6:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cb8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cbc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cc0:	d00f      	beq.n	8005ce2 <TIM_OC2_SetConfig+0x4e>
 8005cc2:	4c13      	ldr	r4, [pc, #76]	; (8005d10 <TIM_OC2_SetConfig+0x7c>)
 8005cc4:	42a0      	cmp	r0, r4
 8005cc6:	d00c      	beq.n	8005ce2 <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc8:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8005ccc:	42a0      	cmp	r0, r4
 8005cce:	d00f      	beq.n	8005cf0 <TIM_OC2_SetConfig+0x5c>
 8005cd0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005cd4:	42a0      	cmp	r0, r4
 8005cd6:	d00b      	beq.n	8005cf0 <TIM_OC2_SetConfig+0x5c>
 8005cd8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005cdc:	42a0      	cmp	r0, r4
 8005cde:	d10e      	bne.n	8005cfe <TIM_OC2_SetConfig+0x6a>
 8005ce0:	e006      	b.n	8005cf0 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ce2:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ce8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cf0:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cf4:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cf8:	432c      	orrs	r4, r5
 8005cfa:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8005cfe:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005d00:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005d02:	6182      	str	r2, [r0, #24]
}
 8005d04:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8005d06:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005d08:	6203      	str	r3, [r0, #32]
}
 8005d0a:	4770      	bx	lr
 8005d0c:	40012c00 	.word	0x40012c00
 8005d10:	40013400 	.word	0x40013400

08005d14 <HAL_TIM_PWM_ConfigChannel>:
{
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005d16:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	f000 80e4 	beq.w	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x1d4>
 8005d20:	2301      	movs	r3, #1
 8005d22:	4604      	mov	r4, r0
 8005d24:	460d      	mov	r5, r1
 8005d26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005d2a:	2a14      	cmp	r2, #20
 8005d2c:	d80c      	bhi.n	8005d48 <HAL_TIM_PWM_ConfigChannel+0x34>
 8005d2e:	e8df f002 	tbb	[pc, r2]
 8005d32:	0b51      	.short	0x0b51
 8005d34:	0b630b0b 	.word	0x0b630b0b
 8005d38:	0b760b0b 	.word	0x0b760b0b
 8005d3c:	0b880b0b 	.word	0x0b880b0b
 8005d40:	0b9b0b0b 	.word	0x0b9b0b0b
 8005d44:	0b0b      	.short	0x0b0b
 8005d46:	10          	.byte	0x10
 8005d47:	00          	.byte	0x00
  __HAL_LOCK(htim);
 8005d48:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d52:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d54:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d58:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d5a:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d5c:	4e63      	ldr	r6, [pc, #396]	; (8005eec <HAL_TIM_PWM_ConfigChannel+0x1d8>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d5e:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 8005d62:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8005d64:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005d66:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005d68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d6a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d6e:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d72:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d76:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d78:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d7c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d80:	d00f      	beq.n	8005da2 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8005d82:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005d86:	42b3      	cmp	r3, r6
 8005d88:	d00b      	beq.n	8005da2 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8005d8a:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005d8e:	42b3      	cmp	r3, r6
 8005d90:	d007      	beq.n	8005da2 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8005d92:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005d96:	42b3      	cmp	r3, r6
 8005d98:	d003      	beq.n	8005da2 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8005d9a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005d9e:	42b3      	cmp	r3, r6
 8005da0:	d104      	bne.n	8005dac <HAL_TIM_PWM_ConfigChannel+0x98>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005da2:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005da4:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005da8:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8005dac:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8005dae:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005db0:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8005db2:	64de      	str	r6, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8005db4:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005db6:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005db8:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005dba:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005dbe:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005dc0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005dc2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005dc6:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005dc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005dca:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005dce:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8005dd0:	2000      	movs	r0, #0
      break;
 8005dd2:	e7ba      	b.n	8005d4a <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dd4:	6800      	ldr	r0, [r0, #0]
 8005dd6:	f7ff fc3f 	bl	8005658 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dda:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ddc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dde:	6999      	ldr	r1, [r3, #24]
 8005de0:	f041 0108 	orr.w	r1, r1, #8
 8005de4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005de6:	6999      	ldr	r1, [r3, #24]
 8005de8:	f021 0104 	bic.w	r1, r1, #4
 8005dec:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dee:	699a      	ldr	r2, [r3, #24]
 8005df0:	4302      	orrs	r2, r0
 8005df2:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005df4:	2000      	movs	r0, #0
      break;
 8005df6:	e7a8      	b.n	8005d4a <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005df8:	6800      	ldr	r0, [r0, #0]
 8005dfa:	f7ff ff4b 	bl	8005c94 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dfe:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e00:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e02:	6999      	ldr	r1, [r3, #24]
 8005e04:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005e08:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e0a:	6999      	ldr	r1, [r3, #24]
 8005e0c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005e10:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e12:	699a      	ldr	r2, [r3, #24]
 8005e14:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005e18:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005e1a:	2000      	movs	r0, #0
      break;
 8005e1c:	e795      	b.n	8005d4a <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e1e:	6800      	ldr	r0, [r0, #0]
 8005e20:	f7ff fc58 	bl	80056d4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e24:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e26:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e28:	69d9      	ldr	r1, [r3, #28]
 8005e2a:	f041 0108 	orr.w	r1, r1, #8
 8005e2e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e30:	69d9      	ldr	r1, [r3, #28]
 8005e32:	f021 0104 	bic.w	r1, r1, #4
 8005e36:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e38:	69da      	ldr	r2, [r3, #28]
 8005e3a:	4302      	orrs	r2, r0
 8005e3c:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005e3e:	2000      	movs	r0, #0
      break;
 8005e40:	e783      	b.n	8005d4a <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e42:	6800      	ldr	r0, [r0, #0]
 8005e44:	f7ff fc86 	bl	8005754 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e48:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e4a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e4c:	69d9      	ldr	r1, [r3, #28]
 8005e4e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005e52:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e54:	69d9      	ldr	r1, [r3, #28]
 8005e56:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005e5a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e5c:	69da      	ldr	r2, [r3, #28]
 8005e5e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005e62:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005e64:	2000      	movs	r0, #0
      break;
 8005e66:	e770      	b.n	8005d4a <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e68:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e6a:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e6e:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005e70:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e72:	4e1e      	ldr	r6, [pc, #120]	; (8005eec <HAL_TIM_PWM_ConfigChannel+0x1d8>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e74:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8005e78:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8005e7a:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005e7c:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005e7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8005e84:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e8c:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e8e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8005e92:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e96:	d00f      	beq.n	8005eb8 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 8005e98:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005e9c:	42b3      	cmp	r3, r6
 8005e9e:	d00b      	beq.n	8005eb8 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 8005ea0:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005ea4:	42b3      	cmp	r3, r6
 8005ea6:	d007      	beq.n	8005eb8 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 8005ea8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005eac:	42b3      	cmp	r3, r6
 8005eae:	d003      	beq.n	8005eb8 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 8005eb0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005eb4:	42b3      	cmp	r3, r6
 8005eb6:	d104      	bne.n	8005ec2 <HAL_TIM_PWM_ConfigChannel+0x1ae>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005eb8:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005eba:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ebe:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8005ec2:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8005ec4:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005ec6:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8005ec8:	649e      	str	r6, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8005eca:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ecc:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ece:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ed0:	f041 0108 	orr.w	r1, r1, #8
 8005ed4:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ed6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005ed8:	f021 0104 	bic.w	r1, r1, #4
 8005edc:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ede:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ee0:	4302      	orrs	r2, r0
 8005ee2:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8005ee4:	2000      	movs	r0, #0
      break;
 8005ee6:	e730      	b.n	8005d4a <HAL_TIM_PWM_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 8005ee8:	2002      	movs	r0, #2
}
 8005eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eec:	40012c00 	.word	0x40012c00

08005ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ef0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d03c      	beq.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0x82>
{
 8005ef8:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005efa:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005efc:	4c1e      	ldr	r4, [pc, #120]	; (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005efe:	2302      	movs	r3, #2
 8005f00:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f04:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 8005f06:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005f08:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f0a:	d026      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8005f0c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005f10:	42a2      	cmp	r2, r4
 8005f12:	d022      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f14:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f16:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f1e:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f20:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8005f24:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f26:	d00a      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005f28:	4b14      	ldr	r3, [pc, #80]	; (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d007      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005f2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d003      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005f36:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d104      	bne.n	8005f48 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f3e:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f40:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f44:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f46:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005f48:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005f50:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005f54:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8005f56:	4618      	mov	r0, r3
}
 8005f58:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f5a:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f62:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f64:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f6c:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 8005f6e:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f70:	e7e5      	b.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 8005f72:	2002      	movs	r0, #2
}
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40012c00 	.word	0x40012c00
 8005f7c:	40000400 	.word	0x40000400

08005f80 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f80:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d044      	beq.n	8006012 <HAL_TIMEx_ConfigBreakDeadTime+0x92>
{
 8005f88:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f8a:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8005f8e:	4602      	mov	r2, r0
 8005f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f94:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f98:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f9e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fa4:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fa8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005faa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fae:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fb4:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005fb6:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fb8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fbe:	4303      	orrs	r3, r0

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005fc0:	4c15      	ldr	r4, [pc, #84]	; (8006018 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8005fc2:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005fc4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005fc8:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005fca:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005fce:	d00a      	beq.n	8005fe6 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8005fd0:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005fd4:	42a0      	cmp	r0, r4
 8005fd6:	d006      	beq.n	8005fe6 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8005fd8:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8005fda:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8005fdc:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8005fe0:	4608      	mov	r0, r1
}
 8005fe2:	bc30      	pop	{r4, r5}
 8005fe4:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005fe6:	69cd      	ldr	r5, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005fe8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fee:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ff0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ff4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ff8:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ffc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006000:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006002:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006006:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006008:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800600a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800600e:	430b      	orrs	r3, r1
 8006010:	e7e2      	b.n	8005fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8006012:	2002      	movs	r0, #2
}
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	40012c00 	.word	0x40012c00

0800601c <HAL_TIMEx_ConfigBreakInput>:
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800601c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006020:	2b01      	cmp	r3, #1
 8006022:	d051      	beq.n	80060c8 <HAL_TIMEx_ConfigBreakInput+0xac>

  switch (sBreakInputConfig->Source)
 8006024:	6813      	ldr	r3, [r2, #0]
 8006026:	3b01      	subs	r3, #1
 8006028:	2b0f      	cmp	r3, #15
{
 800602a:	b4f0      	push	{r4, r5, r6, r7}
 800602c:	d827      	bhi.n	800607e <HAL_TIMEx_ConfigBreakInput+0x62>
 800602e:	4e28      	ldr	r6, [pc, #160]	; (80060d0 <HAL_TIMEx_ConfigBreakInput+0xb4>)
 8006030:	4c28      	ldr	r4, [pc, #160]	; (80060d4 <HAL_TIMEx_ConfigBreakInput+0xb8>)
 8006032:	4f29      	ldr	r7, [pc, #164]	; (80060d8 <HAL_TIMEx_ConfigBreakInput+0xbc>)
 8006034:	4d29      	ldr	r5, [pc, #164]	; (80060dc <HAL_TIMEx_ConfigBreakInput+0xc0>)
 8006036:	f856 6023 	ldr.w	r6, [r6, r3, lsl #2]
 800603a:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800603e:	f857 7023 	ldr.w	r7, [r7, r3, lsl #2]
 8006042:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 8006046:	2901      	cmp	r1, #1
 8006048:	d01f      	beq.n	800608a <HAL_TIMEx_ConfigBreakInput+0x6e>
 800604a:	2902      	cmp	r1, #2
 800604c:	d135      	bne.n	80060ba <HAL_TIMEx_ConfigBreakInput+0x9e>
      break;
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800604e:	6801      	ldr	r1, [r0, #0]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006050:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF2;
 8006052:	f8d1 c064 	ldr.w	ip, [r1, #100]	; 0x64

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006056:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006058:	40bb      	lsls	r3, r7
 800605a:	ea83 030c 	eor.w	r3, r3, ip
 800605e:	4033      	ands	r3, r6
 8006060:	ea83 030c 	eor.w	r3, r3, ip
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006064:	fa02 f505 	lsl.w	r5, r2, r5
 8006068:	405d      	eors	r5, r3
 800606a:	402c      	ands	r4, r5
 800606c:	4063      	eors	r3, r4
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 800606e:	2200      	movs	r2, #0
      htim->Instance->AF2 = tmporx;
 8006070:	664b      	str	r3, [r1, #100]	; 0x64
  __HAL_UNLOCK(htim);
 8006072:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006076:	2300      	movs	r3, #0

  return status;
}
 8006078:	4618      	mov	r0, r3
 800607a:	bcf0      	pop	{r4, r5, r6, r7}
 800607c:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 800607e:	2500      	movs	r5, #0
  switch (BreakInput)
 8006080:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8006082:	462f      	mov	r7, r5
 8006084:	462c      	mov	r4, r5
 8006086:	462e      	mov	r6, r5
  switch (BreakInput)
 8006088:	d1df      	bne.n	800604a <HAL_TIMEx_ConfigBreakInput+0x2e>
      tmporx = htim->Instance->AF1;
 800608a:	6801      	ldr	r1, [r0, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800608c:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF1;
 800608e:	f8d1 c060 	ldr.w	ip, [r1, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006092:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006094:	40bb      	lsls	r3, r7
 8006096:	ea83 030c 	eor.w	r3, r3, ip
 800609a:	4033      	ands	r3, r6
 800609c:	ea83 030c 	eor.w	r3, r3, ip
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80060a0:	fa02 f505 	lsl.w	r5, r2, r5
 80060a4:	405d      	eors	r5, r3
 80060a6:	402c      	ands	r4, r5
 80060a8:	4063      	eors	r3, r4
  __HAL_UNLOCK(htim);
 80060aa:	2200      	movs	r2, #0
      htim->Instance->AF1 = tmporx;
 80060ac:	660b      	str	r3, [r1, #96]	; 0x60
  __HAL_UNLOCK(htim);
 80060ae:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	bcf0      	pop	{r4, r5, r6, r7}
 80060b8:	4770      	bx	lr
  __HAL_UNLOCK(htim);
 80060ba:	2200      	movs	r2, #0
 80060bc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  switch (BreakInput)
 80060c0:	2301      	movs	r3, #1
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	bcf0      	pop	{r4, r5, r6, r7}
 80060c6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80060c8:	2302      	movs	r3, #2
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	08008d98 	.word	0x08008d98
 80060d4:	08008dd8 	.word	0x08008dd8
 80060d8:	08008e18 	.word	0x08008e18
 80060dc:	08008e58 	.word	0x08008e58

080060e0 <UART_SetConfig>:
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80060e0:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060e2:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060e4:	49aa      	ldr	r1, [pc, #680]	; (8006390 <UART_SetConfig+0x2b0>)
{
 80060e6:	b570      	push	{r4, r5, r6, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060e8:	6905      	ldr	r5, [r0, #16]
 80060ea:	6946      	ldr	r6, [r0, #20]
{
 80060ec:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060ee:	432a      	orrs	r2, r5
 80060f0:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060f2:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060f4:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060f6:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060f8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060fa:	430a      	orrs	r2, r1
 80060fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	68e5      	ldr	r5, [r4, #12]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006102:	49a4      	ldr	r1, [pc, #656]	; (8006394 <UART_SetConfig+0x2b4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006104:	69a6      	ldr	r6, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006106:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800610a:	432a      	orrs	r2, r5
 800610c:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800610e:	428b      	cmp	r3, r1
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006110:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006112:	f000 80aa 	beq.w	800626a <UART_SetConfig+0x18a>

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006116:	e9d4 2508 	ldrd	r2, r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800611a:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800611e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8006122:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006124:	430a      	orrs	r2, r1
 8006126:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006128:	6ada      	ldr	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800612a:	499b      	ldr	r1, [pc, #620]	; (8006398 <UART_SetConfig+0x2b8>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800612c:	f022 020f 	bic.w	r2, r2, #15
 8006130:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006132:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006134:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006136:	d012      	beq.n	800615e <UART_SetConfig+0x7e>
 8006138:	4a98      	ldr	r2, [pc, #608]	; (800639c <UART_SetConfig+0x2bc>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d022      	beq.n	8006184 <UART_SetConfig+0xa4>
 800613e:	4a98      	ldr	r2, [pc, #608]	; (80063a0 <UART_SetConfig+0x2c0>)
 8006140:	4293      	cmp	r3, r2
 8006142:	f000 80fe 	beq.w	8006342 <UART_SetConfig+0x262>
 8006146:	4a97      	ldr	r2, [pc, #604]	; (80063a4 <UART_SetConfig+0x2c4>)
 8006148:	4293      	cmp	r3, r2
 800614a:	f000 80dc 	beq.w	8006306 <UART_SetConfig+0x226>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 800614e:	2001      	movs	r0, #1
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 8006150:	f04f 1201 	mov.w	r2, #65537	; 0x10001

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006154:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8006156:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800615a:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 800615c:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800615e:	4b92      	ldr	r3, [pc, #584]	; (80063a8 <UART_SetConfig+0x2c8>)
 8006160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006164:	f003 0303 	and.w	r3, r3, #3
 8006168:	3b01      	subs	r3, #1
 800616a:	2b02      	cmp	r3, #2
 800616c:	f240 80e3 	bls.w	8006336 <UART_SetConfig+0x256>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006170:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006174:	f000 80f9 	beq.w	800636a <UART_SetConfig+0x28a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006178:	f7ff f910 	bl	800539c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800617c:	2800      	cmp	r0, #0
 800617e:	d072      	beq.n	8006266 <UART_SetConfig+0x186>
 8006180:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006182:	e028      	b.n	80061d6 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006184:	4b88      	ldr	r3, [pc, #544]	; (80063a8 <UART_SetConfig+0x2c8>)
 8006186:	4a89      	ldr	r2, [pc, #548]	; (80063ac <UART_SetConfig+0x2cc>)
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618c:	f003 030c 	and.w	r3, r3, #12
 8006190:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006192:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006196:	d034      	beq.n	8006202 <UART_SetConfig+0x122>
    switch (clocksource)
 8006198:	2b08      	cmp	r3, #8
 800619a:	d8d8      	bhi.n	800614e <UART_SetConfig+0x6e>
 800619c:	a201      	add	r2, pc, #4	; (adr r2, 80061a4 <UART_SetConfig+0xc4>)
 800619e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a2:	bf00      	nop
 80061a4:	08006331 	.word	0x08006331
 80061a8:	08006179 	.word	0x08006179
 80061ac:	080061ff 	.word	0x080061ff
 80061b0:	0800614f 	.word	0x0800614f
 80061b4:	08006325 	.word	0x08006325
 80061b8:	0800614f 	.word	0x0800614f
 80061bc:	0800614f 	.word	0x0800614f
 80061c0:	0800614f 	.word	0x0800614f
 80061c4:	080061d3 	.word	0x080061d3
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061c8:	2b30      	cmp	r3, #48	; 0x30
 80061ca:	d1c0      	bne.n	800614e <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061cc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80061d0:	d02f      	beq.n	8006232 <UART_SetConfig+0x152>
 80061d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061d6:	6862      	ldr	r2, [r4, #4]
 80061d8:	4b75      	ldr	r3, [pc, #468]	; (80063b0 <UART_SetConfig+0x2d0>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061da:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061de:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 80061e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80061e6:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80061ea:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061ee:	f1a3 0210 	sub.w	r2, r3, #16
 80061f2:	428a      	cmp	r2, r1
 80061f4:	d8ab      	bhi.n	800614e <UART_SetConfig+0x6e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061f6:	6822      	ldr	r2, [r4, #0]
 80061f8:	2000      	movs	r0, #0
 80061fa:	60d3      	str	r3, [r2, #12]
 80061fc:	e7a8      	b.n	8006150 <UART_SetConfig+0x70>
        pclk = (uint32_t) HSI_VALUE;
 80061fe:	486d      	ldr	r0, [pc, #436]	; (80063b4 <UART_SetConfig+0x2d4>)
 8006200:	e7e9      	b.n	80061d6 <UART_SetConfig+0xf6>
    switch (clocksource)
 8006202:	2b08      	cmp	r3, #8
 8006204:	d8a3      	bhi.n	800614e <UART_SetConfig+0x6e>
 8006206:	a201      	add	r2, pc, #4	; (adr r2, 800620c <UART_SetConfig+0x12c>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	0800637f 	.word	0x0800637f
 8006210:	0800636b 	.word	0x0800636b
 8006214:	08006231 	.word	0x08006231
 8006218:	0800614f 	.word	0x0800614f
 800621c:	08006379 	.word	0x08006379
 8006220:	0800614f 	.word	0x0800614f
 8006224:	0800614f 	.word	0x0800614f
 8006228:	0800614f 	.word	0x0800614f
 800622c:	08006233 	.word	0x08006233
        pclk = (uint32_t) HSI_VALUE;
 8006230:	4860      	ldr	r0, [pc, #384]	; (80063b4 <UART_SetConfig+0x2d4>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006232:	6862      	ldr	r2, [r4, #4]
 8006234:	495e      	ldr	r1, [pc, #376]	; (80063b0 <UART_SetConfig+0x2d0>)
 8006236:	0853      	lsrs	r3, r2, #1
 8006238:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 800623c:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006240:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006244:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006248:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800624c:	f1a0 0310 	sub.w	r3, r0, #16
 8006250:	428b      	cmp	r3, r1
 8006252:	f63f af7c 	bhi.w	800614e <UART_SetConfig+0x6e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006256:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 800625a:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800625c:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800625e:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8006262:	4318      	orrs	r0, r3
 8006264:	60d0      	str	r0, [r2, #12]
 8006266:	2000      	movs	r0, #0
 8006268:	e772      	b.n	8006150 <UART_SetConfig+0x70>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800626a:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800626e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8006272:	4331      	orrs	r1, r6
 8006274:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006278:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 800627a:	484b      	ldr	r0, [pc, #300]	; (80063a8 <UART_SetConfig+0x2c8>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800627c:	f022 020f 	bic.w	r2, r2, #15
 8006280:	430a      	orrs	r2, r1
 8006282:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006284:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006288:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800628c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006290:	d069      	beq.n	8006366 <UART_SetConfig+0x286>
 8006292:	d80b      	bhi.n	80062ac <UART_SetConfig+0x1cc>
 8006294:	2b00      	cmp	r3, #0
 8006296:	d051      	beq.n	800633c <UART_SetConfig+0x25c>
 8006298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629c:	f47f af57 	bne.w	800614e <UART_SetConfig+0x6e>
        pclk = HAL_RCC_GetSysClockFreq();
 80062a0:	f7fe ff1a 	bl	80050d8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d0de      	beq.n	8006266 <UART_SetConfig+0x186>
 80062a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80062aa:	e005      	b.n	80062b8 <UART_SetConfig+0x1d8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062b0:	f47f af4d 	bne.w	800614e <UART_SetConfig+0x6e>
        pclk = (uint32_t) LSE_VALUE;
 80062b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062b8:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062ba:	4b3d      	ldr	r3, [pc, #244]	; (80063b0 <UART_SetConfig+0x2d0>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062bc:	eb05 0645 	add.w	r6, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062c0:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80062c4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062c8:	429e      	cmp	r6, r3
 80062ca:	f63f af40 	bhi.w	800614e <UART_SetConfig+0x6e>
 80062ce:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80062d2:	f63f af3c 	bhi.w	800614e <UART_SetConfig+0x6e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062d6:	2300      	movs	r3, #0
 80062d8:	2100      	movs	r1, #0
 80062da:	f7f9 ff9d 	bl	8000218 <__aeabi_uldivmod>
 80062de:	020b      	lsls	r3, r1, #8
 80062e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062e4:	0202      	lsls	r2, r0, #8
 80062e6:	0868      	lsrs	r0, r5, #1
 80062e8:	1810      	adds	r0, r2, r0
 80062ea:	f143 0100 	adc.w	r1, r3, #0
 80062ee:	462a      	mov	r2, r5
 80062f0:	2300      	movs	r3, #0
 80062f2:	f7f9 ff91 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062f6:	4a30      	ldr	r2, [pc, #192]	; (80063b8 <UART_SetConfig+0x2d8>)
 80062f8:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80062fc:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062fe:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006300:	f63f af25 	bhi.w	800614e <UART_SetConfig+0x6e>
 8006304:	e777      	b.n	80061f6 <UART_SetConfig+0x116>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006306:	4b28      	ldr	r3, [pc, #160]	; (80063a8 <UART_SetConfig+0x2c8>)
 8006308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006310:	2b80      	cmp	r3, #128	; 0x80
 8006312:	d037      	beq.n	8006384 <UART_SetConfig+0x2a4>
 8006314:	d823      	bhi.n	800635e <UART_SetConfig+0x27e>
 8006316:	b143      	cbz	r3, 800632a <UART_SetConfig+0x24a>
 8006318:	2b40      	cmp	r3, #64	; 0x40
 800631a:	f47f af18 	bne.w	800614e <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800631e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006322:	d029      	beq.n	8006378 <UART_SetConfig+0x298>
        pclk = HAL_RCC_GetSysClockFreq();
 8006324:	f7fe fed8 	bl	80050d8 <HAL_RCC_GetSysClockFreq>
        break;
 8006328:	e728      	b.n	800617c <UART_SetConfig+0x9c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800632a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800632e:	d026      	beq.n	800637e <UART_SetConfig+0x29e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006330:	f7ff f822 	bl	8005378 <HAL_RCC_GetPCLK1Freq>
        break;
 8006334:	e722      	b.n	800617c <UART_SetConfig+0x9c>
 8006336:	4a21      	ldr	r2, [pc, #132]	; (80063bc <UART_SetConfig+0x2dc>)
 8006338:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 800633a:	e72a      	b.n	8006192 <UART_SetConfig+0xb2>
        pclk = HAL_RCC_GetPCLK1Freq();
 800633c:	f7ff f81c 	bl	8005378 <HAL_RCC_GetPCLK1Freq>
        break;
 8006340:	e7b0      	b.n	80062a4 <UART_SetConfig+0x1c4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006342:	4b19      	ldr	r3, [pc, #100]	; (80063a8 <UART_SetConfig+0x2c8>)
 8006344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006348:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800634c:	2b20      	cmp	r3, #32
 800634e:	d019      	beq.n	8006384 <UART_SetConfig+0x2a4>
 8006350:	f63f af3a 	bhi.w	80061c8 <UART_SetConfig+0xe8>
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0e8      	beq.n	800632a <UART_SetConfig+0x24a>
 8006358:	2b10      	cmp	r3, #16
 800635a:	d0e0      	beq.n	800631e <UART_SetConfig+0x23e>
 800635c:	e6f7      	b.n	800614e <UART_SetConfig+0x6e>
 800635e:	2bc0      	cmp	r3, #192	; 0xc0
 8006360:	f43f af34 	beq.w	80061cc <UART_SetConfig+0xec>
 8006364:	e6f3      	b.n	800614e <UART_SetConfig+0x6e>
 8006366:	4813      	ldr	r0, [pc, #76]	; (80063b4 <UART_SetConfig+0x2d4>)
 8006368:	e7a6      	b.n	80062b8 <UART_SetConfig+0x1d8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800636a:	f7ff f817 	bl	800539c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800636e:	2800      	cmp	r0, #0
 8006370:	f43f af79 	beq.w	8006266 <UART_SetConfig+0x186>
 8006374:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006376:	e75c      	b.n	8006232 <UART_SetConfig+0x152>
        pclk = HAL_RCC_GetSysClockFreq();
 8006378:	f7fe feae 	bl	80050d8 <HAL_RCC_GetSysClockFreq>
        break;
 800637c:	e7f7      	b.n	800636e <UART_SetConfig+0x28e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800637e:	f7fe fffb 	bl	8005378 <HAL_RCC_GetPCLK1Freq>
        break;
 8006382:	e7f4      	b.n	800636e <UART_SetConfig+0x28e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006384:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8006388:	480a      	ldr	r0, [pc, #40]	; (80063b4 <UART_SetConfig+0x2d4>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800638a:	f47f af24 	bne.w	80061d6 <UART_SetConfig+0xf6>
 800638e:	e750      	b.n	8006232 <UART_SetConfig+0x152>
 8006390:	cfff69f3 	.word	0xcfff69f3
 8006394:	40008000 	.word	0x40008000
 8006398:	40013800 	.word	0x40013800
 800639c:	40004400 	.word	0x40004400
 80063a0:	40004800 	.word	0x40004800
 80063a4:	40004c00 	.word	0x40004c00
 80063a8:	40021000 	.word	0x40021000
 80063ac:	08008e9c 	.word	0x08008e9c
 80063b0:	08008eac 	.word	0x08008eac
 80063b4:	00f42400 	.word	0x00f42400
 80063b8:	000ffcff 	.word	0x000ffcff
 80063bc:	08008e98 	.word	0x08008e98

080063c0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80063c2:	07da      	lsls	r2, r3, #31
{
 80063c4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063c6:	d506      	bpl.n	80063d6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063c8:	6801      	ldr	r1, [r0, #0]
 80063ca:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80063cc:	684a      	ldr	r2, [r1, #4]
 80063ce:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80063d2:	4322      	orrs	r2, r4
 80063d4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063d6:	079c      	lsls	r4, r3, #30
 80063d8:	d506      	bpl.n	80063e8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063da:	6801      	ldr	r1, [r0, #0]
 80063dc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80063de:	684a      	ldr	r2, [r1, #4]
 80063e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80063e4:	4322      	orrs	r2, r4
 80063e6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063e8:	0759      	lsls	r1, r3, #29
 80063ea:	d506      	bpl.n	80063fa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063ec:	6801      	ldr	r1, [r0, #0]
 80063ee:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80063f0:	684a      	ldr	r2, [r1, #4]
 80063f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063f6:	4322      	orrs	r2, r4
 80063f8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063fa:	071a      	lsls	r2, r3, #28
 80063fc:	d506      	bpl.n	800640c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063fe:	6801      	ldr	r1, [r0, #0]
 8006400:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006402:	684a      	ldr	r2, [r1, #4]
 8006404:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006408:	4322      	orrs	r2, r4
 800640a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800640c:	06dc      	lsls	r4, r3, #27
 800640e:	d506      	bpl.n	800641e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006410:	6801      	ldr	r1, [r0, #0]
 8006412:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006414:	688a      	ldr	r2, [r1, #8]
 8006416:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800641a:	4322      	orrs	r2, r4
 800641c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800641e:	0699      	lsls	r1, r3, #26
 8006420:	d506      	bpl.n	8006430 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006422:	6801      	ldr	r1, [r0, #0]
 8006424:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006426:	688a      	ldr	r2, [r1, #8]
 8006428:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800642c:	4322      	orrs	r2, r4
 800642e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006430:	065a      	lsls	r2, r3, #25
 8006432:	d509      	bpl.n	8006448 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006434:	6801      	ldr	r1, [r0, #0]
 8006436:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006438:	684a      	ldr	r2, [r1, #4]
 800643a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800643e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006440:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006444:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006446:	d00b      	beq.n	8006460 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006448:	061b      	lsls	r3, r3, #24
 800644a:	d506      	bpl.n	800645a <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800644c:	6802      	ldr	r2, [r0, #0]
 800644e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006450:	6853      	ldr	r3, [r2, #4]
 8006452:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006456:	430b      	orrs	r3, r1
 8006458:	6053      	str	r3, [r2, #4]
  }
}
 800645a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800645e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006460:	684a      	ldr	r2, [r1, #4]
 8006462:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006464:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006468:	4322      	orrs	r2, r4
 800646a:	604a      	str	r2, [r1, #4]
 800646c:	e7ec      	b.n	8006448 <UART_AdvFeatureConfig+0x88>
 800646e:	bf00      	nop

08006470 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006478:	6804      	ldr	r4, [r0, #0]
 800647a:	4607      	mov	r7, r0
 800647c:	460e      	mov	r6, r1
 800647e:	4615      	mov	r5, r2
 8006480:	4699      	mov	r9, r3
 8006482:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006486:	d10a      	bne.n	800649e <UART_WaitOnFlagUntilTimeout+0x2e>
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006488:	69e3      	ldr	r3, [r4, #28]
 800648a:	ea36 0303 	bics.w	r3, r6, r3
 800648e:	bf0c      	ite	eq
 8006490:	2301      	moveq	r3, #1
 8006492:	2300      	movne	r3, #0
 8006494:	429d      	cmp	r5, r3
 8006496:	d0f7      	beq.n	8006488 <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8006498:	2000      	movs	r0, #0
}
 800649a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800649e:	69e3      	ldr	r3, [r4, #28]
 80064a0:	ea36 0303 	bics.w	r3, r6, r3
 80064a4:	bf0c      	ite	eq
 80064a6:	2301      	moveq	r3, #1
 80064a8:	2300      	movne	r3, #0
 80064aa:	42ab      	cmp	r3, r5
 80064ac:	d1f4      	bne.n	8006498 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ae:	f7fd f89f 	bl	80035f0 <HAL_GetTick>
 80064b2:	eba0 0009 	sub.w	r0, r0, r9
 80064b6:	4540      	cmp	r0, r8
 80064b8:	d833      	bhi.n	8006522 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064ba:	f1b8 0f00 	cmp.w	r8, #0
 80064be:	d030      	beq.n	8006522 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064c0:	683c      	ldr	r4, [r7, #0]
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	0759      	lsls	r1, r3, #29
 80064c6:	4622      	mov	r2, r4
 80064c8:	d5db      	bpl.n	8006482 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064ca:	69e3      	ldr	r3, [r4, #28]
 80064cc:	051b      	lsls	r3, r3, #20
 80064ce:	d5d8      	bpl.n	8006482 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064d4:	6223      	str	r3, [r4, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d6:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80064da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	e844 3100 	strex	r1, r3, [r4]
 80064e2:	b139      	cbz	r1, 80064f4 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e4:	e852 3f00 	ldrex	r3, [r2]
 80064e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ec:	e842 3100 	strex	r1, r3, [r2]
 80064f0:	2900      	cmp	r1, #0
 80064f2:	d1f7      	bne.n	80064e4 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f4:	f102 0308 	add.w	r3, r2, #8
 80064f8:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006500:	f102 0008 	add.w	r0, r2, #8
 8006504:	e840 3100 	strex	r1, r3, [r0]
 8006508:	2900      	cmp	r1, #0
 800650a:	d1f3      	bne.n	80064f4 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800650c:	2320      	movs	r3, #32
 800650e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8006512:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006516:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 800651a:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800651c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8006520:	e7bb      	b.n	800649a <UART_WaitOnFlagUntilTimeout+0x2a>
 8006522:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006524:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006528:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652c:	e842 3100 	strex	r1, r3, [r2]
 8006530:	2900      	cmp	r1, #0
 8006532:	d1f7      	bne.n	8006524 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006534:	f102 0308 	add.w	r3, r2, #8
 8006538:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	f102 0008 	add.w	r0, r2, #8
 8006544:	e840 3100 	strex	r1, r3, [r0]
 8006548:	2900      	cmp	r1, #0
 800654a:	d1f3      	bne.n	8006534 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 800654c:	2320      	movs	r3, #32
 800654e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8006552:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        return HAL_TIMEOUT;
 8006556:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8006558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800655c:	e79d      	b.n	800649a <UART_WaitOnFlagUntilTimeout+0x2a>
 800655e:	bf00      	nop

08006560 <HAL_UART_Init>:
  if (huart == NULL)
 8006560:	2800      	cmp	r0, #0
 8006562:	d066      	beq.n	8006632 <HAL_UART_Init+0xd2>
{
 8006564:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8006566:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800656a:	b082      	sub	sp, #8
 800656c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800656e:	2b00      	cmp	r3, #0
 8006570:	d04c      	beq.n	800660c <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 8006572:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006574:	2324      	movs	r3, #36	; 0x24
 8006576:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800657a:	6813      	ldr	r3, [r2, #0]
 800657c:	f023 0301 	bic.w	r3, r3, #1
 8006580:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006582:	4620      	mov	r0, r4
 8006584:	f7ff fdac 	bl	80060e0 <UART_SetConfig>
 8006588:	2801      	cmp	r0, #1
 800658a:	d03c      	beq.n	8006606 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800658c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800658e:	2b00      	cmp	r3, #0
 8006590:	d135      	bne.n	80065fe <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800659a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800659c:	689a      	ldr	r2, [r3, #8]
 800659e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065a2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80065a4:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a6:	2600      	movs	r6, #0
  __HAL_UART_ENABLE(huart);
 80065a8:	f041 0101 	orr.w	r1, r1, #1
 80065ac:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ae:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80065b2:	f7fd f81d 	bl	80035f0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 80065bc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065be:	d40e      	bmi.n	80065de <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	075b      	lsls	r3, r3, #29
 80065c4:	d427      	bmi.n	8006616 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80065c8:	2220      	movs	r2, #32
 80065ca:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80065ce:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80065d2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 80065d6:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d8:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80065da:	b002      	add	sp, #8
 80065dc:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	4632      	mov	r2, r6
 80065e6:	4603      	mov	r3, r0
 80065e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065ec:	4620      	mov	r0, r4
 80065ee:	f7ff ff3f 	bl	8006470 <UART_WaitOnFlagUntilTimeout>
 80065f2:	b9e0      	cbnz	r0, 800662e <HAL_UART_Init+0xce>
 80065f4:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	075b      	lsls	r3, r3, #29
 80065fa:	d40c      	bmi.n	8006616 <HAL_UART_Init+0xb6>
 80065fc:	e7e3      	b.n	80065c6 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 80065fe:	4620      	mov	r0, r4
 8006600:	f7ff fede 	bl	80063c0 <UART_AdvFeatureConfig>
 8006604:	e7c5      	b.n	8006592 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8006606:	2001      	movs	r0, #1
}
 8006608:	b002      	add	sp, #8
 800660a:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800660c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8006610:	f7fc fa1a 	bl	8002a48 <HAL_UART_MspInit>
 8006614:	e7ad      	b.n	8006572 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006616:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800661a:	9200      	str	r2, [sp, #0]
 800661c:	462b      	mov	r3, r5
 800661e:	2200      	movs	r2, #0
 8006620:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006624:	4620      	mov	r0, r4
 8006626:	f7ff ff23 	bl	8006470 <UART_WaitOnFlagUntilTimeout>
 800662a:	2800      	cmp	r0, #0
 800662c:	d0cb      	beq.n	80065c6 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800662e:	2003      	movs	r0, #3
 8006630:	e7d3      	b.n	80065da <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 8006632:	2001      	movs	r0, #1
}
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop

08006638 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006638:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800663c:	2a01      	cmp	r2, #1
 800663e:	d017      	beq.n	8006670 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006640:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006642:	2124      	movs	r1, #36	; 0x24
{
 8006644:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 8006646:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 800664a:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800664c:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800664e:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006650:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006652:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8006656:	f024 0401 	bic.w	r4, r4, #1
 800665a:	6014      	str	r4, [r2, #0]

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800665c:	2520      	movs	r5, #32
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800665e:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006660:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006662:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

  return HAL_OK;
 8006666:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006668:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800666c:	bc30      	pop	{r4, r5}
 800666e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006670:	2002      	movs	r0, #2
}
 8006672:	4770      	bx	lr

08006674 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006674:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8006678:	2a01      	cmp	r2, #1
 800667a:	d033      	beq.n	80066e4 <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 800667c:	4603      	mov	r3, r0
 800667e:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006680:	681a      	ldr	r2, [r3, #0]
{
 8006682:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8006684:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006688:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800668a:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800668c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800668e:	f020 0001 	bic.w	r0, r0, #1
 8006692:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006694:	6890      	ldr	r0, [r2, #8]
 8006696:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800669a:	4301      	orrs	r1, r0
 800669c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800669e:	b1f5      	cbz	r5, 80066de <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066a0:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066a2:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066a4:	4810      	ldr	r0, [pc, #64]	; (80066e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 80066a6:	4f11      	ldr	r7, [pc, #68]	; (80066ec <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066a8:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066ac:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066ae:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066b0:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 80066b2:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 80066b4:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066b6:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066b8:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066ba:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066be:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066c2:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80066c6:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 80066c8:	2520      	movs	r5, #32
 80066ca:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066ce:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80066d0:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80066d4:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80066d6:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80066da:	bcf0      	pop	{r4, r5, r6, r7}
 80066dc:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 80066de:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80066e0:	4608      	mov	r0, r1
 80066e2:	e7ee      	b.n	80066c2 <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 80066e4:	2002      	movs	r0, #2
}
 80066e6:	4770      	bx	lr
 80066e8:	08008ecc 	.word	0x08008ecc
 80066ec:	08008ec4 	.word	0x08008ec4

080066f0 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80066f0:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80066f4:	2a01      	cmp	r2, #1
 80066f6:	d033      	beq.n	8006760 <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 80066f8:	4603      	mov	r3, r0
 80066fa:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066fc:	681a      	ldr	r2, [r3, #0]
{
 80066fe:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8006700:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006704:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006706:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006708:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800670a:	f020 0001 	bic.w	r0, r0, #1
 800670e:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006710:	6890      	ldr	r0, [r2, #8]
 8006712:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8006716:	4301      	orrs	r1, r0
 8006718:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800671a:	b1f5      	cbz	r5, 800675a <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800671c:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800671e:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006720:	4810      	ldr	r0, [pc, #64]	; (8006764 <HAL_UARTEx_SetRxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8006722:	4f11      	ldr	r7, [pc, #68]	; (8006768 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006724:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006728:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800672a:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800672c:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 800672e:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006730:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006732:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006734:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006736:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800673a:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800673e:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8006742:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8006744:	2520      	movs	r5, #32
 8006746:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800674a:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800674c:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8006750:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006752:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8006756:	bcf0      	pop	{r4, r5, r6, r7}
 8006758:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800675a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800675c:	4608      	mov	r0, r1
 800675e:	e7ee      	b.n	800673e <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 8006760:	2002      	movs	r0, #2
}
 8006762:	4770      	bx	lr
 8006764:	08008ecc 	.word	0x08008ecc
 8006768:	08008ec4 	.word	0x08008ec4

0800676c <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 800676c:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 800676e:	8840      	ldrh	r0, [r0, #2]
 8006770:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8006774:	0c00      	lsrs	r0, r0, #16
 8006776:	4770      	bx	lr

08006778 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8006778:	b410      	push	{r4}
 800677a:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800677c:	8802      	ldrh	r2, [r0, #0]
 800677e:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8006780:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8006784:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8006788:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800678c:	42a2      	cmp	r2, r4
{
 800678e:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8006790:	d219      	bcs.n	80067c6 <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8006792:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 8006796:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 800679a:	b2e4      	uxtb	r4, r4
 800679c:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 80067a0:	8882      	ldrh	r2, [r0, #4]
 80067a2:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80067a6:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 80067a8:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80067ac:	bfbc      	itt	lt
 80067ae:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 80067b2:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	bfbc      	itt	lt
 80067b8:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 80067bc:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80067be:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80067c2:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 80067c6:	b289      	uxth	r1, r1
 80067c8:	2000      	movs	r0, #0
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f361 000f 	bfi	r0, r1, #0, #16
 80067d0:	f363 401f 	bfi	r0, r3, #16, #16
}
 80067d4:	b005      	add	sp, #20
 80067d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067da:	4770      	bx	lr

080067dc <EAC_Init>:
* @param  pENC: the encoder used by the EAC.
* @retval none.
*/
__weak void EAC_Init( EncAlign_Handle_t * pHandle, SpeednTorqCtrl_Handle_t * pSTC, VirtualSpeedSensor_Handle_t * pVSS,
               ENCODER_Handle_t * pENC )
{
 80067dc:	b410      	push	{r4}
  pHandle->pSTC = pSTC;
  pHandle->pVSS = pVSS;
  pHandle->pENC = pENC;
  pHandle->EncAligned = false;
 80067de:	2400      	movs	r4, #0
 80067e0:	81c4      	strh	r4, [r0, #14]
  pHandle->pVSS = pVSS;
 80067e2:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->EncRestart = false;
}
 80067e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pENC = pENC;
 80067ea:	6083      	str	r3, [r0, #8]
}
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop

080067f0 <EAC_StartAlignment>:
  *         execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  * @retval none.
  */
__weak void EAC_StartAlignment( EncAlign_Handle_t * pHandle )
{
 80067f0:	b510      	push	{r4, lr}
  uint32_t wAux;

  /* Set pVSS mechanical speed to zero.*/
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 80067f2:	2200      	movs	r2, #0
{
 80067f4:	4604      	mov	r4, r0
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 80067f6:	4611      	mov	r1, r2
 80067f8:	6840      	ldr	r0, [r0, #4]
 80067fa:	f002 f9a3 	bl	8008b44 <VSS_SetMecAcceleration>

  /* Set pVSS mechanical angle.*/
  VSS_SetMecAngle( pHandle->pVSS, pHandle->hElAngle );
 80067fe:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8006802:	6860      	ldr	r0, [r4, #4]
 8006804:	f002 f996 	bl	8008b34 <VSS_SetMecAngle>

  /* Set pSTC in STC_TORQUE_MODE.*/
  STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8006808:	6820      	ldr	r0, [r4, #0]
 800680a:	2100      	movs	r1, #0
 800680c:	f001 fc98 	bl	8008140 <STC_SetControlMode>

  /* Set starting torque to Zero */
  STC_ExecRamp( pHandle->pSTC, 0, 0u );
 8006810:	2200      	movs	r2, #0
 8006812:	4611      	mov	r1, r2
 8006814:	6820      	ldr	r0, [r4, #0]
 8006816:	f001 fc97 	bl	8008148 <STC_ExecRamp>

  /* Execute the torque ramp.*/
  STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, ( uint32_t )( pHandle->hDurationms ) );
 800681a:	8ae2      	ldrh	r2, [r4, #22]
 800681c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8006820:	6820      	ldr	r0, [r4, #0]
 8006822:	f001 fc91 	bl	8008148 <STC_ExecRamp>

  /* Compute hRemainingTicks, the number of thick of alignment phase.*/
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 8006826:	8ae1      	ldrh	r1, [r4, #22]
 8006828:	8a23      	ldrh	r3, [r4, #16]
  wAux /= 1000u;
 800682a:	4a04      	ldr	r2, [pc, #16]	; (800683c <EAC_StartAlignment+0x4c>)
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 800682c:	fb03 f301 	mul.w	r3, r3, r1
  wAux /= 1000u;
 8006830:	fba2 2303 	umull	r2, r3, r2, r3
 8006834:	099b      	lsrs	r3, r3, #6
  pHandle->hRemainingTicks = ( uint16_t )( wAux );
  pHandle->hRemainingTicks++;
 8006836:	3301      	adds	r3, #1
 8006838:	81a3      	strh	r3, [r4, #12]
}
 800683a:	bd10      	pop	{r4, pc}
 800683c:	10624dd3 	.word	0x10624dd3

08006840 <EAC_Exec>:
  */
__weak bool EAC_Exec( EncAlign_Handle_t * pHandle )
{
  bool retVal = true;

  if ( pHandle->hRemainingTicks > 0u )
 8006840:	8983      	ldrh	r3, [r0, #12]
 8006842:	b13b      	cbz	r3, 8006854 <EAC_Exec+0x14>
  {
    pHandle->hRemainingTicks--;
 8006844:	3b01      	subs	r3, #1
 8006846:	b29b      	uxth	r3, r3
{
 8006848:	b510      	push	{r4, lr}
 800684a:	4604      	mov	r4, r0
    pHandle->hRemainingTicks--;
 800684c:	8183      	strh	r3, [r0, #12]

    if ( pHandle->hRemainingTicks == 0u )
 800684e:	b11b      	cbz	r3, 8006858 <EAC_Exec+0x18>
      pHandle->EncAligned = true;
      retVal = true;
    }
    else
    {
      retVal = false;
 8006850:	2000      	movs	r0, #0
    }
  }

  return retVal;
}
 8006852:	bd10      	pop	{r4, pc}
  bool retVal = true;
 8006854:	2001      	movs	r0, #1
}
 8006856:	4770      	bx	lr
      ENC_SetMecAngle ( pHandle->pENC, pHandle->hElAngle / ( int16_t )( pHandle->bElToMecRatio ) );
 8006858:	7e03      	ldrb	r3, [r0, #24]
 800685a:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 800685e:	6880      	ldr	r0, [r0, #8]
 8006860:	fb91 f1f3 	sdiv	r1, r1, r3
 8006864:	f000 f948 	bl	8006af8 <ENC_SetMecAngle>
      pHandle->EncAligned = true;
 8006868:	2001      	movs	r0, #1
 800686a:	73a0      	strb	r0, [r4, #14]
}
 800686c:	bd10      	pop	{r4, pc}
 800686e:	bf00      	nop

08006870 <EAC_IsAligned>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_IsAligned( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncAligned;
}
 8006870:	7b80      	ldrb	r0, [r0, #14]
 8006872:	4770      	bx	lr

08006874 <EAC_SetRestartState>:
  * @param  restart: Set to true if a restart is programmed else false
  * @retval none.
  */
__weak void EAC_SetRestartState( EncAlign_Handle_t * pHandle, bool restart )
{
  pHandle->EncRestart = restart;
 8006874:	73c1      	strb	r1, [r0, #15]
}
 8006876:	4770      	bx	lr

08006878 <EAC_GetRestartState>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_GetRestartState( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncRestart;
}
 8006878:	7bc0      	ldrb	r0, [r0, #15]
 800687a:	4770      	bx	lr

0800687c <ENC_Init>:
  * @retval none
  */
__weak void ENC_Init( ENCODER_Handle_t * pHandle )
{

  TIM_TypeDef * TIMx = pHandle->TIMx;
 800687c:	6a03      	ldr	r3, [r0, #32]
  /* Reset counter */
  LL_TIM_SetCounter ( TIMx, 0 );

  /*Calculations of convenience*/
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 800687e:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
{
 8006882:	b470      	push	{r4, r5, r6}
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 8006884:	681d      	ldr	r5, [r3, #0]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 8006886:	f8b0 606e 	ldrh.w	r6, [r0, #110]	; 0x6e
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 800688a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800688e:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8006890:	2100      	movs	r1, #0
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 8006892:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 8006896:	601d      	str	r5, [r3, #0]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 8006898:	f04f 34ff 	mov.w	r4, #4294967295
  WRITE_REG(TIMx->CNT, Counter);
 800689c:	6259      	str	r1, [r3, #36]	; 0x24
 800689e:	fbb4 f4f6 	udiv	r4, r4, r6
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 80068a2:	6242      	str	r2, [r0, #36]	; 0x24
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 80068a4:	6684      	str	r4, [r0, #104]	; 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80068a6:	699a      	ldr	r2, [r3, #24]

  /* Set IC filter for both channel 1 & 2*/
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter << 20));
 80068a8:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
 80068ac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80068b0:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 80068b4:	619a      	str	r2, [r3, #24]
 80068b6:	699a      	ldr	r2, [r3, #24]
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH2, ( uint32_t )(pHandle->ICx_Filter << 20));
 80068b8:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
 80068bc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80068c0:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80068c4:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80068c8:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80068ca:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	f042 0201 	orr.w	r2, r2, #1
 80068d2:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	f042 0201 	orr.w	r2, r2, #1
 80068da:	601a      	str	r2, [r3, #0]

  /* Enable the counting timer*/
  LL_TIM_EnableCounter ( TIMx );

  /* Erase speed buffer */
  BufferSize = pHandle->SpeedBufferSize;
 80068dc:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75

  for ( Index = 0u; Index < BufferSize; Index++ )
 80068e0:	b13a      	cbz	r2, 80068f2 <ENC_Init+0x76>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 80068e2:	3a01      	subs	r2, #1
 80068e4:	b2d2      	uxtb	r2, r2
 80068e6:	3201      	adds	r2, #1
  }
}
 80068e8:	bc70      	pop	{r4, r5, r6}
 80068ea:	0092      	lsls	r2, r2, #2
 80068ec:	3028      	adds	r0, #40	; 0x28
 80068ee:	f002 b98b 	b.w	8008c08 <memset>
 80068f2:	bc70      	pop	{r4, r5, r6}
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop

080068f8 <ENC_Clear>:
*         the speed measurement process.
* @param  pHandle: handler of the current instance of the encoder component
* @retval none
*/
__weak void ENC_Clear( ENCODER_Handle_t * pHandle )
{
 80068f8:	b510      	push	{r4, lr}
  uint8_t Index;
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 80068fa:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
{
 80068fe:	4604      	mov	r4, r0
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 8006900:	b13a      	cbz	r2, 8006912 <ENC_Clear+0x1a>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 8006902:	3a01      	subs	r2, #1
 8006904:	b2d2      	uxtb	r2, r2
 8006906:	3201      	adds	r2, #1
 8006908:	0092      	lsls	r2, r2, #2
 800690a:	2100      	movs	r1, #0
 800690c:	3028      	adds	r0, #40	; 0x28
 800690e:	f002 f97b 	bl	8008c08 <memset>
  }
  pHandle->SensorIsReliable = true;
 8006912:	2301      	movs	r3, #1
 8006914:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
}
 8006918:	bd10      	pop	{r4, pc}
 800691a:	bf00      	nop

0800691c <ENC_CalcAngle>:
  int32_t wtemp1;
  int16_t elAngle;  /* s16degree format */
  int16_t mecAngle; /* s16degree format */
  /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1 
   if the overflow occurs just after the entry in the High frequency task */
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 800691c:	6a01      	ldr	r1, [r0, #32]
 800691e:	6e82      	ldr	r2, [r0, #104]	; 0x68
  return (uint32_t)(READ_REG(TIMx->CNT));
 8006920:	6a49      	ldr	r1, [r1, #36]	; 0x24
{
 8006922:	b410      	push	{r4}
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 8006924:	b289      	uxth	r1, r1
 8006926:	fb02 f201 	mul.w	r2, r2, r1
{
 800692a:	4603      	mov	r3, r0
           ( int32_t )( pHandle->U32MAXdivPulseNumber );

  /*Computes and stores the rotor mechanical angle*/
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 800692c:	2a00      	cmp	r2, #0
 800692e:	bfb8      	it	lt
 8006930:	f64f 70ff 	movwlt	r0, #65535	; 0xffff

  int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 8006934:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;

  pHandle->_Super.hElAngle = elAngle;
  
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 8006938:	689c      	ldr	r4, [r3, #8]
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 800693a:	bfb8      	it	lt
 800693c:	1812      	addlt	r2, r2, r0
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 800693e:	7858      	ldrb	r0, [r3, #1]
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8006940:	1412      	asrs	r2, r2, #16
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 8006942:	fb00 f002 	mul.w	r0, r0, r2
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 8006946:	1a51      	subs	r1, r2, r1
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 8006948:	b200      	sxth	r0, r0
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 800694a:	fa04 f181 	sxtah	r1, r4, r1
  pHandle->_Super.hElAngle = elAngle;
 800694e:	8098      	strh	r0, [r3, #4]

  /*Returns rotor electrical angle*/
  return ( elAngle );
}
 8006950:	f85d 4b04 	ldr.w	r4, [sp], #4
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8006954:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 8006956:	6099      	str	r1, [r3, #8]
}
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop

0800695c <ENC_CalcAvrgMecSpeedUnit>:
  *         (expressed in the unit defined by #SPEED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit( ENCODER_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 800695c:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->TIMx;
 800695e:	6a03      	ldr	r3, [r0, #32]
  int32_t wOverallAngleVariation = 0;
  int32_t wtemp1;
  int32_t wtemp2;
  uint8_t bBufferIndex = 0u;
  bool bReliability = true;
  uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8006960:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006964:	68dc      	ldr	r4, [r3, #12]
 8006966:	f024 0401 	bic.w	r4, r4, #1
 800696a:	60dc      	str	r4, [r3, #12]
  /* disable Interrupt generation */
  LL_TIM_DisableIT_UPDATE ( TIMx );
#endif
  CntCapture =  LL_TIM_GetCounter ( TIMx );
  OverflowCntSample = pHandle->TimerOverflowNb;
  pHandle->TimerOverflowNb = 0;
 800696c:	2600      	movs	r6, #0
  return (uint32_t)(READ_REG(TIMx->CNT));
 800696e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
  OverflowCntSample = pHandle->TimerOverflowNb;
 8006970:	f8b0 4070 	ldrh.w	r4, [r0, #112]	; 0x70
  pHandle->TimerOverflowNb = 0;
 8006974:	f8a0 6070 	strh.w	r6, [r0, #112]	; 0x70
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8006978:	681e      	ldr	r6, [r3, #0]
  directionSample =  LL_TIM_GetDirection( TIMx );
#ifdef TIM_CNT_UIFCPY
  OFbit = __LL_TIM_GETFLAG_UIFCPY( CntCapture );
  if ( OFbit )
 800697a:	0fef      	lsrs	r7, r5, #31
 800697c:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006980:	bf1c      	itt	ne
 8006982:	f06f 0601 	mvnne.w	r6, #1
 8006986:	611e      	strne	r6, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006988:	68de      	ldr	r6, [r3, #12]
  OverflowCntSample = pHandle->TimerOverflowNb;
 800698a:	b2a4      	uxth	r4, r4
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
#endif
  /* If UIFCPY is not present, OverflowCntSample can not be used safely for
  speed computation, but we still use it to check that we do not exceed one overflow
  (sample frequency not less than mechanical motor speed */
  if ( ( OverflowCntSample + OFbit ) > ENC_MAX_OVERFLOW_NB )
 800698c:	443c      	add	r4, r7
 800698e:	f046 0601 	orr.w	r6, r6, #1
 8006992:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8006996:	60de      	str	r6, [r3, #12]
  {
    pHandle->TimerOverflowError = true;
 8006998:	bf8a      	itet	hi
 800699a:	2601      	movhi	r6, #1
 800699c:	f890 6079 	ldrbls.w	r6, [r0, #121]	; 0x79
 80069a0:	f880 6079 	strbhi.w	r6, [r0, #121]	; 0x79
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
 80069a4:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
  }

  /*Calculation of delta angle*/
  if ( directionSample == LL_TIM_COUNTERDIRECTION_DOWN )
 80069a8:	f1bc 0f00 	cmp.w	ip, #0
 80069ac:	f000 808d 	beq.w	8006aca <ENC_CalcAvrgMecSpeedUnit+0x16e>
    /* if UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF. */
#ifndef TIM_CNT_UIFCPY
    OverflowCntSample = ( CntCapture > pHandle->PreviousCapture ) ? 1 : 0;
#endif
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 80069b0:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80069b4:	f890 c078 	ldrb.w	ip, [r0, #120]	; 0x78
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
 80069b8:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 80069bc:	1aeb      	subs	r3, r5, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80069be:	f10c 0c0a 	add.w	ip, ip, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 80069c2:	fb07 3414 	mls	r4, r7, r4, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80069c6:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
  }


  /*Computes & returns average mechanical speed */
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80069ca:	2a00      	cmp	r2, #0
 80069cc:	f000 808d 	beq.w	8006aea <ENC_CalcAvrgMecSpeedUnit+0x18e>
 80069d0:	2a01      	cmp	r2, #1
  {
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80069d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80069d4:	d939      	bls.n	8006a4a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80069d6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80069d8:	2a02      	cmp	r2, #2
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80069da:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80069dc:	d035      	beq.n	8006a4a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80069de:	6b04      	ldr	r4, [r0, #48]	; 0x30
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80069e0:	2a03      	cmp	r2, #3
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80069e2:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80069e4:	d031      	beq.n	8006a4a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80069e6:	6b44      	ldr	r4, [r0, #52]	; 0x34
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80069e8:	2a04      	cmp	r2, #4
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80069ea:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80069ec:	d02d      	beq.n	8006a4a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80069ee:	6b84      	ldr	r4, [r0, #56]	; 0x38
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80069f0:	2a05      	cmp	r2, #5
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80069f2:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80069f4:	d029      	beq.n	8006a4a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80069f6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80069f8:	2a06      	cmp	r2, #6
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80069fa:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80069fc:	d025      	beq.n	8006a4a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80069fe:	6c04      	ldr	r4, [r0, #64]	; 0x40
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006a00:	2a07      	cmp	r2, #7
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006a02:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006a04:	d021      	beq.n	8006a4a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006a06:	6c44      	ldr	r4, [r0, #68]	; 0x44
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006a08:	2a08      	cmp	r2, #8
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006a0a:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006a0c:	d01d      	beq.n	8006a4a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006a0e:	6c84      	ldr	r4, [r0, #72]	; 0x48
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006a10:	2a09      	cmp	r2, #9
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006a12:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006a14:	d019      	beq.n	8006a4a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006a16:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006a18:	2a0a      	cmp	r2, #10
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006a1a:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006a1c:	d015      	beq.n	8006a4a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006a1e:	6d04      	ldr	r4, [r0, #80]	; 0x50
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006a20:	2a0b      	cmp	r2, #11
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006a22:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006a24:	d011      	beq.n	8006a4a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006a26:	6d44      	ldr	r4, [r0, #84]	; 0x54
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006a28:	2a0c      	cmp	r2, #12
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006a2a:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006a2c:	d00d      	beq.n	8006a4a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006a2e:	6d84      	ldr	r4, [r0, #88]	; 0x58
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006a30:	2a0d      	cmp	r2, #13
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006a32:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006a34:	d009      	beq.n	8006a4a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006a36:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006a38:	2a0e      	cmp	r2, #14
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006a3a:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006a3c:	d005      	beq.n	8006a4a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006a3e:	6e04      	ldr	r4, [r0, #96]	; 0x60
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006a40:	2a0f      	cmp	r2, #15
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006a42:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006a44:	d001      	beq.n	8006a4a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006a46:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8006a48:	4423      	add	r3, r4
  }
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 8006a4a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  wtemp2 = ( int32_t )( pHandle->PulseNumber ) *
 8006a4c:	fb07 f202 	mul.w	r2, r7, r2
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 8006a50:	fb04 f303 	mul.w	r3, r4, r3
           ( int32_t )( pHandle->SpeedBufferSize );
  wtemp1 /= wtemp2;
 8006a54:	fb93 f3f2 	sdiv	r3, r3, r2
  *pMecSpeedUnit = ( int16_t )( wtemp1 );
 8006a58:	b21f      	sxth	r7, r3
 8006a5a:	800f      	strh	r7, [r1, #0]

  /*Stores average mechanical speed */
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;

  /*Computes & stores the instantaneous electrical speed [dpp], var wtemp1*/
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8006a5c:	f890 4078 	ldrb.w	r4, [r0, #120]	; 0x78
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;

  /*last captured value update*/
  pHandle->PreviousCapture = CntCapture;
  /*Buffer index update*/
  pHandle->DeltaCapturesIndex++;
 8006a60:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 8006a64:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
           ( int32_t )( pHandle->SpeedSamplingFreqHz ) *
 8006a68:	f8b0 e06c 	ldrh.w	lr, [r0, #108]	; 0x6c
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;
 8006a6c:	8187      	strh	r7, [r0, #12]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8006a6e:	340a      	adds	r4, #10
  pHandle->DeltaCapturesIndex++;
 8006a70:	3201      	adds	r2, #1
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8006a72:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 8006a76:	69c4      	ldr	r4, [r0, #28]
  pHandle->PreviousCapture = CntCapture;
 8006a78:	f8a0 5072 	strh.w	r5, [r0, #114]	; 0x72
  pHandle->DeltaCapturesIndex++;
 8006a7c:	b2d2      	uxtb	r2, r2
 8006a7e:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 8006a82:	eba3 020c 	sub.w	r2, r3, ip
 8006a86:	8242      	strh	r2, [r0, #18]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8006a88:	fb07 f30e 	mul.w	r3, r7, lr

  if ( pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize )
 8006a8c:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
 8006a90:	f890 7078 	ldrb.w	r7, [r0, #120]	; 0x78
           ( int32_t )pHandle->_Super.bElToMecRatio;
 8006a94:	7845      	ldrb	r5, [r0, #1]
  if ( pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize )
 8006a96:	42ba      	cmp	r2, r7
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8006a98:	fb05 f303 	mul.w	r3, r5, r3
  wtemp1 /= ( int32_t )( pHandle->PulseNumber );
 8006a9c:	f8b0 506e 	ldrh.w	r5, [r0, #110]	; 0x6e
 8006aa0:	fb93 f3f5 	sdiv	r3, r3, r5
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 8006aa4:	fb04 f403 	mul.w	r4, r4, r3
  wtemp1 /= ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 8006aa8:	8b43      	ldrh	r3, [r0, #26]
 8006aaa:	fb94 f4f3 	sdiv	r4, r4, r3
  {
    pHandle->DeltaCapturesIndex = 0u;
 8006aae:	bf98      	it	ls
 8006ab0:	2300      	movls	r3, #0
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;
 8006ab2:	81c4      	strh	r4, [r0, #14]
    pHandle->DeltaCapturesIndex = 0u;
 8006ab4:	bf98      	it	ls
 8006ab6:	f880 3078 	strbls.w	r3, [r0, #120]	; 0x78
  }

  /*Checks the reliability status, then stores and returns it*/
  if ( pHandle->TimerOverflowError )
 8006aba:	b1c6      	cbz	r6, 8006aee <ENC_CalcAvrgMecSpeedUnit+0x192>
  {
    bReliability = false;
    pHandle->SensorIsReliable = false;
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8006abc:	78c2      	ldrb	r2, [r0, #3]
 8006abe:	7002      	strb	r2, [r0, #0]
    pHandle->SensorIsReliable = false;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
  {
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
  }

  return ( bReliability );
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8006aca:	f8b0 c072 	ldrh.w	ip, [r0, #114]	; 0x72
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8006ace:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
 8006ad2:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8006ad6:	eba5 0c0c 	sub.w	ip, r5, ip
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8006ada:	330a      	adds	r3, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8006adc:	fb07 c404 	mla	r4, r7, r4, ip
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8006ae0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006ae4:	2a00      	cmp	r2, #0
 8006ae6:	f47f af73 	bne.w	80069d0 <ENC_CalcAvrgMecSpeedUnit+0x74>
  int32_t wOverallAngleVariation = 0;
 8006aea:	4613      	mov	r3, r2
 8006aec:	e7ad      	b.n	8006a4a <ENC_CalcAvrgMecSpeedUnit+0xee>
}
 8006aee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
 8006af2:	f001 babf 	b.w	8008074 <SPD_IsMecSpeedReliable>
 8006af6:	bf00      	nop

08006af8 <ENC_SetMecAngle>:

  uint16_t hAngleCounts;
  uint16_t hMecAngleuint;

  pHandle->_Super.hMecAngle = hMecAngle;
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8006af8:	7843      	ldrb	r3, [r0, #1]
  pHandle->_Super.hMecAngle = hMecAngle;
 8006afa:	80c1      	strh	r1, [r0, #6]
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8006afc:	fb03 f301 	mul.w	r3, r3, r1
 8006b00:	8083      	strh	r3, [r0, #4]
  if ( hMecAngle < 0 )
 8006b02:	2900      	cmp	r1, #0
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8006b04:	b28b      	uxth	r3, r1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8006b06:	6a02      	ldr	r2, [r0, #32]
  {
    hMecAngleuint = ( uint16_t )hMecAngle;
  }

  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8006b08:	f8b0 006e 	ldrh.w	r0, [r0, #110]	; 0x6e
 8006b0c:	4905      	ldr	r1, [pc, #20]	; (8006b24 <ENC_SetMecAngle+0x2c>)
 8006b0e:	bfbc      	itt	lt
 8006b10:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8006b14:	b29b      	uxthlt	r3, r3
  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
 8006b16:	fb03 f300 	mul.w	r3, r3, r0
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8006b1a:	fba1 1303 	umull	r1, r3, r1, r3
 8006b1e:	0bdb      	lsrs	r3, r3, #15

  TIMx->CNT = ( uint16_t )( hAngleCounts );
 8006b20:	6253      	str	r3, [r2, #36]	; 0x24
  
}
 8006b22:	4770      	bx	lr
 8006b24:	80008001 	.word	0x80008001

08006b28 <ENC_IRQHandler>:
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  flag used to distinguish between various IRQ sources
  * @retval none
  */
__weak void * ENC_IRQHandler( void * pHandleVoid )
{
 8006b28:	4602      	mov	r2, r0
  /*Updates the number of overflows occurred*/
  /* the handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1u;

  return MC_NULL;
}
 8006b2a:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1u;
 8006b2c:	f8b2 3070 	ldrh.w	r3, [r2, #112]	; 0x70
 8006b30:	3301      	adds	r3, #1
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop

08006b3c <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8006b40:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8006b42:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8006b46:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8006b4a:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8006b4e:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
}
 8006b52:	4770      	bx	lr

08006b54 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8006b54:	b120      	cbz	r0, 8006b60 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8006b56:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8006b5a:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8006b5c:	9b00      	ldr	r3, [sp, #0]
 8006b5e:	60c3      	str	r3, [r0, #12]
  }
}
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop

08006b64 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8006b64:	b190      	cbz	r0, 8006b8c <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8006b66:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8006b68:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 8006b6a:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8006b6c:	b151      	cbz	r1, 8006b84 <FCP_CalcCRC+0x20>
 8006b6e:	1c82      	adds	r2, r0, #2
 8006b70:	3901      	subs	r1, #1
 8006b72:	fa52 f181 	uxtab	r1, r2, r1
 8006b76:	3001      	adds	r0, #1
    {
      nSum += pFrame->Buffer[idx];
 8006b78:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006b7c:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8006b7e:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8006b80:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8006b82:	d1f9      	bne.n	8006b78 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8006b84:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 8006b88:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop

08006b90 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8006b90:	b510      	push	{r4, lr}
 8006b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b96:	4604      	mov	r4, r0
 8006b98:	2100      	movs	r1, #0
 8006b9a:	f002 f835 	bl	8008c08 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8006ba4:	bd10      	pop	{r4, pc}
 8006ba6:	bf00      	nop

08006ba8 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8006ba8:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8006bac:	1c53      	adds	r3, r2, #1
 8006bae:	b29b      	uxth	r3, r3
{
 8006bb0:	b470      	push	{r4, r5, r6}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8006bb2:	2b7f      	cmp	r3, #127	; 0x7f
{
 8006bb4:	4606      	mov	r6, r0
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8006bb6:	bf88      	it	hi
 8006bb8:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8006bba:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
{
 8006bbe:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8006bc0:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8006bc4:	f8a6 3100 	strh.w	r3, [r6, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006bc8:	f106 05fe 	add.w	r5, r6, #254	; 0xfe
 8006bcc:	1eb3      	subs	r3, r6, #2
  int32_t wAux = 0;
 8006bce:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8006bd0:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006bd4:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8006bd6:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006bd8:	d1fa      	bne.n	8006bd0 <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8006bda:	2a00      	cmp	r2, #0
 8006bdc:	bfb8      	it	lt
 8006bde:	327f      	addlt	r2, #127	; 0x7f
 8006be0:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8006be2:	f8a6 2104 	strh.w	r2, [r6, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8006be6:	bc70      	pop	{r4, r5, r6}
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop

08006bec <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8006bec:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop

08006bf4 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8006bf4:	8a03      	ldrh	r3, [r0, #16]
 8006bf6:	8b42      	ldrh	r2, [r0, #26]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d306      	bcc.n	8006c0a <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8006bfc:	8b82      	ldrh	r2, [r0, #28]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d901      	bls.n	8006c06 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8006c02:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8006c04:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8006c06:	8ac0      	ldrh	r0, [r0, #22]
 8006c08:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8006c0a:	2008      	movs	r0, #8
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop

08006c10 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8006c10:	2300      	movs	r3, #0
 8006c12:	8203      	strh	r3, [r0, #16]
}
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop

08006c18 <NTC_Init>:
{
 8006c18:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8006c1a:	7803      	ldrb	r3, [r0, #0]
{
 8006c1c:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8006c1e:	b123      	cbz	r3, 8006c2a <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8006c20:	8a43      	ldrh	r3, [r0, #18]
 8006c22:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8006c24:	2200      	movs	r2, #0
 8006c26:	82c2      	strh	r2, [r0, #22]
}
 8006c28:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8006c2a:	3004      	adds	r0, #4
 8006c2c:	f7fb fa9e 	bl	800216c <RCM_RegisterRegConv>
 8006c30:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8006c34:	4620      	mov	r0, r4
 8006c36:	f7ff ffeb 	bl	8006c10 <NTC_Clear>
}
 8006c3a:	bd10      	pop	{r4, pc}

08006c3c <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8006c3c:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8006c3e:	7803      	ldrb	r3, [r0, #0]
{
 8006c40:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8006c42:	b113      	cbz	r3, 8006c4a <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8006c44:	2000      	movs	r0, #0
 8006c46:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 8006c48:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8006c4a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8006c4e:	f7fb fb61 	bl	8002314 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8006c52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c56:	4298      	cmp	r0, r3
 8006c58:	d007      	beq.n	8006c6a <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8006c5a:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8006c5c:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8006c5e:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8006c60:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8006c64:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8006c68:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f7ff ffc2 	bl	8006bf4 <NTC_SetFaultState>
 8006c70:	82e0      	strh	r0, [r4, #22]
}
 8006c72:	bd10      	pop	{r4, pc}

08006c74 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8006c74:	7803      	ldrb	r3, [r0, #0]
 8006c76:	b983      	cbnz	r3, 8006c9a <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8006c78:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8006c7a:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8006c7c:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8006c80:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8006c82:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 8006c84:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	bfbc      	itt	lt
 8006c8c:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8006c90:	33ff      	addlt	r3, #255	; 0xff
 8006c92:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8006c96:	b200      	sxth	r0, r0
 8006c98:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8006c9a:	8a80      	ldrh	r0, [r0, #20]
}
 8006c9c:	b200      	sxth	r0, r0
 8006c9e:	4770      	bx	lr

08006ca0 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8006ca0:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8006ca2:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8006ca4:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8006ca6:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8006ca8:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8006caa:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8006cac:	6283      	str	r3, [r0, #40]	; 0x28
}
 8006cae:	4770      	bx	lr

08006cb0 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8006cb0:	8081      	strh	r1, [r0, #4]
}
 8006cb2:	4770      	bx	lr

08006cb4 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8006cb4:	80c1      	strh	r1, [r0, #6]
}
 8006cb6:	4770      	bx	lr

08006cb8 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8006cb8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop

08006cc0 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8006cc0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop

08006cc8 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8006cc8:	6081      	str	r1, [r0, #8]

  return;
}
 8006cca:	4770      	bx	lr

08006ccc <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8006ccc:	8b00      	ldrh	r0, [r0, #24]
 8006cce:	4770      	bx	lr

08006cd0 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8006cd0:	8b40      	ldrh	r0, [r0, #26]
 8006cd2:	4770      	bx	lr

08006cd4 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8006cd4:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8006cd6:	4770      	bx	lr

08006cd8 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8006cd8:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop

08006ce0 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006ce0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8006ce4:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
{
 8006ce8:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006cea:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8006cee:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8006cf2:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8006cf6:	b162      	cbz	r2, 8006d12 <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8006cf8:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8006cfa:	fb01 f102 	mul.w	r1, r1, r2

    if ( wIntegral_sum_temp < 0 )
 8006cfe:	1872      	adds	r2, r6, r1
 8006d00:	d420      	bmi.n	8006d44 <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8006d02:	2e00      	cmp	r6, #0
 8006d04:	db29      	blt.n	8006d5a <PI_Controller+0x7a>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8006d06:	68c1      	ldr	r1, [r0, #12]
 8006d08:	4291      	cmp	r1, r2
 8006d0a:	db03      	blt.n	8006d14 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8006d0c:	6901      	ldr	r1, [r0, #16]
 8006d0e:	4291      	cmp	r1, r2
 8006d10:	dc00      	bgt.n	8006d14 <PI_Controller+0x34>
 8006d12:	4611      	mov	r1, r2
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8006d14:	8b86      	ldrh	r6, [r0, #28]
 8006d16:	8bc2      	ldrh	r2, [r0, #30]
 8006d18:	4133      	asrs	r3, r6
 8006d1a:	fa41 f202 	asr.w	r2, r1, r2
 8006d1e:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8006d20:	429c      	cmp	r4, r3
 8006d22:	da05      	bge.n	8006d30 <PI_Controller+0x50>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8006d24:	1ae3      	subs	r3, r4, r3
 8006d26:	4419      	add	r1, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8006d28:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	bc70      	pop	{r4, r5, r6}
 8006d2e:	4770      	bx	lr
  else if ( wOutput_32 < hLowerOutputLimit )
 8006d30:	429d      	cmp	r5, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 8006d32:	bfc9      	itett	gt
 8006d34:	1aeb      	subgt	r3, r5, r3
 8006d36:	b21c      	sxthle	r4, r3
    wOutput_32 = hLowerOutputLimit;
 8006d38:	462c      	movgt	r4, r5
  pHandle->wIntegralTerm += wDischarge;
 8006d3a:	18c9      	addgt	r1, r1, r3
 8006d3c:	6081      	str	r1, [r0, #8]
}
 8006d3e:	4620      	mov	r0, r4
 8006d40:	bc70      	pop	{r4, r5, r6}
 8006d42:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 8006d44:	2e00      	cmp	r6, #0
 8006d46:	ddde      	ble.n	8006d06 <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 8006d48:	2900      	cmp	r1, #0
 8006d4a:	dddc      	ble.n	8006d06 <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8006d4c:	68c1      	ldr	r1, [r0, #12]
 8006d4e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006d52:	4291      	cmp	r1, r2
 8006d54:	d1de      	bne.n	8006d14 <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 8006d56:	460a      	mov	r2, r1
 8006d58:	e7db      	b.n	8006d12 <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 8006d5a:	4e03      	ldr	r6, [pc, #12]	; (8006d68 <PI_Controller+0x88>)
 8006d5c:	ea32 0221 	bics.w	r2, r2, r1, asr #32
 8006d60:	bf28      	it	cs
 8006d62:	4632      	movcs	r2, r6
 8006d64:	e7cf      	b.n	8006d06 <PI_Controller+0x26>
 8006d66:	bf00      	nop
 8006d68:	80000001 	.word	0x80000001

08006d6c <PID_Controller>:
{
  int32_t wDifferential_Term;
  int32_t wDeltaError;
  int32_t wTemp_output;

  if ( pHandle->hKdGain != 0 ) /* derivative terms not used */
 8006d6c:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	; 0x22
{
 8006d70:	b570      	push	{r4, r5, r6, lr}
  if ( pHandle->hKdGain != 0 ) /* derivative terms not used */
 8006d72:	b18a      	cbz	r2, 8006d98 <PID_Controller+0x2c>
  {
    wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 8006d74:	6a86      	ldr	r6, [r0, #40]	; 0x28
#else
    /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right)
    is used by the compiler to perform the shifts (instead of LSR
    logical shift right)*/
    wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 8006d76:	8cc5      	ldrh	r5, [r0, #38]	; 0x26
#endif

    pHandle->wPrevProcessVarError = wProcessVarError;
 8006d78:	6281      	str	r1, [r0, #40]	; 0x28
    wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 8006d7a:	1b8b      	subs	r3, r1, r6
    wDifferential_Term = pHandle->hKdGain * wDeltaError;
 8006d7c:	fb02 f303 	mul.w	r3, r2, r3
    wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 8006d80:	4604      	mov	r4, r0
 8006d82:	fa43 f505 	asr.w	r5, r3, r5

    wTemp_output = PI_Controller( pHandle, wProcessVarError ) + wDifferential_Term;
 8006d86:	f7ff ffab 	bl	8006ce0 <PI_Controller>

    if ( wTemp_output > pHandle->hUpperOutputLimit )
 8006d8a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
    wTemp_output = PI_Controller( pHandle, wProcessVarError ) + wDifferential_Term;
 8006d8e:	4428      	add	r0, r5
    if ( wTemp_output > pHandle->hUpperOutputLimit )
 8006d90:	4282      	cmp	r2, r0
 8006d92:	da06      	bge.n	8006da2 <PID_Controller+0x36>
  else
  {
    wTemp_output = PI_Controller( pHandle, wProcessVarError );
  }
  return ( ( int16_t ) wTemp_output );
}
 8006d94:	4610      	mov	r0, r2
 8006d96:	bd70      	pop	{r4, r5, r6, pc}
    wTemp_output = PI_Controller( pHandle, wProcessVarError );
 8006d98:	f7ff ffa2 	bl	8006ce0 <PI_Controller>
 8006d9c:	4602      	mov	r2, r0
}
 8006d9e:	4610      	mov	r0, r2
 8006da0:	bd70      	pop	{r4, r5, r6, pc}
    else if ( wTemp_output < pHandle->hLowerOutputLimit )
 8006da2:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8006da6:	4290      	cmp	r0, r2
 8006da8:	bfb8      	it	lt
 8006daa:	4610      	movlt	r0, r2
 8006dac:	b202      	sxth	r2, r0
}
 8006dae:	4610      	mov	r0, r2
 8006db0:	bd70      	pop	{r4, r5, r6, pc}
 8006db2:	bf00      	nop

08006db4 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 8006db4:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006db6:	e9d0 4242 	ldrd	r4, r2, [r0, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8006dba:	8b11      	ldrh	r1, [r2, #24]
 8006dbc:	89d3      	ldrh	r3, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006dbe:	8995      	ldrh	r5, [r2, #12]
 8006dc0:	8ad2      	ldrh	r2, [r2, #22]
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8006dc2:	fb13 f301 	smulbb	r3, r3, r1
{
 8006dc6:	4606      	mov	r6, r0
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006dc8:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006dcc:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006dd0:	f7ff fccc 	bl	800676c <VBS_GetAvBusVoltage_V>
 8006dd4:	fb04 f200 	mul.w	r2, r4, r0
  wAux /= 65536;
 8006dd8:	1e2c      	subs	r4, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006dda:	480e      	ldr	r0, [pc, #56]	; (8006e14 <PQD_CalcElMotorPower+0x60>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8006ddc:	490e      	ldr	r1, [pc, #56]	; (8006e18 <PQD_CalcElMotorPower+0x64>)
  wAux /= 65536;
 8006dde:	bfb8      	it	lt
 8006de0:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006de4:	fb80 3002 	smull	r3, r0, r0, r2
  wAux /= 65536;
 8006de8:	bfb8      	it	lt
 8006dea:	34ff      	addlt	r4, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006dec:	17d3      	asrs	r3, r2, #31
  wAux /= 65536;
 8006dee:	1424      	asrs	r4, r4, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006df0:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
  wAux3 = wAux * wAux2;
 8006df4:	fb03 f304 	mul.w	r3, r3, r4
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8006df8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006dfc:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8006dfe:	fb81 2103 	smull	r2, r1, r1, r3
 8006e02:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8006e04:	4630      	mov	r0, r6
 8006e06:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8006e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8006e0e:	f7ff becb 	b.w	8006ba8 <MPM_CalcElMotorPower>
 8006e12:	bf00      	nop
 8006e14:	1b4e81b5 	.word	0x1b4e81b5
 8006e18:	66666667 	.word	0x66666667

08006e1c <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 8006e1c:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8006e1e:	4b18      	ldr	r3, [pc, #96]	; (8006e80 <startTimers+0x64>)
 8006e20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006e22:	07d2      	lsls	r2, r2, #31
 8006e24:	b082      	sub	sp, #8
 8006e26:	d415      	bmi.n	8006e54 <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006e28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006e2a:	f042 0201 	orr.w	r2, r2, #1
 8006e2e:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006e30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006e32:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006e36:	f002 0201 	and.w	r2, r2, #1
 8006e3a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8006e3c:	9a01      	ldr	r2, [sp, #4]
 8006e3e:	694a      	ldr	r2, [r1, #20]
 8006e40:	f042 0201 	orr.w	r2, r2, #1
 8006e44:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8006e46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006e48:	f022 0201 	bic.w	r2, r2, #1
 8006e4c:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8006e4e:	b002      	add	sp, #8
 8006e50:	bc30      	pop	{r4, r5}
 8006e52:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8006e54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006e58:	4c0a      	ldr	r4, [pc, #40]	; (8006e84 <startTimers+0x68>)
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	6859      	ldr	r1, [r3, #4]
 8006e5e:	4d0a      	ldr	r5, [pc, #40]	; (8006e88 <startTimers+0x6c>)
 8006e60:	4021      	ands	r1, r4
 8006e62:	f041 0120 	orr.w	r1, r1, #32
 8006e66:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006e68:	6958      	ldr	r0, [r3, #20]
 8006e6a:	f040 0001 	orr.w	r0, r0, #1
 8006e6e:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006e70:	6859      	ldr	r1, [r3, #4]
 8006e72:	402a      	ands	r2, r5
 8006e74:	4021      	ands	r1, r4
 8006e76:	430a      	orrs	r2, r1
 8006e78:	605a      	str	r2, [r3, #4]
}
 8006e7a:	b002      	add	sp, #8
 8006e7c:	bc30      	pop	{r4, r5}
 8006e7e:	4770      	bx	lr
 8006e80:	40021000 	.word	0x40021000
 8006e84:	fdffff8f 	.word	0xfdffff8f
 8006e88:	02000070 	.word	0x02000070

08006e8c <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8006e8c:	b4f0      	push	{r4, r5, r6, r7}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8006e8e:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 8006e90:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 8006e94:	d11a      	bne.n	8006ecc <waitForPolarizationEnd+0x40>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8006e96:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8006e98:	3201      	adds	r2, #1
 8006e9a:	0856      	lsrs	r6, r2, #1
 8006e9c:	0176      	lsls	r6, r6, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006e9e:	f06f 0702 	mvn.w	r7, #2
 8006ea2:	6107      	str	r7, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8006ea4:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8006ea6:	781c      	ldrb	r4, [r3, #0]
 8006ea8:	2c0f      	cmp	r4, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8006eaa:	f102 0501 	add.w	r5, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8006eae:	d80b      	bhi.n	8006ec8 <waitForPolarizationEnd+0x3c>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8006eb0:	6904      	ldr	r4, [r0, #16]
 8006eb2:	07a4      	lsls	r4, r4, #30
 8006eb4:	d5f7      	bpl.n	8006ea6 <waitForPolarizationEnd+0x1a>
      hCalibrationPeriodCounter++;
 8006eb6:	b2aa      	uxth	r2, r5
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8006eb8:	4296      	cmp	r6, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006eba:	6107      	str	r7, [r0, #16]
 8006ebc:	d8f3      	bhi.n	8006ea6 <waitForPolarizationEnd+0x1a>
      {
        if (*cnt < NB_CONVERSIONS)
 8006ebe:	781c      	ldrb	r4, [r3, #0]
 8006ec0:	2c0f      	cmp	r4, #15
 8006ec2:	d8f0      	bhi.n	8006ea6 <waitForPolarizationEnd+0x1a>
        {
          *SWerror = 1u;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8006ec8:	bcf0      	pop	{r4, r5, r6, r7}
 8006eca:	4770      	bx	lr
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8006ecc:	2c60      	cmp	r4, #96	; 0x60
 8006ece:	d1e3      	bne.n	8006e98 <waitForPolarizationEnd+0xc>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8006ed0:	3201      	adds	r2, #1
 8006ed2:	0156      	lsls	r6, r2, #5
 8006ed4:	e7e3      	b.n	8006e9e <waitForPolarizationEnd+0x12>
 8006ed6:	bf00      	nop

08006ed8 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8006ed8:	6843      	ldr	r3, [r0, #4]
 8006eda:	4718      	bx	r3

08006edc <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8006edc:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006ede:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006ee2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 8006ee4:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006ee6:	140c      	asrs	r4, r1, #16
{
 8006ee8:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006eea:	fb06 f404 	mul.w	r4, r6, r4
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006eee:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006ef0:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006ef4:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8006ef8:	eb01 0344 	add.w	r3, r1, r4, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006efc:	ebc1 0144 	rsb	r1, r1, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8006f00:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006f04:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8006f08:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006f0c:	ea4f 0444 	mov.w	r4, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8006f10:	ea4f 0565 	mov.w	r5, r5, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006f14:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8006f18:	db77      	blt.n	800700a <PWMC_SetPhaseVoltage+0x12e>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8006f1a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006f1e:	db4e      	blt.n	8006fbe <PWMC_SetPhaseVoltage+0xe2>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006f20:	1aad      	subs	r5, r5, r2
 8006f22:	bf44      	itt	mi
 8006f24:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8006f28:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006f2c:	2900      	cmp	r1, #0
 8006f2e:	bfbc      	itt	lt
 8006f30:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8006f34:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	bfb8      	it	lt
 8006f3c:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006f40:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8006f44:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006f48:	bfb8      	it	lt
 8006f4a:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8006f4e:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8006f50:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006f54:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8006f58:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8006f5c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
      pHandle->lowDuty = wTimePhB;
 8006f60:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8006f62:	87c2      	strh	r2, [r0, #62]	; 0x3e

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8006f64:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8006f68:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8006f6c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8006f70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006f74:	b292      	uxth	r2, r2
 8006f76:	b289      	uxth	r1, r1
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8006f7c:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8006f7e:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8006f80:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8006f82:	d118      	bne.n	8006fb6 <PWMC_SetPhaseVoltage+0xda>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8006f84:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 8006f88:	f9b0 504a 	ldrsh.w	r5, [r0, #74]	; 0x4a
    if ( pHandle->Ia > 0 )
 8006f8c:	2c00      	cmp	r4, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 8006f8e:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8006f92:	bfcc      	ite	gt
 8006f94:	1912      	addgt	r2, r2, r4
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8006f96:	1b12      	suble	r2, r2, r4
 8006f98:	b292      	uxth	r2, r2
 8006f9a:	8642      	strh	r2, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8006f9c:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 8006fa0:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 8006fa2:	bfcc      	ite	gt
 8006fa4:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8006fa6:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8006fa8:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8006faa:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8006fac:	bfcc      	ite	gt
 8006fae:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8006fb0:	1b1b      	suble	r3, r3, r4
 8006fb2:	8681      	strh	r1, [r0, #52]	; 0x34
 8006fb4:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8006fb6:	6983      	ldr	r3, [r0, #24]
}
 8006fb8:	b003      	add	sp, #12
 8006fba:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8006fbc:	4718      	bx	r3
      if ( wX <= 0 )
 8006fbe:	2c00      	cmp	r4, #0
 8006fc0:	dd47      	ble.n	8007052 <PWMC_SetPhaseVoltage+0x176>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006fc2:	1aa5      	subs	r5, r4, r2
 8006fc4:	bf44      	itt	mi
 8006fc6:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8006fca:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8006fce:	2900      	cmp	r1, #0
 8006fd0:	bfb8      	it	lt
 8006fd2:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8006fd6:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8006fda:	bfb8      	it	lt
 8006fdc:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8006fe0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006fe4:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8006fe6:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006fe8:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006fec:	bfb8      	it	lt
 8006fee:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006ff2:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006ff6:	bfb8      	it	lt
 8006ff8:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8006ffc:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhC;
 8007000:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8007004:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8007006:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8007008:	e7ac      	b.n	8006f64 <PWMC_SetPhaseVoltage+0x88>
    if ( wZ < 0 )
 800700a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800700e:	db69      	blt.n	80070e4 <PWMC_SetPhaseVoltage+0x208>
      if ( wX <= 0 )
 8007010:	2c00      	cmp	r4, #0
 8007012:	dd43      	ble.n	800709c <PWMC_SetPhaseVoltage+0x1c0>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8007014:	1b2d      	subs	r5, r5, r4
 8007016:	bf48      	it	mi
 8007018:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 800701c:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8007020:	bf48      	it	mi
 8007022:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8007026:	2b00      	cmp	r3, #0
 8007028:	bfb8      	it	lt
 800702a:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 800702e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8007032:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8007036:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 800703a:	bfb8      	it	lt
 800703c:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8007040:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8007044:	eb03 4164 	add.w	r1, r3, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 8007048:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800704a:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800704c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8007050:	e788      	b.n	8006f64 <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8007052:	1b2d      	subs	r5, r5, r4
 8007054:	bf44      	itt	mi
 8007056:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800705a:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 800705e:	2b00      	cmp	r3, #0
 8007060:	bfb8      	it	lt
 8007062:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8007066:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 800706a:	bfb8      	it	lt
 800706c:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8007070:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8007074:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8007076:	ea4f 0296 	mov.w	r2, r6, lsr #2
 800707a:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 800707e:	bfb8      	it	lt
 8007080:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8007084:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8007088:	bfb8      	it	lt
 800708a:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 800708e:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhB;
 8007092:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8007096:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8007098:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 800709a:	e763      	b.n	8006f64 <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800709c:	1aa5      	subs	r5, r4, r2
 800709e:	bf44      	itt	mi
 80070a0:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80070a4:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 80070a8:	2900      	cmp	r1, #0
 80070aa:	bfb8      	it	lt
 80070ac:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 80070b0:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 80070b4:	bfb8      	it	lt
 80070b6:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 80070ba:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80070be:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 80070c0:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80070c2:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80070c6:	bfb8      	it	lt
 80070c8:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 80070cc:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80070d0:	bfb8      	it	lt
 80070d2:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 80070d6:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 80070da:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 80070dc:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 80070de:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80070e2:	e73f      	b.n	8006f64 <PWMC_SetPhaseVoltage+0x88>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80070e4:	1aad      	subs	r5, r5, r2
 80070e6:	bf44      	itt	mi
 80070e8:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80070ec:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 80070f0:	2900      	cmp	r1, #0
 80070f2:	bfbc      	itt	lt
 80070f4:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 80070f8:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	bfb8      	it	lt
 8007100:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8007104:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8007108:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800710c:	bfb8      	it	lt
 800710e:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8007112:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8007114:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8007118:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 800711c:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8007120:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8007122:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 8007124:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8007128:	e71c      	b.n	8006f64 <PWMC_SetPhaseVoltage+0x88>
 800712a:	bf00      	nop

0800712c <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 800712c:	6883      	ldr	r3, [r0, #8]
 800712e:	4718      	bx	r3

08007130 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8007130:	b510      	push	{r4, lr}
 8007132:	4604      	mov	r4, r0
 8007134:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8007136:	b199      	cbz	r1, 8007160 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8007138:	2901      	cmp	r1, #1
 800713a:	d002      	beq.n	8007142 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 800713c:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 800713e:	b002      	add	sp, #8
 8007140:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8007142:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8007146:	b1cb      	cbz	r3, 800717c <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 8007148:	3b01      	subs	r3, #1
 800714a:	b29b      	uxth	r3, r3
 800714c:	9101      	str	r1, [sp, #4]
 800714e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1f2      	bne.n	800713c <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8007156:	6903      	ldr	r3, [r0, #16]
 8007158:	4798      	blx	r3
        retVal = true;
 800715a:	9901      	ldr	r1, [sp, #4]
 800715c:	4608      	mov	r0, r1
 800715e:	e7ee      	b.n	800713e <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8007160:	f7ff ffe4 	bl	800712c <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8007164:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8007168:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e5      	bne.n	800713c <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8007170:	4620      	mov	r0, r4
 8007172:	6923      	ldr	r3, [r4, #16]
 8007174:	4798      	blx	r3
      retVal = true;
 8007176:	2001      	movs	r0, #1
}
 8007178:	b002      	add	sp, #8
 800717a:	bd10      	pop	{r4, pc}
      retVal = true;
 800717c:	4608      	mov	r0, r1
}
 800717e:	b002      	add	sp, #8
 8007180:	bd10      	pop	{r4, pc}
 8007182:	bf00      	nop

08007184 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8007184:	69c3      	ldr	r3, [r0, #28]
 8007186:	4718      	bx	r3

08007188 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007188:	6883      	ldr	r3, [r0, #8]
 800718a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800718e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007192:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007194:	6883      	ldr	r3, [r0, #8]
 8007196:	00d9      	lsls	r1, r3, #3
    R3_2_TIMxInit( TIMx, &pHandle->_Super );
  }
}

static void R3_2_ADCxInit( ADC_TypeDef * ADCx )
{
 8007198:	b082      	sub	sp, #8
 800719a:	d418      	bmi.n	80071ce <R3_2_ADCxInit+0x46>
  
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 800719c:	4b24      	ldr	r3, [pc, #144]	; (8007230 <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 800719e:	6882      	ldr	r2, [r0, #8]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4924      	ldr	r1, [pc, #144]	; (8007234 <R3_2_ADCxInit+0xac>)
 80071a4:	099b      	lsrs	r3, r3, #6
 80071a6:	fba1 1303 	umull	r1, r3, r1, r3
 80071aa:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 80071ae:	099b      	lsrs	r3, r3, #6
 80071b0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80071ba:	6082      	str	r2, [r0, #8]
 80071bc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 80071be:	9b01      	ldr	r3, [sp, #4]
 80071c0:	b12b      	cbz	r3, 80071ce <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 80071c2:	9b01      	ldr	r3, [sp, #4]
 80071c4:	3b01      	subs	r3, #1
 80071c6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 80071c8:	9b01      	ldr	r3, [sp, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1f9      	bne.n	80071c2 <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 80071ce:	6883      	ldr	r3, [r0, #8]
 80071d0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80071d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80071d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071dc:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80071de:	6883      	ldr	r3, [r0, #8]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	dbfc      	blt.n	80071de <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80071e4:	6803      	ldr	r3, [r0, #0]
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0 
  * following a calibration phase, could have no effect on ADC 
  * within certain AHB/ADC clock ratio.
  */
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 80071e6:	07da      	lsls	r2, r3, #31
 80071e8:	d408      	bmi.n	80071fc <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 80071ea:	4a13      	ldr	r2, [pc, #76]	; (8007238 <R3_2_ADCxInit+0xb0>)
 80071ec:	6883      	ldr	r3, [r0, #8]
 80071ee:	4013      	ands	r3, r2
 80071f0:	f043 0301 	orr.w	r3, r3, #1
 80071f4:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80071f6:	6803      	ldr	r3, [r0, #0]
 80071f8:	07db      	lsls	r3, r3, #31
 80071fa:	d5f7      	bpl.n	80071ec <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 80071fc:	6882      	ldr	r2, [r0, #8]
 80071fe:	490e      	ldr	r1, [pc, #56]	; (8007238 <R3_2_ADCxInit+0xb0>)
 8007200:	400a      	ands	r2, r1
 8007202:	f042 0208 	orr.w	r2, r2, #8
 8007206:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8007208:	6882      	ldr	r2, [r0, #8]
 800720a:	400a      	ands	r2, r1
 800720c:	f042 0220 	orr.w	r2, r2, #32
 8007210:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8007212:	68c3      	ldr	r3, [r0, #12]
 8007214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007218:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800721c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007220:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 8007222:	6883      	ldr	r3, [r0, #8]
 8007224:	400b      	ands	r3, r1
 8007226:	f043 0304 	orr.w	r3, r3, #4
 800722a:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
 }
 800722c:	b002      	add	sp, #8
 800722e:	4770      	bx	lr
 8007230:	20000614 	.word	0x20000614
 8007234:	053e2d63 	.word	0x053e2d63
 8007238:	7fffffc0 	.word	0x7fffffc0

0800723c <R3_2_GetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;  
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800723c:	6f43      	ldr	r3, [r0, #116]	; 0x74
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 800723e:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8007242:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007244:	689c      	ldr	r4, [r3, #8]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8007246:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800724a:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 800724c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 800724e:	682d      	ldr	r5, [r5, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 8007250:	681e      	ldr	r6, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007252:	6863      	ldr	r3, [r4, #4]
 8007254:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725c:	6063      	str	r3, [r4, #4]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  switch ( Sector )
 800725e:	2a05      	cmp	r2, #5
 8007260:	f200 8099 	bhi.w	8007396 <R3_2_GetPhaseCurrents+0x15a>
 8007264:	e8df f002 	tbb	[pc, r2]
 8007268:	031e1e38 	.word	0x031e1e38
 800726c:	3803      	.short	0x3803
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800726e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 8007270:	4b4c      	ldr	r3, [pc, #304]	; (80073a4 <R3_2_GetPhaseCurrents+0x168>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8007272:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8007274:	429c      	cmp	r4, r3
 8007276:	da55      	bge.n	8007324 <R3_2_GetPhaseCurrents+0xe8>
      {
        Iab->a = -INT16_MAX;
      }
      else  if ( Aux > INT16_MAX )
      {
        Iab->a = INT16_MAX;
 8007278:	800b      	strh	r3, [r1, #0]
      {
        Iab->a = ( int16_t )Aux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 800727a:	6e02      	ldr	r2, [r0, #96]	; 0x60

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 800727c:	4f49      	ldr	r7, [pc, #292]	; (80073a4 <R3_2_GetPhaseCurrents+0x168>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 800727e:	1b92      	subs	r2, r2, r6
      if ( Aux < -INT16_MAX )
 8007280:	42ba      	cmp	r2, r7
 8007282:	da55      	bge.n	8007330 <R3_2_GetPhaseCurrents+0xf4>
      {
        Iab->b = -INT16_MAX;
 8007284:	f9b1 5000 	ldrsh.w	r5, [r1]
 8007288:	804f      	strh	r7, [r1, #2]
 800728a:	b2ab      	uxth	r3, r5
 800728c:	f248 0201 	movw	r2, #32769	; 0x8001
      break;
  }

  pHandle->_Super.Ia = Iab->a;
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007290:	4413      	add	r3, r2
 8007292:	425b      	negs	r3, r3
  pHandle->_Super.Ia = Iab->a;
 8007294:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
  pHandle->_Super.Ib = Iab->b;
 8007298:	f8a0 704a 	strh.w	r7, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 800729c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 80072a0:	bcf0      	pop	{r4, r5, r6, r7}
 80072a2:	4770      	bx	lr
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80072a4:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      if ( Aux < -INT16_MAX )
 80072a6:	4b3f      	ldr	r3, [pc, #252]	; (80073a4 <R3_2_GetPhaseCurrents+0x168>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80072a8:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 80072aa:	429c      	cmp	r4, r3
 80072ac:	db34      	blt.n	8007318 <R3_2_GetPhaseCurrents+0xdc>
      else  if ( Aux > INT16_MAX )
 80072ae:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80072b2:	db68      	blt.n	8007386 <R3_2_GetPhaseCurrents+0x14a>
        Iab->a = INT16_MAX;
 80072b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80072b8:	4613      	mov	r3, r2
 80072ba:	800a      	strh	r2, [r1, #0]
 80072bc:	4614      	mov	r4, r2
 80072be:	4615      	mov	r5, r2
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 80072c0:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80072c2:	1ab2      	subs	r2, r6, r2
      Aux -= ( int32_t )Iab->a;             /* Ib */
 80072c4:	1b12      	subs	r2, r2, r4
      if ( Aux > INT16_MAX )
 80072c6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80072ca:	db44      	blt.n	8007356 <R3_2_GetPhaseCurrents+0x11a>
        Iab->b = INT16_MAX;
 80072cc:	f647 74ff 	movw	r4, #32767	; 0x7fff
 80072d0:	4622      	mov	r2, r4
 80072d2:	804c      	strh	r4, [r1, #2]
 80072d4:	4627      	mov	r7, r4
 80072d6:	e7db      	b.n	8007290 <R3_2_GetPhaseCurrents+0x54>
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 80072d8:	6e04      	ldr	r4, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 80072da:	4b32      	ldr	r3, [pc, #200]	; (80073a4 <R3_2_GetPhaseCurrents+0x168>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 80072dc:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 80072de:	429c      	cmp	r4, r3
 80072e0:	db14      	blt.n	800730c <R3_2_GetPhaseCurrents+0xd0>
      else  if ( Aux > INT16_MAX )
 80072e2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80072e6:	db43      	blt.n	8007370 <R3_2_GetPhaseCurrents+0x134>
        Iab->b = INT16_MAX;
 80072e8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80072ec:	461a      	mov	r2, r3
 80072ee:	804b      	strh	r3, [r1, #2]
 80072f0:	461c      	mov	r4, r3
 80072f2:	461f      	mov	r7, r3
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 80072f4:	6e45      	ldr	r5, [r0, #100]	; 0x64
 80072f6:	1b73      	subs	r3, r6, r5
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 80072f8:	1b1c      	subs	r4, r3, r4
      if ( Aux > INT16_MAX )
 80072fa:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80072fe:	db23      	blt.n	8007348 <R3_2_GetPhaseCurrents+0x10c>
        Iab->a = INT16_MAX;
 8007300:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8007304:	4623      	mov	r3, r4
 8007306:	800c      	strh	r4, [r1, #0]
 8007308:	4625      	mov	r5, r4
 800730a:	e7c1      	b.n	8007290 <R3_2_GetPhaseCurrents+0x54>
        Iab->b = -INT16_MAX;
 800730c:	461c      	mov	r4, r3
 800730e:	804b      	strh	r3, [r1, #2]
 8007310:	461f      	mov	r7, r3
 8007312:	f248 0201 	movw	r2, #32769	; 0x8001
 8007316:	e7ed      	b.n	80072f4 <R3_2_GetPhaseCurrents+0xb8>
        Iab->a = -INT16_MAX;
 8007318:	461c      	mov	r4, r3
 800731a:	800b      	strh	r3, [r1, #0]
 800731c:	461d      	mov	r5, r3
 800731e:	f248 0301 	movw	r3, #32769	; 0x8001
 8007322:	e7cd      	b.n	80072c0 <R3_2_GetPhaseCurrents+0x84>
      else  if ( Aux > INT16_MAX )
 8007324:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007328:	db1c      	blt.n	8007364 <R3_2_GetPhaseCurrents+0x128>
        Iab->a = INT16_MAX;
 800732a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800732e:	e7a3      	b.n	8007278 <R3_2_GetPhaseCurrents+0x3c>
      else  if ( Aux > INT16_MAX )
 8007330:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007334:	db20      	blt.n	8007378 <R3_2_GetPhaseCurrents+0x13c>
        Iab->b = INT16_MAX;
 8007336:	f9b1 5000 	ldrsh.w	r5, [r1]
 800733a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800733e:	804b      	strh	r3, [r1, #2]
 8007340:	461a      	mov	r2, r3
 8007342:	461f      	mov	r7, r3
 8007344:	b2ab      	uxth	r3, r5
 8007346:	e7a3      	b.n	8007290 <R3_2_GetPhaseCurrents+0x54>
      else  if ( Aux < -INT16_MAX )
 8007348:	4d16      	ldr	r5, [pc, #88]	; (80073a4 <R3_2_GetPhaseCurrents+0x168>)
 800734a:	42ac      	cmp	r4, r5
 800734c:	da1f      	bge.n	800738e <R3_2_GetPhaseCurrents+0x152>
        Iab->a = -INT16_MAX;
 800734e:	800d      	strh	r5, [r1, #0]
 8007350:	f248 0301 	movw	r3, #32769	; 0x8001
 8007354:	e79c      	b.n	8007290 <R3_2_GetPhaseCurrents+0x54>
      else  if ( Aux < -INT16_MAX )
 8007356:	4f13      	ldr	r7, [pc, #76]	; (80073a4 <R3_2_GetPhaseCurrents+0x168>)
 8007358:	42ba      	cmp	r2, r7
 800735a:	da05      	bge.n	8007368 <R3_2_GetPhaseCurrents+0x12c>
        Iab->b = -INT16_MAX;
 800735c:	804f      	strh	r7, [r1, #2]
 800735e:	f248 0201 	movw	r2, #32769	; 0x8001
 8007362:	e795      	b.n	8007290 <R3_2_GetPhaseCurrents+0x54>
        Iab->a = ( int16_t )Aux;
 8007364:	800c      	strh	r4, [r1, #0]
 8007366:	e788      	b.n	800727a <R3_2_GetPhaseCurrents+0x3e>
        Iab->b = ( int16_t )Aux;
 8007368:	b217      	sxth	r7, r2
 800736a:	804f      	strh	r7, [r1, #2]
 800736c:	b292      	uxth	r2, r2
 800736e:	e78f      	b.n	8007290 <R3_2_GetPhaseCurrents+0x54>
        Iab->b = ( int16_t )Aux;
 8007370:	b227      	sxth	r7, r4
 8007372:	804f      	strh	r7, [r1, #2]
 8007374:	b2a2      	uxth	r2, r4
 8007376:	e7bd      	b.n	80072f4 <R3_2_GetPhaseCurrents+0xb8>
        Iab->b = ( int16_t )Aux;
 8007378:	f9b1 5000 	ldrsh.w	r5, [r1]
 800737c:	b217      	sxth	r7, r2
 800737e:	b2ab      	uxth	r3, r5
 8007380:	804f      	strh	r7, [r1, #2]
 8007382:	b292      	uxth	r2, r2
 8007384:	e784      	b.n	8007290 <R3_2_GetPhaseCurrents+0x54>
        Iab->a = ( int16_t )Aux;
 8007386:	b225      	sxth	r5, r4
 8007388:	800d      	strh	r5, [r1, #0]
 800738a:	b2a3      	uxth	r3, r4
 800738c:	e798      	b.n	80072c0 <R3_2_GetPhaseCurrents+0x84>
        Iab->a = ( int16_t )Aux;
 800738e:	b225      	sxth	r5, r4
 8007390:	800d      	strh	r5, [r1, #0]
 8007392:	b2a3      	uxth	r3, r4
 8007394:	e77c      	b.n	8007290 <R3_2_GetPhaseCurrents+0x54>
 8007396:	f9b1 5000 	ldrsh.w	r5, [r1]
 800739a:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 800739e:	880b      	ldrh	r3, [r1, #0]
 80073a0:	884a      	ldrh	r2, [r1, #2]
 80073a2:	e775      	b.n	8007290 <R3_2_GetPhaseCurrents+0x54>
 80073a4:	ffff8001 	.word	0xffff8001

080073a8 <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 80073a8:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80073aa:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 80073ac:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 80073b0:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 80073b4:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80073b8:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 80073ba:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 80073bc:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 80073be:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 80073c0:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 80073c2:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR2, CompareValue);
 80073c4:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 80073c6:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 80073c8:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80073ca:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 80073cc:	4904      	ldr	r1, [pc, #16]	; (80073e0 <R3_2_SetADCSampPointPolarization+0x38>)
 80073ce:	685b      	ldr	r3, [r3, #4]
}
 80073d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 80073d4:	420b      	tst	r3, r1
}
 80073d6:	bf14      	ite	ne
 80073d8:	2001      	movne	r0, #1
 80073da:	2000      	moveq	r0, #0
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	02000070 	.word	0x02000070

080073e4 <R3_2_SetADCSampPointSectX>:
{
 80073e4:	b470      	push	{r4, r5, r6}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 80073e6:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 80073ea:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 80073ec:	6f44      	ldr	r4, [r0, #116]	; 0x74
 80073ee:	1aca      	subs	r2, r1, r3
 80073f0:	f8b4 60b2 	ldrh.w	r6, [r4, #178]	; 0xb2
 80073f4:	b292      	uxth	r2, r2
 80073f6:	42b2      	cmp	r2, r6
 80073f8:	d914      	bls.n	8007424 <R3_2_SetADCSampPointSectX+0x40>
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 80073fa:	1e4b      	subs	r3, r1, #1
    pHandle->_Super.Sector = SECTOR_5;
 80073fc:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 80073fe:	b29b      	uxth	r3, r3
    pHandle->_Super.Sector = SECTOR_5;
 8007400:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007404:	68a2      	ldr	r2, [r4, #8]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8007406:	8e45      	ldrh	r5, [r0, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8007408:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 800740a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 800740c:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800740e:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007410:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007412:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007414:	6852      	ldr	r2, [r2, #4]
 8007416:	4b0f      	ldr	r3, [pc, #60]	; (8007454 <R3_2_SetADCSampPointSectX+0x70>)
 8007418:	421a      	tst	r2, r3
}
 800741a:	bf14      	ite	ne
 800741c:	2001      	movne	r0, #1
 800741e:	2000      	moveq	r0, #0
 8007420:	bc70      	pop	{r4, r5, r6}
 8007422:	4770      	bx	lr
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 8007424:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
 8007426:	1b5d      	subs	r5, r3, r5
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 8007428:	b2ad      	uxth	r5, r5
 800742a:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 800742e:	d904      	bls.n	800743a <R3_2_SetADCSampPointSectX+0x56>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8007430:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
 8007434:	1a9b      	subs	r3, r3, r2
 8007436:	b29b      	uxth	r3, r3
 8007438:	e7e4      	b.n	8007404 <R3_2_SetADCSampPointSectX+0x20>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 800743a:	4433      	add	r3, r6
 800743c:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 800743e:	4299      	cmp	r1, r3
 8007440:	d8e0      	bhi.n	8007404 <R3_2_SetADCSampPointSectX+0x20>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8007442:	43db      	mvns	r3, r3
 8007444:	eb03 0341 	add.w	r3, r3, r1, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8007448:	f44f 7280 	mov.w	r2, #256	; 0x100
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 800744c:	b29b      	uxth	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 800744e:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8007452:	e7d7      	b.n	8007404 <R3_2_SetADCSampPointSectX+0x20>
 8007454:	02000070 	.word	0x02000070

08007458 <R3_2_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHdl Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 8007458:	b470      	push	{r4, r5, r6}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800745a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800745c:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 8007460:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8007462:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007466:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8007468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 800746a:	6826      	ldr	r6, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800746c:	681d      	ldr	r5, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800746e:	6853      	ldr	r3, [r2, #4]
 8007470:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007478:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800747a:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 800747e:	2b0f      	cmp	r3, #15
 8007480:	d80b      	bhi.n	800749a <R3_2_HFCurrentsPolarizationAB+0x42>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
    pHandle-> PhaseBOffset += ADCDataReg2;
 8007482:	e9d0 4217 	ldrd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 8007486:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseAOffset += ADCDataReg1;
 800748a:	4434      	add	r4, r6
    pHandle-> PhaseBOffset += ADCDataReg2;
 800748c:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 800748e:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 8007490:	e9c0 4217 	strd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 8007494:	b2db      	uxtb	r3, r3
 8007496:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800749a:	2300      	movs	r3, #0
  Iab->b = 0;
}
 800749c:	bc70      	pop	{r4, r5, r6}
  Iab->a = 0;
 800749e:	600b      	str	r3, [r1, #0]
}
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop

080074a4 <R3_2_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80074a4:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 80074a6:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80074a8:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80074ac:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80074ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80074b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074b4:	681c      	ldr	r4, [r3, #0]
 80074b6:	6853      	ldr	r3, [r2, #4]
 80074b8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80074bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074c0:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80074c2:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 80074c6:	2b0f      	cmp	r3, #15
 80074c8:	d808      	bhi.n	80074dc <R3_2_HFCurrentsPolarizationC+0x38>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 80074ca:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 80074ce:	6e42      	ldr	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 80074d0:	3301      	adds	r3, #1
 80074d2:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 80074d4:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 80074d6:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 80074da:	6642      	str	r2, [r0, #100]	; 0x64
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 80074dc:	2300      	movs	r3, #0
  Iab->b = 0;
}
 80074de:	f85d 4b04 	ldr.w	r4, [sp], #4
  Iab->a = 0;
 80074e2:	600b      	str	r3, [r1, #0]
}
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop

080074e8 <R3_2_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80074e8:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->_Super.TurnOnLowSidesAction = true;
 80074ea:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80074ec:	688a      	ldr	r2, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 80074ee:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 80074f2:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80074f4:	f06f 0001 	mvn.w	r0, #1
 80074f8:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80074fa:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80074fc:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80074fe:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007500:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8007502:	07db      	lsls	r3, r3, #31
 8007504:	d5fc      	bpl.n	8007500 <R3_2_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007506:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8007508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800750c:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800750e:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 8007512:	2b02      	cmp	r3, #2
 8007514:	d000      	beq.n	8007518 <R3_2_TurnOnLowSides+0x30>
 8007516:	4770      	bx	lr
{
 8007518:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800751a:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800751e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007520:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007524:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007528:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800752c:	61ae      	str	r6, [r5, #24]
 800752e:	6184      	str	r4, [r0, #24]
  }
  return;
}
 8007530:	bc70      	pop	{r4, r5, r6}
 8007532:	619a      	str	r2, [r3, #24]
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop

08007538 <R3_2_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007538:	6f41      	ldr	r1, [r0, #116]	; 0x74
  pHandle->ADCRegularLocked=true; 

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800753a:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800753e:	688b      	ldr	r3, [r1, #8]
{
 8007540:	b430      	push	{r4, r5}
  pHandle->ADCRegularLocked=true; 
 8007542:	2401      	movs	r4, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007544:	2500      	movs	r5, #0
  pHandle->ADCRegularLocked=true; 
 8007546:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
  pHandle->_Super.TurnOnLowSidesAction = false;
 800754a:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800754e:	fa22 f404 	lsr.w	r4, r2, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007552:	f06f 0001 	mvn.w	r0, #1
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 8007556:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007558:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800755a:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800755c:	63dc      	str	r4, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800755e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007560:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007562:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8007564:	07d2      	lsls	r2, r2, #31
 8007566:	d5fc      	bpl.n	8007562 <R3_2_SwitchOnPWM+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007568:	f06f 0201 	mvn.w	r2, #1
 800756c:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800756e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007570:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007574:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007576:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007578:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800757c:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800757e:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 8007582:	2a02      	cmp	r2, #2
 8007584:	d008      	beq.n	8007598 <R3_2_SwitchOnPWM+0x60>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007586:	f06f 0201 	mvn.w	r2, #1
 800758a:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 8007592:	bc30      	pop	{r4, r5}
 8007594:	60da      	str	r2, [r3, #12]
 8007596:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8007598:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800759a:	6a0c      	ldr	r4, [r1, #32]
 800759c:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80075a0:	f240 5255 	movw	r2, #1365	; 0x555
 80075a4:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80075a6:	e9d1 0209 	ldrd	r0, r2, [r1, #36]	; 0x24
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80075aa:	d007      	beq.n	80075bc <R3_2_SwitchOnPWM+0x84>
 80075ac:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80075ae:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80075b2:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 80075b6:	6184      	str	r4, [r0, #24]
 80075b8:	6191      	str	r1, [r2, #24]
}
 80075ba:	e7e4      	b.n	8007586 <R3_2_SwitchOnPWM+0x4e>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80075bc:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80075be:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80075c2:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 80075c6:	6284      	str	r4, [r0, #40]	; 0x28
 80075c8:	6291      	str	r1, [r2, #40]	; 0x28
}
 80075ca:	e7dc      	b.n	8007586 <R3_2_SwitchOnPWM+0x4e>

080075cc <R3_2_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80075cc:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80075ce:	688a      	ldr	r2, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80075d0:	68d3      	ldr	r3, [r2, #12]
 80075d2:	f023 0301 	bic.w	r3, r3, #1
{
 80075d6:	b430      	push	{r4, r5}

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 80075d8:	f890 4070 	ldrb.w	r4, [r0, #112]	; 0x70
 80075dc:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80075de:	6c53      	ldr	r3, [r2, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 80075e0:	2500      	movs	r5, #0
 80075e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075e6:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 80075ea:	6453      	str	r3, [r2, #68]	; 0x44
  if ( pHandle->BrakeActionLock == true )
 80075ec:	b91c      	cbnz	r4, 80075f6 <R3_2_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80075ee:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d00d      	beq.n	8007612 <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80075f6:	f06f 0301 	mvn.w	r3, #1
 80075fa:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80075fc:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 80075fe:	07db      	lsls	r3, r3, #31
 8007600:	d5fc      	bpl.n	80075fc <R3_2_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007602:	f06f 0101 	mvn.w	r1, #1
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 8007606:	2300      	movs	r3, #0
 8007608:	6111      	str	r1, [r2, #16]
}
 800760a:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked=false; 
 800760c:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
}
 8007610:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007612:	e9d1 3408 	ldrd	r3, r4, [r1, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007616:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 800761a:	629d      	str	r5, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800761c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800761e:	f8b1 50ae 	ldrh.w	r5, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007622:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8007626:	62a5      	str	r5, [r4, #40]	; 0x28
 8007628:	6299      	str	r1, [r3, #40]	; 0x28
}
 800762a:	e7e4      	b.n	80075f6 <R3_2_SwitchOffPWM+0x2a>

0800762c <R3_2_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
static void R3_2_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 800762c:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800762e:	6f44      	ldr	r4, [r0, #116]	; 0x74
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 8007630:	6e03      	ldr	r3, [r0, #96]	; 0x60
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007632:	68a5      	ldr	r5, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007634:	686a      	ldr	r2, [r5, #4]
 8007636:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800763a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800763e:	606a      	str	r2, [r5, #4]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 8007640:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
  
  /* Check saturation */
  if ( wAux > -INT16_MAX )
 8007644:	4a0c      	ldr	r2, [pc, #48]	; (8007678 <R3_2_RLGetPhaseCurrents+0x4c>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 8007646:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800764a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800764c:	6800      	ldr	r0, [r0, #0]
 800764e:	1a1b      	subs	r3, r3, r0
  if ( wAux > -INT16_MAX )
 8007650:	4293      	cmp	r3, r2
 8007652:	db05      	blt.n	8007660 <R3_2_RLGetPhaseCurrents+0x34>
  {
    if ( wAux < INT16_MAX )
 8007654:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007658:	4293      	cmp	r3, r2
 800765a:	dc0a      	bgt.n	8007672 <R3_2_RLGetPhaseCurrents+0x46>
 800765c:	b21b      	sxth	r3, r3
 800765e:	e000      	b.n	8007662 <R3_2_RLGetPhaseCurrents+0x36>
 8007660:	4b06      	ldr	r3, [pc, #24]	; (800767c <R3_2_RLGetPhaseCurrents+0x50>)
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 8007662:	2200      	movs	r2, #0
 8007664:	f363 020f 	bfi	r2, r3, #0, #16
 8007668:	f363 421f 	bfi	r2, r3, #16, #16
  pStator_Currents->b = (int16_t)wAux;
}
 800766c:	bc30      	pop	{r4, r5}
  pStator_Currents->a = (int16_t)wAux;
 800766e:	600a      	str	r2, [r1, #0]
}
 8007670:	4770      	bx	lr
 8007672:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007676:	e7f4      	b.n	8007662 <R3_2_RLGetPhaseCurrents+0x36>
 8007678:	ffff8002 	.word	0xffff8002
 800767c:	ffff8001 	.word	0xffff8001

08007680 <R3_2_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007680:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->ADCRegularLocked=true;
 8007682:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007684:	688a      	ldr	r2, [r1, #8]
  pHandle->ADCRegularLocked=true;
 8007686:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
  WRITE_REG(TIMx->CCR1, CompareValue);
 800768a:	2000      	movs	r0, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800768c:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007690:	6350      	str	r0, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007692:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007694:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8007696:	07db      	lsls	r3, r3, #31
 8007698:	d5fc      	bpl.n	8007694 <R3_2_RLTurnOnLowSides+0x14>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800769a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800769c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076a0:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80076a2:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d000      	beq.n	80076ac <R3_2_RLTurnOnLowSides+0x2c>
 80076aa:	4770      	bx	lr
{
 80076ac:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80076ae:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80076b2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80076b4:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80076b8:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80076bc:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BSRR, PinMask);
 80076c0:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80076c2:	6284      	str	r4, [r0, #40]	; 0x28
  }
  return;
}
 80076c4:	bc70      	pop	{r4, r5, r6}
 80076c6:	629a      	str	r2, [r3, #40]	; 0x28
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop

080076cc <R3_2_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80076cc:	6f41      	ldr	r1, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;

  pHandle->ADCRegularLocked=true;
 80076ce:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80076d0:	688b      	ldr	r3, [r1, #8]
{
 80076d2:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 80076d4:	e9d1 5400 	ldrd	r5, r4, [r1]
  pHandle->ADCRegularLocked=true;
 80076d8:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80076dc:	f06f 0201 	mvn.w	r2, #1
 80076e0:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80076e2:	691a      	ldr	r2, [r3, #16]
  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80076e4:	07d6      	lsls	r6, r2, #31
 80076e6:	d5fc      	bpl.n	80076e2 <R3_2_RLSwitchOnPWM+0x16>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 80076e8:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80076ec:	f06f 0701 	mvn.w	r7, #1
 80076f0:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 80076f2:	2601      	movs	r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80076f4:	611f      	str	r7, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80076f6:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 80076f8:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80076fa:	691a      	ldr	r2, [r3, #16]

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80076fc:	07d2      	lsls	r2, r2, #31
 80076fe:	d5fc      	bpl.n	80076fa <R3_2_RLSwitchOnPWM+0x2e>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007700:	68da      	ldr	r2, [r3, #12]
 8007702:	f042 0201 	orr.w	r2, r2, #1
 8007706:	60da      	str	r2, [r3, #12]

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8007708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800770a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800770e:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007716:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007718:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 800771c:	2a02      	cmp	r2, #2
 800771e:	d00f      	beq.n	8007740 <R3_2_RLSwitchOnPWM+0x74>
    }
  }

  /* set the sector that correspond to Phase B and C sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 8007720:	2303      	movs	r3, #3
 8007722:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  MODIFY_REG(ADCx->CR,
 8007726:	68aa      	ldr	r2, [r5, #8]
 8007728:	4913      	ldr	r1, [pc, #76]	; (8007778 <R3_2_RLSwitchOnPWM+0xac>)
 800772a:	400a      	ands	r2, r1
 800772c:	f042 0208 	orr.w	r2, r2, #8
 8007730:	60aa      	str	r2, [r5, #8]
 8007732:	68a3      	ldr	r3, [r4, #8]
 8007734:	400b      	ands	r3, r1
 8007736:	f043 0308 	orr.w	r3, r3, #8
 800773a:	60a3      	str	r3, [r4, #8]

  LL_ADC_INJ_StartConversion( ADCx_1 );
  LL_ADC_INJ_StartConversion( ADCx_2 );

  return;
}
 800773c:	bcf0      	pop	{r4, r5, r6, r7}
 800773e:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8007740:	6a1a      	ldr	r2, [r3, #32]
 8007742:	f240 5355 	movw	r3, #1365	; 0x555
 8007746:	421a      	tst	r2, r3
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007748:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800774c:	f8b1 20ac 	ldrh.w	r2, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8007750:	d008      	beq.n	8007764 <R3_2_RLSwitchOnPWM+0x98>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007752:	619a      	str	r2, [r3, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007754:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007756:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800775a:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 800775e:	61b7      	str	r7, [r6, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007760:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007762:	e7dd      	b.n	8007720 <R3_2_RLSwitchOnPWM+0x54>
  WRITE_REG(GPIOx->BRR, PinMask);
 8007764:	629a      	str	r2, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007766:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007768:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800776c:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 8007770:	62b7      	str	r7, [r6, #40]	; 0x28
 8007772:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007774:	e7d4      	b.n	8007720 <R3_2_RLSwitchOnPWM+0x54>
 8007776:	bf00      	nop
 8007778:	7fffffc0 	.word	0x7fffffc0

0800777c <R3_2_SetAOReferenceVoltage>:
{
 800777c:	b430      	push	{r4, r5}
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 800777e:	0c84      	lsrs	r4, r0, #18
 8007780:	f004 043c 	and.w	r4, r4, #60	; 0x3c
 8007784:	f101 0508 	add.w	r5, r1, #8
 8007788:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 800778a:	5963      	ldr	r3, [r4, r5]
 800778c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007790:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007794:	431a      	orrs	r2, r3
 8007796:	5162      	str	r2, [r4, r5]
  SET_BIT(DACx->SWTRIGR,
 8007798:	684a      	ldr	r2, [r1, #4]
 800779a:	f000 0303 	and.w	r3, r0, #3
 800779e:	4313      	orrs	r3, r2
 80077a0:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 80077a2:	680a      	ldr	r2, [r1, #0]
 80077a4:	2301      	movs	r3, #1
 80077a6:	f000 0010 	and.w	r0, r0, #16
 80077aa:	fa03 f000 	lsl.w	r0, r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 80077ae:	ea30 0302 	bics.w	r3, r0, r2
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80077b2:	4b15      	ldr	r3, [pc, #84]	; (8007808 <R3_2_SetAOReferenceVoltage+0x8c>)
 80077b4:	d014      	beq.n	80077e0 <R3_2_SetAOReferenceVoltage+0x64>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4c14      	ldr	r4, [pc, #80]	; (800780c <R3_2_SetAOReferenceVoltage+0x90>)
  SET_BIT(DACx->CR,
 80077ba:	680a      	ldr	r2, [r1, #0]
 80077bc:	fba4 4303 	umull	r4, r3, r4, r3
 80077c0:	0cdb      	lsrs	r3, r3, #19
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	4310      	orrs	r0, r2
 80077c6:	6008      	str	r0, [r1, #0]
 80077c8:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 80077ca:	9b00      	ldr	r3, [sp, #0]
 80077cc:	b12b      	cbz	r3, 80077da <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 80077ce:	9b00      	ldr	r3, [sp, #0]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 80077d4:	9b00      	ldr	r3, [sp, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1f9      	bne.n	80077ce <R3_2_SetAOReferenceVoltage+0x52>
}
 80077da:	b002      	add	sp, #8
 80077dc:	bc30      	pop	{r4, r5}
 80077de:	4770      	bx	lr
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80077e0:	4a0a      	ldr	r2, [pc, #40]	; (800780c <R3_2_SetAOReferenceVoltage+0x90>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	fba2 2303 	umull	r2, r3, r2, r3
 80077e8:	0cdb      	lsrs	r3, r3, #19
 80077ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80077ee:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 80077f0:	9b01      	ldr	r3, [sp, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d0f1      	beq.n	80077da <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 80077f6:	9b01      	ldr	r3, [sp, #4]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 80077fc:	9b01      	ldr	r3, [sp, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1f9      	bne.n	80077f6 <R3_2_SetAOReferenceVoltage+0x7a>
}
 8007802:	b002      	add	sp, #8
 8007804:	bc30      	pop	{r4, r5}
 8007806:	4770      	bx	lr
 8007808:	20000614 	.word	0x20000614
 800780c:	431bde83 	.word	0x431bde83

08007810 <R3_2_Init>:
{
 8007810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007814:	4607      	mov	r7, r0
 8007816:	b087      	sub	sp, #28
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8007818:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    if ( TIMx == TIM1 )
 800781a:	f8df e284 	ldr.w	lr, [pc, #644]	; 8007aa0 <R3_2_Init+0x290>
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 800781e:	681d      	ldr	r5, [r3, #0]
  DAC_TypeDef * DAC_OCPAx = pHandle->pParams_str->DAC_OCP_ASelection;
 8007820:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8007822:	686a      	ldr	r2, [r5, #4]
 8007824:	9100      	str	r1, [sp, #0]
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8007826:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007828:	9101      	str	r1, [sp, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800782a:	2004      	movs	r0, #4
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 800782c:	6b59      	ldr	r1, [r3, #52]	; 0x34
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800782e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8007832:	9102      	str	r1, [sp, #8]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8007834:	f022 0204 	bic.w	r2, r2, #4
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007838:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
  DAC_TypeDef * DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 800783c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800783e:	9103      	str	r1, [sp, #12]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 8007840:	e9d3 ba04 	ldrd	fp, sl, [r3, #16]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8007844:	e9d3 9806 	ldrd	r9, r8, [r3, #24]
 8007848:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800784a:	6028      	str	r0, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800784c:	686a      	ldr	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800784e:	2120      	movs	r1, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8007850:	f022 0220 	bic.w	r2, r2, #32
 8007854:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8007856:	6029      	str	r1, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8007858:	6872      	ldr	r2, [r6, #4]
 800785a:	f022 0204 	bic.w	r2, r2, #4
 800785e:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8007860:	6030      	str	r0, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8007862:	6872      	ldr	r2, [r6, #4]
 8007864:	f022 0220 	bic.w	r2, r2, #32
 8007868:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800786a:	6031      	str	r1, [r6, #0]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800786c:	498b      	ldr	r1, [pc, #556]	; (8007a9c <R3_2_Init+0x28c>)
 800786e:	690a      	ldr	r2, [r1, #16]
    if ( TIMx == TIM1 )
 8007870:	4574      	cmp	r4, lr
 8007872:	bf0c      	ite	eq
 8007874:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 8007878:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 800787c:	610a      	str	r2, [r1, #16]
    if ( OPAMPParams != NULL )
 800787e:	f1bc 0f00 	cmp.w	ip, #0
 8007882:	d014      	beq.n	80078ae <R3_2_Init+0x9e>
     if (OPAMPParams -> OPAMPx_1 != NULL ) 
 8007884:	f8dc 2000 	ldr.w	r2, [ip]
 8007888:	b11a      	cbz	r2, 8007892 <R3_2_Init+0x82>
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 800788a:	6811      	ldr	r1, [r2, #0]
 800788c:	f041 0101 	orr.w	r1, r1, #1
 8007890:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_2 != NULL ) 
 8007892:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8007896:	b11a      	cbz	r2, 80078a0 <R3_2_Init+0x90>
 8007898:	6811      	ldr	r1, [r2, #0]
 800789a:	f041 0101 	orr.w	r1, r1, #1
 800789e:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_3 != NULL ) 
 80078a0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80078a4:	b11a      	cbz	r2, 80078ae <R3_2_Init+0x9e>
 80078a6:	6811      	ldr	r1, [r2, #0]
 80078a8:	f041 0101 	orr.w	r1, r1, #1
 80078ac:	6011      	str	r1, [r2, #0]
    if ( COMP_OCPAx != NULL )
 80078ae:	f1bb 0f00 	cmp.w	fp, #0
 80078b2:	d017      	beq.n	80078e4 <R3_2_Init+0xd4>
      if (( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE ) && (DAC_OCPAx != MC_NULL))
 80078b4:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
 80078b8:	2a01      	cmp	r2, #1
 80078ba:	d007      	beq.n	80078cc <R3_2_Init+0xbc>
 80078bc:	9a00      	ldr	r2, [sp, #0]
 80078be:	b12a      	cbz	r2, 80078cc <R3_2_Init+0xbc>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 80078c0:	4611      	mov	r1, r2
 80078c2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80078c4:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 80078c8:	f7ff ff58 	bl	800777c <R3_2_SetAOReferenceVoltage>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80078cc:	f8db 3000 	ldr.w	r3, [fp]
 80078d0:	f043 0301 	orr.w	r3, r3, #1
 80078d4:	f8cb 3000 	str.w	r3, [fp]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80078d8:	f8db 3000 	ldr.w	r3, [fp]
 80078dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078e0:	f8cb 3000 	str.w	r3, [fp]
    if ( COMP_OCPBx != NULL )
 80078e4:	f1ba 0f00 	cmp.w	sl, #0
 80078e8:	d018      	beq.n	800791c <R3_2_Init+0x10c>
      if (( pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE ) && (DAC_OCPBx != MC_NULL))
 80078ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078ec:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 80078f0:	2a01      	cmp	r2, #1
 80078f2:	d007      	beq.n	8007904 <R3_2_Init+0xf4>
 80078f4:	9a01      	ldr	r2, [sp, #4]
 80078f6:	b12a      	cbz	r2, 8007904 <R3_2_Init+0xf4>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 80078f8:	4611      	mov	r1, r2
 80078fa:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80078fc:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 8007900:	f7ff ff3c 	bl	800777c <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8007904:	f8da 3000 	ldr.w	r3, [sl]
 8007908:	f043 0301 	orr.w	r3, r3, #1
 800790c:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8007910:	f8da 3000 	ldr.w	r3, [sl]
 8007914:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007918:	f8ca 3000 	str.w	r3, [sl]
    if ( COMP_OCPCx != NULL )
 800791c:	f1b9 0f00 	cmp.w	r9, #0
 8007920:	d018      	beq.n	8007954 <R3_2_Init+0x144>
      if (( pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE )  && (DAC_OCPCx != MC_NULL))
 8007922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007924:	f893 20bf 	ldrb.w	r2, [r3, #191]	; 0xbf
 8007928:	2a01      	cmp	r2, #1
 800792a:	d007      	beq.n	800793c <R3_2_Init+0x12c>
 800792c:	9a02      	ldr	r2, [sp, #8]
 800792e:	b12a      	cbz	r2, 800793c <R3_2_Init+0x12c>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8007930:	4611      	mov	r1, r2
 8007932:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8007934:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 8007938:	f7ff ff20 	bl	800777c <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800793c:	f8d9 3000 	ldr.w	r3, [r9]
 8007940:	f043 0301 	orr.w	r3, r3, #1
 8007944:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8007948:	f8d9 3000 	ldr.w	r3, [r9]
 800794c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007950:	f8c9 3000 	str.w	r3, [r9]
    if ( COMP_OVPx != NULL )
 8007954:	f1b8 0f00 	cmp.w	r8, #0
 8007958:	d018      	beq.n	800798c <R3_2_Init+0x17c>
      if (( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE ) && (DAC_OVPx != MC_NULL))
 800795a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800795c:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 8007960:	2a01      	cmp	r2, #1
 8007962:	d007      	beq.n	8007974 <R3_2_Init+0x164>
 8007964:	9a03      	ldr	r2, [sp, #12]
 8007966:	b12a      	cbz	r2, 8007974 <R3_2_Init+0x164>
          R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 8007968:	4611      	mov	r1, r2
 800796a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800796c:	f8b3 20b8 	ldrh.w	r2, [r3, #184]	; 0xb8
 8007970:	f7ff ff04 	bl	800777c <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8007974:	f8d8 3000 	ldr.w	r3, [r8]
 8007978:	f043 0301 	orr.w	r3, r3, #1
 800797c:	f8c8 3000 	str.w	r3, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8007980:	f8d8 3000 	ldr.w	r3, [r8]
 8007984:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007988:	f8c8 3000 	str.w	r3, [r8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800798c:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled (ADCx_1) == 0)
 800798e:	07d8      	lsls	r0, r3, #31
 8007990:	d56c      	bpl.n	8007a6c <R3_2_Init+0x25c>
 8007992:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 8007994:	07d9      	lsls	r1, r3, #31
 8007996:	d575      	bpl.n	8007a84 <R3_2_Init+0x274>
  volatile uint32_t Brk2Timeout = 1000;
 8007998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800799c:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800799e:	6823      	ldr	r3, [r4, #0]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 80079a0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80079a2:	f023 0301 	bic.w	r3, r3, #1
 80079a6:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80079a8:	6863      	ldr	r3, [r4, #4]
 80079aa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80079ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079b2:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80079b4:	69a3      	ldr	r3, [r4, #24]
 80079b6:	f043 0308 	orr.w	r3, r3, #8
 80079ba:	61a3      	str	r3, [r4, #24]
 80079bc:	69a3      	ldr	r3, [r4, #24]
 80079be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80079c2:	61a3      	str	r3, [r4, #24]
 80079c4:	69e3      	ldr	r3, [r4, #28]
 80079c6:	f043 0308 	orr.w	r3, r3, #8
 80079ca:	61e3      	str	r3, [r4, #28]
 80079cc:	69e3      	ldr	r3, [r4, #28]
 80079ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80079d2:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80079d4:	6963      	ldr	r3, [r4, #20]
 80079d6:	f043 0301 	orr.w	r3, r3, #1
 80079da:	6163      	str	r3, [r4, #20]
 80079dc:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d029      	beq.n	8007a38 <R3_2_Init+0x228>
    if ( pHandle->_Super.Motor == M1 )
 80079e4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80079e8:	b92b      	cbnz	r3, 80079f6 <R3_2_Init+0x1e6>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 80079ea:	f892 30bb 	ldrb.w	r3, [r2, #187]	; 0xbb
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d030      	beq.n	8007a54 <R3_2_Init+0x244>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d04a      	beq.n	8007a8c <R3_2_Init+0x27c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80079f6:	f06f 0380 	mvn.w	r3, #128	; 0x80
 80079fa:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 80079fc:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 8007a00:	b16b      	cbz	r3, 8007a1e <R3_2_Init+0x20e>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8007a02:	6923      	ldr	r3, [r4, #16]
 8007a04:	05da      	lsls	r2, r3, #23
 8007a06:	d50a      	bpl.n	8007a1e <R3_2_Init+0x20e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8007a08:	f46f 7280 	mvn.w	r2, #256	; 0x100
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 8007a0c:	9b05      	ldr	r3, [sp, #20]
 8007a0e:	b133      	cbz	r3, 8007a1e <R3_2_Init+0x20e>
 8007a10:	6122      	str	r2, [r4, #16]
      Brk2Timeout--;
 8007a12:	9b05      	ldr	r3, [sp, #20]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8007a18:	6923      	ldr	r3, [r4, #16]
 8007a1a:	05db      	lsls	r3, r3, #23
 8007a1c:	d4f6      	bmi.n	8007a0c <R3_2_Init+0x1fc>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8007a1e:	68e3      	ldr	r3, [r4, #12]
 8007a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a24:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 8007a26:	6a23      	ldr	r3, [r4, #32]
 8007a28:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8007a2c:	f043 0305 	orr.w	r3, r3, #5
 8007a30:	6223      	str	r3, [r4, #32]
}
 8007a32:	b007      	add	sp, #28
 8007a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 8007a38:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d109      	bne.n	8007a54 <R3_2_Init+0x244>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8007a40:	f892 10bb 	ldrb.w	r1, [r2, #187]	; 0xbb
 8007a44:	2903      	cmp	r1, #3
 8007a46:	d105      	bne.n	8007a54 <R3_2_Init+0x244>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007a48:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007a4a:	6963      	ldr	r3, [r4, #20]
 8007a4c:	f043 0301 	orr.w	r3, r3, #1
 8007a50:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007a52:	6321      	str	r1, [r4, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8007a54:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007a58:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8007a5a:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8007a5c:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8007a60:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8007a62:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1cb      	bne.n	8007a02 <R3_2_Init+0x1f2>
 8007a6a:	e7d8      	b.n	8007a1e <R3_2_Init+0x20e>
      R3_2_ADCxInit (ADCx_1);
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f7ff fb8b 	bl	8007188 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8007a72:	2340      	movs	r3, #64	; 0x40
 8007a74:	602b      	str	r3, [r5, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8007a76:	686b      	ldr	r3, [r5, #4]
 8007a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a7c:	606b      	str	r3, [r5, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007a7e:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 8007a80:	07d9      	lsls	r1, r3, #31
 8007a82:	d489      	bmi.n	8007998 <R3_2_Init+0x188>
      R3_2_ADCxInit (ADCx_2);
 8007a84:	4630      	mov	r0, r6
 8007a86:	f7ff fb7f 	bl	8007188 <R3_2_ADCxInit>
 8007a8a:	e785      	b.n	8007998 <R3_2_Init+0x188>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007a8c:	2101      	movs	r1, #1
 8007a8e:	6321      	str	r1, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007a90:	6961      	ldr	r1, [r4, #20]
 8007a92:	f041 0101 	orr.w	r1, r1, #1
 8007a96:	6161      	str	r1, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007a98:	6323      	str	r3, [r4, #48]	; 0x30
}
 8007a9a:	e7ac      	b.n	80079f6 <R3_2_Init+0x1e6>
 8007a9c:	e0042000 	.word	0xe0042000
 8007aa0:	40012c00 	.word	0x40012c00

08007aa4 <R3_2_CurrentReadingPolarization>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007aa4:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8007aa6:	4946      	ldr	r1, [pc, #280]	; (8007bc0 <R3_2_CurrentReadingPolarization+0x11c>)
{
 8007aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
  pHandle->PhaseAOffset = 0u;
 8007aaa:	2200      	movs	r2, #0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007aac:	689d      	ldr	r5, [r3, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007aae:	e9d3 7600 	ldrd	r7, r6, [r3]
  pHandle->PolarizationCounter = 0u;
 8007ab2:	f880 206c 	strb.w	r2, [r0, #108]	; 0x6c
  CLEAR_BIT(TIMx->CCER, Channels);
 8007ab6:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 8007ab8:	65c2      	str	r2, [r0, #92]	; 0x5c
 8007aba:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 8007abe:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 8007ac2:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8007ac6:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8007ac8:	4b3e      	ldr	r3, [pc, #248]	; (8007bc4 <R3_2_CurrentReadingPolarization+0x120>)
 8007aca:	6183      	str	r3, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8007acc:	2280      	movs	r2, #128	; 0x80
  pHandle->PolarizationSector=SECTOR_5;
 8007ace:	2304      	movs	r3, #4
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8007ad0:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
{
 8007ad4:	b083      	sub	sp, #12
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8007ad6:	6041      	str	r1, [r0, #4]
  pHandle->PolarizationSector=SECTOR_5;
 8007ad8:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_5;   
 8007adc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
{
 8007ae0:	4604      	mov	r4, r0
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8007ae2:	f7ff fd29 	bl	8007538 <R3_2_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 8007ae6:	4a38      	ldr	r2, [pc, #224]	; (8007bc8 <R3_2_CurrentReadingPolarization+0x124>)
 8007ae8:	686b      	ldr	r3, [r5, #4]
 8007aea:	4013      	ands	r3, r2
 8007aec:	2b70      	cmp	r3, #112	; 0x70
 8007aee:	d1fb      	bne.n	8007ae8 <R3_2_CurrentReadingPolarization+0x44>
  MODIFY_REG(ADCx->CR,
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	4936      	ldr	r1, [pc, #216]	; (8007bcc <R3_2_CurrentReadingPolarization+0x128>)
  waitForPolarizationEnd( TIMx,
 8007af4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8007af6:	400a      	ands	r2, r1
 8007af8:	f042 0208 	orr.w	r2, r2, #8
 8007afc:	60ba      	str	r2, [r7, #8]
 8007afe:	68b3      	ldr	r3, [r6, #8]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8007b00:	4f33      	ldr	r7, [pc, #204]	; (8007bd0 <R3_2_CurrentReadingPolarization+0x12c>)
 8007b02:	400b      	ands	r3, r1
 8007b04:	f043 0308 	orr.w	r3, r3, #8
 8007b08:	60b3      	str	r3, [r6, #8]
  waitForPolarizationEnd( TIMx,
 8007b0a:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8007b0e:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8007b12:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
 8007b16:	4628      	mov	r0, r5
 8007b18:	e9cd 3100 	strd	r3, r1, [sp]
 8007b1c:	f7ff f9b6 	bl	8006e8c <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 8007b20:	4620      	mov	r0, r4
 8007b22:	f7ff fd53 	bl	80075cc <R3_2_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 8007b26:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 8007b28:	4a2a      	ldr	r2, [pc, #168]	; (8007bd4 <R3_2_CurrentReadingPolarization+0x130>)
 8007b2a:	6062      	str	r2, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8007b2c:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 8007b2e:	f884 606c 	strb.w	r6, [r4, #108]	; 0x6c
  pHandle->PolarizationSector=SECTOR_1;
 8007b32:	f884 606d 	strb.w	r6, [r4, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_1;   
 8007b36:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8007b3a:	f7ff fcfd 	bl	8007538 <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8007b3e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007b40:	e9dd 3100 	ldrd	r3, r1, [sp]
 8007b44:	f892 20bb 	ldrb.w	r2, [r2, #187]	; 0xbb
 8007b48:	4628      	mov	r0, r5
 8007b4a:	f7ff f99f 	bl	8006e8c <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 8007b4e:	4620      	mov	r0, r4
 8007b50:	f7ff fd3c 	bl	80075cc <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8007b54:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8007b58:	6e63      	ldr	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 8007b5a:	481f      	ldr	r0, [pc, #124]	; (8007bd8 <R3_2_CurrentReadingPolarization+0x134>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8007b5c:	6067      	str	r7, [r4, #4]
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8007b5e:	0909      	lsrs	r1, r1, #4
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8007b60:	0912      	lsrs	r2, r2, #4
 8007b62:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8007b66:	091b      	lsrs	r3, r3, #4
 8007b68:	6663      	str	r3, [r4, #100]	; 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007b6a:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 8007b6c:	61a0      	str	r0, [r4, #24]
 8007b6e:	f023 0308 	bic.w	r3, r3, #8
 8007b72:	61ab      	str	r3, [r5, #24]
 8007b74:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 8007b76:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8007b7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b7e:	61aa      	str	r2, [r5, #24]
 8007b80:	69ea      	ldr	r2, [r5, #28]
 8007b82:	f022 0208 	bic.w	r2, r2, #8
 8007b86:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007b88:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007b8a:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007b8c:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007b8e:	69ab      	ldr	r3, [r5, #24]
 8007b90:	f043 0308 	orr.w	r3, r3, #8
 8007b94:	61ab      	str	r3, [r5, #24]
 8007b96:	69ab      	ldr	r3, [r5, #24]
 8007b98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007b9c:	61ab      	str	r3, [r5, #24]
 8007b9e:	69eb      	ldr	r3, [r5, #28]
 8007ba0:	f043 0308 	orr.w	r3, r3, #8
 8007ba4:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007ba6:	6a2b      	ldr	r3, [r5, #32]
 8007ba8:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8007bac:	f043 0305 	orr.w	r3, r3, #5
  pHandle->_Super.Sector=SECTOR_5;
 8007bb0:	2204      	movs	r2, #4
 8007bb2:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 8007bb4:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
  pHandle->_Super.Sector=SECTOR_5;
 8007bb8:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
}
 8007bbc:	b003      	add	sp, #12
 8007bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bc0:	08007459 	.word	0x08007459
 8007bc4:	080073a9 	.word	0x080073a9
 8007bc8:	02000070 	.word	0x02000070
 8007bcc:	7fffffc0 	.word	0x7fffffc0
 8007bd0:	0800723d 	.word	0x0800723d
 8007bd4:	080074a5 	.word	0x080074a5
 8007bd8:	080073e5 	.word	0x080073e5

08007bdc <R3_2_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007bdc:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 8007bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be2:	4604      	mov	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007be4:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007be8:	e9d2 1800 	ldrd	r1, r8, [r2]
  if ( OPAMPParams != NULL )
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d033      	beq.n	8007c58 <R3_2_TIMx_UP_IRQHandler+0x7c>
    while (ADCx_1->JSQR != 0x0u)
 8007bf0:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1fc      	bne.n	8007bf0 <R3_2_TIMx_UP_IRQHandler+0x14>
    Opamp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8007bf6:	f894 c03a 	ldrb.w	ip, [r4, #58]	; 0x3a
 8007bfa:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 8007bfe:	68df      	ldr	r7, [r3, #12]
    if (Opamp != NULL )
 8007c00:	b12f      	cbz	r7, 8007c0e <R3_2_TIMx_UP_IRQHandler+0x32>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 8007c02:	6838      	ldr	r0, [r7, #0]
 8007c04:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8007c06:	f420 7086 	bic.w	r0, r0, #268	; 0x10c
 8007c0a:	4330      	orrs	r0, r6
 8007c0c:	6038      	str	r0, [r7, #0]
     Opamp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8007c0e:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    if (Opamp != NULL )
 8007c10:	b13f      	cbz	r7, 8007c22 <R3_2_TIMx_UP_IRQHandler+0x46>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 8007c12:	6838      	ldr	r0, [r7, #0]
 8007c14:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
 8007c18:	f420 7386 	bic.w	r3, r0, #268	; 0x10c
 8007c1c:	ea43 030e 	orr.w	r3, r3, lr
 8007c20:	603b      	str	r3, [r7, #0]
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007c22:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8007c26:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8007c2a:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007c2c:	f8d2 7094 	ldr.w	r7, [r2, #148]	; 0x94
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007c30:	4318      	orrs	r0, r3
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007c32:	433b      	orrs	r3, r7
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007c34:	64c8      	str	r0, [r1, #76]	; 0x4c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007c36:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007c3a:	686b      	ldr	r3, [r5, #4]
 8007c3c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c44:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8007c48:	2280      	movs	r2, #128	; 0x80
 8007c4a:	606b      	str	r3, [r5, #4]
}
 8007c4c:	f104 0046 	add.w	r0, r4, #70	; 0x46
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8007c50:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
}
 8007c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c58:	f894 c03a 	ldrb.w	ip, [r4, #58]	; 0x3a
 8007c5c:	e7e1      	b.n	8007c22 <R3_2_TIMx_UP_IRQHandler+0x46>
 8007c5e:	bf00      	nop

08007c60 <R3_2_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8007c60:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8007c64:	b923      	cbnz	r3, 8007c70 <R3_2_BRK2_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007c66:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007c68:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
 8007c6c:	2a02      	cmp	r2, #2
 8007c6e:	d004      	beq.n	8007c7a <R3_2_BRK2_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 8007c70:	2301      	movs	r3, #1
 8007c72:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 8007c76:	3046      	adds	r0, #70	; 0x46
 8007c78:	4770      	bx	lr
{
 8007c7a:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007c7c:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007c80:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 8007c86:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007c88:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007c8c:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8007c90:	628c      	str	r4, [r1, #40]	; 0x28
 8007c92:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 8007c94:	2301      	movs	r3, #1
 8007c96:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 8007c9a:	bc30      	pop	{r4, r5}
 8007c9c:	3046      	adds	r0, #70	; 0x46
 8007c9e:	4770      	bx	lr

08007ca0 <R3_2_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007ca0:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 8007ca2:	4603      	mov	r3, r0
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007ca4:	6890      	ldr	r0, [r2, #8]
 8007ca6:	6c42      	ldr	r2, [r0, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 8007ca8:	2101      	movs	r1, #1
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007caa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007cae:	6442      	str	r2, [r0, #68]	; 0x44
}
 8007cb0:	f103 0046 	add.w	r0, r3, #70	; 0x46
  pHandle->OverVoltageFlag = true;
 8007cb4:	f883 106f 	strb.w	r1, [r3, #111]	; 0x6f
  pHandle->BrakeActionLock = true;
 8007cb8:	f883 1070 	strb.w	r1, [r3, #112]	; 0x70
}
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop

08007cc0 <R3_2_IsOverCurrentOccurred>:
{
 8007cc0:	4603      	mov	r3, r0
  if ( pHandle->OverVoltageFlag == true )
 8007cc2:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
 8007cc6:	b160      	cbz	r0, 8007ce2 <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 8007cce:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8007cd0:	2002      	movs	r0, #2
  if ( pHandle->OverCurrentFlag == true )
 8007cd2:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 8007cd6:	b11a      	cbz	r2, 8007ce0 <R3_2_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 8007cd8:	2200      	movs	r2, #0
    retVal |= MC_BREAK_IN;
 8007cda:	4608      	mov	r0, r1
    pHandle->OverCurrentFlag = false;
 8007cdc:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
}
 8007ce0:	4770      	bx	lr
 8007ce2:	2140      	movs	r1, #64	; 0x40
 8007ce4:	e7f5      	b.n	8007cd2 <R3_2_IsOverCurrentOccurred+0x12>
 8007ce6:	bf00      	nop

08007ce8 <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8007ce8:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 8007cec:	b410      	push	{r4}
  if ( pHandle->_Super.RLDetectionMode == false )
 8007cee:	2900      	cmp	r1, #0
 8007cf0:	d13c      	bne.n	8007d6c <R3_2_RLDetectionModeEnable+0x84>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007cf2:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8007cf4:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007cf6:	699a      	ldr	r2, [r3, #24]
 8007cf8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007cfc:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007d00:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007d04:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007d06:	6a1a      	ldr	r2, [r3, #32]
 8007d08:	f042 0201 	orr.w	r2, r2, #1
 8007d0c:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007d0e:	6a1a      	ldr	r2, [r3, #32]
 8007d10:	f022 0204 	bic.w	r2, r2, #4
 8007d14:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d16:	6359      	str	r1, [r3, #52]	; 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8007d18:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 8007d1c:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007d1e:	f103 0118 	add.w	r1, r3, #24
 8007d22:	d031      	beq.n	8007d88 <R3_2_RLDetectionModeEnable+0xa0>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007d24:	2a02      	cmp	r2, #2
 8007d26:	d10f      	bne.n	8007d48 <R3_2_RLDetectionModeEnable+0x60>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007d28:	699a      	ldr	r2, [r3, #24]
 8007d2a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007d2e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007d32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d36:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007d38:	6a1a      	ldr	r2, [r3, #32]
 8007d3a:	f042 0210 	orr.w	r2, r2, #16
 8007d3e:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007d40:	6a1a      	ldr	r2, [r3, #32]
 8007d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d46:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007d48:	684a      	ldr	r2, [r1, #4]
 8007d4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007d4e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007d52:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8007d56:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007d58:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8007d5a:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8007d5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d60:	621a      	str	r2, [r3, #32]
 8007d62:	6a1a      	ldr	r2, [r3, #32]
 8007d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d68:	621a      	str	r2, [r3, #32]
 8007d6a:	65c1      	str	r1, [r0, #92]	; 0x5c
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8007d6c:	4b0f      	ldr	r3, [pc, #60]	; (8007dac <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8007d6e:	4910      	ldr	r1, [pc, #64]	; (8007db0 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007d70:	4a10      	ldr	r2, [pc, #64]	; (8007db4 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8007d72:	4c11      	ldr	r4, [pc, #68]	; (8007db8 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8007d74:	6043      	str	r3, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 8007d76:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8007d78:	6144      	str	r4, [r0, #20]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007d7a:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8007d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 8007d82:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8007d86:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007d88:	699a      	ldr	r2, [r3, #24]
 8007d8a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007d8e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007d92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d96:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007d98:	6a1a      	ldr	r2, [r3, #32]
 8007d9a:	f022 0210 	bic.w	r2, r2, #16
 8007d9e:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007da0:	6a1a      	ldr	r2, [r3, #32]
 8007da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007da6:	621a      	str	r2, [r3, #32]
}
 8007da8:	e7ce      	b.n	8007d48 <R3_2_RLDetectionModeEnable+0x60>
 8007daa:	bf00      	nop
 8007dac:	0800762d 	.word	0x0800762d
 8007db0:	080076cd 	.word	0x080076cd
 8007db4:	080075cd 	.word	0x080075cd
 8007db8:	08007681 	.word	0x08007681

08007dbc <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8007dbc:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d059      	beq.n	8007e78 <R3_2_RLDetectionModeDisable+0xbc>
{
 8007dc4:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007dc6:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8007dc8:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007dca:	699a      	ldr	r2, [r3, #24]
 8007dcc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007dd0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007dd4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007dd8:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007dda:	6a1a      	ldr	r2, [r3, #32]
 8007ddc:	f042 0201 	orr.w	r2, r2, #1
 8007de0:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8007de2:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 8007de6:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007de8:	f103 0518 	add.w	r5, r3, #24
 8007dec:	d045      	beq.n	8007e7a <R3_2_RLDetectionModeDisable+0xbe>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007dee:	2a02      	cmp	r2, #2
 8007df0:	d103      	bne.n	8007dfa <R3_2_RLDetectionModeDisable+0x3e>
  CLEAR_BIT(TIMx->CCER, Channels);
 8007df2:	6a1a      	ldr	r2, [r3, #32]
 8007df4:	f022 0204 	bic.w	r2, r2, #4
 8007df8:	621a      	str	r2, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8007dfa:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 8007dfe:	0849      	lsrs	r1, r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007e00:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007e02:	699a      	ldr	r2, [r3, #24]
 8007e04:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007e08:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007e0c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8007e10:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007e12:	6a1a      	ldr	r2, [r3, #32]
 8007e14:	f042 0210 	orr.w	r2, r2, #16
 8007e18:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8007e1a:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 8007e1e:	2a01      	cmp	r2, #1
 8007e20:	d035      	beq.n	8007e8e <R3_2_RLDetectionModeDisable+0xd2>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007e22:	2a02      	cmp	r2, #2
 8007e24:	d103      	bne.n	8007e2e <R3_2_RLDetectionModeDisable+0x72>
  CLEAR_BIT(TIMx->CCER, Channels);
 8007e26:	6a1a      	ldr	r2, [r3, #32]
 8007e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e2c:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007e2e:	6399      	str	r1, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007e30:	686a      	ldr	r2, [r5, #4]
 8007e32:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007e36:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007e3a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007e3e:	606a      	str	r2, [r5, #4]
  SET_BIT(TIMx->CCER, Channels);
 8007e40:	6a1a      	ldr	r2, [r3, #32]
 8007e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e46:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8007e48:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 8007e4c:	2a01      	cmp	r2, #1
 8007e4e:	d019      	beq.n	8007e84 <R3_2_RLDetectionModeDisable+0xc8>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007e50:	2a02      	cmp	r2, #2
 8007e52:	d103      	bne.n	8007e5c <R3_2_RLDetectionModeDisable+0xa0>
  CLEAR_BIT(TIMx->CCER, Channels);
 8007e54:	6a1a      	ldr	r2, [r3, #32]
 8007e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e5a:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8007e5c:	4c0e      	ldr	r4, [pc, #56]	; (8007e98 <R3_2_RLDetectionModeDisable+0xdc>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007e5e:	4a0f      	ldr	r2, [pc, #60]	; (8007e9c <R3_2_RLDetectionModeDisable+0xe0>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007e60:	63d9      	str	r1, [r3, #60]	; 0x3c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8007e62:	4e0f      	ldr	r6, [pc, #60]	; (8007ea0 <R3_2_RLDetectionModeDisable+0xe4>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8007e64:	4d0f      	ldr	r5, [pc, #60]	; (8007ea4 <R3_2_RLDetectionModeDisable+0xe8>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8007e66:	6046      	str	r6, [r0, #4]
    pHandle->_Super.RLDetectionMode = false;
 8007e68:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007e6a:	e9c0 2402 	strd	r2, r4, [r0, #8]
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8007e6e:	6145      	str	r5, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 8007e70:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8007e74:	bc70      	pop	{r4, r5, r6}
 8007e76:	4770      	bx	lr
 8007e78:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8007e7a:	6a1a      	ldr	r2, [r3, #32]
 8007e7c:	f042 0204 	orr.w	r2, r2, #4
 8007e80:	621a      	str	r2, [r3, #32]
}
 8007e82:	e7ba      	b.n	8007dfa <R3_2_RLDetectionModeDisable+0x3e>
  SET_BIT(TIMx->CCER, Channels);
 8007e84:	6a1a      	ldr	r2, [r3, #32]
 8007e86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e8a:	621a      	str	r2, [r3, #32]
}
 8007e8c:	e7e6      	b.n	8007e5c <R3_2_RLDetectionModeDisable+0xa0>
  SET_BIT(TIMx->CCER, Channels);
 8007e8e:	6a1a      	ldr	r2, [r3, #32]
 8007e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e94:	621a      	str	r2, [r3, #32]
}
 8007e96:	e7ca      	b.n	8007e2e <R3_2_RLDetectionModeDisable+0x72>
 8007e98:	08007539 	.word	0x08007539
 8007e9c:	080075cd 	.word	0x080075cd
 8007ea0:	0800723d 	.word	0x0800723d
 8007ea4:	080074e9 	.word	0x080074e9

08007ea8 <R3_2_RLDetectionModeSetDuty>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007ea8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007eaa:	689b      	ldr	r3, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007eac:	69da      	ldr	r2, [r3, #28]
{
 8007eae:	b470      	push	{r4, r5, r6}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007eb0:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8007eb4:	f8b0 6056 	ldrh.w	r6, [r0, #86]	; 0x56
 8007eb8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007ebc:	fb01 f104 	mul.w	r1, r1, r4
  pHandle->ADCRegularLocked=true;
 8007ec0:	2501      	movs	r5, #1
 8007ec2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007ec6:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007eca:	0c09      	lsrs	r1, r1, #16
  LL_TIM_OC_SetCompareCH3(TIMx, ( uint32_t )pHandle->_Super.Toff);
 8007ecc:	f8b0 5058 	ldrh.w	r5, [r0, #88]	; 0x58
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8007ed0:	8641      	strh	r1, [r0, #50]	; 0x32
 8007ed2:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8007ed6:	1ba4      	subs	r4, r4, r6
 8007ed8:	61da      	str	r2, [r3, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007eda:	641c      	str	r4, [r3, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007edc:	63dd      	str	r5, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007ede:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007ee0:	685a      	ldr	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007ee2:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8007ee4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8007ee8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007eec:	f042 0270 	orr.w	r2, r2, #112	; 0x70
  pHdl->Sector = SECTOR_4;
 8007ef0:	2403      	movs	r4, #3
 8007ef2:	605a      	str	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007ef4:	2901      	cmp	r1, #1
  pHdl->Sector = SECTOR_4;
 8007ef6:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007efa:	685b      	ldr	r3, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007efc:	d007      	beq.n	8007f0e <R3_2_RLDetectionModeSetDuty+0x66>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007efe:	4a06      	ldr	r2, [pc, #24]	; (8007f18 <R3_2_RLDetectionModeSetDuty+0x70>)
 8007f00:	4213      	tst	r3, r2
    hAux = MC_FOC_DURATION;
 8007f02:	bf14      	ite	ne
 8007f04:	2101      	movne	r1, #1
 8007f06:	2100      	moveq	r1, #0
}
 8007f08:	4608      	mov	r0, r1
 8007f0a:	bc70      	pop	{r4, r5, r6}
 8007f0c:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	8703      	strh	r3, [r0, #56]	; 0x38
}
 8007f12:	bc70      	pop	{r4, r5, r6}
 8007f14:	4608      	mov	r0, r1
 8007f16:	4770      	bx	lr
 8007f18:	02000070 	.word	0x02000070

08007f1c <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 8007f1c:	b430      	push	{r4, r5}
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8007f1e:	8b82      	ldrh	r2, [r0, #28]
 8007f20:	8b44      	ldrh	r4, [r0, #26]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007f22:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8007f24:	4414      	add	r4, r2
 8007f26:	0864      	lsrs	r4, r4, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007f28:	b14b      	cbz	r3, 8007f3e <RVBS_Clear+0x22>
  {
    pHandle->aBuffer[index] = aux;
 8007f2a:	6a05      	ldr	r5, [r0, #32]
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	3301      	adds	r3, #1
 8007f32:	f825 4012 	strh.w	r4, [r5, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007f36:	8b01      	ldrh	r1, [r0, #24]
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	4291      	cmp	r1, r2
 8007f3c:	d8f7      	bhi.n	8007f2e <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f364 030f 	bfi	r3, r4, #0, #16
 8007f44:	f364 431f 	bfi	r3, r4, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8007f48:	2200      	movs	r2, #0
}
 8007f4a:	bc30      	pop	{r4, r5}
  pHandle->_Super.LatestConv = aux;
 8007f4c:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 8007f4e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8007f52:	4770      	bx	lr

08007f54 <RVBS_Init>:
{
 8007f54:	b510      	push	{r4, lr}
 8007f56:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8007f58:	300c      	adds	r0, #12
 8007f5a:	f7fa f907 	bl	800216c <RCM_RegisterRegConv>
 8007f5e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8007f62:	4620      	mov	r0, r4
 8007f64:	f7ff ffda 	bl	8007f1c <RVBS_Clear>
}
 8007f68:	bd10      	pop	{r4, pc}
 8007f6a:	bf00      	nop

08007f6c <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8007f6c:	88c3      	ldrh	r3, [r0, #6]
 8007f6e:	8b42      	ldrh	r2, [r0, #26]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d305      	bcc.n	8007f80 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8007f74:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8007f76:	4298      	cmp	r0, r3
 8007f78:	bf8c      	ite	hi
 8007f7a:	2004      	movhi	r0, #4
 8007f7c:	2000      	movls	r0, #0
 8007f7e:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8007f80:	2002      	movs	r0, #2
  }
  return fault;
}
 8007f82:	4770      	bx	lr

08007f84 <RVBS_CalcAvVbus>:
{
 8007f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f86:	4605      	mov	r5, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8007f88:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8007f8c:	f7fa f9c2 	bl	8002314 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8007f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f94:	4298      	cmp	r0, r3
 8007f96:	d01c      	beq.n	8007fd2 <RVBS_CalcAvVbus+0x4e>
    pHandle->aBuffer[pHandle->index] = hAux;
 8007f98:	6a2f      	ldr	r7, [r5, #32]
 8007f9a:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8007f9e:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007fa2:	8b2e      	ldrh	r6, [r5, #24]
 8007fa4:	b1d6      	cbz	r6, 8007fdc <RVBS_CalcAvVbus+0x58>
 8007fa6:	2300      	movs	r3, #0
    wtemp = 0;
 8007fa8:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8007faa:	f837 4013 	ldrh.w	r4, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007fae:	3301      	adds	r3, #1
 8007fb0:	b2d9      	uxtb	r1, r3
 8007fb2:	42b1      	cmp	r1, r6
      wtemp += pHandle->aBuffer[i];
 8007fb4:	4422      	add	r2, r4
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	d3f7      	bcc.n	8007faa <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8007fba:	fbb2 f2f6 	udiv	r2, r2, r6
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8007fbe:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8007fc2:	80ea      	strh	r2, [r5, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8007fc4:	3e01      	subs	r6, #1
 8007fc6:	42b3      	cmp	r3, r6
    pHandle->_Super.LatestConv = hAux;
 8007fc8:	80a8      	strh	r0, [r5, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8007fca:	da09      	bge.n	8007fe0 <RVBS_CalcAvVbus+0x5c>
      pHandle->index++;
 8007fcc:	3301      	adds	r3, #1
 8007fce:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f7ff ffca 	bl	8007f6c <RVBS_CheckFaultState>
 8007fd8:	8128      	strh	r0, [r5, #8]
}
 8007fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8007fdc:	80ee      	strh	r6, [r5, #6]
    pHandle->_Super.LatestConv = hAux;
 8007fde:	80a8      	strh	r0, [r5, #4]
      pHandle->index = 0;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f7ff ffc0 	bl	8007f6c <RVBS_CheckFaultState>
 8007fec:	8128      	strh	r0, [r5, #8]
}
 8007fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ff0 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8007ff0:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8007ff2:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8007ff4:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8007ff8:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8007ffc:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8007ffe:	4770      	bx	lr

08008000 <RUC_SetPhaseDurationms>:
  *         This parameter must be set in millisecond.
  *  @retval none
  */
__weak void RUC_SetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, uint16_t hDurationms )
{
  pHandle->ParamsData[bPhase].hDurationms = hDurationms;
 8008000:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008004:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008008:	818a      	strh	r2, [r1, #12]
}
 800800a:	4770      	bx	lr

0800800c <RUC_SetPhaseFinalMecSpeedUnit>:
  *  @retval none
  */
__weak void RUC_SetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase,
                                    int16_t hFinalMecSpeedUnit )
{
  pHandle->ParamsData[bPhase].hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800800c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008010:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008014:	81ca      	strh	r2, [r1, #14]
}
 8008016:	4770      	bx	lr

08008018 <RUC_SetPhaseFinalTorque>:
  * @param  hFinalTorque: new targetted motor torque.
  *  @retval none
  */
__weak void RUC_SetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, int16_t hFinalTorque )
{
  pHandle->ParamsData[bPhase].hFinalTorque = hFinalTorque;
 8008018:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800801c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008020:	820a      	strh	r2, [r1, #16]
}
 8008022:	4770      	bx	lr

08008024 <RUC_GetPhaseDurationms>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns duration used in selected phase.
  */
__weak uint16_t RUC_GetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( uint16_t )pHandle->ParamsData[bPhase].hDurationms );
 8008024:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008028:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800802c:	8988      	ldrh	r0, [r1, #12]
 800802e:	4770      	bx	lr

08008030 <RUC_GetPhaseFinalMecSpeedUnit>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted rotor speed set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalMecSpeedUnit );
 8008030:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008034:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8008038:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop

08008040 <RUC_GetPhaseFinalTorque>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted motor torque set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalTorque );
 8008040:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008044:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8008048:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop

08008050 <RUC_GetNumberOfPhases>:
  *  @retval Returns number of phases relative to the programmed revup.
  */
__weak uint8_t RUC_GetNumberOfPhases( RevUpCtrl_Handle_t * pHandle )
{
  return ( ( uint8_t )pHandle->bPhaseNbr );
}
 8008050:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop

08008058 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8008058:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop

08008060 <SPD_GetMecAngle>:
  * @retval int16_t rotor mechanical angle (s16degrees)
  */
__weak int32_t SPD_GetMecAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->wMecAngle );
}
 8008060:	6880      	ldr	r0, [r0, #8]
 8008062:	4770      	bx	lr

08008064 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8008064:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop

0800806c <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 800806c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop

08008074 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8008074:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8008078:	8a81      	ldrh	r1, [r0, #20]
{
 800807a:	b430      	push	{r4, r5}
  if ( *pMecSpeedUnit < 0 )
 800807c:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 800807e:	bfb8      	it	lt
 8008080:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8008082:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8008084:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8008086:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8008088:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800808a:	429d      	cmp	r5, r3
 800808c:	d817      	bhi.n	80080be <SPD_IsMecSpeedReliable+0x4a>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800808e:	4299      	cmp	r1, r3
 8008090:	bf2c      	ite	cs
 8008092:	2300      	movcs	r3, #0
 8008094:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8008096:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800809a:	8b05      	ldrh	r5, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 800809c:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 800809e:	bfb8      	it	lt
 80080a0:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 80080a2:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 80080a4:	428d      	cmp	r5, r1
 80080a6:	d300      	bcc.n	80080aa <SPD_IsMecSpeedReliable+0x36>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 80080a8:	b15b      	cbz	r3, 80080c2 <SPD_IsMecSpeedReliable+0x4e>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 80080aa:	4294      	cmp	r4, r2
 80080ac:	d901      	bls.n	80080b2 <SPD_IsMecSpeedReliable+0x3e>
    {
      bSpeedErrorNumber++;
 80080ae:	3201      	adds	r2, #1
 80080b0:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80080b2:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 80080b4:	1b10      	subs	r0, r2, r4
 80080b6:	bf18      	it	ne
 80080b8:	2001      	movne	r0, #1
 80080ba:	bc30      	pop	{r4, r5}
 80080bc:	4770      	bx	lr
    SpeedError = true;
 80080be:	2301      	movs	r3, #1
 80080c0:	e7e9      	b.n	8008096 <SPD_IsMecSpeedReliable+0x22>
      bSpeedErrorNumber = 0u;
 80080c2:	4294      	cmp	r4, r2
 80080c4:	bf88      	it	hi
 80080c6:	2200      	movhi	r2, #0
 80080c8:	e7f3      	b.n	80080b2 <SPD_IsMecSpeedReliable+0x3e>
 80080ca:	bf00      	nop

080080cc <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 80080cc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80080d0:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 80080d4:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80080d8:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 80080dc:	b200      	sxth	r0, r0
 80080de:	4770      	bx	lr

080080e0 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 80080e0:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80080e2:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80080e6:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	; 0x2c
  pHandle->Mode = pHandle->ModeDefault;
 80080ea:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
  pHandle->PISpeed = pPI;
 80080ee:	6101      	str	r1, [r0, #16]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80080f0:	0424      	lsls	r4, r4, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80080f2:	0419      	lsls	r1, r3, #16
  pHandle->TargetFinal = 0;
 80080f4:	2300      	movs	r3, #0
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80080f6:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 80080fa:	7005      	strb	r5, [r0, #0]
  pHandle->SPD = SPD_Handle;
 80080fc:	6142      	str	r2, [r0, #20]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 80080fe:	bc30      	pop	{r4, r5}
  pHandle->TargetFinal = 0;
 8008100:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 8008102:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8008104:	6183      	str	r3, [r0, #24]
}
 8008106:	4770      	bx	lr

08008108 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 8008108:	6141      	str	r1, [r0, #20]
}
 800810a:	4770      	bx	lr

0800810c <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 800810c:	6940      	ldr	r0, [r0, #20]
 800810e:	4770      	bx	lr

08008110 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8008110:	7803      	ldrb	r3, [r0, #0]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d000      	beq.n	8008118 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8008116:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8008118:	6900      	ldr	r0, [r0, #16]
 800811a:	2100      	movs	r1, #0
 800811c:	f7fe bdd4 	b.w	8006cc8 <PID_SetIntegralTerm>

08008120 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8008120:	6840      	ldr	r0, [r0, #4]
 8008122:	2800      	cmp	r0, #0
 8008124:	bfbc      	itt	lt
 8008126:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800812a:	30ff      	addlt	r0, #255	; 0xff
}
 800812c:	1400      	asrs	r0, r0, #16
 800812e:	4770      	bx	lr

08008130 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8008130:	6880      	ldr	r0, [r0, #8]
 8008132:	2800      	cmp	r0, #0
 8008134:	bfbc      	itt	lt
 8008136:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800813a:	30ff      	addlt	r0, #255	; 0xff
}
 800813c:	1400      	asrs	r0, r0, #16
 800813e:	4770      	bx	lr

08008140 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008140:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8008142:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008144:	60c3      	str	r3, [r0, #12]
}
 8008146:	4770      	bx	lr

08008148 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8008148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800814a:	7806      	ldrb	r6, [r0, #0]
{
 800814c:	4604      	mov	r4, r0
 800814e:	460d      	mov	r5, r1
 8008150:	4617      	mov	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8008152:	b326      	cbz	r6, 800819e <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008154:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008156:	8be1      	ldrh	r1, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008158:	2800      	cmp	r0, #0
 800815a:	bfbc      	itt	lt
 800815c:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8008160:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008162:	428d      	cmp	r5, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008164:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008168:	dd01      	ble.n	800816e <STC_ExecRamp+0x26>
      AllowedRange = false;
 800816a:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 800816c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800816e:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
 8008172:	42a9      	cmp	r1, r5
 8008174:	dcf9      	bgt.n	800816a <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8008176:	8c23      	ldrh	r3, [r4, #32]
 8008178:	429d      	cmp	r5, r3
 800817a:	da03      	bge.n	8008184 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 800817c:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8008180:	42ab      	cmp	r3, r5
 8008182:	dbf2      	blt.n	800816a <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8008184:	b9af      	cbnz	r7, 80081b2 <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8008186:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8008188:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 800818a:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 800818c:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8008190:	bf0c      	ite	eq
 8008192:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8008194:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8008196:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8008198:	61a3      	str	r3, [r4, #24]
 800819a:	2001      	movs	r0, #1
}
 800819c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800819e:	f7ff ffc7 	bl	8008130 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 80081a2:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 80081a4:	42b5      	cmp	r5, r6
 80081a6:	dce0      	bgt.n	800816a <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 80081a8:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 80081ac:	42ab      	cmp	r3, r5
 80081ae:	dcdc      	bgt.n	800816a <STC_ExecRamp+0x22>
 80081b0:	e7e8      	b.n	8008184 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80081b2:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 80081b4:	4a07      	ldr	r2, [pc, #28]	; (80081d4 <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 80081b6:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80081b8:	fb07 f303 	mul.w	r3, r7, r3
      wAux /= 1000u;
 80081bc:	fba2 2303 	umull	r2, r3, r2, r3
 80081c0:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 80081c2:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 80081c4:	1a2d      	subs	r5, r5, r0
 80081c6:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 80081c8:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 80081ca:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 80081ce:	2001      	movs	r0, #1
 80081d0:	61a5      	str	r5, [r4, #24]
}
 80081d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081d4:	10624dd3 	.word	0x10624dd3

080081d8 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 80081d8:	2300      	movs	r3, #0
 80081da:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80081dc:	6183      	str	r3, [r0, #24]
}
 80081de:	4770      	bx	lr

080081e0 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 80081e0:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 80081e2:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80081e6:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 80081e8:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 80081ea:	2a00      	cmp	r2, #0
 80081ec:	bf08      	it	eq
 80081ee:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 80081f0:	2b01      	cmp	r3, #1
{
 80081f2:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 80081f4:	d90c      	bls.n	8008210 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 80081f6:	6981      	ldr	r1, [r0, #24]
 80081f8:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 80081fa:	3b01      	subs	r3, #1
 80081fc:	2e00      	cmp	r6, #0
 80081fe:	60c3      	str	r3, [r0, #12]
 8008200:	4630      	mov	r0, r6
 8008202:	db09      	blt.n	8008218 <STC_CalcTorqueReference+0x38>
 8008204:	1405      	asrs	r5, r0, #16
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 8008206:	2a01      	cmp	r2, #1
 8008208:	d00a      	beq.n	8008220 <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 800820a:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 800820c:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 800820e:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8008210:	d012      	beq.n	8008238 <STC_CalcTorqueReference+0x58>
 8008212:	2e00      	cmp	r6, #0
 8008214:	4630      	mov	r0, r6
 8008216:	daf5      	bge.n	8008204 <STC_CalcTorqueReference+0x24>
 8008218:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 800821c:	30ff      	adds	r0, #255	; 0xff
 800821e:	e7f1      	b.n	8008204 <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8008220:	6960      	ldr	r0, [r4, #20]
 8008222:	f7ff ff1f 	bl	8008064 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8008226:	1a28      	subs	r0, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8008228:	b201      	sxth	r1, r0
 800822a:	6920      	ldr	r0, [r4, #16]
 800822c:	f7fe fd58 	bl	8006ce0 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8008230:	0403      	lsls	r3, r0, #16
 8008232:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 8008236:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8008238:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 800823c:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800823e:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8008240:	60c3      	str	r3, [r0, #12]
 8008242:	e7e0      	b.n	8008206 <STC_CalcTorqueReference+0x26>

08008244 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8008244:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop

0800824c <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 800824c:	8bc0      	ldrh	r0, [r0, #30]
 800824e:	4770      	bx	lr

08008250 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8008250:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop

08008258 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8008258:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 800825c:	2200      	movs	r2, #0
 800825e:	b299      	uxth	r1, r3
 8008260:	f361 020f 	bfi	r2, r1, #0, #16
 8008264:	0c1b      	lsrs	r3, r3, #16
 8008266:	f363 421f 	bfi	r2, r3, #16, #16
{
 800826a:	b082      	sub	sp, #8
}
 800826c:	4610      	mov	r0, r2
 800826e:	b002      	add	sp, #8
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop

08008274 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8008274:	b510      	push	{r4, lr}
 8008276:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8008278:	6940      	ldr	r0, [r0, #20]
 800827a:	f7ff fef3 	bl	8008064 <SPD_GetAvrgMecSpeedUnit>
 800827e:	0400      	lsls	r0, r0, #16
 8008280:	6060      	str	r0, [r4, #4]
}
 8008282:	bd10      	pop	{r4, pc}

08008284 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8008284:	2300      	movs	r3, #0
 8008286:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8008288:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop

08008290 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 8008290:	b430      	push	{r4, r5}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8008292:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8008294:	8885      	ldrh	r5, [r0, #4]
  State_t LocalState =  pHandle->bState;
 8008296:	7804      	ldrb	r4, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8008298:	430b      	orrs	r3, r1
 800829a:	ea23 0202 	bic.w	r2, r3, r2
 800829e:	b292      	uxth	r2, r2
  pHandle->hFaultOccurred |= hSetErrors;
 80082a0:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 80082a2:	2c0a      	cmp	r4, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80082a4:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80082a6:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 80082a8:	d008      	beq.n	80082bc <STM_FaultProcessing+0x2c>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 80082aa:	b912      	cbnz	r2, 80082b2 <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 80082ac:	4620      	mov	r0, r4
 80082ae:	bc30      	pop	{r4, r5}
 80082b0:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 80082b2:	240a      	movs	r4, #10
 80082b4:	7004      	strb	r4, [r0, #0]
}
 80082b6:	4620      	mov	r0, r4
 80082b8:	bc30      	pop	{r4, r5}
 80082ba:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 80082bc:	2a00      	cmp	r2, #0
 80082be:	d1f5      	bne.n	80082ac <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 80082c0:	240b      	movs	r4, #11
 80082c2:	7004      	strb	r4, [r0, #0]
}
 80082c4:	4620      	mov	r0, r4
 80082c6:	bc30      	pop	{r4, r5}
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop

080082cc <STM_NextState>:
{
 80082cc:	b508      	push	{r3, lr}
 80082ce:	7803      	ldrb	r3, [r0, #0]
 80082d0:	2b14      	cmp	r3, #20
 80082d2:	d810      	bhi.n	80082f6 <STM_NextState+0x2a>
 80082d4:	e8df f003 	tbb	[pc, r3]
 80082d8:	240d545e 	.word	0x240d545e
 80082dc:	390d352e 	.word	0x390d352e
 80082e0:	0f0f3f3c 	.word	0x0f0f3f3c
 80082e4:	47650b44 	.word	0x47650b44
 80082e8:	504d1b4a 	.word	0x504d1b4a
 80082ec:	5b          	.byte	0x5b
 80082ed:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 80082ee:	290e      	cmp	r1, #14
 80082f0:	d013      	beq.n	800831a <STM_NextState+0x4e>
      if ( bState == ANY_STOP )
 80082f2:	2907      	cmp	r1, #7
 80082f4:	d011      	beq.n	800831a <STM_NextState+0x4e>
 80082f6:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d018      	beq.n	8008330 <STM_NextState+0x64>
 80082fe:	2907      	cmp	r1, #7
 8008300:	d016      	beq.n	8008330 <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8008302:	2200      	movs	r2, #0
 8008304:	2180      	movs	r1, #128	; 0x80
 8008306:	f7ff ffc3 	bl	8008290 <STM_FaultProcessing>
 800830a:	2000      	movs	r0, #0
}
 800830c:	bd08      	pop	{r3, pc}
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 800830e:	2914      	cmp	r1, #20
 8008310:	d8f1      	bhi.n	80082f6 <STM_NextState+0x2a>
 8008312:	4b26      	ldr	r3, [pc, #152]	; (80083ac <STM_NextState+0xe0>)
 8008314:	40cb      	lsrs	r3, r1
 8008316:	07db      	lsls	r3, r3, #31
 8008318:	d5ed      	bpl.n	80082f6 <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 800831a:	7001      	strb	r1, [r0, #0]
 800831c:	2001      	movs	r0, #1
}
 800831e:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8008320:	2911      	cmp	r1, #17
 8008322:	d8ee      	bhi.n	8008302 <STM_NextState+0x36>
 8008324:	4b22      	ldr	r3, [pc, #136]	; (80083b0 <STM_NextState+0xe4>)
 8008326:	40cb      	lsrs	r3, r1
 8008328:	07da      	lsls	r2, r3, #31
 800832a:	d4f6      	bmi.n	800831a <STM_NextState+0x4e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800832c:	2903      	cmp	r1, #3
 800832e:	d1e8      	bne.n	8008302 <STM_NextState+0x36>
 8008330:	2000      	movs	r0, #0
}
 8008332:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8008334:	2913      	cmp	r1, #19
 8008336:	d0f0      	beq.n	800831a <STM_NextState+0x4e>
 8008338:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800833c:	2b05      	cmp	r3, #5
 800833e:	d1dc      	bne.n	80082fa <STM_NextState+0x2e>
 8008340:	e7eb      	b.n	800831a <STM_NextState+0x4e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8008342:	1f8b      	subs	r3, r1, #6
 8008344:	2b01      	cmp	r3, #1
 8008346:	d8d6      	bhi.n	80082f6 <STM_NextState+0x2a>
 8008348:	e7e7      	b.n	800831a <STM_NextState+0x4e>
      if ( bState == STOP )
 800834a:	2908      	cmp	r1, #8
 800834c:	d1d3      	bne.n	80082f6 <STM_NextState+0x2a>
 800834e:	e7e4      	b.n	800831a <STM_NextState+0x4e>
      if ( bState == STOP_IDLE )
 8008350:	2909      	cmp	r1, #9
 8008352:	d1d0      	bne.n	80082f6 <STM_NextState+0x2a>
 8008354:	e7e1      	b.n	800831a <STM_NextState+0x4e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8008356:	2900      	cmp	r1, #0
 8008358:	d0df      	beq.n	800831a <STM_NextState+0x4e>
 800835a:	290c      	cmp	r1, #12
 800835c:	d1cb      	bne.n	80082f6 <STM_NextState+0x2a>
 800835e:	e7dc      	b.n	800831a <STM_NextState+0x4e>
      if ( bState == IDLE )
 8008360:	2900      	cmp	r1, #0
 8008362:	d0da      	beq.n	800831a <STM_NextState+0x4e>
 8008364:	e7c7      	b.n	80082f6 <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8008366:	2902      	cmp	r1, #2
 8008368:	d1c3      	bne.n	80082f2 <STM_NextState+0x26>
 800836a:	e7d6      	b.n	800831a <STM_NextState+0x4e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800836c:	2911      	cmp	r1, #17
 800836e:	d1c0      	bne.n	80082f2 <STM_NextState+0x26>
 8008370:	e7d3      	b.n	800831a <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8008372:	2904      	cmp	r1, #4
 8008374:	d1bd      	bne.n	80082f2 <STM_NextState+0x26>
 8008376:	e7d0      	b.n	800831a <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8008378:	1f0b      	subs	r3, r1, #4
 800837a:	2b01      	cmp	r3, #1
 800837c:	d8b9      	bhi.n	80082f2 <STM_NextState+0x26>
 800837e:	e7cc      	b.n	800831a <STM_NextState+0x4e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8008380:	2907      	cmp	r1, #7
 8008382:	d0ca      	beq.n	800831a <STM_NextState+0x4e>
 8008384:	f1a1 030d 	sub.w	r3, r1, #13
 8008388:	2b01      	cmp	r3, #1
 800838a:	d8b4      	bhi.n	80082f6 <STM_NextState+0x2a>
 800838c:	e7c5      	b.n	800831a <STM_NextState+0x4e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800838e:	2912      	cmp	r1, #18
 8008390:	d1af      	bne.n	80082f2 <STM_NextState+0x26>
 8008392:	e7c2      	b.n	800831a <STM_NextState+0x4e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8008394:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8008398:	2b01      	cmp	r3, #1
 800839a:	d0be      	beq.n	800831a <STM_NextState+0x4e>
           || ( bState == ICLWAIT ) )
 800839c:	290c      	cmp	r1, #12
 800839e:	d1ae      	bne.n	80082fe <STM_NextState+0x32>
 80083a0:	e7bb      	b.n	800831a <STM_NextState+0x4e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 80083a2:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 80083a6:	2b07      	cmp	r3, #7
 80083a8:	d1a5      	bne.n	80082f6 <STM_NextState+0x2a>
 80083aa:	e7b6      	b.n	800831a <STM_NextState+0x4e>
 80083ac:	00140080 	.word	0x00140080
 80083b0:	00030092 	.word	0x00030092

080083b4 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 80083b4:	7800      	ldrb	r0, [r0, #0]
 80083b6:	4770      	bx	lr

080083b8 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 80083b8:	7803      	ldrb	r3, [r0, #0]
 80083ba:	2b0b      	cmp	r3, #11
 80083bc:	d001      	beq.n	80083c2 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 80083be:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 80083c0:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 80083c2:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80083c4:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 80083c6:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80083c8:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 80083ca:	2001      	movs	r0, #1
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop

080083d0 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 80083d0:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 80083d2:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 80083d4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop

080083dc <TC_Init>:
  * @param  pSTC pointer on the handler of the current instance of the SpeednTorqCtrl component.
  * @param  pENC handler of the current instance of the EncAlignCtrl component.
  * @retval none
  */
void TC_Init(PosCtrl_Handle_t *pHandle, PID_Handle_t * pPIDPosReg, SpeednTorqCtrl_Handle_t * pSTC, ENCODER_Handle_t * pENC)
{
 80083dc:	b430      	push	{r4, r5}

  pHandle->MovementDuration = 0.0f;
 80083de:	2400      	movs	r4, #0
  pHandle->Omega = 0.0f;
  pHandle->OmegaPrev = 0.0f;
  pHandle->Theta = 0.0f;
  pHandle->ThetaPrev = 0.0f;
  pHandle->ReceivedTh = 0.0f;
  pHandle->TcTick = 0;
 80083e0:	2500      	movs	r5, #0
  pHandle->MovementDuration = 0.0f;
 80083e2:	6004      	str	r4, [r0, #0]
  pHandle->AngleStep = 0.0f;
 80083e4:	60c4      	str	r4, [r0, #12]
  pHandle->SubStep[0] = 0.0f;
 80083e6:	6104      	str	r4, [r0, #16]
  pHandle->SubStep[1] = 0.0f;
 80083e8:	6144      	str	r4, [r0, #20]
  pHandle->SubStep[2] = 0.0f;
 80083ea:	6184      	str	r4, [r0, #24]
  pHandle->SubStep[3] = 0.0f;
 80083ec:	61c4      	str	r4, [r0, #28]
  pHandle->SubStep[4] = 0.0f;
 80083ee:	6204      	str	r4, [r0, #32]
  pHandle->SubStep[5] = 0.0f;
 80083f0:	6244      	str	r4, [r0, #36]	; 0x24
  pHandle->SubStepDuration = 0;
 80083f2:	6284      	str	r4, [r0, #40]	; 0x28
  pHandle->ElapseTime = 0.0f;
 80083f4:	62c4      	str	r4, [r0, #44]	; 0x2c
  pHandle->Jerk = 0.0f;
 80083f6:	6344      	str	r4, [r0, #52]	; 0x34
  pHandle->CruiseSpeed = 0.0f;
 80083f8:	6384      	str	r4, [r0, #56]	; 0x38
  pHandle->Acceleration = 0.0f;
 80083fa:	63c4      	str	r4, [r0, #60]	; 0x3c
  pHandle->Omega = 0.0f;
 80083fc:	6404      	str	r4, [r0, #64]	; 0x40
  pHandle->OmegaPrev = 0.0f;
 80083fe:	6444      	str	r4, [r0, #68]	; 0x44
  pHandle->Theta = 0.0f;
 8008400:	6484      	str	r4, [r0, #72]	; 0x48
  pHandle->ThetaPrev = 0.0f;
 8008402:	64c4      	str	r4, [r0, #76]	; 0x4c
  pHandle->TcTick = 0;
 8008404:	6585      	str	r5, [r0, #88]	; 0x58
  pHandle->ReceivedTh = 0.0f;
 8008406:	f8a0 5050 	strh.w	r5, [r0, #80]	; 0x50

  pHandle->PositionControlRegulation = DISABLE;
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800840a:	f880 5060 	strb.w	r5, [r0, #96]	; 0x60

  pHandle->pENC = pENC;
  pHandle->pSTC = pSTC;
  pHandle->PIDPosRegulator = pPIDPosReg;

  pHandle->MecAngleOffset = 0;
 800840e:	f8a0 5054 	strh.w	r5, [r0, #84]	; 0x54
  pHandle->pSTC = pSTC;
 8008412:	e9c0 211a 	strd	r2, r1, [r0, #104]	; 0x68
}
 8008416:	bc30      	pop	{r4, r5}
  pHandle->pENC = pENC;
 8008418:	6643      	str	r3, [r0, #100]	; 0x64
}
 800841a:	4770      	bx	lr

0800841c <TC_MoveCommand>:
  * @param  movementDuration Duration to reach the final position.
  * @retval true  = Trajectory command programmed
  *         false = Not ready for a new trajectory configuration.
  */
bool TC_MoveCommand(PosCtrl_Handle_t *pHandle, float startingAngle, float angleStep, float movementDuration)
{
 800841c:	4603      	mov	r3, r0

  bool RetConfigStatus = false;
  float fMinimumStepDuration;

  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 800841e:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 8008422:	2803      	cmp	r0, #3
 8008424:	d061      	beq.n	80084ea <TC_MoveCommand+0xce>
  {
	  // Back to Move command as the movement duration is different from 0
	  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
  }

  if ( (pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0) )
 8008426:	b108      	cbz	r0, 800842c <TC_MoveCommand+0x10>
  bool RetConfigStatus = false;
 8008428:	2000      	movs	r0, #0

    RetConfigStatus = true;

  }
  return (RetConfigStatus);
}
 800842a:	4770      	bx	lr
  if ( (pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0) )
 800842c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8008430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008434:	ddf9      	ble.n	800842a <TC_MoveCommand+0xe>
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 8008436:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800843a:	eddf 7a2f 	vldr	s15, [pc, #188]	; 80084f8 <TC_MoveCommand+0xdc>
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800843e:	ed9f 4a2f 	vldr	s8, [pc, #188]	; 80084fc <TC_MoveCommand+0xe0>
    pHandle->StartingAngle = startingAngle;
 8008442:	ed83 0a01 	vstr	s0, [r3, #4]
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 8008446:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 800844a:	ee67 6a26 	vmul.f32	s13, s14, s13
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800844e:	ee20 4a84 	vmul.f32	s8, s1, s8
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008452:	ee81 7a26 	vdiv.f32	s14, s2, s13
    pHandle->ElapseTime = 0.0f;
 8008456:	2200      	movs	r2, #0
    pHandle->PositionControlRegulation = ENABLE;
 8008458:	2001      	movs	r0, #1
 800845a:	f883 0051 	strb.w	r0, [r3, #81]	; 0x51
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 800845e:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    pHandle->ElapseTime = 0.0f;
 8008462:	62da      	str	r2, [r3, #44]	; 0x2c
    pHandle->Omega = 0.0f;
 8008464:	641a      	str	r2, [r3, #64]	; 0x40
    pHandle->Acceleration = 0.0f;
 8008466:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8008468:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800846c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8008470:	eeb1 5a08 	vmov.f32	s10, #24	; 0x40c00000  6.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008474:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8008478:	eef1 5a0c 	vmov.f32	s11, #28	; 0x40e00000  7.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800847c:	ee27 7a26 	vmul.f32	s14, s14, s13
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8008480:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 8008484:	ee67 7a27 	vmul.f32	s15, s14, s15
    pHandle->FinalAngle = startingAngle + angleStep;
 8008488:	ee70 2a20 	vadd.f32	s5, s0, s1
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800848c:	ee67 6aa7 	vmul.f32	s13, s15, s15
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 8008490:	ee37 3aa7 	vadd.f32	s6, s15, s15
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008494:	ee26 2aa7 	vmul.f32	s4, s13, s15
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8008498:	ee76 6aa6 	vadd.f32	s13, s13, s13
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800849c:	eec4 3a02 	vdiv.f32	s7, s8, s4
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 80084a0:	ee67 4aa4 	vmul.f32	s9, s15, s9
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 80084a4:	ee66 6aa3 	vmul.f32	s13, s13, s7
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 80084a8:	ee27 5a85 	vmul.f32	s10, s15, s10
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 80084ac:	ee67 5aa5 	vmul.f32	s11, s15, s11
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 80084b0:	ee27 6a86 	vmul.f32	s12, s15, s12
    pHandle->AngleStep = angleStep;
 80084b4:	edc3 0a03 	vstr	s1, [r3, #12]
    pHandle->Theta = startingAngle;
 80084b8:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
    pHandle->FinalAngle = startingAngle + angleStep;
 80084bc:	edc3 2a02 	vstr	s5, [r3, #8]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80084c0:	ed83 7a00 	vstr	s14, [r3]
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 80084c4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    pHandle->SubStep[0] = 1 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 80084c8:	edc3 7a04 	vstr	s15, [r3, #16]
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 80084cc:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80084d0:	edc3 3a0d 	vstr	s7, [r3, #52]	; 0x34
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 80084d4:	ed83 3a05 	vstr	s6, [r3, #20]
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 80084d8:	edc3 4a06 	vstr	s9, [r3, #24]
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 80084dc:	ed83 5a07 	vstr	s10, [r3, #28]
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 80084e0:	edc3 5a08 	vstr	s11, [r3, #32]
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 80084e4:	ed83 6a09 	vstr	s12, [r3, #36]	; 0x24
  return (RetConfigStatus);
 80084e8:	4770      	bx	lr
  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 80084ea:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 80084ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f2:	dca0      	bgt.n	8008436 <TC_MoveCommand+0x1a>
 80084f4:	e798      	b.n	8008428 <TC_MoveCommand+0xc>
 80084f6:	bf00      	nop
 80084f8:	3de38e39 	.word	0x3de38e39
 80084fc:	3daaaaab 	.word	0x3daaaaab

08008500 <TC_FollowCommand>:
void TC_FollowCommand(PosCtrl_Handle_t *pHandle, float Angle)
{
  float omega = 0, acceleration = 0, dt = 0;
  
  // Estimate speed
  if (pHandle->ReceivedTh > 0) 
 8008500:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8008504:	b9a3      	cbnz	r3, 8008530 <TC_FollowCommand+0x30>
  float omega = 0, acceleration = 0, dt = 0;
 8008506:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008584 <TC_FollowCommand+0x84>
 800850a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8008584 <TC_FollowCommand+0x84>
      acceleration = (omega - pHandle->OmegaPrev) / dt;
    }
  }
  
  // Update state variable
  pHandle->ThetaPrev  = Angle;
 800850e:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
  pHandle->OmegaPrev = omega;
  if (pHandle->ReceivedTh < 2)
  {
    pHandle->ReceivedTh++;
 8008512:	3301      	adds	r3, #1
 8008514:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  pHandle->OmegaPrev = omega;
 8008518:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
  
  pHandle->Acceleration = acceleration;
  pHandle->Omega = omega;
  pHandle->Theta = Angle;
  
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 800851c:	2303      	movs	r3, #3
  pHandle->Acceleration = acceleration;
 800851e:	edc0 6a0f 	vstr	s13, [r0, #60]	; 0x3c
  pHandle->Omega = omega;
 8008522:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
  pHandle->Theta = Angle;
 8008526:	ed80 0a12 	vstr	s0, [r0, #72]	; 0x48
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 800852a:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  
  return;
}
 800852e:	4770      	bx	lr
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 8008530:	edd0 7a16 	vldr	s15, [r0, #88]	; 0x58
 8008534:	ed90 7a17 	vldr	s14, [r0, #92]	; 0x5c
 8008538:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pHandle->TcTick = 0;
 800853c:	2200      	movs	r2, #0
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 800853e:	ee67 7a87 	vmul.f32	s15, s15, s14
    pHandle->TcTick = 0;
 8008542:	6582      	str	r2, [r0, #88]	; 0x58
    if (dt > 0)
 8008544:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800854c:	dd12      	ble.n	8008574 <TC_FollowCommand+0x74>
      omega = (Angle - pHandle->ThetaPrev) / dt;
 800854e:	edd0 6a13 	vldr	s13, [r0, #76]	; 0x4c
 8008552:	ee70 6a66 	vsub.f32	s13, s0, s13
  if (pHandle->ReceivedTh > 1) {
 8008556:	2b01      	cmp	r3, #1
      omega = (Angle - pHandle->ThetaPrev) / dt;
 8008558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  if (pHandle->ReceivedTh > 1) {
 800855c:	d9d5      	bls.n	800850a <TC_FollowCommand+0xa>
      acceleration = (omega - pHandle->OmegaPrev) / dt;
 800855e:	ed90 6a11 	vldr	s12, [r0, #68]	; 0x44
 8008562:	ee37 6a46 	vsub.f32	s12, s14, s12
 8008566:	eec6 6a27 	vdiv.f32	s13, s12, s15
  pHandle->ThetaPrev  = Angle;
 800856a:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
  pHandle->OmegaPrev = omega;
 800856e:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
  if (pHandle->ReceivedTh < 2)
 8008572:	e7d3      	b.n	800851c <TC_FollowCommand+0x1c>
  if (pHandle->ReceivedTh > 1) {
 8008574:	2b01      	cmp	r3, #1
 8008576:	d9c6      	bls.n	8008506 <TC_FollowCommand+0x6>
  float omega = 0, acceleration = 0, dt = 0;
 8008578:	ed9f 7a02 	vldr	s14, [pc, #8]	; 8008584 <TC_FollowCommand+0x84>
 800857c:	eef0 6a47 	vmov.f32	s13, s14
 8008580:	e7f3      	b.n	800856a <TC_FollowCommand+0x6a>
 8008582:	bf00      	nop
 8008584:	00000000 	.word	0x00000000

08008588 <TC_MoveExecution>:
void TC_MoveExecution(PosCtrl_Handle_t *pHandle)
{

  float jerkApplied = 0;

  if (pHandle->ElapseTime < pHandle->SubStep[0])              // 1st Sub-Step interval time of acceleration phase
 8008588:	edd0 7a0b 	vldr	s15, [r0, #44]	; 0x2c
 800858c:	ed90 7a04 	vldr	s14, [r0, #16]
 8008590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008598:	d537      	bpl.n	800860a <TC_MoveExecution+0x82>
  {
    jerkApplied = pHandle->Jerk;
 800859a:	ed90 6a0d 	vldr	s12, [r0, #52]	; 0x34
 800859e:	edd0 6a00 	vldr	s13, [r0]
  {
    pHandle->Theta = pHandle->FinalAngle;
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
  }

  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 80085a2:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
  {
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 80085a6:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d115      	bne.n	80085da <TC_MoveExecution+0x52>
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 80085ae:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80085b2:	edd0 5a10 	vldr	s11, [r0, #64]	; 0x40
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 80085b6:	edd0 4a12 	vldr	s9, [r0, #72]	; 0x48
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 80085ba:	eea7 5a06 	vfma.f32	s10, s14, s12
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80085be:	eeb0 6a65 	vmov.f32	s12, s11
 80085c2:	eea7 6a05 	vfma.f32	s12, s14, s10
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 80085c6:	eef0 5a64 	vmov.f32	s11, s9
 80085ca:	eee7 5a06 	vfma.f32	s11, s14, s12
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 80085ce:	ed80 5a0f 	vstr	s10, [r0, #60]	; 0x3c
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80085d2:	ed80 6a10 	vstr	s12, [r0, #64]	; 0x40
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 80085d6:	edc0 5a12 	vstr	s11, [r0, #72]	; 0x48
  }

  pHandle->ElapseTime += pHandle->SamplingTime;
 80085da:	ee77 7a87 	vadd.f32	s15, s15, s14
bool TC_RampCompleted(PosCtrl_Handle_t *pHandle)
{
  bool retVal = false;

  // Check that entire sequence (Acceleration - Cruise - Deceleration) is completed.
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 80085de:	ee37 7a26 	vadd.f32	s14, s14, s13
  pHandle->ElapseTime += pHandle->SamplingTime;
 80085e2:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 80085e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ee:	dd0b      	ble.n	8008608 <TC_MoveExecution+0x80>
    if (pHandle->AlignmentStatus == TC_ZERO_ALIGNMENT_START) {
 80085f0:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 80085f4:	2b01      	cmp	r3, #1
      pHandle->AlignmentStatus = TC_ALIGNMENT_ERROR;
 80085f6:	bf04      	itt	eq
 80085f8:	2305      	moveq	r3, #5
 80085fa:	f880 3062 	strbeq.w	r3, [r0, #98]	; 0x62
    pHandle->ElapseTime = 0;
 80085fe:	2200      	movs	r2, #0
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008600:	2300      	movs	r3, #0
    pHandle->ElapseTime = 0;
 8008602:	62c2      	str	r2, [r0, #44]	; 0x2c
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008604:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
}
 8008608:	4770      	bx	lr
  else if (pHandle->ElapseTime < pHandle->SubStep[1])         // 2nd Sub-Step interval time of acceleration phase
 800860a:	ed90 7a05 	vldr	s14, [r0, #20]
 800860e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008616:	d504      	bpl.n	8008622 <TC_MoveExecution+0x9a>
 8008618:	edd0 6a00 	vldr	s13, [r0]
  float jerkApplied = 0;
 800861c:	ed9f 6a20 	vldr	s12, [pc, #128]	; 80086a0 <TC_MoveExecution+0x118>
 8008620:	e7bf      	b.n	80085a2 <TC_MoveExecution+0x1a>
  else if (pHandle->ElapseTime < pHandle->SubStep[2])         // 3rd Sub-Step interval time of acceleration phase
 8008622:	ed90 7a06 	vldr	s14, [r0, #24]
 8008626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800862a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800862e:	d416      	bmi.n	800865e <TC_MoveExecution+0xd6>
  else if (pHandle->ElapseTime < pHandle->SubStep[3])         // Speed Cruise phase (after acceleration and before deceleration phases)
 8008630:	ed90 7a07 	vldr	s14, [r0, #28]
 8008634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800863c:	d508      	bpl.n	8008650 <TC_MoveExecution+0xc8>
    pHandle->Acceleration = 0.0f;
 800863e:	ed9f 6a18 	vldr	s12, [pc, #96]	; 80086a0 <TC_MoveExecution+0x118>
    pHandle->Omega = pHandle->CruiseSpeed;
 8008642:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008644:	edd0 6a00 	vldr	s13, [r0]
    pHandle->Acceleration = 0.0f;
 8008648:	ed80 6a0f 	vstr	s12, [r0, #60]	; 0x3c
    pHandle->Omega = pHandle->CruiseSpeed;
 800864c:	6403      	str	r3, [r0, #64]	; 0x40
 800864e:	e7a8      	b.n	80085a2 <TC_MoveExecution+0x1a>
  else if (pHandle->ElapseTime < pHandle->SubStep[4])         // 1st Sub-Step interval time of deceleration phase
 8008650:	ed90 7a08 	vldr	s14, [r0, #32]
 8008654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800865c:	d506      	bpl.n	800866c <TC_MoveExecution+0xe4>
    jerkApplied = -(pHandle->Jerk);
 800865e:	ed90 6a0d 	vldr	s12, [r0, #52]	; 0x34
 8008662:	edd0 6a00 	vldr	s13, [r0]
 8008666:	eeb1 6a46 	vneg.f32	s12, s12
 800866a:	e79a      	b.n	80085a2 <TC_MoveExecution+0x1a>
  else if (pHandle->ElapseTime < pHandle->SubStep[5])         // 2nd Sub-Step interval time of deceleration phase
 800866c:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8008670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008678:	d4ce      	bmi.n	8008618 <TC_MoveExecution+0x90>
  else if (pHandle->ElapseTime < pHandle->MovementDuration)   // 3rd Sub-Step interval time of deceleration phase
 800867a:	edd0 6a00 	vldr	s13, [r0]
 800867e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008686:	d502      	bpl.n	800868e <TC_MoveExecution+0x106>
    jerkApplied = pHandle->Jerk;
 8008688:	ed90 6a0d 	vldr	s12, [r0, #52]	; 0x34
 800868c:	e789      	b.n	80085a2 <TC_MoveExecution+0x1a>
    pHandle->Theta = pHandle->FinalAngle;
 800868e:	6883      	ldr	r3, [r0, #8]
 8008690:	6483      	str	r3, [r0, #72]	; 0x48
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
 8008692:	2302      	movs	r3, #2
 8008694:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 8008698:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 800869c:	e79d      	b.n	80085da <TC_MoveExecution+0x52>
 800869e:	bf00      	nop
 80086a0:	00000000 	.word	0x00000000

080086a4 <TC_PositionRegulation>:
{
 80086a4:	b538      	push	{r3, r4, r5, lr}
  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 80086a6:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80086aa:	2b01      	cmp	r3, #1
{
 80086ac:	4604      	mov	r4, r0
  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 80086ae:	d034      	beq.n	800871a <TC_PositionRegulation+0x76>
  if ( pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING )
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d10f      	bne.n	80086d4 <TC_PositionRegulation+0x30>
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80086b4:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80086b8:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 80086bc:	ed94 6a0f 	vldr	s12, [r4, #60]	; 0x3c
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 80086c0:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80086c4:	eee6 7a26 	vfma.f32	s15, s12, s13
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 80086c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80086cc:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 80086d0:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
  if (pHandle->PositionControlRegulation == ENABLE)
 80086d4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80086d8:	b903      	cbnz	r3, 80086dc <TC_PositionRegulation+0x38>
}
 80086da:	bd38      	pop	{r3, r4, r5, pc}
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 80086dc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8008724 <TC_PositionRegulation+0x80>
 80086e0:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 80086e4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 80086e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80086ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086ee:	ee17 5a90 	vmov	r5, s15
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 80086f2:	f7ff fd0b 	bl	800810c <STC_GetSpeedSensor>
 80086f6:	f7ff fcb3 	bl	8008060 <SPD_GetMecAngle>
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 80086fa:	1a29      	subs	r1, r5, r0
 80086fc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80086fe:	f7fe fb35 	bl	8006d6c <PID_Controller>
    STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8008702:	2100      	movs	r1, #0
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 8008704:	4605      	mov	r5, r0
    STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8008706:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008708:	f7ff fd1a 	bl	8008140 <STC_SetControlMode>
    STC_ExecRamp( pHandle->pSTC, hTorqueRef_Pos, 0 );
 800870c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800870e:	4629      	mov	r1, r5
 8008710:	2200      	movs	r2, #0
}
 8008712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    STC_ExecRamp( pHandle->pSTC, hTorqueRef_Pos, 0 );
 8008716:	f7ff bd17 	b.w	8008148 <STC_ExecRamp>
    TC_MoveExecution(pHandle);
 800871a:	f7ff ff35 	bl	8008588 <TC_MoveExecution>
 800871e:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8008722:	e7c5      	b.n	80086b0 <TC_PositionRegulation+0xc>
 8008724:	4622f983 	.word	0x4622f983

08008728 <TC_EncAlignmentCommand>:
{
 8008728:	b510      	push	{r4, lr}
  if (pHandle->AlignmentStatus == TC_ALIGNMENT_COMPLETED) {
 800872a:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 800872e:	2b02      	cmp	r3, #2
{
 8008730:	b082      	sub	sp, #8
 8008732:	4604      	mov	r4, r0
  if (pHandle->AlignmentStatus == TC_ALIGNMENT_COMPLETED) {
 8008734:	d010      	beq.n	8008758 <TC_EncAlignmentCommand+0x30>
    if (pHandle->AlignmentCfg == TC_ABSOLUTE_ALIGNMENT_SUPPORTED)
 8008736:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800873a:	2b04      	cmp	r3, #4
 800873c:	d011      	beq.n	8008762 <TC_EncAlignmentCommand+0x3a>
      pHandle->pENC->_Super.wMecAngle = 0;
 800873e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8008740:	2300      	movs	r3, #0
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 8008742:	2102      	movs	r1, #2
      pHandle->PositionControlRegulation = ENABLE;
 8008744:	2201      	movs	r2, #1
      pHandle->pENC->_Super.wMecAngle = 0;
 8008746:	6083      	str	r3, [r0, #8]
      pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008748:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800874c:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
      pHandle->PositionControlRegulation = ENABLE;
 8008750:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
}
 8008754:	b002      	add	sp, #8
 8008756:	bd10      	pop	{r4, pc}
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008758:	2300      	movs	r3, #0
 800875a:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
}
 800875e:	b002      	add	sp, #8
 8008760:	bd10      	pop	{r4, pc}
      pHandle->EncoderAbsoluteAligned = false;
 8008762:	2300      	movs	r3, #0
 8008764:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 8008768:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800876a:	f7ff fccf 	bl	800810c <STC_GetSpeedSensor>
 800876e:	f7ff fc77 	bl	8008060 <SPD_GetMecAngle>
  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 8008772:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 8008776:	9001      	str	r0, [sp, #4]
  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 8008778:	2b03      	cmp	r3, #3
 800877a:	d005      	beq.n	8008788 <TC_EncAlignmentCommand+0x60>
  if ( (pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0) )
 800877c:	b123      	cbz	r3, 8008788 <TC_EncAlignmentCommand+0x60>
      pHandle->AlignmentStatus = TC_ZERO_ALIGNMENT_START;
 800877e:	2301      	movs	r3, #1
 8008780:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 8008784:	b002      	add	sp, #8
 8008786:	bd10      	pop	{r4, pc}
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 8008788:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800878c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8008850 <TC_EncAlignmentCommand+0x128>
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 8008790:	eddf 7a30 	vldr	s15, [pc, #192]	; 8008854 <TC_EncAlignmentCommand+0x12c>
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 8008794:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8008858 <TC_EncAlignmentCommand+0x130>
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008798:	eddf 4a30 	vldr	s9, [pc, #192]	; 800885c <TC_EncAlignmentCommand+0x134>
    pHandle->AngleStep = angleStep;
 800879c:	eddf 5a30 	vldr	s11, [pc, #192]	; 8008860 <TC_EncAlignmentCommand+0x138>
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80087a0:	eec7 6a06 	vdiv.f32	s13, s14, s12
    pHandle->ElapseTime = 0.0f;
 80087a4:	2300      	movs	r3, #0
    pHandle->PositionControlRegulation = ENABLE;
 80087a6:	2201      	movs	r2, #1
 80087a8:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 80087ac:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
    pHandle->ElapseTime = 0.0f;
 80087b0:	62e3      	str	r3, [r4, #44]	; 0x2c
    pHandle->Omega = 0.0f;
 80087b2:	6423      	str	r3, [r4, #64]	; 0x40
    pHandle->Acceleration = 0.0f;
 80087b4:	63e3      	str	r3, [r4, #60]	; 0x3c
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 80087b6:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80087ba:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 80087be:	ee26 6a07 	vmul.f32	s12, s12, s14
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80087c2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 80087c6:	ed9d 7a01 	vldr	s14, [sp, #4]
    pHandle->AngleStep = angleStep;
 80087ca:	edc4 5a03 	vstr	s11, [r4, #12]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80087ce:	ee66 6a86 	vmul.f32	s13, s13, s12
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 80087d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 80087d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 80087da:	ee27 7a05 	vmul.f32	s14, s14, s10
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80087de:	ee27 6aa7 	vmul.f32	s12, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 80087e2:	eef0 3a08 	vmov.f32	s7, #8	; 0x40400000  3.0
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80087e6:	ee26 5a27 	vmul.f32	s10, s12, s15
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 80087ea:	ee36 6a06 	vadd.f32	s12, s12, s12
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80087ee:	ee84 3a85 	vdiv.f32	s6, s9, s10
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 80087f2:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 80087f6:	eef1 4a0c 	vmov.f32	s9, #28	; 0x40e00000  7.0
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 80087fa:	eeb2 5a00 	vmov.f32	s10, #32	; 0x41000000  8.0
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 80087fe:	ee26 6a03 	vmul.f32	s12, s12, s6
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 8008802:	ee77 2aa7 	vadd.f32	s5, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8008806:	ee67 3aa3 	vmul.f32	s7, s15, s7
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800880a:	ee27 4a84 	vmul.f32	s8, s15, s8
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800880e:	ee67 4aa4 	vmul.f32	s9, s15, s9
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8008812:	ee27 5a85 	vmul.f32	s10, s15, s10
    pHandle->FinalAngle = startingAngle + angleStep;
 8008816:	ee77 5a25 	vadd.f32	s11, s14, s11
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800881a:	edc4 6a00 	vstr	s13, [r4]
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800881e:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    pHandle->SubStep[0] = 1 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 8008822:	edc4 7a04 	vstr	s15, [r4, #16]
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8008826:	ed84 6a0e 	vstr	s12, [r4, #56]	; 0x38
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800882a:	ed84 3a0d 	vstr	s6, [r4, #52]	; 0x34
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 800882e:	edc4 2a05 	vstr	s5, [r4, #20]
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8008832:	edc4 3a06 	vstr	s7, [r4, #24]
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8008836:	ed84 4a07 	vstr	s8, [r4, #28]
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800883a:	edc4 4a08 	vstr	s9, [r4, #32]
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800883e:	ed84 5a09 	vstr	s10, [r4, #36]	; 0x24
    pHandle->StartingAngle = startingAngle;
 8008842:	ed84 7a01 	vstr	s14, [r4, #4]
    pHandle->Theta = startingAngle;
 8008846:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
    pHandle->FinalAngle = startingAngle + angleStep;
 800884a:	edc4 5a02 	vstr	s11, [r4, #8]
  return (RetConfigStatus);
 800884e:	e796      	b.n	800877e <TC_EncAlignmentCommand+0x56>
 8008850:	3e638e39 	.word	0x3e638e39
 8008854:	3de38e39 	.word	0x3de38e39
 8008858:	38c90fdb 	.word	0x38c90fdb
 800885c:	3f060a92 	.word	0x3f060a92
 8008860:	40c90fdb 	.word	0x40c90fdb

08008864 <TC_EncoderReset>:
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval none
  */
void TC_EncoderReset(PosCtrl_Handle_t *pHandle)
{
  if ((!pHandle->EncoderAbsoluteAligned) && (pHandle->AlignmentStatus == TC_ZERO_ALIGNMENT_START))
 8008864:	f890 2052 	ldrb.w	r2, [r0, #82]	; 0x52
 8008868:	b102      	cbz	r2, 800886c <TC_EncoderReset+0x8>
 800886a:	4770      	bx	lr
{
 800886c:	b430      	push	{r4, r5}
  if ((!pHandle->EncoderAbsoluteAligned) && (pHandle->AlignmentStatus == TC_ZERO_ALIGNMENT_START))
 800886e:	f890 4062 	ldrb.w	r4, [r0, #98]	; 0x62
 8008872:	2c01      	cmp	r4, #1
 8008874:	4603      	mov	r3, r0
 8008876:	d001      	beq.n	800887c <TC_EncoderReset+0x18>
    pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
    pHandle->Theta = 0.0f;
    ENC_SetMecAngle(pHandle->pENC , pHandle->MecAngleOffset);
  }
}
 8008878:	bc30      	pop	{r4, r5}
 800887a:	4770      	bx	lr
    pHandle->MecAngleOffset = pHandle->pENC->_Super.hMecAngle;
 800887c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800887e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8008882:	f8a3 1054 	strh.w	r1, [r3, #84]	; 0x54
    pHandle->pENC->_Super.wMecAngle = 0;
 8008886:	6082      	str	r2, [r0, #8]
    pHandle->EncoderAbsoluteAligned = true;
 8008888:	f883 4052 	strb.w	r4, [r3, #82]	; 0x52
    pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800888c:	2402      	movs	r4, #2
    pHandle->Theta = 0.0f;
 800888e:	2500      	movs	r5, #0
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008890:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 8008894:	f883 4062 	strb.w	r4, [r3, #98]	; 0x62
    pHandle->Theta = 0.0f;
 8008898:	649d      	str	r5, [r3, #72]	; 0x48
}
 800889a:	bc30      	pop	{r4, r5}
    ENC_SetMecAngle(pHandle->pENC , pHandle->MecAngleOffset);
 800889c:	f7fe b92c 	b.w	8006af8 <ENC_SetMecAngle>

080088a0 <TC_GetCurrentPosition>:
  * @brief  Returns the current rotor mechanical angle, expressed in radiant.
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval current mechanical position
  */
float TC_GetCurrentPosition(PosCtrl_Handle_t *pHandle)
{
 80088a0:	b508      	push	{r3, lr}

  return ((float)( (SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16) );
 80088a2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80088a4:	f7ff fc32 	bl	800810c <STC_GetSpeedSensor>
 80088a8:	f7ff fbda 	bl	8008060 <SPD_GetMecAngle>
 80088ac:	ee07 0a90 	vmov	s15, r0
 80088b0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80088b4:	eddf 7a02 	vldr	s15, [pc, #8]	; 80088c0 <TC_GetCurrentPosition+0x20>
}
 80088b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80088bc:	bd08      	pop	{r3, pc}
 80088be:	bf00      	nop
 80088c0:	38c90fdb 	.word	0x38c90fdb

080088c4 <TC_GetTargetPosition>:
  * @retval Target mechanical position
  */
float TC_GetTargetPosition(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->FinalAngle);
}
 80088c4:	ed90 0a02 	vldr	s0, [r0, #8]
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop

080088cc <TC_GetMoveDuration>:
  * @retval Duration of programmed movement
  */
float TC_GetMoveDuration(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->MovementDuration);
}
 80088cc:	ed90 0a00 	vldr	s0, [r0]
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop

080088d4 <TC_IncTick>:
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval none
  */
void TC_IncTick(PosCtrl_Handle_t *pHandle)
{
  pHandle->TcTick++;
 80088d4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80088d6:	3301      	adds	r3, #1
 80088d8:	6583      	str	r3, [r0, #88]	; 0x58
}
 80088da:	4770      	bx	lr

080088dc <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 80088dc:	f7fe b92e 	b.w	8006b3c <FCP_Init>

080088e0 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 80088e0:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
 80088e4:	b163      	cbz	r3, 8008900 <UFCP_TX_IRQ_Handler+0x20>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 80088e6:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 80088ea:	b1a3      	cbz	r3, 8008916 <UFCP_TX_IRQ_Handler+0x36>
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d108      	bne.n	8008902 <UFCP_TX_IRQ_Handler+0x22>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 80088f0:	7d42      	ldrb	r2, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80088f2:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 80088f6:	628a      	str	r2, [r1, #40]	; 0x28

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 80088f8:	3301      	adds	r3, #1
 80088fa:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
 80088fe:	4770      	bx	lr

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8008900:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8008902:	7d42      	ldrb	r2, [r0, #21]
 8008904:	3201      	adds	r2, #1
 8008906:	4293      	cmp	r3, r2
 8008908:	dc07      	bgt.n	800891a <UFCP_TX_IRQ_Handler+0x3a>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 800890a:	18c2      	adds	r2, r0, r3
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800890c:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
 8008910:	7d12      	ldrb	r2, [r2, #20]
 8008912:	628a      	str	r2, [r1, #40]	; 0x28
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8008914:	e7f0      	b.n	80088f8 <UFCP_TX_IRQ_Handler+0x18>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8008916:	7d02      	ldrb	r2, [r0, #20]
        break;
 8008918:	e7eb      	b.n	80088f2 <UFCP_TX_IRQ_Handler+0x12>
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800891a:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 800891e:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
 8008922:	6293      	str	r3, [r2, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008924:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892c:	e842 3100 	strex	r1, r3, [r2]
 8008930:	2900      	cmp	r1, #0
 8008932:	d1f7      	bne.n	8008924 <UFCP_TX_IRQ_Handler+0x44>
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8008934:	f880 1097 	strb.w	r1, [r0, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8008938:	e9d0 0300 	ldrd	r0, r3, [r0]
 800893c:	4718      	bx	r3
 800893e:	bf00      	nop

08008940 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8008940:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8008944:	b973      	cbnz	r3, 8008964 <UFCP_Receive+0x24>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;

    pHandle->RxFrameLevel = 0;
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8008946:	2301      	movs	r3, #1
 8008948:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 800894c:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008954:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008958:	e842 3100 	strex	r1, r3, [r2]
 800895c:	2900      	cmp	r1, #0
 800895e:	d1f7      	bne.n	8008950 <UFCP_Receive+0x10>

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8008960:	2002      	movs	r0, #2
 8008962:	4770      	bx	lr
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8008964:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8008966:	4770      	bx	lr

08008968 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8008968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896a:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 800896c:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8008970:	2800      	cmp	r0, #0
 8008972:	d148      	bne.n	8008a06 <UFCP_Send+0x9e>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
    pHandle->TxFrame.Size = size;
    while ( size-- ) *dest++ = *buffer++;
 8008974:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 8008976:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8008978:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 800897a:	b2c0      	uxtb	r0, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 800897c:	f104 0c16 	add.w	ip, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 8008980:	b34b      	cbz	r3, 80089d6 <UFCP_Send+0x6e>
 8008982:	f104 011a 	add.w	r1, r4, #26
 8008986:	1d17      	adds	r7, r2, #4
 8008988:	45bc      	cmp	ip, r7
 800898a:	bf38      	it	cc
 800898c:	428a      	cmpcc	r2, r1
 800898e:	d33c      	bcc.n	8008a0a <UFCP_Send+0xa2>
 8008990:	2807      	cmp	r0, #7
 8008992:	d93a      	bls.n	8008a0a <UFCP_Send+0xa2>
 8008994:	0899      	lsrs	r1, r3, #2
 8008996:	3901      	subs	r1, #1
 8008998:	b2c9      	uxtb	r1, r1
 800899a:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 800899e:	4665      	mov	r5, ip
 80089a0:	4611      	mov	r1, r2
 80089a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80089a6:	f845 6b04 	str.w	r6, [r5], #4
 80089aa:	42b9      	cmp	r1, r7
 80089ac:	d1f9      	bne.n	80089a2 <UFCP_Send+0x3a>
 80089ae:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 80089b2:	1a40      	subs	r0, r0, r1
 80089b4:	428b      	cmp	r3, r1
 80089b6:	b2c0      	uxtb	r0, r0
 80089b8:	eb02 0601 	add.w	r6, r2, r1
 80089bc:	eb0c 0501 	add.w	r5, ip, r1
 80089c0:	d009      	beq.n	80089d6 <UFCP_Send+0x6e>
 80089c2:	5c53      	ldrb	r3, [r2, r1]
 80089c4:	f80c 3001 	strb.w	r3, [ip, r1]
 80089c8:	b128      	cbz	r0, 80089d6 <UFCP_Send+0x6e>
 80089ca:	7873      	ldrb	r3, [r6, #1]
 80089cc:	706b      	strb	r3, [r5, #1]
 80089ce:	2801      	cmp	r0, #1
 80089d0:	d001      	beq.n	80089d6 <UFCP_Send+0x6e>
 80089d2:	78b3      	ldrb	r3, [r6, #2]
 80089d4:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 80089d6:	f104 0014 	add.w	r0, r4, #20
 80089da:	f7fe f8c3 	bl	8006b64 <FCP_CalcCRC>

    pHandle->TxFrameLevel = 0;
 80089de:	2200      	movs	r2, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 80089e0:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 80089e2:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
 80089e6:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 80089ea:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 80089ee:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f2:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 80089f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fa:	e842 3100 	strex	r1, r3, [r2]
 80089fe:	2900      	cmp	r1, #0
 8008a00:	d1f7      	bne.n	80089f2 <UFCP_Send+0x8a>
 8008a02:	2002      	movs	r0, #2
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
  }

  return ret_val;
}
 8008a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8008a06:	2001      	movs	r0, #1
}
 8008a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a0a:	3001      	adds	r0, #1
 8008a0c:	4410      	add	r0, r2
 8008a0e:	f104 0315 	add.w	r3, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 8008a12:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008a16:	f803 1f01 	strb.w	r1, [r3, #1]!
 8008a1a:	4282      	cmp	r2, r0
 8008a1c:	d1f9      	bne.n	8008a12 <UFCP_Send+0xaa>
 8008a1e:	e7da      	b.n	80089d6 <UFCP_Send+0x6e>

08008a20 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8008a20:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8008a24:	b90b      	cbnz	r3, 8008a2a <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008a26:	482e      	ldr	r0, [pc, #184]	; (8008ae0 <UFCP_RX_IRQ_Handler+0xc0>)
}
 8008a28:	4770      	bx	lr
{
 8008a2a:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8008a2c:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 8008a30:	b083      	sub	sp, #12
 8008a32:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8008a34:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 8008a36:	b1cb      	cbz	r3, 8008a6c <UFCP_RX_IRQ_Handler+0x4c>
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d00c      	beq.n	8008a56 <UFCP_RX_IRQ_Handler+0x36>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8008a3c:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
 8008a40:	3101      	adds	r1, #1
 8008a42:	428b      	cmp	r3, r1
 8008a44:	dc1c      	bgt.n	8008a80 <UFCP_RX_IRQ_Handler+0x60>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8008a46:	18c1      	adds	r1, r0, r3
          pBaseHandle->RxFrameLevel++;
 8008a48:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8008a4a:	f881 2099 	strb.w	r2, [r1, #153]	; 0x99
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008a4e:	4824      	ldr	r0, [pc, #144]	; (8008ae0 <UFCP_RX_IRQ_Handler+0xc0>)
          pBaseHandle->RxFrameLevel++;
 8008a50:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
 8008a54:	e008      	b.n	8008a68 <UFCP_RX_IRQ_Handler+0x48>
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8008a56:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrameLevel++;
 8008a58:	bf54      	ite	pl
 8008a5a:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 8008a5c:	2300      	movmi	r3, #0
        pBaseHandle->RxFrame.Size = rx_byte;
 8008a5e:	f880 209a 	strb.w	r2, [r0, #154]	; 0x9a
          pBaseHandle->RxFrameLevel =0 ;
 8008a62:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008a66:	481e      	ldr	r0, [pc, #120]	; (8008ae0 <UFCP_RX_IRQ_Handler+0xc0>)
}
 8008a68:	b003      	add	sp, #12
 8008a6a:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8008a6c:	8a01      	ldrh	r1, [r0, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 8008a6e:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 8008a72:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8008a74:	8241      	strh	r1, [r0, #18]
        pBaseHandle->RxFrameLevel++;
 8008a76:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8008a7a:	481a      	ldr	r0, [pc, #104]	; (8008ae4 <UFCP_RX_IRQ_Handler+0xc4>)
}
 8008a7c:	b003      	add	sp, #12
 8008a7e:	bd30      	pop	{r4, r5, pc}
          pBaseHandle->RxTimeoutCountdown = 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8008a86:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
          pBaseHandle->RxTimeoutCountdown = 0;
 8008a8a:	8243      	strh	r3, [r0, #18]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8c:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a90:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a94:	e841 3200 	strex	r2, r3, [r1]
 8008a98:	2a00      	cmp	r2, #0
 8008a9a:	d1f7      	bne.n	8008a8c <UFCP_RX_IRQ_Handler+0x6c>
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8008a9c:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8008aa0:	f104 0099 	add.w	r0, r4, #153	; 0x99
 8008aa4:	f7fe f85e 	bl	8006b64 <FCP_CalcCRC>
 8008aa8:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8008aac:	4283      	cmp	r3, r0
 8008aae:	d10a      	bne.n	8008ac6 <UFCP_RX_IRQ_Handler+0xa6>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8008ab0:	6820      	ldr	r0, [r4, #0]
 8008ab2:	68a5      	ldr	r5, [r4, #8]
 8008ab4:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8008ab8:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 8008abc:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8008ac0:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8008ac2:	4809      	ldr	r0, [pc, #36]	; (8008ae8 <UFCP_RX_IRQ_Handler+0xc8>)
 8008ac4:	e7d0      	b.n	8008a68 <UFCP_RX_IRQ_Handler+0x48>
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	2301      	movs	r3, #1
            error_code = FCP_MSG_RX_BAD_CRC;
 8008aca:	240a      	movs	r4, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008acc:	f10d 0207 	add.w	r2, sp, #7
 8008ad0:	21ff      	movs	r1, #255	; 0xff
            error_code = FCP_MSG_RX_BAD_CRC;
 8008ad2:	f88d 4007 	strb.w	r4, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008ad6:	f7ff ff47 	bl	8008968 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8008ada:	4803      	ldr	r0, [pc, #12]	; (8008ae8 <UFCP_RX_IRQ_Handler+0xc8>)
  return ret_val;
 8008adc:	e7c4      	b.n	8008a68 <UFCP_RX_IRQ_Handler+0x48>
 8008ade:	bf00      	nop
 8008ae0:	08008ed4 	.word	0x08008ed4
 8008ae4:	08008ed6 	.word	0x08008ed6
 8008ae8:	08008ed8 	.word	0x08008ed8

08008aec <UFCP_OVR_IRQ_Handler>:
{
 8008aec:	b510      	push	{r4, lr}
 8008aee:	b082      	sub	sp, #8
  error_code = UFCP_MSG_OVERRUN;
 8008af0:	2408      	movs	r4, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008af2:	2301      	movs	r3, #1
 8008af4:	f10d 0207 	add.w	r2, sp, #7
 8008af8:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 8008afa:	f88d 4007 	strb.w	r4, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008afe:	f7ff ff33 	bl	8008968 <UFCP_Send>
}
 8008b02:	b002      	add	sp, #8
 8008b04:	bd10      	pop	{r4, pc}
 8008b06:	bf00      	nop

08008b08 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 8008b0e:	4770      	bx	lr

08008b10 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 8008b10:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8008b12:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8008b14:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->wElSpeedDpp32 = 0;
 8008b16:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 8008b1a:	7003      	strb	r3, [r0, #0]
  pHandle->_Super.hElAngle = 0;
 8008b1c:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 8008b1e:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 8008b20:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 8008b22:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 8008b24:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hElAngleAccu = 0;
 8008b26:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop

08008b2c <VSS_Init>:
{
 8008b2c:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 8008b2e:	f7ff ffef 	bl	8008b10 <VSS_Clear>
}
 8008b32:	bd08      	pop	{r3, pc}

08008b34 <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008b34:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 8008b36:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hElAngle = hMecAngle;
 8008b38:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008b3a:	fb91 f1f3 	sdiv	r1, r1, r3
 8008b3e:	80c1      	strh	r1, [r0, #6]
}
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop

08008b44 <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 8008b44:	b470      	push	{r4, r5, r6}
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 8008b46:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8008b4a:	b984      	cbnz	r4, 8008b6e <VSS_SetMecAcceleration+0x2a>
  {
    if ( hDurationms == 0u )
 8008b4c:	b98a      	cbnz	r2, 8008b72 <VSS_SetMecAcceleration+0x2e>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008b4e:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8008b50:	69c4      	ldr	r4, [r0, #28]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008b52:	7845      	ldrb	r5, [r0, #1]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8008b54:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008b56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008b5a:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8008b5c:	fb04 f401 	mul.w	r4, r4, r1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008b60:	fb94 f3f3 	sdiv	r3, r4, r3
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008b64:	fb15 f303 	smulbb	r3, r5, r3

      pHandle->hRemainingStep = 0u;
 8008b68:	8502      	strh	r2, [r0, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008b6a:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008b6c:	81c3      	strh	r3, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 8008b6e:	bc70      	pop	{r4, r5, r6}
 8008b70:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8008b72:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8008b74:	4d11      	ldr	r5, [pc, #68]	; (8008bbc <VSS_SetMecAcceleration+0x78>)
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008b76:	8b44      	ldrh	r4, [r0, #26]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8008b78:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008b7c:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8008b7e:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8008b82:	fba5 2303 	umull	r2, r3, r5, r3
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008b86:	69c2      	ldr	r2, [r0, #28]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 8008b88:	7845      	ldrb	r5, [r0, #1]
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8008b8a:	f3c3 138f 	ubfx	r3, r3, #6, #16
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008b8e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008b92:	0064      	lsls	r4, r4, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008b94:	fb02 f201 	mul.w	r2, r2, r1
      hNbrStep++;
 8008b98:	3301      	adds	r3, #1
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8008b9a:	fb96 f1f5 	sdiv	r1, r6, r5
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008b9e:	fb92 f2f4 	sdiv	r2, r2, r4
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8008ba2:	1a52      	subs	r2, r2, r1
      hNbrStep++;
 8008ba4:	b29b      	uxth	r3, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8008ba6:	0436      	lsls	r6, r6, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8008ba8:	0412      	lsls	r2, r2, #16
 8008baa:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8008bae:	fb05 f202 	mul.w	r2, r5, r2
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8008bb2:	e9c0 2608 	strd	r2, r6, [r0, #32]
      pHandle->hRemainingStep = hNbrStep;
 8008bb6:	8503      	strh	r3, [r0, #40]	; 0x28
}
 8008bb8:	bc70      	pop	{r4, r5, r6}
 8008bba:	4770      	bx	lr
 8008bbc:	10624dd3 	.word	0x10624dd3

08008bc0 <__libc_init_array>:
 8008bc0:	b570      	push	{r4, r5, r6, lr}
 8008bc2:	4d0d      	ldr	r5, [pc, #52]	; (8008bf8 <__libc_init_array+0x38>)
 8008bc4:	4c0d      	ldr	r4, [pc, #52]	; (8008bfc <__libc_init_array+0x3c>)
 8008bc6:	1b64      	subs	r4, r4, r5
 8008bc8:	10a4      	asrs	r4, r4, #2
 8008bca:	2600      	movs	r6, #0
 8008bcc:	42a6      	cmp	r6, r4
 8008bce:	d109      	bne.n	8008be4 <__libc_init_array+0x24>
 8008bd0:	4d0b      	ldr	r5, [pc, #44]	; (8008c00 <__libc_init_array+0x40>)
 8008bd2:	4c0c      	ldr	r4, [pc, #48]	; (8008c04 <__libc_init_array+0x44>)
 8008bd4:	f000 f820 	bl	8008c18 <_init>
 8008bd8:	1b64      	subs	r4, r4, r5
 8008bda:	10a4      	asrs	r4, r4, #2
 8008bdc:	2600      	movs	r6, #0
 8008bde:	42a6      	cmp	r6, r4
 8008be0:	d105      	bne.n	8008bee <__libc_init_array+0x2e>
 8008be2:	bd70      	pop	{r4, r5, r6, pc}
 8008be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008be8:	4798      	blx	r3
 8008bea:	3601      	adds	r6, #1
 8008bec:	e7ee      	b.n	8008bcc <__libc_init_array+0xc>
 8008bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bf2:	4798      	blx	r3
 8008bf4:	3601      	adds	r6, #1
 8008bf6:	e7f2      	b.n	8008bde <__libc_init_array+0x1e>
 8008bf8:	08008ee4 	.word	0x08008ee4
 8008bfc:	08008ee4 	.word	0x08008ee4
 8008c00:	08008ee4 	.word	0x08008ee4
 8008c04:	08008ee8 	.word	0x08008ee8

08008c08 <memset>:
 8008c08:	4402      	add	r2, r0
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d100      	bne.n	8008c12 <memset+0xa>
 8008c10:	4770      	bx	lr
 8008c12:	f803 1b01 	strb.w	r1, [r3], #1
 8008c16:	e7f9      	b.n	8008c0c <memset+0x4>

08008c18 <_init>:
 8008c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1a:	bf00      	nop
 8008c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c1e:	bc08      	pop	{r3}
 8008c20:	469e      	mov	lr, r3
 8008c22:	4770      	bx	lr

08008c24 <_fini>:
 8008c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c26:	bf00      	nop
 8008c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c2a:	bc08      	pop	{r3}
 8008c2c:	469e      	mov	lr, r3
 8008c2e:	4770      	bx	lr
